/*! For license information please see bundle.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.webpackSigmaGraph=t():e.webpackSigmaGraph=t()}(self,(()=>(()=>{var e={3796:e=>{e.exports=function(e,t){var n=t.length;if(0!==n){var r=e.length;e.length+=n;for(var i=0;i<n;i++)e[r+i]=t[i]}}},7187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}g(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var i,o,a,c;if(s(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=u(e))>0&&a.length>i&&!a.warned){a.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=a.length,c=d,console&&console.warn&&console.warn(c)}return e}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=d.bind(r);return i.listener=n,r.wrapFn=i,i}function l(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):p(i,i.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function g(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=o[e];if(void 0===u)return!1;if("function"==typeof u)r(u,this,t);else{var c=u.length,d=p(u,c);for(n=0;n<c;++n)r(d[n],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){return s(t),this.on(e,h(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,h(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,o,a;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return l(this,e,!0)},o.prototype.rawListeners=function(e){return l(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},3630:(e,t,n)=>{var r=n(6186),i=n(3212).B,o=n(4325).De;e.exports=function(e,t){if(!r(e)||!r(t))throw new Error("graphology-operators/disjoint-union: invalid graph.");if(e.multi!==t.multi)throw new Error("graphology-operators/disjoint-union: both graph should be simple or multi.");var n=e.nullCopy();n.mergeAttributes(e.getAttributes());var a={},s={},u=0;return e.forEachNode((function(e,t){a[e]=u,i(n,u,t),u++})),t.forEachNode((function(e,t){s[e]=u,i(n,u,t),u++})),u=0,e.forEachEdge((function(e,t,r,i,s,c,d){o(n,d,u++,a[r],a[i],i,t)})),t.forEachEdge((function(e,t,r,i,a,c,d){o(n,d,u++,s[r],s[i],i,t)})),n}},1687:(e,t,n)=>{n(3630),n(7842),t.subgraph=n(4783),n(9441),n(3417),n(7183),n(4375),n(2012),n(7697)},7842:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e){if(!r(e))throw new Error("graphology-operators/reverse: invalid graph.");var t=e.emptyCopy();return e.forEachUndirectedEdge((function(e,n,r,o){i(t,!0,e,r,o,n)})),e.forEachDirectedEdge((function(e,n,r,o){i(t,!1,e,o,r,n)})),t}},4783:(e,t,n)=>{var r=n(6186),i=n(3212).B,o=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/subgraph: invalid graph instance.");var n=e.nullCopy(),a=t;if(Array.isArray(t)){if(0===t.length)return n;t=new Set(t)}if(t instanceof Set){if(0===t.size)return n;a=function(e){return t.has(e)};var s=t;t=new Set,s.forEach((function(e){t.add(""+e)}))}if("function"!=typeof a)throw new Error("graphology-operators/subgraph: invalid nodes. Expecting an array or a set or a filtering function.");if("function"==typeof t){if(e.forEachNode((function(e,t){a(e,t)&&i(n,e,t)})),0===n.order)return n}else t.forEach((function(t){if(!e.hasNode(t))throw new Error('graphology-operators/subgraph: the "'+t+'" node was not found in the graph.');i(n,t,e.getNodeAttributes(t))}));return e.forEachEdge((function(e,t,r,i,s,u,c){a(r,s)&&(i===r||a(i,u))&&o(n,c,e,r,i,t)})),n}},9441:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/to-directed: expecting a valid graphology instance.");"function"==typeof t&&(t={mergeEdge:t});var n="function"==typeof(t=t||{}).mergeEdge?t.mergeEdge:null;if("directed"===e.type)return e.copy();var o=e.emptyCopy({type:"directed"});return e.forEachDirectedEdge((function(e,t,n,r){i(o,!1,e,n,r,t)})),e.forEachUndirectedEdge((function(t,r,a,s){var u=!e.multi&&"mixed"===e.type&&o.edge(a,s),c=!e.multi&&"mixed"===e.type&&o.edge(s,a);u?o.replaceEdgeAttributes(u,n(o.getEdgeAttributes(u),r)):i(o,!1,null,a,s,r),a!==s&&(c?o.replaceEdgeAttributes(c,n(o.getEdgeAttributes(c),r)):i(o,!1,null,s,a,r))})),o}},3417:(e,t,n)=>{var r=n(6186);e.exports=function(e){if(!r(e))throw new Error("graphology-operators/to-mixed: expecting a valid graphology instance.");return e.copy({type:"mixed"})}},7183:(e,t,n)=>{var r=n(6186);e.exports=function(e){if(!r(e))throw new Error("graphology-operators/to-multi: expecting a valid graphology instance.");return e.copy({multi:!0})}},4375:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/to-simple: expecting a valid graphology instance.");"function"==typeof t&&(t={mergeEdge:t});var n="function"==typeof(t=t||{}).mergeEdge?t.mergeEdge:null;if(!e.multi)return e.copy();var o=e.emptyCopy({multi:!1});return e.forEachEdge((function(e,t,r,a,s,u,c){var d=c?o.undirectedEdge(r,a):o.directedEdge(r,a);d?n&&o.replaceEdgeAttributes(d,n(o.getEdgeAttributes(d),t)):i(o,c,e,r,a,t)})),o}},2012:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/to-undirected: expecting a valid graphology instance.");"function"==typeof t&&(t={mergeEdge:t});var n="function"==typeof(t=t||{}).mergeEdge?t.mergeEdge:null;if("undirected"===e.type)return e.copy();var o=e.emptyCopy({type:"undirected"});return e.forEachUndirectedEdge((function(e,t,n,r){i(o,!0,e,n,r,t)})),e.forEachDirectedEdge((function(t,r,a,s){if(!e.multi){var u=o.edge(a,s);if(u)return void(n&&o.replaceEdgeAttributes(u,n(o.getEdgeAttributes(u),r)))}i(o,!0,null,a,s,r)})),o}},7697:(e,t,n)=>{var r=n(6186);e.exports=function(e,t){if(!r(e)||!r(t))throw new Error("graphology-operators/union: invalid graph.");if(e.multi!==t.multi)throw new Error("graphology-operators/union: both graph should be simple or multi.");var n=e.copy();return n.import(t,!0),n}},4325:(e,t)=>{t.De=function(e,t,n,r,i,o){return o=Object.assign({},o),t?null==n?e.addUndirectedEdge(r,i,o):e.addUndirectedEdgeWithKey(n,r,i,o):null==n?e.addDirectedEdge(r,i,o):e.addDirectedEdgeWithKey(n,r,i,o)}},3212:(e,t)=>{t.B=function(e,t,n){return n=Object.assign({},n),e.addNode(t,n)}},6186:e=>{e.exports=function(e){return null!==e&&"object"==typeof e&&"function"==typeof e.addUndirectedEdgeWithKey&&"function"==typeof e.dropNode&&"boolean"==typeof e.multi}},2698:function(e){e.exports=function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}function n(e){return n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},n(e)}function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}function i(e,t,n){return i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct.bind():function(e,t,n){var i=[null];i.push.apply(i,t);var o=new(Function.bind.apply(e,i));return n&&r(o,n.prototype),o},i.apply(null,arguments)}function o(e){var t="function"==typeof Map?new Map:void 0;return o=function(e){if(null===e||(o=e,-1===Function.toString.call(o).indexOf("[native code]")))return e;var o;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,n(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),r(a,e)},o(e)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var s=function(){for(var e=arguments[0],t=1,n=arguments.length;t<n;t++)if(arguments[t])for(var r in arguments[t])e[r]=arguments[t][r];return e};function u(e,t,n,r){var i=e._nodes.get(t),o=null;return i?o="mixed"===r?i.out&&i.out[n]||i.undirected&&i.undirected[n]:"directed"===r?i.out&&i.out[n]:i.undirected&&i.undirected[n]:o}function c(t){return"object"===e(t)&&null!==t&&t.constructor===Object}function d(e){var t;for(t in e)return!1;return!0}function h(e,t,n){Object.defineProperty(e,t,{enumerable:!1,configurable:!1,writable:!0,value:n})}function l(e,t,n){var r={enumerable:!0,configurable:!0};"function"==typeof n?r.get=n:(r.value=n,r.writable=!1),Object.defineProperty(e,t,r)}function f(e){return!(!c(e)||e.attributes&&!Array.isArray(e.attributes))}"function"==typeof Object.assign&&(s=Object.assign);var p,g={exports:{}},v="object"==typeof Reflect?Reflect:null,y=v&&"function"==typeof v.apply?v.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};p=v&&"function"==typeof v.ownKeys?v.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var m=Number.isNaN||function(e){return e!=e};function b(){b.init.call(this)}g.exports=b,g.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}k(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&k(e,"error",t,{once:!0})}(e,i)}))},b.EventEmitter=b,b.prototype._events=void 0,b.prototype._eventsCount=0,b.prototype._maxListeners=void 0;var w=10;function x(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function E(e){return void 0===e._maxListeners?b.defaultMaxListeners:e._maxListeners}function _(e,t,n,r){var i,o,a,s;if(x(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=E(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return e}function L(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function A(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=L.bind(r);return i.listener=n,r.wrapFn=i,i}function C(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):T(i,i.length)}function S(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function T(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function k(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}function D(e){if("function"!=typeof e)throw new Error("obliterator/iterator: expecting a function!");this.next=e}Object.defineProperty(b,"defaultMaxListeners",{enumerable:!0,get:function(){return w},set:function(e){if("number"!=typeof e||e<0||m(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");w=e}}),b.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},b.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||m(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},b.prototype.getMaxListeners=function(){return E(this)},b.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var s=i[e];if(void 0===s)return!1;if("function"==typeof s)y(s,this,t);else{var u=s.length,c=T(s,u);for(n=0;n<u;++n)y(c[n],this,t)}return!0},b.prototype.addListener=function(e,t){return _(this,e,t,!1)},b.prototype.on=b.prototype.addListener,b.prototype.prependListener=function(e,t){return _(this,e,t,!0)},b.prototype.once=function(e,t){return x(t),this.on(e,A(this,e,t)),this},b.prototype.prependOnceListener=function(e,t){return x(t),this.prependListener(e,A(this,e,t)),this},b.prototype.removeListener=function(e,t){var n,r,i,o,a;if(x(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},b.prototype.off=b.prototype.removeListener,b.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},b.prototype.listeners=function(e){return C(this,e,!0)},b.prototype.rawListeners=function(e){return C(this,e,!1)},b.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):S.call(e,t)},b.prototype.listenerCount=S,b.prototype.eventNames=function(){return this._eventsCount>0?p(this._events):[]},"undefined"!=typeof Symbol&&(D.prototype[Symbol.iterator]=function(){return this}),D.of=function(){var e=arguments,t=e.length,n=0;return new D((function(){return n>=t?{done:!0}:{done:!1,value:e[n++]}}))},D.empty=function(){return new D((function(){return{done:!0}}))},D.fromSequence=function(e){var t=0,n=e.length;return new D((function(){return t>=n?{done:!0}:{done:!1,value:e[t++]}}))},D.is=function(e){return e instanceof D||"object"==typeof e&&null!==e&&"function"==typeof e.next};var N=D,P={};P.ARRAY_BUFFER_SUPPORT="undefined"!=typeof ArrayBuffer,P.SYMBOL_SUPPORT="undefined"!=typeof Symbol;var F=N,O=P,R=O.ARRAY_BUFFER_SUPPORT,G=O.SYMBOL_SUPPORT,M=function(e){var t=function(e){return"string"==typeof e||Array.isArray(e)||R&&ArrayBuffer.isView(e)?F.fromSequence(e):"object"!=typeof e||null===e?null:G&&"function"==typeof e[Symbol.iterator]?e[Symbol.iterator]():"function"==typeof e.next?e:null}(e);if(!t)throw new Error("obliterator: target is not iterable nor a valid iterator.");return t},j=M,I=function(e,t){for(var n,r=arguments.length>1?t:1/0,i=r!==1/0?new Array(r):[],o=0,a=j(e);;){if(o===r)return i;if((n=a.next()).done)return o!==t&&(i.length=o),i;i[o++]=n.value}},U=function(e){function n(t){var n;return(n=e.call(this)||this).name="GraphError",n.message=t,n}return t(n,e),n}(o(Error)),q=function(e){function n(t){var r;return(r=e.call(this,t)||this).name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a(r),n.prototype.constructor),r}return t(n,e),n}(U),z=function(e){function n(t){var r;return(r=e.call(this,t)||this).name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a(r),n.prototype.constructor),r}return t(n,e),n}(U),B=function(e){function n(t){var r;return(r=e.call(this,t)||this).name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a(r),n.prototype.constructor),r}return t(n,e),n}(U);function H(e,t){this.key=e,this.attributes=t,this.clear()}function W(e,t){this.key=e,this.attributes=t,this.clear()}function V(e,t){this.key=e,this.attributes=t,this.clear()}function Y(e,t,n,r,i){this.key=t,this.attributes=i,this.undirected=e,this.source=n,this.target=r}function $(e,t,n,r,i,o,a){var s,u,c,d;if(r=""+r,0===n){if(!(s=e._nodes.get(r)))throw new z("Graph.".concat(t,': could not find the "').concat(r,'" node in the graph.'));c=i,d=o}else if(3===n){if(i=""+i,!(u=e._edges.get(i)))throw new z("Graph.".concat(t,': could not find the "').concat(i,'" edge in the graph.'));var h=u.source.key,l=u.target.key;if(r===h)s=u.target;else{if(r!==l)throw new z("Graph.".concat(t,': the "').concat(r,'" node is not attached to the "').concat(i,'" edge (').concat(h,", ").concat(l,")."));s=u.source}c=o,d=a}else{if(!(u=e._edges.get(r)))throw new z("Graph.".concat(t,': could not find the "').concat(r,'" edge in the graph.'));s=1===n?u.source:u.target,c=i,d=o}return[s,c,d]}H.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}},W.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}},V.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}},Y.prototype.attach=function(){var e="out",t="in";this.undirected&&(e=t="undirected");var n=this.source.key,r=this.target.key;this.source[e][r]=this,this.undirected&&n===r||(this.target[t][n]=this)},Y.prototype.attachMulti=function(){var e="out",t="in",n=this.source.key,r=this.target.key;this.undirected&&(e=t="undirected");var i=this.source[e],o=i[r];if(void 0===o)return i[r]=this,void(this.undirected&&n===r||(this.target[t][n]=this));o.previous=this,this.next=o,i[r]=this,this.target[t][n]=this},Y.prototype.detach=function(){var e=this.source.key,t=this.target.key,n="out",r="in";this.undirected&&(n=r="undirected"),delete this.source[n][t],delete this.target[r][e]},Y.prototype.detachMulti=function(){var e=this.source.key,t=this.target.key,n="out",r="in";this.undirected&&(n=r="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[n][t],delete this.target[r][e]):(this.next.previous=void 0,this.source[n][t]=this.next,this.target[r][e]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};var Z=[{name:function(e){return"get".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];return a.attributes[s]}}},{name:function(e){return"get".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){return $(this,t,n,e,r)[0].attributes}}},{name:function(e){return"has".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];return a.attributes.hasOwnProperty(s)}}},{name:function(e){return"set".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i,o){var a=$(this,t,n,e,r,i,o),s=a[0],u=a[1],c=a[2];return s.attributes[u]=c,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(e){return"update".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i,o){var a=$(this,t,n,e,r,i,o),s=a[0],u=a[1],c=a[2];if("function"!=typeof c)throw new q("Graph.".concat(t,": updater should be a function."));var d=s.attributes,h=c(d[u]);return d[u]=h,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(e){return"remove".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];return delete a.attributes[s],this.emit("nodeAttributesUpdated",{key:a.key,type:"remove",attributes:a.attributes,name:s}),this}}},{name:function(e){return"replace".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];if(!c(s))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return a.attributes=s,this.emit("nodeAttributesUpdated",{key:a.key,type:"replace",attributes:a.attributes}),this}}},{name:function(e){return"merge".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],u=o[1];if(!c(u))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return s(a.attributes,u),this.emit("nodeAttributesUpdated",{key:a.key,type:"merge",attributes:a.attributes,data:u}),this}}},{name:function(e){return"update".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];if("function"!=typeof s)throw new q("Graph.".concat(t,": provided updater is not a function."));return a.attributes=s(a.attributes),this.emit("nodeAttributesUpdated",{key:a.key,type:"update",attributes:a.attributes}),this}}}],X=[{name:function(e){return"get".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return i.attributes[r]}}},{name:function(e){return"get".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e){var r;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>1){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+e,o=""+arguments[1];if(!(r=u(this,i,o,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(i,'" - "').concat(o,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(r=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return r.attributes}}},{name:function(e){return"has".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return i.attributes.hasOwnProperty(r)}}},{name:function(e){return"set".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+e,s=""+r;if(r=arguments[2],i=arguments[3],!(o=u(this,a,s,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(o=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return o.attributes[r]=i,this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:r}),this}}},{name:function(e){return"update".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+e,s=""+r;if(r=arguments[2],i=arguments[3],!(o=u(this,a,s,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(o=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if("function"!=typeof i)throw new q("Graph.".concat(t,": updater should be a function."));return o.attributes[r]=i(o.attributes[r]),this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:r}),this}}},{name:function(e){return"remove".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return delete i.attributes[r],this.emit("edgeAttributesUpdated",{key:i.key,type:"remove",attributes:i.attributes,name:r}),this}}},{name:function(e){return"replace".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if(!c(r))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return i.attributes=r,this.emit("edgeAttributesUpdated",{key:i.key,type:"replace",attributes:i.attributes}),this}}},{name:function(e){return"merge".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if(!c(r))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return s(i.attributes,r),this.emit("edgeAttributesUpdated",{key:i.key,type:"merge",attributes:i.attributes,data:r}),this}}},{name:function(e){return"update".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if("function"!=typeof r)throw new q("Graph.".concat(t,": provided updater is not a function."));return i.attributes=r(i.attributes),this.emit("edgeAttributesUpdated",{key:i.key,type:"update",attributes:i.attributes}),this}}}],K=N,Q=M,J=function(){var e=arguments,t=null,n=-1;return new K((function(){for(var r=null;;){if(null===t){if(++n>=e.length)return{done:!0};t=Q(e[n])}if(!0!==(r=t.next()).done)break;t=null}return r}))},ee=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function te(e,t,n,r){var i=!1;for(var o in t)if(o!==r){var a=t[o];if(i=n(a.key,a.attributes,a.source.key,a.target.key,a.source.attributes,a.target.attributes,a.undirected),e&&i)return a.key}}function ne(e,t,n,r){var i,o,a,s=!1;for(var u in t)if(u!==r){i=t[u];do{if(o=i.source,a=i.target,s=n(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected),e&&s)return i.key;i=i.next}while(void 0!==i)}}function re(e,t){var n,r=Object.keys(e),i=r.length,o=0;return new N((function(){do{if(n)n=n.next;else{if(o>=i)return{done:!0};var a=r[o++];if(a===t){n=void 0;continue}n=e[a]}}while(!n);return{done:!1,value:{edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected}}}))}function ie(e,t,n,r){var i=t[n];if(i){var o=i.source,a=i.target;return r(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected)&&e?i.key:void 0}}function oe(e,t,n,r){var i=t[n];if(i){var o=!1;do{if(o=r(i.key,i.attributes,i.source.key,i.target.key,i.source.attributes,i.target.attributes,i.undirected),e&&o)return i.key;i=i.next}while(void 0!==i)}}function ae(e,t){var n=e[t];return void 0!==n.next?new N((function(){if(!n)return{done:!0};var e={edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected};return n=n.next,{done:!1,value:e}})):N.of({edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected})}function se(e,t,n,r){if(0!==t.size)for(var i,o,a="mixed"!==n&&n!==t.type,s="undirected"===n,u=!1,c=t._edges.values();!0!==(i=c.next()).done;)if(o=i.value,!a||o.undirected===s){var d=o,h=d.key,l=d.attributes,f=d.source,p=d.target;if(u=r(h,l,f.key,p.key,f.attributes,p.attributes,o.undirected),e&&u)return h}}function ue(e,t,n,r,i,o){var a,s=t?ne:te;if("undirected"!==n){if("out"!==r&&(a=s(e,i.in,o),e&&a))return a;if("in"!==r&&(a=s(e,i.out,o,r?void 0:i.key),e&&a))return a}if("directed"!==n&&(a=s(e,i.undirected,o),e&&a))return a}function ce(e,t,n,r,i,o,a){var s,u=n?oe:ie;if("undirected"!==t){if(void 0!==i.in&&"out"!==r&&(s=u(e,i.in,o,a),e&&s))return s;if(void 0!==i.out&&"in"!==r&&(r||i.key!==o)&&(s=u(e,i.out,o,a),e&&s))return s}if("directed"!==t&&void 0!==i.undirected&&(s=u(e,i.undirected,o,a),e&&s))return s}var de=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function he(){this.A=null,this.B=null}function le(e,t,n,r,i){for(var o in r){var a=r[o],s=a.source,u=a.target,c=s===n?u:s;if(!t||!t.has(c.key)){var d=i(c.key,c.attributes);if(e&&d)return c.key}}}function fe(e,t,n,r,i){if("mixed"!==t){if("undirected"===t)return le(e,null,r,r.undirected,i);if("string"==typeof n)return le(e,null,r,r[n],i)}var o,a=new he;if("undirected"!==t){if("out"!==n){if(o=le(e,null,r,r.in,i),e&&o)return o;a.wrap(r.in)}if("in"!==n){if(o=le(e,a,r,r.out,i),e&&o)return o;a.wrap(r.out)}}if("directed"!==t&&(o=le(e,a,r,r.undirected,i),e&&o))return o}function pe(e,t,n){var r=Object.keys(n),i=r.length,o=0;return new N((function(){var a=null;do{if(o>=i)return e&&e.wrap(n),{done:!0};var s=n[r[o++]],u=s.source,c=s.target;a=u===t?c:u,e&&e.has(a.key)&&(a=null)}while(null===a);return{done:!1,value:{neighbor:a.key,attributes:a.attributes}}}))}function ge(e,t,n,r,i){for(var o,a,s,u,c,d,h,l=r._nodes.values(),f=r.type;!0!==(o=l.next()).done;){var p=!1;if(a=o.value,"undirected"!==f)for(s in u=a.out){c=u[s];do{if(d=c.target,p=!0,h=i(a.key,d.key,a.attributes,d.attributes,c.key,c.attributes,c.undirected),e&&h)return c;c=c.next}while(c)}if("directed"!==f)for(s in u=a.undirected)if(!(t&&a.key>s)){c=u[s];do{if((d=c.target).key!==s&&(d=c.source),p=!0,h=i(a.key,d.key,a.attributes,d.attributes,c.key,c.attributes,c.undirected),e&&h)return c;c=c.next}while(c)}if(n&&!p&&(h=i(a.key,null,a.attributes,null,null,null,null),e&&h))return null}}function ve(e){if(!c(e))throw new q('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in e))throw new q("Graph.import: serialized node is missing its key.");if("attributes"in e&&(!c(e.attributes)||null===e.attributes))throw new q("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function ye(e){if(!c(e))throw new q('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in e))throw new q("Graph.import: serialized edge is missing its source.");if(!("target"in e))throw new q("Graph.import: serialized edge is missing its target.");if("attributes"in e&&(!c(e.attributes)||null===e.attributes))throw new q("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in e&&"boolean"!=typeof e.undirected)throw new q("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}he.prototype.wrap=function(e){null===this.A?this.A=e:null===this.B&&(this.B=e)},he.prototype.has=function(e){return null!==this.A&&e in this.A||null!==this.B&&e in this.B};var me,be=(me=255&Math.floor(256*Math.random()),function(){return me++}),we=new Set(["directed","undirected","mixed"]),xe=new Set(["domain","_events","_eventsCount","_maxListeners"]),Ee={allowSelfLoops:!0,multi:!1,type:"mixed"};function _e(e,t,n){var r=new e.NodeDataClass(t,n);return e._nodes.set(t,r),e.emit("nodeAdded",{key:t,attributes:n}),r}function Le(e,t,n,r,i,o,a,s){if(!r&&"undirected"===e.type)throw new B("Graph.".concat(t,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(r&&"directed"===e.type)throw new B("Graph.".concat(t,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s&&!c(s))throw new q("Graph.".concat(t,': invalid attributes. Expecting an object but got "').concat(s,'"'));if(o=""+o,a=""+a,s=s||{},!e.allowSelfLoops&&o===a)throw new B("Graph.".concat(t,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var u=e._nodes.get(o),d=e._nodes.get(a);if(!u)throw new z("Graph.".concat(t,': source node "').concat(o,'" not found.'));if(!d)throw new z("Graph.".concat(t,': target node "').concat(a,'" not found.'));var h={key:null,undirected:r,source:o,target:a,attributes:s};if(n)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new B("Graph.".concat(t,': the "').concat(i,'" edge already exists in the graph.'));if(!e.multi&&(r?void 0!==u.undirected[a]:void 0!==u.out[a]))throw new B("Graph.".concat(t,': an edge linking "').concat(o,'" to "').concat(a,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));var l=new Y(r,i,u,d,s);e._edges.set(i,l);var f=o===a;return r?(u.undirectedDegree++,d.undirectedDegree++,f&&(u.undirectedLoops++,e._undirectedSelfLoopCount++)):(u.outDegree++,d.inDegree++,f&&(u.directedLoops++,e._directedSelfLoopCount++)),e.multi?l.attachMulti():l.attach(),r?e._undirectedSize++:e._directedSize++,h.key=i,e.emit("edgeAdded",h),i}function Ae(e,t,n,r,i,o,a,u,d){if(!r&&"undirected"===e.type)throw new B("Graph.".concat(t,": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));if(r&&"directed"===e.type)throw new B("Graph.".concat(t,": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));if(u)if(d){if("function"!=typeof u)throw new q("Graph.".concat(t,': invalid updater function. Expecting a function but got "').concat(u,'"'))}else if(!c(u))throw new q("Graph.".concat(t,': invalid attributes. Expecting an object but got "').concat(u,'"'));var h;if(o=""+o,a=""+a,d&&(h=u,u=void 0),!e.allowSelfLoops&&o===a)throw new B("Graph.".concat(t,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var l,f,p=e._nodes.get(o),g=e._nodes.get(a);if(!n&&(l=e._edges.get(i))){if(!(l.source.key===o&&l.target.key===a||r&&l.source.key===a&&l.target.key===o))throw new B("Graph.".concat(t,': inconsistency detected when attempting to merge the "').concat(i,'" edge with "').concat(o,'" source & "').concat(a,'" target vs. ("').concat(l.source.key,'", "').concat(l.target.key,'").'));f=l}if(f||e.multi||!p||(f=r?p.undirected[a]:p.out[a]),f){var v=[f.key,!1,!1,!1];if(d?!h:!u)return v;if(d){var y=f.attributes;f.attributes=h(y),e.emit("edgeAttributesUpdated",{type:"replace",key:f.key,attributes:f.attributes})}else s(f.attributes,u),e.emit("edgeAttributesUpdated",{type:"merge",key:f.key,attributes:f.attributes,data:u});return v}u=u||{},d&&h&&(u=h(u));var m={key:null,undirected:r,source:o,target:a,attributes:u};if(n)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new B("Graph.".concat(t,': the "').concat(i,'" edge already exists in the graph.'));var b=!1,w=!1;p||(p=_e(e,o,{}),b=!0,o===a&&(g=p,w=!0)),g||(g=_e(e,a,{}),w=!0),l=new Y(r,i,p,g,u),e._edges.set(i,l);var x=o===a;return r?(p.undirectedDegree++,g.undirectedDegree++,x&&(p.undirectedLoops++,e._undirectedSelfLoopCount++)):(p.outDegree++,g.inDegree++,x&&(p.directedLoops++,e._directedSelfLoopCount++)),e.multi?l.attachMulti():l.attach(),r?e._undirectedSize++:e._directedSize++,m.key=i,e.emit("edgeAdded",m),[i,!0,b,w]}function Ce(e,t){e._edges.delete(t.key);var n=t.source,r=t.target,i=t.attributes,o=t.undirected,a=n===r;o?(n.undirectedDegree--,r.undirectedDegree--,a&&(n.undirectedLoops--,e._undirectedSelfLoopCount--)):(n.outDegree--,r.inDegree--,a&&(n.directedLoops--,e._directedSelfLoopCount--)),e.multi?t.detachMulti():t.detach(),o?e._undirectedSize--:e._directedSize--,e.emit("edgeDropped",{key:t.key,attributes:i,source:n.key,target:r.key,undirected:o})}var Se=function(n){function r(e){var t;if(t=n.call(this)||this,"boolean"!=typeof(e=s({},Ee,e)).multi)throw new q("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(e.multi,'".'));if(!we.has(e.type))throw new q('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(e.type,'".'));if("boolean"!=typeof e.allowSelfLoops)throw new q("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(e.allowSelfLoops,'".'));var r="mixed"===e.type?H:"directed"===e.type?W:V;h(a(t),"NodeDataClass",r);var i="geid_"+be()+"_",o=0;return h(a(t),"_attributes",{}),h(a(t),"_nodes",new Map),h(a(t),"_edges",new Map),h(a(t),"_directedSize",0),h(a(t),"_undirectedSize",0),h(a(t),"_directedSelfLoopCount",0),h(a(t),"_undirectedSelfLoopCount",0),h(a(t),"_edgeKeyGenerator",(function(){var e;do{e=i+o++}while(t._edges.has(e));return e})),h(a(t),"_options",e),xe.forEach((function(e){return h(a(t),e,t[e])})),l(a(t),"order",(function(){return t._nodes.size})),l(a(t),"size",(function(){return t._edges.size})),l(a(t),"directedSize",(function(){return t._directedSize})),l(a(t),"undirectedSize",(function(){return t._undirectedSize})),l(a(t),"selfLoopCount",(function(){return t._directedSelfLoopCount+t._undirectedSelfLoopCount})),l(a(t),"directedSelfLoopCount",(function(){return t._directedSelfLoopCount})),l(a(t),"undirectedSelfLoopCount",(function(){return t._undirectedSelfLoopCount})),l(a(t),"multi",t._options.multi),l(a(t),"type",t._options.type),l(a(t),"allowSelfLoops",t._options.allowSelfLoops),l(a(t),"implementation",(function(){return"graphology"})),t}t(r,n);var i=r.prototype;return i._resetInstanceCounters=function(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0},i.hasNode=function(e){return this._nodes.has(""+e)},i.hasDirectedEdge=function(e,t){if("undirected"===this.type)return!1;if(1===arguments.length){var n=""+e,r=this._edges.get(n);return!!r&&!r.undirected}if(2===arguments.length){e=""+e,t=""+t;var i=this._nodes.get(e);return!!i&&i.out.hasOwnProperty(t)}throw new q("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasUndirectedEdge=function(e,t){if("directed"===this.type)return!1;if(1===arguments.length){var n=""+e,r=this._edges.get(n);return!!r&&r.undirected}if(2===arguments.length){e=""+e,t=""+t;var i=this._nodes.get(e);return!!i&&i.undirected.hasOwnProperty(t)}throw new q("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasEdge=function(e,t){if(1===arguments.length){var n=""+e;return this._edges.has(n)}if(2===arguments.length){e=""+e,t=""+t;var r=this._nodes.get(e);return!!r&&(void 0!==r.out&&r.out.hasOwnProperty(t)||void 0!==r.undirected&&r.undirected.hasOwnProperty(t))}throw new q("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.directedEdge=function(e,t){if("undirected"!==this.type){if(e=""+e,t=""+t,this.multi)throw new B("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var n=this._nodes.get(e);if(!n)throw new z('Graph.directedEdge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z('Graph.directedEdge: could not find the "'.concat(t,'" target node in the graph.'));var r=n.out&&n.out[t]||void 0;return r?r.key:void 0}},i.undirectedEdge=function(e,t){if("directed"!==this.type){if(e=""+e,t=""+t,this.multi)throw new B("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var n=this._nodes.get(e);if(!n)throw new z('Graph.undirectedEdge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z('Graph.undirectedEdge: could not find the "'.concat(t,'" target node in the graph.'));var r=n.undirected&&n.undirected[t]||void 0;return r?r.key:void 0}},i.edge=function(e,t){if(this.multi)throw new B("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.edge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z('Graph.edge: could not find the "'.concat(t,'" target node in the graph.'));var r=n.out&&n.out[t]||n.undirected&&n.undirected[t]||void 0;if(r)return r.key},i.areDirectedNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areDirectedNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&(t in n.in||t in n.out)},i.areOutNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areOutNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.out},i.areInNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areInNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.in},i.areUndirectedNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areUndirectedNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"directed"!==this.type&&t in n.undirected},i.areNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&(t in n.in||t in n.out)||"directed"!==this.type&&t in n.undirected},i.areInboundNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areInboundNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.in||"directed"!==this.type&&t in n.undirected},i.areOutboundNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areOutboundNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.out||"directed"!==this.type&&t in n.undirected},i.inDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree},i.outDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.outDegree},i.directedDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.directedDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree+t.outDegree},i.undirectedDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.undirectedDegree: could not find the "'.concat(e,'" node in the graph.'));return"directed"===this.type?0:t.undirectedDegree},i.inboundDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inboundDegree: could not find the "'.concat(e,'" node in the graph.'));var n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.inDegree),n},i.outboundDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outboundDegree: could not find the "'.concat(e,'" node in the graph.'));var n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.outDegree),n},i.degree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.degree: could not find the "'.concat(e,'" node in the graph.'));var n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.inDegree+t.outDegree),n},i.inDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree-t.directedLoops},i.outDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.outDegree-t.directedLoops},i.directedDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree+t.outDegree-2*t.directedLoops},i.undirectedDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"directed"===this.type?0:t.undirectedDegree-2*t.undirectedLoops},i.inboundDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.inDegree,r+=t.directedLoops),n-r},i.outboundDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.outDegree,r+=t.directedLoops),n-r},i.degreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.degreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.inDegree+t.outDegree,r+=2*t.directedLoops),n-r},i.source=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.source: could not find the "'.concat(e,'" edge in the graph.'));return t.source.key},i.target=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.target: could not find the "'.concat(e,'" edge in the graph.'));return t.target.key},i.extremities=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.extremities: could not find the "'.concat(e,'" edge in the graph.'));return[t.source.key,t.target.key]},i.opposite=function(e,t){e=""+e,t=""+t;var n=this._edges.get(t);if(!n)throw new z('Graph.opposite: could not find the "'.concat(t,'" edge in the graph.'));var r=n.source.key,i=n.target.key;if(e===r)return i;if(e===i)return r;throw new z('Graph.opposite: the "'.concat(e,'" node is not attached to the "').concat(t,'" edge (').concat(r,", ").concat(i,")."))},i.hasExtremity=function(e,t){e=""+e,t=""+t;var n=this._edges.get(e);if(!n)throw new z('Graph.hasExtremity: could not find the "'.concat(e,'" edge in the graph.'));return n.source.key===t||n.target.key===t},i.isUndirected=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.isUndirected: could not find the "'.concat(e,'" edge in the graph.'));return t.undirected},i.isDirected=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.isDirected: could not find the "'.concat(e,'" edge in the graph.'));return!t.undirected},i.isSelfLoop=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.isSelfLoop: could not find the "'.concat(e,'" edge in the graph.'));return t.source===t.target},i.addNode=function(e,t){var n=function(e,t,n){if(n&&!c(n))throw new q('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(n,'"'));if(t=""+t,n=n||{},e._nodes.has(t))throw new B('Graph.addNode: the "'.concat(t,'" node already exist in the graph.'));var r=new e.NodeDataClass(t,n);return e._nodes.set(t,r),e.emit("nodeAdded",{key:t,attributes:n}),r}(this,e,t);return n.key},i.mergeNode=function(e,t){if(t&&!c(t))throw new q('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(t,'"'));e=""+e,t=t||{};var n=this._nodes.get(e);return n?(t&&(s(n.attributes,t),this.emit("nodeAttributesUpdated",{type:"merge",key:e,attributes:n.attributes,data:t})),[e,!1]):(n=new this.NodeDataClass(e,t),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:t}),[e,!0])},i.updateNode=function(e,t){if(t&&"function"!=typeof t)throw new q('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(t,'"'));e=""+e;var n=this._nodes.get(e);if(n){if(t){var r=n.attributes;n.attributes=t(r),this.emit("nodeAttributesUpdated",{type:"replace",key:e,attributes:n.attributes})}return[e,!1]}var i=t?t({}):{};return n=new this.NodeDataClass(e,i),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:i}),[e,!0]},i.dropNode=function(e){e=""+e;var t,n=this._nodes.get(e);if(!n)throw new z('Graph.dropNode: could not find the "'.concat(e,'" node in the graph.'));if("undirected"!==this.type){for(var r in n.out){t=n.out[r];do{Ce(this,t),t=t.next}while(t)}for(var i in n.in){t=n.in[i];do{Ce(this,t),t=t.next}while(t)}}if("directed"!==this.type)for(var o in n.undirected){t=n.undirected[o];do{Ce(this,t),t=t.next}while(t)}this._nodes.delete(e),this.emit("nodeDropped",{key:e,attributes:n.attributes})},i.dropEdge=function(e){var t;if(arguments.length>1){var n=""+arguments[0],r=""+arguments[1];if(!(t=u(this,n,r,this.type)))throw new z('Graph.dropEdge: could not find the "'.concat(n,'" -> "').concat(r,'" edge in the graph.'))}else if(e=""+e,!(t=this._edges.get(e)))throw new z('Graph.dropEdge: could not find the "'.concat(e,'" edge in the graph.'));return Ce(this,t),this},i.dropDirectedEdge=function(e,t){if(arguments.length<2)throw new B("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new B("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var n=u(this,e=""+e,t=""+t,"directed");if(!n)throw new z('Graph.dropDirectedEdge: could not find a "'.concat(e,'" -> "').concat(t,'" edge in the graph.'));return Ce(this,n),this},i.dropUndirectedEdge=function(e,t){if(arguments.length<2)throw new B("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new B("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var n=u(this,e,t,"undirected");if(!n)throw new z('Graph.dropUndirectedEdge: could not find a "'.concat(e,'" -> "').concat(t,'" edge in the graph.'));return Ce(this,n),this},i.clear=function(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")},i.clearEdges=function(){for(var e,t=this._nodes.values();!0!==(e=t.next()).done;)e.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")},i.getAttribute=function(e){return this._attributes[e]},i.getAttributes=function(){return this._attributes},i.hasAttribute=function(e){return this._attributes.hasOwnProperty(e)},i.setAttribute=function(e,t){return this._attributes[e]=t,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this},i.updateAttribute=function(e,t){if("function"!=typeof t)throw new q("Graph.updateAttribute: updater should be a function.");var n=this._attributes[e];return this._attributes[e]=t(n),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this},i.removeAttribute=function(e){return delete this._attributes[e],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:e}),this},i.replaceAttributes=function(e){if(!c(e))throw new q("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=e,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},i.mergeAttributes=function(e){if(!c(e))throw new q("Graph.mergeAttributes: provided attributes are not a plain object.");return s(this._attributes,e),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:e}),this},i.updateAttributes=function(e){if("function"!=typeof e)throw new q("Graph.updateAttributes: provided updater is not a function.");return this._attributes=e(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this},i.updateEachNodeAttributes=function(e,t){if("function"!=typeof e)throw new q("Graph.updateEachNodeAttributes: expecting an updater function.");if(t&&!f(t))throw new q("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var n,r,i=this._nodes.values();!0!==(n=i.next()).done;)(r=n.value).attributes=e(r.key,r.attributes);this.emit("eachNodeAttributesUpdated",{hints:t||null})},i.updateEachEdgeAttributes=function(e,t){if("function"!=typeof e)throw new q("Graph.updateEachEdgeAttributes: expecting an updater function.");if(t&&!f(t))throw new q("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var n,r,i,o,a=this._edges.values();!0!==(n=a.next()).done;)i=(r=n.value).source,o=r.target,r.attributes=e(r.key,r.attributes,i.key,o.key,i.attributes,o.attributes,r.undirected);this.emit("eachEdgeAttributesUpdated",{hints:t||null})},i.forEachAdjacencyEntry=function(e){if("function"!=typeof e)throw new q("Graph.forEachAdjacencyEntry: expecting a callback.");ge(!1,!1,!1,this,e)},i.forEachAdjacencyEntryWithOrphans=function(e){if("function"!=typeof e)throw new q("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");ge(!1,!1,!0,this,e)},i.forEachAssymetricAdjacencyEntry=function(e){if("function"!=typeof e)throw new q("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");ge(!1,!0,!1,this,e)},i.forEachAssymetricAdjacencyEntryWithOrphans=function(e){if("function"!=typeof e)throw new q("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");ge(!1,!0,!0,this,e)},i.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):I(this._nodes.keys(),this._nodes.size)},i.forEachNode=function(e){if("function"!=typeof e)throw new q("Graph.forEachNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)e((n=t.value).key,n.attributes)},i.findNode=function(e){if("function"!=typeof e)throw new q("Graph.findNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)if(e((n=t.value).key,n.attributes))return n.key},i.mapNodes=function(e){if("function"!=typeof e)throw new q("Graph.mapNode: expecting a callback.");for(var t,n,r=this._nodes.values(),i=new Array(this.order),o=0;!0!==(t=r.next()).done;)n=t.value,i[o++]=e(n.key,n.attributes);return i},i.someNode=function(e){if("function"!=typeof e)throw new q("Graph.someNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)if(e((n=t.value).key,n.attributes))return!0;return!1},i.everyNode=function(e){if("function"!=typeof e)throw new q("Graph.everyNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)if(!e((n=t.value).key,n.attributes))return!1;return!0},i.filterNodes=function(e){if("function"!=typeof e)throw new q("Graph.filterNodes: expecting a callback.");for(var t,n,r=this._nodes.values(),i=[];!0!==(t=r.next()).done;)e((n=t.value).key,n.attributes)&&i.push(n.key);return i},i.reduceNodes=function(e,t){if("function"!=typeof e)throw new q("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new q("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");for(var n,r,i=t,o=this._nodes.values();!0!==(n=o.next()).done;)i=e(i,(r=n.value).key,r.attributes);return i},i.nodeEntries=function(){var e=this._nodes.values();return new N((function(){var t=e.next();if(t.done)return t;var n=t.value;return{value:{node:n.key,attributes:n.attributes},done:!1}}))},i.export=function(){var e=this,t=new Array(this._nodes.size),n=0;this._nodes.forEach((function(e,r){t[n++]=function(e,t){var n={key:e};return d(t.attributes)||(n.attributes=s({},t.attributes)),n}(r,e)}));var r=new Array(this._edges.size);return n=0,this._edges.forEach((function(t,i){r[n++]=function(e,t,n){var r={key:t,source:n.source.key,target:n.target.key};return d(n.attributes)||(r.attributes=s({},n.attributes)),"mixed"===e&&n.undirected&&(r.undirected=!0),r}(e.type,i,t)})),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:t,edges:r}},i.import=function(e){var t,n,i,o,a,s=this,u=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e instanceof r)return e.forEachNode((function(e,t){u?s.mergeNode(e,t):s.addNode(e,t)})),e.forEachEdge((function(e,t,n,r,i,o,a){u?a?s.mergeUndirectedEdgeWithKey(e,n,r,t):s.mergeDirectedEdgeWithKey(e,n,r,t):a?s.addUndirectedEdgeWithKey(e,n,r,t):s.addDirectedEdgeWithKey(e,n,r,t)})),this;if(!c(e))throw new q("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(e.attributes){if(!c(e.attributes))throw new q("Graph.import: invalid attributes. Expecting a plain object.");u?this.mergeAttributes(e.attributes):this.replaceAttributes(e.attributes)}if(e.nodes){if(i=e.nodes,!Array.isArray(i))throw new q("Graph.import: invalid nodes. Expecting an array.");for(t=0,n=i.length;t<n;t++){ve(o=i[t]);var d=o,h=d.key,l=d.attributes;u?this.mergeNode(h,l):this.addNode(h,l)}}if(e.edges){var f=!1;if("undirected"===this.type&&(f=!0),i=e.edges,!Array.isArray(i))throw new q("Graph.import: invalid edges. Expecting an array.");for(t=0,n=i.length;t<n;t++){ye(a=i[t]);var p=a,g=p.source,v=p.target,y=p.attributes,m=p.undirected,b=void 0===m?f:m;"key"in a?(u?b?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:b?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,a.key,g,v,y):(u?b?this.mergeUndirectedEdge:this.mergeDirectedEdge:b?this.addUndirectedEdge:this.addDirectedEdge).call(this,g,v,y)}}return this},i.nullCopy=function(e){var t=new r(s({},this._options,e));return t.replaceAttributes(s({},this.getAttributes())),t},i.emptyCopy=function(e){var t=this.nullCopy(e);return this._nodes.forEach((function(e,n){var r=s({},e.attributes);e=new t.NodeDataClass(n,r),t._nodes.set(n,e)})),t},i.copy=function(e){if("string"==typeof(e=e||{}).type&&e.type!==this.type&&"mixed"!==e.type)throw new B('Graph.copy: cannot create an incompatible copy from "'.concat(this.type,'" type to "').concat(e.type,'" because this would mean losing information about the current graph.'));if("boolean"==typeof e.multi&&e.multi!==this.multi&&!0!==e.multi)throw new B("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof e.allowSelfLoops&&e.allowSelfLoops!==this.allowSelfLoops&&!0!==e.allowSelfLoops)throw new B("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");for(var t,n,r=this.emptyCopy(e),i=this._edges.values();!0!==(t=i.next()).done;)Le(r,"copy",!1,(n=t.value).undirected,n.key,n.source.key,n.target.key,s({},n.attributes));return r},i.toJSON=function(){return this.export()},i.toString=function(){return"[object Graph]"},i.inspect=function(){var t=this,n={};this._nodes.forEach((function(e,t){n[t]=e.attributes}));var r={},i={};this._edges.forEach((function(e,n){var o,a=e.undirected?"--":"->",s="",u=e.source.key,c=e.target.key;e.undirected&&u>c&&(o=u,u=c,c=o);var d="(".concat(u,")").concat(a,"(").concat(c,")");n.startsWith("geid_")?t.multi&&(void 0===i[d]?i[d]=0:i[d]++,s+="".concat(i[d],". ")):s+="[".concat(n,"]: "),r[s+=d]=e.attributes}));var o={};for(var a in this)this.hasOwnProperty(a)&&!xe.has(a)&&"function"!=typeof this[a]&&"symbol"!==e(a)&&(o[a]=this[a]);return o.attributes=this._attributes,o.nodes=n,o.edges=r,h(o,"constructor",this.constructor),o},r}(g.exports.EventEmitter);"undefined"!=typeof Symbol&&(Se.prototype[Symbol.for("nodejs.util.inspect.custom")]=Se.prototype.inspect),[{name:function(e){return"".concat(e,"Edge")},generateKey:!0},{name:function(e){return"".concat(e,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(e){return"".concat(e,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(e){return"".concat(e,"EdgeWithKey")}},{name:function(e){return"".concat(e,"DirectedEdgeWithKey")},type:"directed"},{name:function(e){return"".concat(e,"UndirectedEdgeWithKey")},type:"undirected"}].forEach((function(e){["add","merge","update"].forEach((function(t){var n=e.name(t),r="add"===t?Le:Ae;e.generateKey?Se.prototype[n]=function(i,o,a){return r(this,n,!0,"undirected"===(e.type||this.type),null,i,o,a,"update"===t)}:Se.prototype[n]=function(i,o,a,s){return r(this,n,!1,"undirected"===(e.type||this.type),i,o,a,s,"update"===t)}}))})),function(e){Z.forEach((function(t){var n=t.name,r=t.attacher;r(e,n("Node"),0),r(e,n("Source"),1),r(e,n("Target"),2),r(e,n("Opposite"),3)}))}(Se),function(e){X.forEach((function(t){var n=t.name,r=t.attacher;r(e,n("Edge"),"mixed"),r(e,n("DirectedEdge"),"directed"),r(e,n("UndirectedEdge"),"undirected")}))}(Se),function(e){ee.forEach((function(t){!function(e,t){var n=t.name,r=t.type,i=t.direction;e.prototype[n]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return[];if(!arguments.length)return function(e,t){if(0===e.size)return[];if("mixed"===t||t===e.type)return"function"==typeof Array.from?Array.from(e._edges.keys()):I(e._edges.keys(),e._edges.size);for(var n,r,i="undirected"===t?e.undirectedSize:e.directedSize,o=new Array(i),a="undirected"===t,s=e._edges.values(),u=0;!0!==(n=s.next()).done;)(r=n.value).undirected===a&&(o[u++]=r.key);return o}(this,r);if(1===arguments.length){e=""+e;var o=this._nodes.get(e);if(void 0===o)throw new z("Graph.".concat(n,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n,r){var i=[];return ue(!1,e,t,n,r,(function(e){i.push(e)})),i}(this.multi,"mixed"===r?this.type:r,i,o)}if(2===arguments.length){e=""+e,t=""+t;var a=this._nodes.get(e);if(!a)throw new z("Graph.".concat(n,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(n,':  could not find the "').concat(t,'" target node in the graph.'));return function(e,t,n,r,i){var o=[];return ce(!1,e,t,n,r,i,(function(e){o.push(e)})),o}(r,this.multi,i,a,t)}throw new q("Graph.".concat(n,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o="forEach"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t,n){if("mixed"===r||"mixed"===this.type||r===this.type){if(1===arguments.length)return se(!1,this,r,n=e);if(2===arguments.length){e=""+e,n=t;var a=this._nodes.get(e);if(void 0===a)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return ue(!1,this.multi,"mixed"===r?this.type:r,i,a,n)}if(3===arguments.length){e=""+e,t=""+t;var s=this._nodes.get(e);if(!s)throw new z("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return ce(!1,r,this.multi,i,s,t,n)}throw new q("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}};var a="map"+n[0].toUpperCase()+n.slice(1);e.prototype[a]=function(){var e,t=Array.prototype.slice.call(arguments),n=t.pop();if(0===t.length){var i=0;"directed"!==r&&(i+=this.undirectedSize),"undirected"!==r&&(i+=this.directedSize),e=new Array(i);var a=0;t.push((function(t,r,i,o,s,u,c){e[a++]=n(t,r,i,o,s,u,c)}))}else e=[],t.push((function(t,r,i,o,a,s,u){e.push(n(t,r,i,o,a,s,u))}));return this[o].apply(this,t),e};var s="filter"+n[0].toUpperCase()+n.slice(1);e.prototype[s]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=[];return e.push((function(e,r,i,o,a,s,u){t(e,r,i,o,a,s,u)&&n.push(e)})),this[o].apply(this,e),n};var u="reduce"+n[0].toUpperCase()+n.slice(1);e.prototype[u]=function(){var e,t,n=Array.prototype.slice.call(arguments);if(n.length<2||n.length>4)throw new q("Graph.".concat(u,": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(n.length,")."));if("function"==typeof n[n.length-1]&&"function"!=typeof n[n.length-2])throw new q("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));2===n.length?(e=n[0],t=n[1],n=[]):3===n.length?(e=n[1],t=n[2],n=[n[0]]):4===n.length&&(e=n[2],t=n[3],n=[n[0],n[1]]);var r=t;return n.push((function(t,n,i,o,a,s,u){r=e(r,t,n,i,o,a,s,u)})),this[o].apply(this,n),r}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o="find"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t,n){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return!1;if(1===arguments.length)return se(!0,this,r,n=e);if(2===arguments.length){e=""+e,n=t;var a=this._nodes.get(e);if(void 0===a)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return ue(!0,this.multi,"mixed"===r?this.type:r,i,a,n)}if(3===arguments.length){e=""+e,t=""+t;var s=this._nodes.get(e);if(!s)throw new z("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return ce(!0,r,this.multi,i,s,t,n)}throw new q("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))};var a="some"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[a]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop();return e.push((function(e,n,r,i,o,a,s){return t(e,n,r,i,o,a,s)})),!!this[o].apply(this,e)};var s="every"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[s]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop();return e.push((function(e,n,r,i,o,a,s){return!t(e,n,r,i,o,a,s)})),!this[o].apply(this,e)}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o=n.slice(0,-1)+"Entries";e.prototype[o]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return N.empty();if(!arguments.length)return function(e,t){if(0===e.size)return N.empty();var n="mixed"!==t&&t!==e.type,r="undirected"===t,i=e._edges.values();return new N((function(){for(var e,t;;){if((e=i.next()).done)return e;if(t=e.value,!n||t.undirected===r)break}return{value:{edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected},done:!1}}))}(this,r);if(1===arguments.length){e=""+e;var n=this._nodes.get(e);if(!n)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n){var r=N.empty();return"undirected"!==e&&("out"!==t&&void 0!==n.in&&(r=J(r,re(n.in))),"in"!==t&&void 0!==n.out&&(r=J(r,re(n.out,t?void 0:n.key)))),"directed"!==e&&void 0!==n.undirected&&(r=J(r,re(n.undirected))),r}(r,i,n)}if(2===arguments.length){e=""+e,t=""+t;var a=this._nodes.get(e);if(!a)throw new z("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return function(e,t,n,r){var i=N.empty();return"undirected"!==e&&(void 0!==n.in&&"out"!==t&&r in n.in&&(i=J(i,ae(n.in,r))),void 0!==n.out&&"in"!==t&&r in n.out&&(t||n.key!==r)&&(i=J(i,ae(n.out,r)))),"directed"!==e&&void 0!==n.undirected&&r in n.undirected&&(i=J(i,ae(n.undirected,r))),i}(r,i,a,t)}throw new q("Graph.".concat(o,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(e,t)}))}(Se),function(e){de.forEach((function(t){(function(e,t){var n=t.name,r=t.type,i=t.direction;e.prototype[n]=function(e){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return[];e=""+e;var t=this._nodes.get(e);if(void 0===t)throw new z("Graph.".concat(n,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n){if("mixed"!==e){if("undirected"===e)return Object.keys(n.undirected);if("string"==typeof t)return Object.keys(n[t])}var r=[];return fe(!1,e,t,n,(function(e){r.push(e)})),r}("mixed"===r?this.type:r,i,t)}})(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o="forEach"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t){if("mixed"===r||"mixed"===this.type||r===this.type){e=""+e;var n=this._nodes.get(e);if(void 0===n)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));fe(!1,"mixed"===r?this.type:r,i,n,t)}};var a="map"+n[0].toUpperCase()+n.slice(1);e.prototype[a]=function(e,t){var n=[];return this[o](e,(function(e,r){n.push(t(e,r))})),n};var s="filter"+n[0].toUpperCase()+n.slice(1);e.prototype[s]=function(e,t){var n=[];return this[o](e,(function(e,r){t(e,r)&&n.push(e)})),n};var u="reduce"+n[0].toUpperCase()+n.slice(1);e.prototype[u]=function(e,t,n){if(arguments.length<3)throw new q("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));var r=n;return this[o](e,(function(e,n){r=t(r,e,n)})),r}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o=n[0].toUpperCase()+n.slice(1,-1),a="find"+o;e.prototype[a]=function(e,t){if("mixed"===r||"mixed"===this.type||r===this.type){e=""+e;var n=this._nodes.get(e);if(void 0===n)throw new z("Graph.".concat(a,': could not find the "').concat(e,'" node in the graph.'));return fe(!0,"mixed"===r?this.type:r,i,n,t)}};var s="some"+o;e.prototype[s]=function(e,t){return!!this[a](e,t)};var u="every"+o;e.prototype[u]=function(e,t){return!this[a](e,(function(e,n){return!t(e,n)}))}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o=n.slice(0,-1)+"Entries";e.prototype[o]=function(e){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return N.empty();e=""+e;var t=this._nodes.get(e);if(void 0===t)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n){if("mixed"!==e){if("undirected"===e)return pe(null,n,n.undirected);if("string"==typeof t)return pe(null,n,n[t])}var r=N.empty(),i=new he;return"undirected"!==e&&("out"!==t&&(r=J(r,pe(i,n,n.in))),"in"!==t&&(r=J(r,pe(i,n,n.out)))),"directed"!==e&&(r=J(r,pe(i,n,n.undirected))),r}("mixed"===r?this.type:r,i,t)}}(e,t)}))}(Se);var Te=function(e){function n(t){var n=s({type:"directed"},t);if("multi"in n&&!1!==n.multi)throw new q("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==n.type)throw new q('DirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se),ke=function(e){function n(t){var n=s({type:"undirected"},t);if("multi"in n&&!1!==n.multi)throw new q("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==n.type)throw new q('UndirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se),De=function(e){function n(t){var n=s({multi:!0},t);if("multi"in n&&!0!==n.multi)throw new q("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return e.call(this,n)||this}return t(n,e),n}(Se),Ne=function(e){function n(t){var n=s({type:"directed",multi:!0},t);if("multi"in n&&!0!==n.multi)throw new q("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==n.type)throw new q('MultiDirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se),Pe=function(e){function n(t){var n=s({type:"undirected",multi:!0},t);if("multi"in n&&!0!==n.multi)throw new q("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==n.type)throw new q('MultiUndirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se);function Fe(e){e.from=function(t,n){var r=s({},t.options,n),i=new e(r);return i.import(t),i}}return Fe(Se),Fe(Te),Fe(ke),Fe(De),Fe(Ne),Fe(Pe),Se.Graph=Se,Se.DirectedGraph=Te,Se.UndirectedGraph=ke,Se.MultiGraph=De,Se.MultiDirectedGraph=Ne,Se.MultiUndirectedGraph=Pe,Se.InvalidArgumentsGraphError=q,Se.NotFoundGraphError=z,Se.UsageGraphError=B,Se}()},9755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,u=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,d=o.indexOf,h={},l=h.toString,f=h.hasOwnProperty,p=f.toString,g=p.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},m=function(e){return null!=e&&e===e.window},b=r.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,i,o=(n=n||b).createElement("script");if(o.text=e,t)for(r in w)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[l.call(e)]||"object":typeof e}var _="3.6.4",L=function(e,t){return new L.fn.init(e,t)};function A(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!y(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}L.fn=L.prototype={jquery:_,constructor:L,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=L.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return L.each(this,e)},map:function(e){return this.pushStack(L.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(L.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(L.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},L.extend=L.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(L.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||L.isPlainObject(n)?n:{},i=!1,a[t]=L.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},L.extend({expando:"jQuery"+(_+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==l.call(e)||(t=a(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||p.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(A(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(A(Object(e))?L.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(A(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return u(a)},guid:1,support:v}),"function"==typeof Symbol&&(L.fn[Symbol.iterator]=o[Symbol.iterator]),L.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){h["[object "+t+"]"]=t.toLowerCase()}));var C=function(e){var t,n,r,i,o,a,s,u,c,d,h,l,f,p,g,v,y,m,b,w="sizzle"+1*new Date,x=e.document,E=0,_=0,L=ue(),A=ue(),C=ue(),S=ue(),T=function(e,t){return e===t&&(h=!0),0},k={}.hasOwnProperty,D=[],N=D.pop,P=D.push,F=D.push,O=D.slice,R=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},G="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",j="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+M+"*("+j+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+M+"*\\]",U=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",q=new RegExp(M+"+","g"),z=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),H=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),W=new RegExp(M+"|>"),V=new RegExp(U),Y=new RegExp("^"+j+"$"),$={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+U),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+G+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){l()},ae=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{F.apply(D=O.call(x.childNodes),x.childNodes),D[x.childNodes.length].nodeType}catch(e){F={apply:D.length?function(e,t){P.apply(e,O.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,c,d,h,p,y,m=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!i&&(l(t),t=t||f,g)){if(11!==x&&(h=J.exec(e)))if(o=h[1]){if(9===x){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(m&&(c=m.getElementById(o))&&b(t,c)&&c.id===o)return r.push(c),r}else{if(h[2])return F.apply(r,t.getElementsByTagName(e)),r;if((o=h[3])&&n.getElementsByClassName&&t.getElementsByClassName)return F.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!v||!v.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(y=e,m=t,1===x&&(W.test(e)||H.test(e))){for((m=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((d=t.getAttribute("id"))?d=d.replace(re,ie):t.setAttribute("id",d=w)),s=(p=a(e)).length;s--;)p[s]=(d?"#"+d:":scope")+" "+be(p[s]);y=p.join(",")}try{return F.apply(r,m.querySelectorAll(y)),r}catch(t){S(e,!0)}finally{d===w&&t.removeAttribute("id")}}}return u(e.replace(z,"$1"),t,r,i)}function ue(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ce(e){return e[w]=!0,e}function de(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function he(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ce((function(t){return t=+t,ce((function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Z.test(t||n&&n.nodeName||"HTML")},l=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:x;return a!=f&&9===a.nodeType&&a.documentElement?(p=(f=a).documentElement,g=!o(f),x!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=de((function(e){return p.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.cssHas=de((function(){try{return f.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),n.attributes=de((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=de((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=de((function(e){return p.appendChild(e).id=w,!f.getElementsByName||!f.getElementsByName(w).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],v=[],(n.qsa=Q.test(f.querySelectorAll))&&(de((function(e){var t;p.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+G+")"),e.querySelectorAll("[id~="+w+"-]").length||v.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),de((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=Q.test(m=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&de((function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),y.push("!=",U)})),n.cssHas||v.push(":has"),v=v.length&&new RegExp(v.join("|")),y=y.length&&new RegExp(y.join("|")),t=Q.test(p.compareDocumentPosition),b=t||Q.test(p.contains)?function(e,t){var n=9===e.nodeType&&e.documentElement||e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return h=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==x&&b(x,e)?-1:t==f||t.ownerDocument==x&&b(x,t)?1:d?R(d,e)-R(d,t):0:4&r?-1:1)}:function(e,t){if(e===t)return h=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==f?-1:t==f?1:i?-1:o?1:d?R(d,e)-R(d,t):0;if(i===o)return le(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?le(a[r],s[r]):a[r]==x?-1:s[r]==x?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(l(e),n.matchesSelector&&g&&!S[t+" "]&&(!y||!y.test(t))&&(!v||!v.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){S(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&l(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&l(e);var i=r.attrHandle[t.toLowerCase()],o=i&&k.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(h=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(T),h){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return d=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},r=se.selectors={cacheLength:50,createPseudo:ce,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=L[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&L(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,d,h,l,f,p,g=o!==a?"nextSibling":"previousSibling",v=t.parentNode,y=s&&t.nodeName.toLowerCase(),m=!u&&!s,b=!1;if(v){if(o){for(;g;){for(l=t;l=l[g];)if(s?l.nodeName.toLowerCase()===y:1===l.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?v.firstChild:v.lastChild],a&&m){for(b=(f=(c=(d=(h=(l=v)[w]||(l[w]={}))[l.uniqueID]||(h[l.uniqueID]={}))[e]||[])[0]===E&&c[1])&&c[2],l=f&&v.childNodes[f];l=++f&&l&&l[g]||(b=f=0)||p.pop();)if(1===l.nodeType&&++b&&l===t){d[e]=[E,f,b];break}}else if(m&&(b=f=(c=(d=(h=(l=t)[w]||(l[w]={}))[l.uniqueID]||(h[l.uniqueID]={}))[e]||[])[0]===E&&c[1]),!1===b)for(;(l=++f&&l&&l[g]||(b=f=0)||p.pop())&&((s?l.nodeName.toLowerCase()!==y:1!==l.nodeType)||!++b||(m&&((d=(h=l[w]||(l[w]={}))[l.uniqueID]||(h[l.uniqueID]={}))[e]=[E,b]),l!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[w]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=R(e,o[a])]=!(n[r]=o[a])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace(z,"$1"));return r[w]?ce((function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ce((function(e){return Y.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ve((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function me(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function we(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=_++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,d,h,l=[E,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(d=(h=t[w]||(t[w]={}))[t.uniqueID]||(h[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=d[o])&&c[0]===E&&c[1]===s)return l[2]=c[2];if(d[o]=l,l[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ee(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function _e(e,t,n,r,i,o){return r&&!r[w]&&(r=_e(r)),i&&!i[w]&&(i=_e(i,o)),ce((function(o,a,s,u){var c,d,h,l=[],f=[],p=a.length,g=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?g:Ee(g,l,e,s,u),y=n?i||(o?e:p||r)?[]:a:v;if(n&&n(v,y,s,u),r)for(c=Ee(y,f),r(c,[],s,u),d=c.length;d--;)(h=c[d])&&(y[f[d]]=!(v[f[d]]=h));if(o){if(i||e){if(i){for(c=[],d=y.length;d--;)(h=y[d])&&c.push(v[d]=h);i(null,y=[],c,u)}for(d=y.length;d--;)(h=y[d])&&(c=i?R(o,h):l[d])>-1&&(o[c]=!(a[c]=h))}}else y=Ee(y===a?y.splice(p,y.length):y),i?i(null,a,y,u):F.apply(a,y)}))}function Le(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,d=we((function(e){return e===t}),s,!0),h=we((function(e){return R(t,e)>-1}),s,!0),l=[function(e,n,r){var i=!a&&(r||n!==c)||((t=n).nodeType?d(e,n,r):h(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])l=[we(xe(l),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[w]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return _e(u>1&&xe(l),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(z,"$1"),n,u<i&&Le(e.slice(u,i)),i<o&&Le(e=e.slice(i)),i<o&&be(e))}l.push(n)}return xe(l)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=se.tokenize=function(e,t){var n,i,o,a,s,u,c,d=A[e+" "];if(d)return t?0:d.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(i=B.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=H.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(z," ")}),s=s.slice(n.length)),r.filter)!(i=$[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):A(e,u).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=C[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Le(t[n]))[w]?i.push(s):o.push(s);s=C(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,d){var h,p,v,y=0,m="0",b=o&&[],w=[],x=c,_=o||i&&r.find.TAG("*",d),L=E+=null==x?1:Math.random()||.1,A=_.length;for(d&&(c=a==f||a||d);m!==A&&null!=(h=_[m]);m++){if(i&&h){for(p=0,a||h.ownerDocument==f||(l(h),s=!g);v=e[p++];)if(v(h,a||f,s)){u.push(h);break}d&&(E=L)}n&&((h=!v&&h)&&y--,o&&b.push(h))}if(y+=m,n&&m!==y){for(p=0;v=t[p++];)v(b,w,a,s);if(o){if(y>0)for(;m--;)b[m]||w[m]||(w[m]=N.call(u));w=Ee(w)}F.apply(u,w),d&&!o&&w.length>0&&y+t.length>1&&se.uniqueSort(u)}return d&&(E=L,c=x),b};return n?ce(o):o}(o,i)),s.selector=e}return s},u=se.select=function(e,t,n,i){var o,u,c,d,h,l="function"==typeof e&&e,f=!i&&a(e=l.selector||e);if(n=n||[],1===f.length){if((u=f[0]=f[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=$.needsContext.test(e)?0:u.length;o--&&(c=u[o],!r.relative[d=c.type]);)if((h=r.find[d])&&(i=h(c.matches[0].replace(te,ne),ee.test(u[0].type)&&ye(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&be(u)))return F.apply(n,i),n;break}}return(l||s(e,f))(i,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=w.split("").sort(T).join("")===w,n.detectDuplicates=!!h,l(),n.sortDetached=de((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),de((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||he("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&de((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||he("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),de((function(e){return null==e.getAttribute("disabled")}))||he(G,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(r);L.find=C,L.expr=C.selectors,L.expr[":"]=L.expr.pseudos,L.uniqueSort=L.unique=C.uniqueSort,L.text=C.getText,L.isXMLDoc=C.isXML,L.contains=C.contains,L.escapeSelector=C.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&L(e).is(n))break;r.push(e)}return r},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=L.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,t,n){return y(t)?L.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?L.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?L.grep(e,(function(e){return d.call(t,e)>-1!==n})):L.filter(t,e,n)}L.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?L.find.matchesSelector(r,e)?[r]:[]:L.find.matches(e,L.grep(t,(function(e){return 1===e.nodeType})))},L.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(L(e).filter((function(){for(t=0;t<r;t++)if(L.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)L.find(e,i[t],n);return r>1?L.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&k.test(e)?L(e):e||[],!1).length}});var F,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(L.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||F,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:O.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof L?t[0]:t,L.merge(this,L.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),N.test(r[1])&&L.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(L):L.makeArray(e,this)}).prototype=L.fn,F=L(b);var R=/^(?:parents|prev(?:Until|All))/,G={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}L.fn.extend({has:function(e){var t=L(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(L.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&L(e);if(!k.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&L.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?L.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?d.call(L(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(L.uniqueSort(L.merge(this.get(),L(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),L.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(D(e,"template")&&(e=e.content||e),L.merge([],e.childNodes))}},(function(e,t){L.fn[e]=function(n,r){var i=L.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=L.filter(r,i)),this.length>1&&(G[e]||L.uniqueSort(i),R.test(e)&&i.reverse()),this.pushStack(i)}}));var j=/[^\x20\t\r\n\f]+/g;function I(e){return e}function U(e){throw e}function q(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}L.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return L.each(e.match(j)||[],(function(e,n){t[n]=!0})),t}(e):L.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){L.each(n,(function(n,r){y(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==E(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return L.each(arguments,(function(e,t){for(var n;(n=L.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?L.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},L.extend({Deferred:function(e){var t=[["notify","progress",L.Callbacks("memory"),L.Callbacks("memory"),2],["resolve","done",L.Callbacks("once memory"),L.Callbacks("once memory"),0,"resolved"],["reject","fail",L.Callbacks("once memory"),L.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return L.Deferred((function(n){L.each(t,(function(t,r){var i=y(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,i){var o=0;function a(e,t,n,i){return function(){var s=this,u=arguments,c=function(){var r,c;if(!(e<o)){if((r=n.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=r&&("object"==typeof r||"function"==typeof r)&&r.then,y(c)?i?c.call(r,a(o,t,I,i),a(o,t,U,i)):(o++,c.call(r,a(o,t,I,i),a(o,t,U,i),a(o,t,I,t.notifyWith))):(n!==I&&(s=void 0,u=[r]),(i||t.resolveWith)(s,u))}},d=i?c:function(){try{c()}catch(r){L.Deferred.exceptionHook&&L.Deferred.exceptionHook(r,d.stackTrace),e+1>=o&&(n!==U&&(s=void 0,u=[r]),t.rejectWith(s,u))}};e?d():(L.Deferred.getStackHook&&(d.stackTrace=L.Deferred.getStackHook()),r.setTimeout(d))}}return L.Deferred((function(r){t[0][3].add(a(0,r,y(i)?i:I,r.notifyWith)),t[1][3].add(a(0,r,y(e)?e:I)),t[2][3].add(a(0,r,y(n)?n:U))})).promise()},promise:function(e){return null!=e?L.extend(e,i):i}},o={};return L.each(t,(function(e,r){var a=r[2],s=r[5];i[r[1]]=a.add,s&&a.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=L.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(q(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)q(i[n],a(n),o.reject);return o.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;L.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&z.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},L.readyException=function(e){r.setTimeout((function(){throw e}))};var B=L.Deferred();function H(){b.removeEventListener("DOMContentLoaded",H),r.removeEventListener("load",H),L.ready()}L.fn.ready=function(e){return B.then(e).catch((function(e){L.readyException(e)})),this},L.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--L.readyWait:L.isReady)||(L.isReady=!0,!0!==e&&--L.readyWait>0||B.resolveWith(b,[L]))}}),L.ready.then=B.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(L.ready):(b.addEventListener("DOMContentLoaded",H),r.addEventListener("load",H));var W=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===E(n))for(s in i=!0,n)W(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(L(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},V=/^-ms-/,Y=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function Z(e){return e.replace(V,"ms-").replace(Y,$)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=L.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Z(t)]=n;else for(r in t)i[Z(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Z):(t=Z(t))in r?[t]:t.match(j)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||L.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!L.isEmptyObject(t)}};var Q=new K,J=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}L.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),L.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Z(r.slice(5)),ne(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){J.set(this,e)})):W(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=J.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){J.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),L.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,L.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=L.queue(e,t),r=n.length,i=n.shift(),o=L._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){L.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:L.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),L.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?L.queue(this[0],e):void 0===t?this:this.each((function(){var n=L.queue(this,e,t);L._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&L.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){L.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=L.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=b.documentElement,se=function(e){return L.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(se=function(e){return L.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===L.css(e,"display")};function de(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return L.css(e,t,"")},u=s(),c=n&&n[3]||(L.cssNumber[t]?"":"px"),d=e.nodeType&&(L.cssNumber[t]||"px"!==c&&+u)&&ie.exec(L.css(e,t));if(d&&d[3]!==c){for(u/=2,c=c||d[3],d=+u||1;a--;)L.style(e,t,d+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),d/=o;d*=2,L.style(e,t,d+c),n=n||[]}return n&&(d=+d||+u||0,i=n[1]?d+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=d,r.end=i)),i}var he={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,i=he[r];return i||(t=n.body.appendChild(n.createElement(r)),i=L.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),he[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Q.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ce(r)&&(i[o]=le(r))):"none"!==n&&(i[o]="none",Q.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}L.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?L(this).show():L(this).hide()}))}});var pe,ge,ve=/^(?:checkbox|radio)$/i,ye=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,me=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(ge=b.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),pe.appendChild(ge),v.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",v.option=!!pe.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function we(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?L.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,v.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function _e(e,t,n,r,i){for(var o,a,s,u,c,d,h=t.createDocumentFragment(),l=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===E(o))L.merge(l,o.nodeType?[o]:o);else if(Ee.test(o)){for(a=a||h.appendChild(t.createElement("div")),s=(ye.exec(o)||["",""])[1].toLowerCase(),u=be[s]||be._default,a.innerHTML=u[1]+L.htmlPrefilter(o)+u[2],d=u[0];d--;)a=a.lastChild;L.merge(l,a.childNodes),(a=h.firstChild).textContent=""}else l.push(t.createTextNode(o));for(h.textContent="",f=0;o=l[f++];)if(r&&L.inArray(o,r)>-1)i&&i.push(o);else if(c=se(o),a=we(h.appendChild(o),"script"),c&&xe(a),n)for(d=0;o=a[d++];)me.test(o.type||"")&&n.push(o);return h}var Le=/^([^.]*)(?:\.(.+)|)/;function Ae(){return!0}function Ce(){return!1}function Se(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Te(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(a=i,i=function(e){return L().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=L.guid++)),e.each((function(){L.event.add(this,t,i,r,n)}))}function ke(e,t,n){n?(Q.set(e,t,!1),L.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(L.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),Q.set(this,t,o),r=n(this,t),this[t](),o!==(i=Q.get(this,t))||r?Q.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i&&i.value}else o.length&&(Q.set(this,t,{value:L.event.trigger(L.extend(o[0],L.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&L.event.add(e,t,Ae)}L.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,d,h,l,f,p,g,v=Q.get(e);if(X(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&L.find.matchesSelector(ae,i),n.guid||(n.guid=L.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==L&&L.event.triggered!==t.type?L.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(j)||[""]).length;c--;)f=g=(s=Le.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f&&(h=L.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,h=L.event.special[f]||{},d=L.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&L.expr.match.needsContext.test(i),namespace:p.join(".")},o),(l=u[f])||((l=u[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,r,p,a)||e.addEventListener&&e.addEventListener(f,a)),h.add&&(h.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),i?l.splice(l.delegateCount++,0,d):l.push(d),L.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,d,h,l,f,p,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(f=g=(s=Le.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f){for(h=L.event.special[f]||{},l=u[f=(r?h.delegateType:h.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=l.length;o--;)d=l[o],!i&&g!==d.origType||n&&n.guid!==d.guid||s&&!s.test(d.namespace)||r&&r!==d.selector&&("**"!==r||!d.selector)||(l.splice(o,1),d.selector&&l.delegateCount--,h.remove&&h.remove.call(e,d));a&&!l.length&&(h.teardown&&!1!==h.teardown.call(e,p,v.handle)||L.removeEvent(e,f,v.handle),delete u[f])}else for(f in u)L.event.remove(e,f+t[c],n,r,!0);L.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=L.event.fix(e),c=(Q.get(this,"events")||Object.create(null))[u.type]||[],d=L.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,u)){for(a=L.event.handlers.call(this,u,c),t=0;(i=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((L.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?L(i,this).index(c)>-1:L.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(L.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[L.expando]?e:new L.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ve.test(t.type)&&t.click&&D(t,"input")&&ke(t,"click",Ae),!1},trigger:function(e){var t=this||e;return ve.test(t.type)&&t.click&&D(t,"input")&&ke(t,"click"),!0},_default:function(e){var t=e.target;return ve.test(t.type)&&t.click&&D(t,"input")&&Q.get(t,"click")||D(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},L.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},L.Event=function(e,t){if(!(this instanceof L.Event))return new L.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ae:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&L.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[L.expando]=!0},L.Event.prototype={constructor:L.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ae,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ae,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ae,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},L.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},L.event.addProp),L.each({focus:"focusin",blur:"focusout"},(function(e,t){L.event.special[e]={setup:function(){return ke(this,e,Se),!1},trigger:function(){return ke(this,e),!0},_default:function(t){return Q.get(t.target,e)},delegateType:t}})),L.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){L.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||L.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),L.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,L(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each((function(){L.event.remove(this,e,n,t)}))}});var De=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Fe(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&L(e).children("tbody")[0]||e}function Oe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ge(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Q.hasData(e)&&(s=Q.get(e).events))for(i in Q.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)L.event.add(t,i,s[i][n]);J.hasData(e)&&(o=J.access(e),a=L.extend({},o),J.set(t,a))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ve.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function je(e,t,n,r){t=u(t);var i,o,a,s,c,d,h=0,l=e.length,f=l-1,p=t[0],g=y(p);if(g||l>1&&"string"==typeof p&&!v.checkClone&&Ne.test(p))return e.each((function(i){var o=e.eq(i);g&&(t[0]=p.call(this,i,o.html())),je(o,t,n,r)}));if(l&&(o=(i=_e(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=L.map(we(i,"script"),Oe)).length;h<l;h++)c=i,h!==f&&(c=L.clone(c,!0,!0),s&&L.merge(a,we(c,"script"))),n.call(e[h],c,h);if(s)for(d=a[a.length-1].ownerDocument,L.map(a,Re),h=0;h<s;h++)c=a[h],me.test(c.type||"")&&!Q.access(c,"globalEval")&&L.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?L._evalUrl&&!c.noModule&&L._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},d):x(c.textContent.replace(Pe,""),c,d))}return e}function Ie(e,t,n){for(var r,i=t?L.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||L.cleanData(we(r)),r.parentNode&&(n&&se(r)&&xe(we(r,"script")),r.parentNode.removeChild(r));return e}L.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=se(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||L.isXMLDoc(e)))for(a=we(s),r=0,i=(o=we(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||we(e),a=a||we(s),r=0,i=o.length;r<i;r++)Ge(o[r],a[r]);else Ge(e,s);return(a=we(s,"script")).length>0&&xe(a,!u&&we(e,"script")),s},cleanData:function(e){for(var t,n,r,i=L.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?L.event.remove(n,r):L.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),L.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return W(this,(function(e){return void 0===e?L.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Fe(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Fe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(L.cleanData(we(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return L.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!be[(ye.exec(e)||["",""])[1].toLowerCase()]){e=L.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(L.cleanData(we(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var n=this.parentNode;L.inArray(this,e)<0&&(L.cleanData(we(this)),n&&n.replaceChild(t,this))}),e)}}),L.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){L.fn[e]=function(e){for(var n,r=[],i=L(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),L(i[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Ue=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),qe=/^--/,ze=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Be=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},He=new RegExp(oe.join("|"),"i"),We="[\\x20\\t\\r\\n\\f]",Ve=new RegExp("^"+We+"+|((?:^|[^\\\\])(?:\\\\.)*)"+We+"+$","g");function Ye(e,t,n){var r,i,o,a,s=qe.test(t),u=e.style;return(n=n||ze(e))&&(a=n.getPropertyValue(t)||n[t],s&&a&&(a=a.replace(Ve,"$1")||void 0),""!==a||se(e)||(a=L.style(e,t)),!v.pixelBoxStyles()&&Ue.test(a)&&He.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(c).appendChild(d);var e=r.getComputedStyle(d);n="1%"!==e.top,u=12===t(e.marginLeft),d.style.right="60%",a=36===t(e.right),i=36===t(e.width),d.style.position="absolute",o=12===t(d.offsetWidth/3),ae.removeChild(c),d=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,a,s,u,c=b.createElement("div"),d=b.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===d.style.backgroundClip,L.extend(v,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,i;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ae.appendChild(e).appendChild(t).appendChild(n),i=r.getComputedStyle(t),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),s}}))}();var Ze=["Webkit","Moz","ms"],Xe=b.createElement("div").style,Ke={};function Qe(e){return L.cssProps[e]||Ke[e]||(e in Xe?e:Ke[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ze.length;n--;)if((e=Ze[n]+t)in Xe)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"};function nt(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function rt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=L.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=L.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=L.css(e,"border"+oe[a]+"Width",!0,i))):(u+=L.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=L.css(e,"border"+oe[a]+"Width",!0,i):s+=L.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function it(e,t,n){var r=ze(e),i=(!v.boxSizingReliable()||n)&&"border-box"===L.css(e,"boxSizing",!1,r),o=i,a=Ye(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&i||!v.reliableTrDimensions()&&D(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===L.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===L.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+rt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function ot(e,t,n,r,i){return new ot.prototype.init(e,t,n,r,i)}L.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=Z(t),u=qe.test(t),c=e.style;if(u||(t=Qe(s)),a=L.cssHooks[t]||L.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:c[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=de(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(L.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,a,s=Z(t);return qe.test(t)||(t=Qe(s)),(a=L.cssHooks[t]||L.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ye(e,t,r)),"normal"===i&&t in tt&&(i=tt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),L.each(["height","width"],(function(e,t){L.cssHooks[t]={get:function(e,n,r){if(n)return!Je.test(L.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,r):Be(e,et,(function(){return it(e,t,r)}))},set:function(e,n,r){var i,o=ze(e),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===L.css(e,"boxSizing",!1,o),u=r?rt(e,t,r,s,o):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-rt(e,t,"border",!1,o)-.5)),u&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=L.css(e,t)),nt(0,n,u)}}})),L.cssHooks.marginLeft=$e(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),L.each({margin:"",padding:"",border:"Width"},(function(e,t){L.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(L.cssHooks[e+t].set=nt)})),L.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=ze(e),i=t.length;a<i;a++)o[t[a]]=L.css(e,t[a],!1,r);return o}return void 0!==n?L.style(e,t,n):L.css(e,t)}),e,t,arguments.length>1)}}),L.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||L.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(L.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=L.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=L.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){L.fx.step[e.prop]?L.fx.step[e.prop](e):1!==e.elem.nodeType||!L.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:L.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},L.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},L.fx=ot.prototype.init,L.fx.step={};var at,st,ut=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function dt(){st&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(dt):r.setTimeout(dt,L.fx.interval),L.fx.tick())}function ht(){return r.setTimeout((function(){at=void 0})),at=Date.now()}function lt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ft(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=L.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var t=at||ht(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:L.extend({},t),opts:L.extend(!0,{specialEasing:{},easing:L.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||ht(),duration:n.duration,tweens:[],createTween:function(t,n){var r=L.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),d=c.props;for(function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=Z(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=L.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(d,c.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(c,e,d,c.opts))return y(r.stop)&&(L._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return L.map(d,ft,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),L.fx.timer(L.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}L.Animation=L.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return de(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(j);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,c,d,h="width"in t||"height"in t,l=this,f={},p=e.style,g=e.nodeType&&ce(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=L._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,l.always((function(){l.always((function(){a.unqueued--,L.queue(e,"fx").length||a.empty.fire()}))}))),t)if(i=t[r],ut.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}f[r]=v&&v[r]||L.style(e,r)}if((u=!L.isEmptyObject(t))||!L.isEmptyObject(f))for(r in h&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=v&&v.display)&&(c=Q.get(e,"display")),"none"===(d=L.css(e,"display"))&&(c?d=c:(fe([e],!0),c=e.style.display||c,d=L.css(e,"display"),fe([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===L.css(e,"float")&&(u||(l.done((function(){p.display=c})),null==c&&(d=p.display,c="none"===d?"":d)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",l.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),u=!1,f)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&fe([e],!0),l.done((function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),f)L.style(e,r,f[r])}))),u=ft(g?v[r]:0,r,l),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),L.speed=function(e,t,n){var r=e&&"object"==typeof e?L.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return L.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in L.fx.speeds?r.duration=L.fx.speeds[r.duration]:r.duration=L.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&L.dequeue(this,r.queue)},r},L.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=L.isEmptyObject(e),o=L.speed(t,n,r),a=function(){var t=pt(this,L.extend({},e),o);(i||Q.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=L.timers,a=Q.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ct.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||L.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=L.timers,a=r?r.length:0;for(n.finish=!0,L.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),L.each(["toggle","show","hide"],(function(e,t){var n=L.fn[t];L.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(lt(t,!0),e,r,i)}})),L.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){L.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),L.timers=[],L.fx.tick=function(){var e,t=0,n=L.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||L.fx.stop(),at=void 0},L.fx.timer=function(e){L.timers.push(e),L.fx.start()},L.fx.interval=13,L.fx.start=function(){st||(st=!0,dt())},L.fx.stop=function(){st=null},L.fx.speeds={slow:600,fast:200,_default:400},L.fn.delay=function(e,t){return e=L.fx&&L.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var gt,vt=L.expr.attrHandle;L.fn.extend({attr:function(e,t){return W(this,L.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){L.removeAttr(this,e)}))}}),L.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?L.prop(e,t,n):(1===o&&L.isXMLDoc(e)||(i=L.attrHooks[t.toLowerCase()]||(L.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void L.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=L.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(j);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?L.removeAttr(e,n):e.setAttribute(n,n),n}},L.each(L.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=vt[t]||L.find.attr;vt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=vt[a],vt[a]=i,i=null!=n(e,t,r)?a:null,vt[a]=o),i}}));var yt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function bt(e){return(e.match(j)||[]).join(" ")}function wt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}L.fn.extend({prop:function(e,t){return W(this,L.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[L.propFix[e]||e]}))}}),L.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&L.isXMLDoc(e)||(t=L.propFix[t]||t,i=L.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=L.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(L.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),L.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){L.propFix[this.toLowerCase()]=this})),L.fn.extend({addClass:function(e){var t,n,r,i,o,a;return y(e)?this.each((function(t){L(this).addClass(e.call(this,t,wt(this)))})):(t=xt(e)).length?this.each((function(){if(r=wt(this),n=1===this.nodeType&&" "+bt(r)+" "){for(o=0;o<t.length;o++)i=t[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=bt(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(e){var t,n,r,i,o,a;return y(e)?this.each((function(t){L(this).removeClass(e.call(this,t,wt(this)))})):arguments.length?(t=xt(e)).length?this.each((function(){if(r=wt(this),n=1===this.nodeType&&" "+bt(r)+" "){for(o=0;o<t.length;o++)for(i=t[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=bt(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,r,i,o,a=typeof e,s="string"===a||Array.isArray(e);return y(e)?this.each((function(n){L(this).toggleClass(e.call(this,n,wt(this),t),t)})):"boolean"==typeof t&&s?t?this.addClass(e):this.removeClass(e):(n=xt(e),this.each((function(){if(s)for(o=L(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==e&&"boolean"!==a||((r=wt(this))&&Q.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===e?"":Q.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+bt(wt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;L.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,L(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=L.map(i,(function(e){return null==e?"":e+""}))),(t=L.valHooks[this.type]||L.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=L.valHooks[i.type]||L.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Et,""):null==n?"":n:void 0}}),L.extend({valHooks:{option:{get:function(e){var t=L.find.attr(e,"value");return null!=t?t:bt(L.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=L(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=L.makeArray(t),a=i.length;a--;)((r=i[a]).selected=L.inArray(L.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),L.each(["radio","checkbox"],(function(){L.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=L.inArray(L(e).val(),t)>-1}},v.checkOn||(L.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in r;var _t=/^(?:focusinfocus|focusoutblur)$/,Lt=function(e){e.stopPropagation()};L.extend(L.event,{trigger:function(e,t,n,i){var o,a,s,u,c,d,h,l,p=[n||b],g=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=l=s=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!_t.test(g+L.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[L.expando]?e:new L.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:L.makeArray(t,[e]),h=L.event.special[g]||{},i||!h.trigger||!1!==h.trigger.apply(n,t))){if(!i&&!h.noBubble&&!m(n)){for(u=h.delegateType||g,_t.test(u+g)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(n.ownerDocument||b)&&p.push(s.defaultView||s.parentWindow||r)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)l=a,e.type=o>1?u:h.bindType||g,(d=(Q.get(a,"events")||Object.create(null))[e.type]&&Q.get(a,"handle"))&&d.apply(a,t),(d=c&&a[c])&&d.apply&&X(a)&&(e.result=d.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),t)||!X(n)||c&&y(n[g])&&!m(n)&&((s=n[c])&&(n[c]=null),L.event.triggered=g,e.isPropagationStopped()&&l.addEventListener(g,Lt),n[g](),e.isPropagationStopped()&&l.removeEventListener(g,Lt),L.event.triggered=void 0,s&&(n[c]=s)),e.result}},simulate:function(e,t,n){var r=L.extend(new L.Event,n,{type:e,isSimulated:!0});L.event.trigger(r,null,t)}}),L.fn.extend({trigger:function(e,t){return this.each((function(){L.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return L.event.trigger(e,t,n,!0)}}),v.focusin||L.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){L.event.simulate(t,e.target,L.event.fix(e))};L.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=Q.access(r,t);i||r.addEventListener(e,n,!0),Q.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=Q.access(r,t)-1;i?Q.access(r,t,i):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}}));var At=r.location,Ct={guid:Date.now()},St=/\?/;L.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||L.error("Invalid XML: "+(n?L.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Tt=/\[\]$/,kt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Pt(e,t,n,r){var i;if(Array.isArray(t))L.each(t,(function(t,i){n||Tt.test(e)?r(e,i):Pt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==E(t))r(e,t);else for(i in t)Pt(e+"["+i+"]",t[i],n,r)}L.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!L.isPlainObject(e))L.each(e,(function(){i(this.name,this.value)}));else for(n in e)Pt(n,e[n],t,i);return r.join("&")},L.fn.extend({serialize:function(){return L.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=L.prop(this,"elements");return e?L.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!L(this).is(":disabled")&&Nt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!ve.test(e))})).map((function(e,t){var n=L(this).val();return null==n?null:Array.isArray(n)?L.map(n,(function(e){return{name:t.name,value:e.replace(kt,"\r\n")}})):{name:t.name,value:n.replace(kt,"\r\n")}})).get()}});var Ft=/%20/g,Ot=/#.*$/,Rt=/([?&])_=[^&]*/,Gt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:GET|HEAD)$/,jt=/^\/\//,It={},Ut={},qt="*/".concat("*"),zt=b.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(j)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ht(e,t,n,r){var i={},o=e===Ut;function a(s){var u;return i[s]=!0,L.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function Wt(e,t){var n,r,i=L.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&L.extend(!0,e,r),e}zt.href=At.href,L.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":L.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,L.ajaxSettings),t):Wt(L.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,a,s,u,c,d,h,l,f=L.ajaxSetup({},t),p=f.context||f,g=f.context&&(p.nodeType||p.jquery)?L(p):L.event,v=L.Deferred(),y=L.Callbacks("once memory"),m=f.statusCode||{},w={},x={},E="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Gt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)_.always(e[_.status]);else for(t in e)m[t]=[m[t],e[t]];return this},abort:function(e){var t=e||E;return n&&n.abort(t),A(0,t),this}};if(v.promise(_),f.url=((e||f.url||At.href)+"").replace(jt,At.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(j)||[""],null==f.crossDomain){u=b.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=zt.protocol+"//"+zt.host!=u.protocol+"//"+u.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=L.param(f.data,f.traditional)),Ht(It,f,t,_),c)return _;for(h in(d=L.event&&f.global)&&0==L.active++&&L.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Mt.test(f.type),i=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ft,"+")):(l=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(St.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(Rt,"$1"),l=(St.test(i)?"&":"?")+"_="+Ct.guid+++l),f.url=i+l),f.ifModified&&(L.lastModified[i]&&_.setRequestHeader("If-Modified-Since",L.lastModified[i]),L.etag[i]&&_.setRequestHeader("If-None-Match",L.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&_.setRequestHeader("Content-Type",f.contentType),_.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+qt+"; q=0.01":""):f.accepts["*"]),f.headers)_.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(p,_,f)||c))return _.abort();if(E="abort",y.add(f.complete),_.done(f.success),_.fail(f.error),n=Ht(Ut,f,t,_)){if(_.readyState=1,d&&g.trigger("ajaxSend",[_,f]),c)return _;f.async&&f.timeout>0&&(s=r.setTimeout((function(){_.abort("timeout")}),f.timeout));try{c=!1,n.send(w,A)}catch(e){if(c)throw e;A(-1,e)}}else A(-1,"No Transport");function A(e,t,a,u){var h,l,b,w,x,E=t;c||(c=!0,s&&r.clearTimeout(s),n=void 0,o=u||"",_.readyState=e>0?4:0,h=e>=200&&e<300||304===e,a&&(w=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(f,_,a)),!h&&L.inArray("script",f.dataTypes)>-1&&L.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),w=function(e,t,n,r){var i,o,a,s,u,c={},d=e.dataTypes.slice();if(d[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=d.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=d.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],d.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(f,w,_,h),h?(f.ifModified&&((x=_.getResponseHeader("Last-Modified"))&&(L.lastModified[i]=x),(x=_.getResponseHeader("etag"))&&(L.etag[i]=x)),204===e||"HEAD"===f.type?E="nocontent":304===e?E="notmodified":(E=w.state,l=w.data,h=!(b=w.error))):(b=E,!e&&E||(E="error",e<0&&(e=0))),_.status=e,_.statusText=(t||E)+"",h?v.resolveWith(p,[l,E,_]):v.rejectWith(p,[_,E,b]),_.statusCode(m),m=void 0,d&&g.trigger(h?"ajaxSuccess":"ajaxError",[_,f,h?l:b]),y.fireWith(p,[_,E]),d&&(g.trigger("ajaxComplete",[_,f]),--L.active||L.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return L.get(e,t,n,"json")},getScript:function(e,t){return L.get(e,void 0,t,"script")}}),L.each(["get","post"],(function(e,t){L[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),L.ajax(L.extend({url:e,type:t,dataType:i,data:n,success:r},L.isPlainObject(e)&&e))}})),L.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),L._evalUrl=function(e,t,n){return L.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){L.globalEval(e,t,n)}})},L.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=L(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){L(this).wrapInner(e.call(this,t))})):this.each((function(){var t=L(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){L(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){L(this).replaceWith(this.childNodes)})),this}}),L.expr.pseudos.hidden=function(e){return!L.expr.pseudos.visible(e)},L.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},L.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Yt=L.ajaxSettings.xhr();v.cors=!!Yt&&"withCredentials"in Yt,v.ajax=Yt=!!Yt,L.ajaxTransport((function(e){var t,n;if(v.cors||Yt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),L.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),L.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return L.globalEval(e),e}}}),L.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),L.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=L("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var $t,Zt=[],Xt=/(=)\?(?=&|$)|\?\?/;L.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Zt.pop()||L.expando+"_"+Ct.guid++;return this[e]=!0,e}}),L.ajaxPrefilter("json jsonp",(function(e,t,n){var i,o,a,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+i):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||L.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){a=arguments},n.always((function(){void 0===o?L(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Zt.push(i)),a&&y(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=(($t=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$t.childNodes.length),L.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=_e([e],t,o),o&&o.length&&L(o).remove(),L.merge([],i.childNodes)));var r,i,o},L.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=bt(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&L.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(r?L("<div>").append(L.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},L.expr.pseudos.animated=function(e){return L.grep(L.timers,(function(t){return e===t.elem})).length},L.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c=L.css(e,"position"),d=L(e),h={};"static"===c&&(e.style.position="relative"),s=d.offset(),o=L.css(e,"top"),u=L.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=d.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),y(t)&&(t=t.call(e,n,L.extend({},s))),null!=t.top&&(h.top=t.top-s.top+a),null!=t.left&&(h.left=t.left-s.left+i),"using"in t?t.using.call(e,h):d.css(h)}},L.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){L.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===L.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===L.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=L(e).offset()).top+=L.css(e,"borderTopWidth",!0),i.left+=L.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-L.css(r,"marginTop",!0),left:t.left-i.left-L.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===L.css(e,"position");)e=e.offsetParent;return e||ae}))}}),L.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;L.fn[e]=function(r){return W(this,(function(e,r,i){var o;if(m(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),L.each(["top","left"],(function(e,t){L.cssHooks[t]=$e(v.pixelPosition,(function(e,n){if(n)return n=Ye(e,t),Ue.test(n)?L(e).position()[t]+"px":n}))})),L.each({Height:"height",Width:"width"},(function(e,t){L.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){L.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return W(this,(function(t,n,i){var o;return m(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?L.css(t,n,s):L.style(t,n,i,s)}),t,a?i:void 0,a)}}))})),L.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){L.fn[t]=function(e){return this.on(t,e)}})),L.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),L.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){L.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;L.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=s.call(arguments,2),i=function(){return e.apply(t||this,r.concat(s.call(arguments)))},i.guid=e.guid=e.guid||L.guid++,i},L.holdReady=function(e){e?L.readyWait++:L.ready(!0)},L.isArray=Array.isArray,L.parseJSON=JSON.parse,L.nodeName=D,L.isFunction=y,L.isWindow=m,L.camelCase=Z,L.type=E,L.now=Date.now,L.isNumeric=function(e){var t=L.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},L.trim=function(e){return null==e?"":(e+"").replace(Kt,"$1")},void 0===(n=function(){return L}.apply(t,[]))||(e.exports=n);var Qt=r.jQuery,Jt=r.$;return L.noConflict=function(e){return r.$===L&&(r.$=Jt),e&&r.jQuery===L&&(r.jQuery=Qt),L},void 0===i&&(r.jQuery=r.$=L),L}))},7554:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5227),s=o(n(8941)),u=n(4524),c=n(3291),d=1.5,h=function(e){function t(){var t=e.call(this)||this;return t.x=.5,t.y=.5,t.angle=0,t.ratio=1,t.minRatio=null,t.maxRatio=null,t.nextFrame=null,t.previousState=null,t.enabled=!0,t.previousState=t.getState(),t}return i(t,e),t.from=function(e){return(new t).setState(e)},t.prototype.enable=function(){return this.enabled=!0,this},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},t.prototype.hasState=function(e){return this.x===e.x&&this.y===e.y&&this.ratio===e.ratio&&this.angle===e.angle},t.prototype.getPreviousState=function(){var e=this.previousState;return e?{x:e.x,y:e.y,angle:e.angle,ratio:e.ratio}:null},t.prototype.getBoundedRatio=function(e){var t=e;return"number"==typeof this.minRatio&&(t=Math.max(t,this.minRatio)),"number"==typeof this.maxRatio&&(t=Math.min(t,this.maxRatio)),t},t.prototype.validateState=function(e){var t={};return"number"==typeof e.x&&(t.x=e.x),"number"==typeof e.y&&(t.y=e.y),"number"==typeof e.angle&&(t.angle=e.angle),"number"==typeof e.ratio&&(t.ratio=this.getBoundedRatio(e.ratio)),t},t.prototype.isAnimated=function(){return!!this.nextFrame},t.prototype.setState=function(e){if(!this.enabled)return this;this.previousState=this.getState();var t=this.validateState(e);return"number"==typeof t.x&&(this.x=t.x),"number"==typeof t.y&&(this.y=t.y),"number"==typeof t.angle&&(this.angle=t.angle),"number"==typeof t.ratio&&(this.ratio=t.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this},t.prototype.updateState=function(e){return this.setState(e(this.getState())),this},t.prototype.animate=function(e,t,n){var r=this;if(this.enabled){var i=Object.assign({},a.ANIMATE_DEFAULTS,t),o=this.validateState(e),c="function"==typeof i.easing?i.easing:s.default[i.easing],d=Date.now(),h=this.getState(),l=function(){var e=(Date.now()-d)/i.duration;if(e>=1)return r.nextFrame=null,r.setState(o),void(r.animationCallback&&(r.animationCallback.call(null),r.animationCallback=void 0));var t=c(e),n={};"number"==typeof o.x&&(n.x=h.x+(o.x-h.x)*t),"number"==typeof o.y&&(n.y=h.y+(o.y-h.y)*t),"number"==typeof o.angle&&(n.angle=h.angle+(o.angle-h.angle)*t),"number"==typeof o.ratio&&(n.ratio=h.ratio+(o.ratio-h.ratio)*t),r.setState(n),r.nextFrame=(0,u.requestFrame)(l)};this.nextFrame?((0,u.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,u.requestFrame)(l)):l(),this.animationCallback=n}},t.prototype.animatedZoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio/e});this.animate({ratio:this.ratio/(e.factor||d)},e)}else this.animate({ratio:this.ratio/d})},t.prototype.animatedUnzoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio*e});this.animate({ratio:this.ratio*(e.factor||d)},e)}else this.animate({ratio:this.ratio*d})},t.prototype.animatedReset=function(e){this.animate({x:.5,y:.5,ratio:1,angle:0},e)},t.prototype.copy=function(){return t.from(this.getState())},t}(c.TypedEventEmitter);t.default=h},3760:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getWheelDelta=t.getTouchCoords=t.getTouchesArray=t.getWheelCoords=t.getMouseCoords=t.getPosition=void 0;var a=n(3291);function s(e,t){var n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}function u(e,t){var n=o(o({},s(e,t)),{sigmaDefaultPrevented:!1,preventSigmaDefault:function(){n.sigmaDefaultPrevented=!0},original:e});return n}t.getPosition=s,t.getMouseCoords=u,t.getWheelCoords=function(e,t){return o(o({},u(e,t)),{delta:h(e)})};var c=2;function d(e){for(var t=[],n=0,r=Math.min(e.length,c);n<r;n++)t.push(e[n]);return t}function h(e){if(void 0!==e.deltaY)return-3*e.deltaY/360;if(void 0!==e.detail)return e.detail/-9;throw new Error("Captor: could not extract delta from event.")}t.getTouchesArray=d,t.getTouchCoords=function(e,t){return{touches:d(e.touches).map((function(e){return s(e,t)})),original:e}},t.getWheelDelta=h;var l=function(e){function t(t,n){var r=e.call(this)||this;return r.container=t,r.renderer=n,r}return i(t,e),t}(a.TypedEventEmitter);t.default=l},9886:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(3760)),c=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.enabled=!0,r.draggedEvents=0,r.downStartTime=null,r.lastMouseX=null,r.lastMouseY=null,r.isMouseDown=!1,r.isMoving=!1,r.movingTimeout=null,r.startCameraState=null,r.clicks=0,r.doubleClickTimeout=null,r.currentWheelDirection=0,r.handleClick=r.handleClick.bind(r),r.handleRightClick=r.handleRightClick.bind(r),r.handleDown=r.handleDown.bind(r),r.handleUp=r.handleUp.bind(r),r.handleMove=r.handleMove.bind(r),r.handleWheel=r.handleWheel.bind(r),r.handleOut=r.handleOut.bind(r),t.addEventListener("click",r.handleClick,!1),t.addEventListener("contextmenu",r.handleRightClick,!1),t.addEventListener("mousedown",r.handleDown,!1),t.addEventListener("wheel",r.handleWheel,!1),t.addEventListener("mouseout",r.handleOut,!1),document.addEventListener("mousemove",r.handleMove,!1),document.addEventListener("mouseup",r.handleUp,!1),r}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("click",this.handleClick),e.removeEventListener("contextmenu",this.handleRightClick),e.removeEventListener("mousedown",this.handleDown),e.removeEventListener("wheel",this.handleWheel),e.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},t.prototype.handleClick=function(e){var t=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(e);setTimeout((function(){t.clicks=0,t.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleRightClick=function(e){this.enabled&&this.emit("rightClick",(0,u.getMouseCoords)(e,this.container))},t.prototype.handleDoubleClick=function(e){if(this.enabled){e.preventDefault(),e.stopPropagation();var t=(0,u.getMouseCoords)(e,this.container);if(this.emit("doubleClick",t),!t.sigmaDefaultPrevented){var n=this.renderer.getCamera(),r=n.getBoundedRatio(n.getState().ratio/2.2);n.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(e,this.container),r),{easing:"quadraticInOut",duration:200})}}},t.prototype.handleDown=function(e){if(this.enabled){if(0===e.button){this.startCameraState=this.renderer.getCamera().getState();var t=(0,u.getPosition)(e,this.container),n=t.x,r=t.y;this.lastMouseX=n,this.lastMouseY=r,this.draggedEvents=0,this.downStartTime=Date.now(),this.isMouseDown=!0}this.emit("mousedown",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleUp=function(e){var t=this;if(this.enabled&&this.isMouseDown){var n=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var r=(0,u.getPosition)(e,this.container),i=r.x,o=r.y,a=n.getState(),s=n.getPreviousState()||{x:0,y:0};this.isMoving?n.animate({x:a.x+3*(a.x-s.x),y:a.y+3*(a.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===i&&this.lastMouseY===o||n.setState({x:a.x,y:a.y}),this.isMoving=!1,setTimeout((function(){t.draggedEvents=0,t.renderer.refresh()}),0),this.emit("mouseup",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t=this;if(this.enabled){var n=(0,u.getMouseCoords)(e,this.container);if(this.emit("mousemovebody",n),e.target===this.container&&this.emit("mousemove",n),!n.sigmaDefaultPrevented&&this.isMouseDown){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){t.movingTimeout=null,t.isMoving=!1}),100);var r=this.renderer.getCamera(),i=(0,u.getPosition)(e,this.container),o=i.x,a=i.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),c=this.renderer.viewportToFramedGraph({x:o,y:a}),d=s.x-c.x,h=s.y-c.y,l=r.getState(),f=l.x+d,p=l.y+h;r.setState({x:f,y:p}),this.lastMouseX=o,this.lastMouseY=a,e.preventDefault(),e.stopPropagation()}}},t.prototype.handleWheel=function(e){var t=this;if(this.enabled){e.preventDefault(),e.stopPropagation();var n=(0,u.getWheelDelta)(e);if(n){var r=(0,u.getWheelCoords)(e,this.container);if(this.emit("wheel",r),!r.sigmaDefaultPrevented){var i=n>0?1/1.7:1.7,o=this.renderer.getCamera(),a=o.getBoundedRatio(o.getState().ratio*i),s=n>0?1:-1,c=Date.now();this.currentWheelDirection===s&&this.lastWheelTriggerTime&&c-this.lastWheelTriggerTime<50||(o.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(e,this.container),a),{easing:"quadraticOut",duration:250},(function(){t.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=c)}}}},t.prototype.handleOut=function(){},t}(u.default);t.default=c},9311:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t},u=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var c=s(n(3760)),d=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.enabled=!0,r.isMoving=!1,r.hasMoved=!1,r.touchMode=0,r.startTouchesPositions=[],r.handleStart=r.handleStart.bind(r),r.handleLeave=r.handleLeave.bind(r),r.handleMove=r.handleMove.bind(r),t.addEventListener("touchstart",r.handleStart,!1),t.addEventListener("touchend",r.handleLeave,!1),t.addEventListener("touchcancel",r.handleLeave,!1),t.addEventListener("touchmove",r.handleMove,!1),r}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("touchstart",this.handleStart),e.removeEventListener("touchend",this.handleLeave),e.removeEventListener("touchcancel",this.handleLeave),e.removeEventListener("touchmove",this.handleMove)},t.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},t.prototype.dispatchRelatedMouseEvent=function(e,t,n,r){var i=n||t.touches[0],o=new MouseEvent(e,{clientX:i.clientX,clientY:i.clientY,altKey:t.altKey,ctrlKey:t.ctrlKey});o.isFakeSigmaMouseEvent=!0,(r||this.container).dispatchEvent(o)},t.prototype.handleStart=function(e){var t=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousedown",e);var n=(0,c.getTouchesArray)(e.touches);if(this.touchMode=n.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=n.map((function(e){return(0,c.getPosition)(e,t.container)})),this.lastTouches=n,this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var r=u(this.startTouchesPositions,2),i=r[0],o=i.x,a=i.y,s=r[1],d=s.x,h=s.y;this.startTouchesAngle=Math.atan2(h-a,d-o),this.startTouchesDistance=Math.sqrt(Math.pow(d-o,2)+Math.pow(h-a,2))}this.emit("touchdown",(0,c.getTouchCoords)(e,this.container))}},t.prototype.handleLeave=function(e){if(this.enabled){switch(e.preventDefault(),0===e.touches.length&&this.lastTouches&&this.lastTouches.length&&(this.dispatchRelatedMouseEvent("mouseup",e,this.lastTouches[0],document),this.hasMoved||this.dispatchRelatedMouseEvent("click",e,this.lastTouches[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===e.touches.length){this.handleStart(e),e.preventDefault();break}case 1:if(this.isMoving){var t=this.renderer.getCamera(),n=t.getState(),r=t.getPreviousState()||{x:0,y:0};t.animate({x:n.x+3*(n.x-r.x),y:n.y+3*(n.y-r.y)},{duration:200,easing:"quadraticOut"})}this.hasMoved=!1,this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,c.getTouchCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t,n=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousemove",e);var r=(0,c.getTouchesArray)(e.touches),i=r.map((function(e){return(0,c.getPosition)(e,n.container)}));if(this.lastTouches=r,this.lastTouchesPositions=i,this.hasMoved||(this.hasMoved=i.some((function(e,t){var r=n.startTouchesPositions[t];return e.x!==r.x||e.y!==r.y}))),this.hasMoved){this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){n.isMoving=!1}),200);var o=this.renderer.getCamera(),a=this.startCameraState;switch(this.touchMode){case 1:var s=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),d=s.x,h=s.y,l=this.renderer.viewportToFramedGraph(i[0]),f=l.x,p=l.y;o.setState({x:a.x+d-f,y:a.y+h-p});break;case 2:var g={},v=i[0],y=v.x,m=v.y,b=i[1],w=b.x,x=b.y,E=Math.atan2(x-m,w-y)-this.startTouchesAngle,_=Math.hypot(x-m,w-y)/this.startTouchesDistance,L=o.getBoundedRatio(a.ratio/_);g.ratio=L,g.angle=a.angle+E;var A=this.getDimensions(),C=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:a}),S=Math.min(A.width,A.height),T=S/A.width,k=L/S;p=m-S/2/(S/A.height),f=(t=u([(f=y-S/2/T)*Math.cos(-g.angle)-p*Math.sin(-g.angle),p*Math.cos(-g.angle)+f*Math.sin(-g.angle)],2))[0],p=t[1],g.x=C.x-f*k,g.y=C.y+p*k,o.setState(g)}this.emit("touchmove",(0,c.getTouchCoords)(e,this.container))}}},t}(c.default);t.default=d},8098:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.edgeLabelsToDisplayFromNodes=t.LabelGrid=void 0;var n=function(){function e(e,t){this.key=e,this.size=t}return e.compare=function(e,t){return e.size>t.size?-1:e.size<t.size||e.key>t.key?1:-1},e}(),r=function(){function e(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return e.prototype.resizeAndClear=function(e,t){this.width=e.width,this.height=e.height,this.cellSize=t,this.columns=Math.ceil(e.width/t),this.rows=Math.ceil(e.height/t),this.cells={}},e.prototype.getIndex=function(e){var t=Math.floor(e.x/this.cellSize);return Math.floor(e.y/this.cellSize)*this.columns+t},e.prototype.add=function(e,t,r){var i=new n(e,t),o=this.getIndex(r),a=this.cells[o];a||(a=[],this.cells[o]=a),a.push(i)},e.prototype.organize=function(){for(var e in this.cells)this.cells[e].sort(n.compare)},e.prototype.getLabelsToDisplay=function(e,t){var n=this.cellSize*this.cellSize,r=n/e/e*t/n,i=Math.ceil(r),o=[];for(var a in this.cells)for(var s=this.cells[a],u=0;u<Math.min(i,s.length);u++)o.push(s[u].key);return o},e}();t.LabelGrid=r,t.edgeLabelsToDisplayFromNodes=function(e){var t=e.graph,n=e.hoveredNode,r=e.highlightedNodes,i=e.displayedNodeLabels,o=[];return t.forEachEdge((function(e,t,a,s){(a===n||s===n||r.has(a)||r.has(s)||i.has(a)&&i.has(s))&&o.push(e)})),o}},1461:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.rectangleCollidesWithQuad=t.squareCollidesWithQuad=t.getCircumscribedAlignedRectangle=t.isRectangleAligned=void 0;var i=r(n(3796)),o=1,a=2,s=3,u=4,c=!1;function d(e){return e.x1===e.x2||e.y1===e.y2}function h(e){var t=Math.sqrt(Math.pow(e.x2-e.x1,2)+Math.pow(e.y2-e.y1,2)),n=(e.y1-e.y2)*e.height/t,r=(e.x2-e.x1)*e.height/t,i={x:e.x1,y:e.y1},o={x:e.x2,y:e.y2},a={x:e.x1+n,y:e.y1+r},s={x:e.x2+n,y:e.y2+r},u=Math.min(i.x,o.x,a.x,s.x),c=Math.max(i.x,o.x,a.x,s.x),d=Math.min(i.y,o.y,a.y,s.y);return{x1:u,y1:d,x2:c,y2:d,height:Math.max(i.y,o.y,a.y,s.y)-d}}function l(e,t,n,r,i,o,a){return e<r+o&&e+n>r&&t<i+a&&t+n>i}function f(e,t,n,r,i,o,a,s){return e<i+a&&e+n>i&&t<o+s&&t+r>o}function p(e,t,n,r,i,c){var d=e<n+i/2;return t<r+c/2?d?o:a:d?s:u}t.isRectangleAligned=d,t.getCircumscribedAlignedRectangle=h,t.squareCollidesWithQuad=l,t.rectangleCollidesWithQuad=f;var g=function(){function e(e){var t;void 0===e&&(e={}),this.containers=((t={})[5460]=[],t),this.cache=null,this.lastRectangle=null;var n=Math.pow(4,5);this.data=new Float32Array((4*n-1)/3*4),e.boundaries?this.resize(e.boundaries):this.resize({x:0,y:0,width:1,height:1})}return e.prototype.add=function(e,t,n,r){return function(e,t,n,r,i,o,a){for(var s=i-a,u=o-a,d=2*a,h=0,f=0;;){if(h>=5)return n[f]=n[f]||[],void n[f].push(r);var p=4*f+4,g=4*f+8,v=4*f+12,y=4*f+16,m=l(s,u,d,t[p+0],t[p+1],t[p+2],t[p+3]),b=l(s,u,d,t[g+0],t[g+1],t[g+2],t[g+3]),w=l(s,u,d,t[v+0],t[v+1],t[v+2],t[v+3]),x=l(s,u,d,t[y+0],t[y+1],t[y+2],t[y+3]),E=[m,b,w,x].reduce((function(e,t){return t?e+1:e}),0);if(0===E&&0===h)return n[5460].push(r),void(!c&&n[5460].length>=5&&(c=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===E)throw new Error("sigma/quadtree.insertNode: no collision (level: ".concat(h,", key: ").concat(r,", x: ").concat(i,", y: ").concat(o,", size: ").concat(a,")."));if(3===E)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: ".concat(h,", key: ").concat(r,", x: ").concat(i,", y: ").concat(o,", size: ").concat(a,")."));if(E>1)return n[f]=n[f]||[],void n[f].push(r);h++,m&&(f=p),b&&(f=g),w&&(f=v),x&&(f=y)}}(0,this.data,this.containers,e,t,n,r),this},e.prototype.resize=function(e){this.clear(),this.data[0]=e.x,this.data[1]=e.y,this.data[2]=e.width,this.data[3]=e.height,function(e,t){for(var n=[0,0];n.length;){var r=n.pop(),i=n.pop(),o=4*i+4,a=4*i+8,s=4*i+12,u=4*i+16,c=t[i+0],d=t[i+1],h=t[i+2]/2,l=t[i+3]/2;t[o+0]=c,t[o+1]=d,t[o+2]=h,t[o+3]=l,t[a+0]=c+h,t[a+1]=d,t[a+2]=h,t[a+3]=l,t[s+0]=c,t[s+1]=d+l,t[s+2]=h,t[s+3]=l,t[u+0]=c+h,t[u+1]=d+l,t[u+2]=h,t[u+3]=l,r<4&&(n.push(u,r+1),n.push(s,r+1),n.push(a,r+1),n.push(o,r+1))}}(0,this.data)},e.prototype.clear=function(){var e;return this.containers=((e={})[5460]=[],e),this},e.prototype.point=function(e,t){var n=this.containers[5460].slice(),r=0,o=0;do{this.containers[r]&&(0,i.default)(n,this.containers[r]),r=4*r+4*p(e,t,this.data[r+0],this.data[r+1],this.data[r+2],this.data[r+3]),o++}while(o<=5);return n},e.prototype.rectangle=function(e,t,n,r,o){var a=this.lastRectangle;return a&&e===a.x1&&n===a.x2&&t===a.y1&&r===a.y2&&o===a.height||(this.lastRectangle={x1:e,y1:t,x2:n,y2:r,height:o},d(this.lastRectangle)||(this.lastRectangle=h(this.lastRectangle)),this.cache=function(e,t,n,r,o,a,s){for(var u,c=[0,0],d=[];c.length;){var h=c.pop(),l=c.pop();if((u=n[l])&&(0,i.default)(d,u),!(h>=5)){var p=4*l+4,g=4*l+8,v=4*l+12,y=4*l+16,m=f(r,o,a,s,t[p+0],t[p+1],t[p+2],t[p+3]),b=f(r,o,a,s,t[g+0],t[g+1],t[g+2],t[g+3]),w=f(r,o,a,s,t[v+0],t[v+1],t[v+2],t[v+3]),x=f(r,o,a,s,t[y+0],t[y+1],t[y+2],t[y+3]);m&&c.push(p,h+1),b&&c.push(g,h+1),w&&c.push(v,h+1),x&&c.push(y,h+1)}}return d}(0,this.data,this.containers,e,t,Math.abs(e-n)||Math.abs(t-r),o),(0,i.default)(this.cache,this.containers[5460])),this.cache},e}();t.default=g},9026:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sigma=t.MouseCaptor=t.QuadTree=t.Camera=void 0;var i=r(n(248));t.Sigma=i.default;var o=r(n(7554));t.Camera=o.default;var a=r(n(1461));t.QuadTree=a.default;var s=r(n(9886));t.MouseCaptor=s.default,t.default=i.default},2294:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,i){var o=i.edgeLabelSize,a=i.edgeLabelFont,s=i.edgeLabelWeight,u=i.edgeLabelColor.attribute?t[i.edgeLabelColor.attribute]||i.edgeLabelColor.color||"#000":i.edgeLabelColor.color,c=t.label;if(c){e.fillStyle=u,e.font="".concat(s," ").concat(o,"px ").concat(a);var d,h,l=n.size,f=r.size,p=n.x,g=n.y,v=r.x,y=r.y,m=v-p,b=y-g,w=Math.sqrt(m*m+b*b);if(!(w<l+f)){d=((p+=m*l/w)+(v-=m*f/w))/2,h=((g+=b*l/w)+(y-=b*f/w))/2,m=v-p,b=y-g,w=Math.sqrt(m*m+b*b);var x,E=e.measureText(c).width;if(E>w){for(c+="…",E=e.measureText(c).width;E>w&&c.length>1;)c=c.slice(0,-2)+"…",E=e.measureText(c).width;if(c.length<4)return}x=m>0?b>0?Math.acos(m/w):Math.asin(b/w):b>0?Math.acos(m/w)+Math.PI:Math.asin(m/w)+Math.PI/2,e.save(),e.translate(d,h),e.rotate(x),e.fillText(c,-E/2,t.size/2+o),e.restore()}}}},4607:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(4577));t.default=function(e,t,n){var r=n.labelSize,o=n.labelFont,a=n.labelWeight;if(e.font="".concat(a," ").concat(r,"px ").concat(o),e.fillStyle="#FFF",e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=8,e.shadowColor="#000","string"==typeof t.label){var s=e.measureText(t.label).width,u=Math.round(s+5),c=Math.round(r+4),d=Math.max(t.size,r/2)+2,h=Math.asin(c/2/d),l=Math.sqrt(Math.abs(Math.pow(d,2)-Math.pow(c/2,2)));e.beginPath(),e.moveTo(t.x+l,t.y+c/2),e.lineTo(t.x+d+u,t.y+c/2),e.lineTo(t.x+d+u,t.y-c/2),e.lineTo(t.x+l,t.y-c/2),e.arc(t.x,t.y,d,h,-h),e.closePath(),e.fill()}else e.beginPath(),e.arc(t.x,t.y,t.size+2,0,2*Math.PI),e.closePath(),e.fill();e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=0,(0,i.default)(e,t,n)}},4577:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(t.label){var r=n.labelSize,i=n.labelFont,o=n.labelWeight,a=n.labelColor.attribute?t[n.labelColor.attribute]||n.labelColor.color||"#000":n.labelColor.color;e.fillStyle=a,e.font="".concat(o," ").concat(r,"px ").concat(i),e.fillText(t.label,t.x+t.size+3,t.y+r/3)}}},4917:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.createEdgeCompoundProgram=t.AbstractEdgeProgram=void 0;var o=function(e){function t(t,n,r,i,o){return e.call(this,t,n,r,i,o)||this}return i(t,e),t}(n(7973).AbstractProgram);t.AbstractEdgeProgram=o,t.createEdgeCompoundProgram=function(e){return function(){function t(t,n){this.programs=e.map((function(e){return new e(t,n)}))}return t.prototype.bufferData=function(){this.programs.forEach((function(e){return e.bufferData()}))},t.prototype.allocate=function(e){this.programs.forEach((function(t){return t.allocate(e)}))},t.prototype.bind=function(){},t.prototype.computeIndices=function(){this.programs.forEach((function(e){return e.computeIndices()}))},t.prototype.render=function(e){this.programs.forEach((function(t){t.bind(),t.bufferData(),t.render(e)}))},t.prototype.process=function(e,t,n,r,i){this.programs.forEach((function(o){return o.process(e,t,n,r,i)}))},t}()}},3533:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.createNodeCompoundProgram=t.AbstractNodeProgram=void 0;var o=function(e){function t(t,n,r,i,o){var a=e.call(this,t,n,r,i,o)||this;a.positionLocation=t.getAttribLocation(a.program,"a_position"),a.sizeLocation=t.getAttribLocation(a.program,"a_size"),a.colorLocation=t.getAttribLocation(a.program,"a_color");var s=t.getUniformLocation(a.program,"u_matrix");if(null===s)throw new Error("AbstractNodeProgram: error while getting matrixLocation");a.matrixLocation=s;var u=t.getUniformLocation(a.program,"u_ratio");if(null===u)throw new Error("AbstractNodeProgram: error while getting ratioLocation");a.ratioLocation=u;var c=t.getUniformLocation(a.program,"u_scale");if(null===c)throw new Error("AbstractNodeProgram: error while getting scaleLocation");return a.scaleLocation=c,a}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.sizeLocation),e.enableVertexAttribArray(this.colorLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.sizeLocation,1,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12)},t}(n(7973).AbstractProgram);t.AbstractNodeProgram=o,t.createNodeCompoundProgram=function(e){return function(){function t(t,n){this.programs=e.map((function(e){return new e(t,n)}))}return t.prototype.bufferData=function(){this.programs.forEach((function(e){return e.bufferData()}))},t.prototype.allocate=function(e){this.programs.forEach((function(t){return t.allocate(e)}))},t.prototype.bind=function(){},t.prototype.render=function(e){this.programs.forEach((function(t){t.bind(),t.bufferData(),t.render(e)}))},t.prototype.process=function(e,t,n){this.programs.forEach((function(r){return r.process(e,t,n)}))},t}()}},7973:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractProgram=void 0;var r=n(1538),i=function(){function e(e,t,n,i,o){this.array=new Float32Array,this.points=i,this.attributes=o,this.gl=e,this.vertexShaderSource=t,this.fragmentShaderSource=n;var a=e.createBuffer();if(null===a)throw new Error("AbstractProgram: error while creating the buffer");this.buffer=a,e.bindBuffer(e.ARRAY_BUFFER,this.buffer),this.vertexShader=(0,r.loadVertexShader)(e,this.vertexShaderSource),this.fragmentShader=(0,r.loadFragmentShader)(e,this.fragmentShaderSource),this.program=(0,r.loadProgram)(e,[this.vertexShader,this.fragmentShader])}return e.prototype.bufferData=function(){var e=this.gl;e.bufferData(e.ARRAY_BUFFER,this.array,e.DYNAMIC_DRAW)},e.prototype.allocate=function(e){this.array=new Float32Array(this.points*this.attributes*e)},e.prototype.hasNothingToRender=function(){return 0===this.array.length},e}();t.AbstractProgram=i},4638:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(4917),o=r(n(8747)),a=r(n(2874)),s=(0,i.createEdgeCompoundProgram)([a.default,o.default]);t.default=s},8747:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(5191)),u=o(n(7083)),c=function(e){function t(t){var n=e.call(this,t,s.default,u.default,3,9)||this;n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.normalLocation=t.getAttribLocation(n.program,"a_normal"),n.radiusLocation=t.getAttribLocation(n.program,"a_radius"),n.barycentricLocation=t.getAttribLocation(n.program,"a_barycentric");var r=t.getUniformLocation(n.program,"u_matrix");if(null===r)throw new Error("EdgeArrowHeadProgram: error while getting matrixLocation");n.matrixLocation=r;var i=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===i)throw new Error("EdgeArrowHeadProgram: error while getting sqrtZoomRatioLocation");n.sqrtZoomRatioLocation=i;var o=t.getUniformLocation(n.program,"u_correctionRatio");if(null===o)throw new Error("EdgeArrowHeadProgram: error while getting correctionRatioLocation");return n.correctionRatioLocation=o,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.radiusLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.barycentricLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.radiusLocation,1,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,16),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,9*Float32Array.BYTES_PER_ELEMENT,20),e.vertexAttribPointer(this.barycentricLocation,3,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,24)},t.prototype.computeIndices=function(){},t.prototype.process=function(e,t,n,r,i){if(r)for(var o=27*i,s=o+27;o<s;o++)this.array[o]=0;else{var u=n.size||1,c=t.size||1,d=e.x,h=e.y,l=t.x,f=t.y,p=(0,a.floatColor)(n.color),g=l-d,v=f-h,y=g*g+v*v,m=0,b=0;y&&(m=-v*(y=1/Math.sqrt(y))*u,b=g*y*u);var w=27*i,x=this.array;x[w++]=l,x[w++]=f,x[w++]=-m,x[w++]=-b,x[w++]=c,x[w++]=p,x[w++]=1,x[w++]=0,x[w++]=0,x[w++]=l,x[w++]=f,x[w++]=-m,x[w++]=-b,x[w++]=c,x[w++]=p,x[w++]=0,x[w++]=1,x[w++]=0,x[w++]=l,x[w++]=f,x[w++]=-m,x[w++]=-b,x[w++]=c,x[w++]=p,x[w++]=0,x[w++]=0,x[w]=1}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawArrays(t.TRIANGLES,0,this.array.length/9)}},t}(n(4917).AbstractEdgeProgram);t.default=c},2874:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4917),s=n(4524),u=o(n(8073)),c=o(n(4879)),d=function(e){function t(t){var n=e.call(this,t,u.default,c.default,4,6)||this,r=t.createBuffer();if(null===r)throw new Error("EdgeClampedProgram: error while getting resolutionLocation");n.indicesBuffer=r,n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.normalLocation=t.getAttribLocation(n.program,"a_normal"),n.radiusLocation=t.getAttribLocation(n.program,"a_radius");var i=t.getUniformLocation(n.program,"u_matrix");if(null===i)throw new Error("EdgeClampedProgram: error while getting matrixLocation");n.matrixLocation=i;var o=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===o)throw new Error("EdgeClampedProgram: error while getting cameraRatioLocation");n.sqrtZoomRatioLocation=o;var a=t.getUniformLocation(n.program,"u_correctionRatio");if(null===a)throw new Error("EdgeClampedProgram: error while getting viewportRatioLocation");return n.correctionRatioLocation=a,n.canUse32BitsIndices=(0,s.canUse32BitsIndices)(t),n.IndicesArray=n.canUse32BitsIndices?Uint32Array:Uint16Array,n.indicesArray=new n.IndicesArray,n.indicesType=n.canUse32BitsIndices?t.UNSIGNED_INT:t.UNSIGNED_SHORT,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.radiusLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,6*Float32Array.BYTES_PER_ELEMENT,16),e.vertexAttribPointer(this.radiusLocation,1,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,20)},t.prototype.process=function(e,t,n,r,i){if(r)for(var o=24*i,a=o+24;o<a;o++)this.array[o]=0;else{var u=n.size||1,c=e.x,d=e.y,h=t.x,l=t.y,f=t.size||1,p=(0,s.floatColor)(n.color),g=h-c,v=l-d,y=g*g+v*v,m=0,b=0;y&&(m=-v*(y=1/Math.sqrt(y))*u,b=g*y*u);var w=24*i,x=this.array;x[w++]=c,x[w++]=d,x[w++]=m,x[w++]=b,x[w++]=p,x[w++]=0,x[w++]=c,x[w++]=d,x[w++]=-m,x[w++]=-b,x[w++]=p,x[w++]=0,x[w++]=h,x[w++]=l,x[w++]=m,x[w++]=b,x[w++]=p,x[w++]=f,x[w++]=h,x[w++]=l,x[w++]=-m,x[w++]=-b,x[w++]=p,x[w]=-f}},t.prototype.computeIndices=function(){for(var e=this.array.length/6,t=e+e/2,n=new this.IndicesArray(t),r=0,i=0;r<e;r+=4)n[i++]=r,n[i++]=r+1,n[i++]=r+2,n[i++]=r+2,n[i++]=r+1,n[i++]=r+3;this.indicesArray=n},t.prototype.bufferData=function(){e.prototype.bufferData.call(this);var t=this.gl;t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indicesArray,t.STATIC_DRAW)},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawElements(t.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},t}(a.AbstractEdgeProgram);t.default=d},5857:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(372)),u=o(n(4879)),c=function(e){function t(t){var n=e.call(this,t,s.default,u.default,4,5)||this,r=t.createBuffer();if(null===r)throw new Error("EdgeProgram: error while creating indicesBuffer");n.indicesBuffer=r,n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.normalLocation=t.getAttribLocation(n.program,"a_normal");var i=t.getUniformLocation(n.program,"u_matrix");if(null===i)throw new Error("EdgeProgram: error while getting matrixLocation");n.matrixLocation=i;var o=t.getUniformLocation(n.program,"u_correctionRatio");if(null===o)throw new Error("EdgeProgram: error while getting correctionRatioLocation");n.correctionRatioLocation=o;var c=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===c)throw new Error("EdgeProgram: error while getting sqrtZoomRatioLocation");return n.sqrtZoomRatioLocation=c,n.canUse32BitsIndices=(0,a.canUse32BitsIndices)(t),n.IndicesArray=n.canUse32BitsIndices?Uint32Array:Uint16Array,n.indicesArray=new n.IndicesArray,n.indicesType=n.canUse32BitsIndices?t.UNSIGNED_INT:t.UNSIGNED_SHORT,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.colorLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,5*Float32Array.BYTES_PER_ELEMENT,16)},t.prototype.computeIndices=function(){for(var e=this.array.length/5,t=e+e/2,n=new this.IndicesArray(t),r=0,i=0;r<e;r+=4)n[i++]=r,n[i++]=r+1,n[i++]=r+2,n[i++]=r+2,n[i++]=r+1,n[i++]=r+3;this.indicesArray=n},t.prototype.bufferData=function(){e.prototype.bufferData.call(this);var t=this.gl;t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indicesArray,t.STATIC_DRAW)},t.prototype.process=function(e,t,n,r,i){if(r)for(var o=20*i,s=o+20;o<s;o++)this.array[o]=0;else{var u=n.size||1,c=e.x,d=e.y,h=t.x,l=t.y,f=(0,a.floatColor)(n.color),p=h-c,g=l-d,v=p*p+g*g,y=0,m=0;v&&(y=-g*(v=1/Math.sqrt(v))*u,m=p*v*u);var b=20*i,w=this.array;w[b++]=c,w[b++]=d,w[b++]=y,w[b++]=m,w[b++]=f,w[b++]=c,w[b++]=d,w[b++]=-y,w[b++]=-m,w[b++]=f,w[b++]=h,w[b++]=l,w[b++]=y,w[b++]=m,w[b++]=f,w[b++]=h,w[b++]=l,w[b++]=-y,w[b++]=-m,w[b]=f}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawElements(t.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},t}(n(4917).AbstractEdgeProgram);t.default=c},8037:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(146)),u=o(n(4546)),c=function(e){function t(t){var n=e.call(this,t,s.default,u.default,1,4)||this;return n.bind(),n}return i(t,e),t.prototype.process=function(e,t,n){var r=this.array,i=1*n*4;if(t)return r[i++]=0,r[i++]=0,r[i++]=0,void(r[i++]=0);var o=(0,a.floatColor)(e.color);r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i]=o},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniform1f(this.ratioLocation,1/Math.sqrt(e.ratio)),t.uniform1f(this.scaleLocation,e.scalingRatio),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.drawArrays(t.POINTS,0,this.array.length/4)}},t}(n(3533).AbstractNodeProgram);t.default=c},6038:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(3742)),u=o(n(6075)),c=n(7973),d=2*Math.PI/3,h=4*Math.PI/3,l=function(e){function t(t){var n=e.call(this,t,s.default,u.default,3,5)||this;n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.sizeLocation=t.getAttribLocation(n.program,"a_size"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.angleLocation=t.getAttribLocation(n.program,"a_angle");var r=t.getUniformLocation(n.program,"u_matrix");if(null===r)throw new Error("AbstractNodeProgram: error while getting matrixLocation");n.matrixLocation=r;var i=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===i)throw new Error("NodeProgram: error while getting sqrtZoomRatioLocation");n.sqrtZoomRatioLocation=i;var o=t.getUniformLocation(n.program,"u_correctionRatio");if(null===o)throw new Error("NodeProgram: error while getting correctionRatioLocation");return n.correctionRatioLocation=o,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.sizeLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.angleLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.sizeLocation,1,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12),e.vertexAttribPointer(this.angleLocation,1,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,16)},t.prototype.process=function(e,t,n){var r=this.array,i=3*n*5;if(t)for(var o=i+15;i<o;i++)r[i]=0;else{var s=(0,a.floatColor)(e.color);r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i++]=s,r[i++]=0,r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i++]=s,r[i++]=d,r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i++]=s,r[i]=h}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawArrays(t.TRIANGLES,0,this.array.length/5)}},t}(c.AbstractProgram);t.default=l},7083:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";e.exports=n})()},5191:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n  float adaptedWebGLNodeRadius = a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float adaptedWebGLArrowHeadHalfWidth = adaptedWebGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (adaptedWebGLNodeRadius * unitNormal.y)\n    + db * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y + adaptedWebGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y - adaptedWebGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-adaptedWebGLNodeRadius * unitNormal.x)\n    + db * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x + adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x - adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},8073:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},4879:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";e.exports=n})()},372:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the SQRT zoom ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n\n  // Finally, we adapt the edge thickness to the "SQRT rule" in sigma (so that\n  // items are not too big when zoomed in, and not too small when zoomed out).\n  // The exact computation should be `adapted = value * zoom / sqrt(zoom)`, but\n  // it\'s simpler like this:\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasing effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';e.exports=n})()},4546:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(transparent, v_color, t);\n}\n";e.exports=n})()},146:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_ratio;\nuniform float u_scale;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size * u_ratio * u_scale * 2.0;\n\n  v_border = (1.0 / u_ratio) * (0.5 / a_size);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},6075:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_diffVector) - v_radius;\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";e.exports=n})()},3742:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute float a_size;\nattribute float a_angle;\nattribute vec4 a_color;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\nconst float marginRatio = 1.05;\n\nvoid main() {\n  float size = a_size * u_correctionRatio * u_sqrtZoomRatio * 4.0;\n  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));\n  vec2 position = a_position + diffVector * marginRatio;\n  gl_Position = vec4(\n    (u_matrix * vec3(position, 1)).xy,\n    0,\n    1\n  );\n\n  v_border = u_correctionRatio * u_sqrtZoomRatio * u_sqrtZoomRatio;\n  v_diffVector = diffVector;\n  v_radius = size / 2.0 / marginRatio;\n\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},1538:(e,t)=>{"use strict";function n(e,t,n){var r="VERTEX"===e?t.VERTEX_SHADER:t.FRAGMENT_SHADER,i=t.createShader(r);if(null===i)throw new Error("loadShader: error while creating the shader");if(t.shaderSource(i,n),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS)){var o=t.getShaderInfoLog(i);throw t.deleteShader(i),new Error("loadShader: error while compiling the shader:\n".concat(o,"\n").concat(n))}return i}Object.defineProperty(t,"__esModule",{value:!0}),t.loadProgram=t.loadFragmentShader=t.loadVertexShader=void 0,t.loadVertexShader=function(e,t){return n("VERTEX",e,t)},t.loadFragmentShader=function(e,t){return n("FRAGMENT",e,t)},t.loadProgram=function(e,t){var n,r,i=e.createProgram();if(null===i)throw new Error("loadProgram: error while creating the program.");for(n=0,r=t.length;n<r;n++)e.attachShader(i,t[n]);if(e.linkProgram(i),!e.getProgramParameter(i,e.LINK_STATUS))throw e.deleteProgram(i),new Error("loadProgram: error while linking the program.");return i}},6482:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.resolveSettings=t.validateSettings=t.DEFAULT_EDGE_PROGRAM_CLASSES=t.DEFAULT_NODE_PROGRAM_CLASSES=t.DEFAULT_SETTINGS=void 0;var i=n(4524),o=r(n(4577)),a=r(n(4607)),s=r(n(2294)),u=r(n(8037)),c=r(n(5857)),d=r(n(4638));t.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,labelDensity:1,labelGridCellSize:100,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,minCameraRatio:null,maxCameraRatio:null,labelRenderer:o.default,hoverRenderer:a.default,edgeLabelRenderer:s.default,allowInvalidContainer:!1,nodeProgramClasses:{},nodeHoverProgramClasses:{},edgeProgramClasses:{}},t.DEFAULT_NODE_PROGRAM_CLASSES={circle:u.default},t.DEFAULT_EDGE_PROGRAM_CLASSES={arrow:d.default,line:c.default},t.validateSettings=function(e){if("number"!=typeof e.labelDensity||e.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");var t=e.minCameraRatio,n=e.maxCameraRatio;if("number"==typeof t&&"number"==typeof n&&n<t)throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.")},t.resolveSettings=function(e){var n=(0,i.assign)({},t.DEFAULT_SETTINGS,e);return n.nodeProgramClasses=(0,i.assign)({},t.DEFAULT_NODE_PROGRAM_CLASSES,n.nodeProgramClasses),n.edgeProgramClasses=(0,i.assign)({},t.DEFAULT_EDGE_PROGRAM_CLASSES,n.edgeProgramClasses),n}},248:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(3796)),c=s(n(7554)),d=s(n(9886)),h=s(n(1461)),l=n(3291),f=n(4524),p=n(8098),g=n(6482),v=s(n(9311)),y=n(5132),m=n(9822);function b(e,t,n){if(!n.hasOwnProperty("x")||!n.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(t,'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));return n.color||(n.color=e.defaultNodeColor),n.label||""===n.label||(n.label=null),void 0!==n.label&&null!==n.label?n.label=""+n.label:n.label=null,n.size||(n.size=2),n.hasOwnProperty("hidden")||(n.hidden=!1),n.hasOwnProperty("highlighted")||(n.highlighted=!1),n.hasOwnProperty("forceLabel")||(n.forceLabel=!1),n.type&&""!==n.type||(n.type=e.defaultNodeType),n.zIndex||(n.zIndex=0),n}function w(e,t,n){return n.color||(n.color=e.defaultEdgeColor),n.label||(n.label=""),n.size||(n.size=.5),n.hasOwnProperty("hidden")||(n.hidden=!1),n.hasOwnProperty("forceLabel")||(n.forceLabel=!1),n.type&&""!==n.type||(n.type=e.defaultEdgeType),n.zIndex||(n.zIndex=0),n}var x=function(e){function t(t,n,r){void 0===r&&(r={});var i=e.call(this)||this;if(i.elements={},i.canvasContexts={},i.webGLContexts={},i.activeListeners={},i.quadtree=new h.default,i.labelGrid=new p.LabelGrid,i.nodeDataCache={},i.edgeDataCache={},i.nodesWithForcedLabels=[],i.edgesWithForcedLabels=[],i.nodeExtent={x:[0,1],y:[0,1]},i.matrix=(0,y.identity)(),i.invMatrix=(0,y.identity)(),i.correctionRatio=1,i.customBBox=null,i.normalizationFunction=(0,f.createNormalizationFunction)({x:[0,1],y:[0,1]}),i.cameraSizeRatio=1,i.width=0,i.height=0,i.pixelRatio=(0,f.getPixelRatio)(),i.displayedLabels=new Set,i.highlightedNodes=new Set,i.hoveredNode=null,i.hoveredEdge=null,i.renderFrame=null,i.renderHighlightedNodesFrame=null,i.needToProcess=!1,i.needToSoftProcess=!1,i.checkEdgesEventsFrame=null,i.nodePrograms={},i.nodeHoverPrograms={},i.edgePrograms={},i.settings=(0,g.resolveSettings)(r),(0,g.validateSettings)(i.settings),(0,f.validateGraph)(t),!(n instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");for(var o in i.graph=t,i.container=n,i.createWebGLContext("edges",{preserveDrawingBuffer:!0}),i.createCanvasContext("edgeLabels"),i.createWebGLContext("nodes"),i.createCanvasContext("labels"),i.createCanvasContext("hovers"),i.createWebGLContext("hoverNodes"),i.createCanvasContext("mouse"),i.webGLContexts){var a=i.webGLContexts[o];a.blendFunc(a.ONE,a.ONE_MINUS_SRC_ALPHA),a.enable(a.BLEND)}for(var s in i.settings.nodeProgramClasses){var u=i.settings.nodeProgramClasses[s];i.nodePrograms[s]=new u(i.webGLContexts.nodes,i);var l=u;s in i.settings.nodeHoverProgramClasses&&(l=i.settings.nodeHoverProgramClasses[s]),i.nodeHoverPrograms[s]=new l(i.webGLContexts.hoverNodes,i)}for(var s in i.settings.edgeProgramClasses){var m=i.settings.edgeProgramClasses[s];i.edgePrograms[s]=new m(i.webGLContexts.edges,i)}return i.resize(),i.camera=new c.default,i.bindCameraHandlers(),i.mouseCaptor=new d.default(i.elements.mouse,i),i.touchCaptor=new v.default(i.elements.mouse,i),i.bindEventHandlers(),i.bindGraphHandlers(),i.handleSettingsUpdate(),i.process(),i.render(),i}return i(t,e),t.prototype.createCanvas=function(e){var t=(0,f.createElement)("canvas",{position:"absolute"},{class:"sigma-".concat(e)});return this.elements[e]=t,this.container.appendChild(t),t},t.prototype.createCanvasContext=function(e){var t=this.createCanvas(e);return this.canvasContexts[e]=t.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},t.prototype.createWebGLContext=function(e,t){var n,r=this.createCanvas(e),i=o({preserveDrawingBuffer:!1,antialias:!1},t||{});return(n=r.getContext("webgl2",i))||(n=r.getContext("webgl",i)),n||(n=r.getContext("experimental-webgl",i)),this.webGLContexts[e]=n,this},t.prototype.bindCameraHandlers=function(){var e=this;return this.activeListeners.camera=function(){e._scheduleRefresh()},this.camera.on("updated",this.activeListeners.camera),this},t.prototype.mouseIsOnNode=function(e,t,n){var r=e.x,i=e.y,o=t.x,a=t.y;return r>o-n&&r<o+n&&i>a-n&&i<a+n&&Math.sqrt(Math.pow(r-o,2)+Math.pow(i-a,2))<n},t.prototype.getQuadNodes=function(e){var t=this.viewportToFramedGraph(e);return this.quadtree.point(t.x,1-t.y)},t.prototype.getNodeAtPosition=function(e){for(var t=e.x,n=e.y,r=this.getQuadNodes(e),i=1/0,o=null,a=0,s=r.length;a<s;a++){var u=r[a],c=this.nodeDataCache[u],d=this.framedGraphToViewport(c),h=this.scaleSize(c.size);if(!c.hidden&&this.mouseIsOnNode(e,d,h)){var l=Math.sqrt(Math.pow(t-d.x,2)+Math.pow(n-d.y,2));l<i&&(i=l,o=u)}}return o},t.prototype.bindEventHandlers=function(){var e=this;this.activeListeners.handleResize=function(){e.needToSoftProcess=!0,e._scheduleRefresh()},window.addEventListener("resize",this.activeListeners.handleResize),this.activeListeners.handleMove=function(t){var n={event:t,preventSigmaDefault:function(){t.preventSigmaDefault()}},r=e.getNodeAtPosition(t);if(r&&e.hoveredNode!==r&&!e.nodeDataCache[r].hidden)return e.hoveredNode&&e.emit("leaveNode",o(o({},n),{node:e.hoveredNode})),e.hoveredNode=r,e.emit("enterNode",o(o({},n),{node:r})),void e.scheduleHighlightedNodesRender();if(e.hoveredNode){var i=e.nodeDataCache[e.hoveredNode],a=e.framedGraphToViewport(i),s=e.scaleSize(i.size);if(!e.mouseIsOnNode(t,a,s)){var u=e.hoveredNode;return e.hoveredNode=null,e.emit("leaveNode",o(o({},n),{node:u})),void e.scheduleHighlightedNodesRender()}}!0===e.settings.enableEdgeHoverEvents?e.checkEdgeHoverEvents(n):"debounce"===e.settings.enableEdgeHoverEvents&&(e.checkEdgesEventsFrame||(e.checkEdgesEventsFrame=(0,f.requestFrame)((function(){e.checkEdgeHoverEvents(n),e.checkEdgesEventsFrame=null}))))};var t=function(t){return function(n){var r={event:n,preventSigmaDefault:function(){n.preventSigmaDefault()}},i=n.original.isFakeSigmaMouseEvent?e.getNodeAtPosition(n):e.hoveredNode;if(i)return e.emit("".concat(t,"Node"),o(o({},r),{node:i}));if("wheel"===t?e.settings.enableEdgeWheelEvents:e.settings.enableEdgeClickEvents){var a=e.getEdgeAtPoint(n.x,n.y);if(a)return e.emit("".concat(t,"Edge"),o(o({},r),{edge:a}))}return e.emit("".concat(t,"Stage"),r)}};return this.activeListeners.handleClick=t("click"),this.activeListeners.handleRightClick=t("rightClick"),this.activeListeners.handleDoubleClick=t("doubleClick"),this.activeListeners.handleWheel=t("wheel"),this.activeListeners.handleDown=t("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},t.prototype.bindGraphHandlers=function(){var e=this,t=this.graph;return this.activeListeners.graphUpdate=function(){e.needToProcess=!0,e._scheduleRefresh()},this.activeListeners.softGraphUpdate=function(){e.needToSoftProcess=!0,e._scheduleRefresh()},this.activeListeners.dropNodeGraphUpdate=function(t){delete e.nodeDataCache[t.key],e.hoveredNode===t.key&&(e.hoveredNode=null),e.activeListeners.graphUpdate()},this.activeListeners.dropEdgeGraphUpdate=function(t){delete e.edgeDataCache[t.key],e.hoveredEdge===t.key&&(e.hoveredEdge=null),e.activeListeners.graphUpdate()},this.activeListeners.clearEdgesGraphUpdate=function(){e.edgeDataCache={},e.hoveredEdge=null,e.activeListeners.graphUpdate()},this.activeListeners.clearGraphUpdate=function(){e.nodeDataCache={},e.hoveredNode=null,e.activeListeners.clearEdgesGraphUpdate()},t.on("nodeAdded",this.activeListeners.graphUpdate),t.on("nodeDropped",this.activeListeners.dropNodeGraphUpdate),t.on("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),t.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgeAdded",this.activeListeners.graphUpdate),t.on("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),t.on("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),t.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),t.on("cleared",this.activeListeners.clearGraphUpdate),this},t.prototype.unbindGraphHandlers=function(){var e=this.graph;e.removeListener("nodeAdded",this.activeListeners.graphUpdate),e.removeListener("nodeDropped",this.activeListeners.dropNodeGraphUpdate),e.removeListener("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),e.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgeAdded",this.activeListeners.graphUpdate),e.removeListener("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),e.removeListener("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),e.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),e.removeListener("cleared",this.activeListeners.clearGraphUpdate)},t.prototype.checkEdgeHoverEvents=function(e){var t=this.hoveredNode?null:this.getEdgeAtPoint(e.event.x,e.event.y);return t!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",o(o({},e),{edge:this.hoveredEdge})),t&&this.emit("enterEdge",o(o({},e),{edge:t})),this.hoveredEdge=t),this},t.prototype.getEdgeAtPoint=function(e,t){var n,r,i=this,o=this.edgeDataCache,s=this.nodeDataCache;if(!(0,m.isPixelColored)(this.webGLContexts.edges,e*this.pixelRatio,t*this.pixelRatio))return null;var u=this.viewportToGraph({x:e,y:t}),c=u.x,d=u.y,h=0;if(this.graph.someEdge((function(e,t,n,r,a,u){var c=a.x,d=a.y,l=u.x,f=u.y;if(o[e].hidden||s[n].hidden||s[r].hidden)return!1;if(c!==l||d!==f){var p=Math.sqrt(Math.pow(l-c,2)+Math.pow(f-d,2)),g=i.graphToViewport({x:c,y:d}),v=g.x,y=g.y,m=i.graphToViewport({x:l,y:f}),b=m.x,w=m.y,x=Math.sqrt(Math.pow(b-v,2)+Math.pow(w-y,2));return h=p/x,!0}})),!h)return null;var l=this.graph.filterEdges((function(e,t,n,r,a,u){return!(o[e].hidden||s[n].hidden||s[r].hidden)&&(!!(0,m.doEdgeCollideWithPoint)(c,d,a.x,a.y,u.x,u.y,o[e].size*h/i.cameraSizeRatio)||void 0)}));if(0===l.length)return null;var f=l[l.length-1],p=-1/0;try{for(var g=a(l),v=g.next();!v.done;v=g.next()){var y=v.value,b=this.graph.getEdgeAttribute(y,"zIndex");b>=p&&(f=y,p=b)}}catch(e){n={error:e}}finally{try{v&&!v.done&&(r=g.return)&&r.call(g)}finally{if(n)throw n.error}}return f},t.prototype.process=function(e){var t=this;void 0===e&&(e=!1);var n=this.graph,r=this.settings,i=this.getDimensions(),o=[1/0,-1/0],a=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(i,r.labelGridCellSize),this.highlightedNodes=new Set,this.nodeExtent=(0,f.graphExtent)(n),this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[];var s=new c.default,u=(0,f.matrixFromCamera)(s.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,f.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var d={},h=n.nodes(),l=0,p=h.length;l<p;l++){var g=h[l],v=Object.assign({},n.getNodeAttributes(g));r.nodeReducer&&(v=r.nodeReducer(g,v)),d[(m=b(this.settings,g,v)).type]=(d[m.type]||0)+1,this.nodeDataCache[g]=m,this.normalizationFunction.applyTo(m),m.forceLabel&&this.nodesWithForcedLabels.push(g),this.settings.zIndex&&(m.zIndex<o[0]&&(o[0]=m.zIndex),m.zIndex>o[1]&&(o[1]=m.zIndex))}for(var y in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for node type "'.concat(y,'"!'));e||this.nodePrograms[y].allocate(d[y]||0),d[y]=0}for(this.settings.zIndex&&o[0]!==o[1]&&(h=(0,f.zIndexOrdering)(o,(function(e){return t.nodeDataCache[e].zIndex}),h)),l=0,p=h.length;l<p;l++){g=h[l];var m=this.nodeDataCache[g];this.quadtree.add(g,m.x,1-m.y,m.size/this.width),"string"!=typeof m.label||m.hidden||this.labelGrid.add(g,m.size,this.framedGraphToViewport(m,{matrix:u}));var x=this.nodePrograms[m.type];if(!x)throw new Error('Sigma: could not find a suitable program for node type "'.concat(m.type,'"!'));x.process(m,m.hidden,d[m.type]++),m.highlighted&&!m.hidden&&this.highlightedNodes.add(g)}this.labelGrid.organize();var E={},_=n.edges();for(l=0,p=_.length;l<p;l++){var L=_[l];v=Object.assign({},n.getEdgeAttributes(L)),r.edgeReducer&&(v=r.edgeReducer(L,v)),E[(m=w(this.settings,0,v)).type]=(E[m.type]||0)+1,this.edgeDataCache[L]=m,m.forceLabel&&!m.hidden&&this.edgesWithForcedLabels.push(L),this.settings.zIndex&&(m.zIndex<a[0]&&(a[0]=m.zIndex),m.zIndex>a[1]&&(a[1]=m.zIndex))}for(var y in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for edge type "'.concat(y,'"!'));e||this.edgePrograms[y].allocate(E[y]||0),E[y]=0}for(this.settings.zIndex&&a[0]!==a[1]&&(_=(0,f.zIndexOrdering)(a,(function(e){return t.edgeDataCache[e].zIndex}),_)),l=0,p=_.length;l<p;l++){L=_[l],m=this.edgeDataCache[L];var A=n.extremities(L),C=this.nodeDataCache[A[0]],S=this.nodeDataCache[A[1]],T=m.hidden||C.hidden||S.hidden;this.edgePrograms[m.type].process(C,S,m,T,E[m.type]++)}for(var y in this.edgePrograms){var k=this.edgePrograms[y];e||"function"!=typeof k.computeIndices||k.computeIndices()}return this},t.prototype.handleSettingsUpdate=function(){return this.camera.minRatio=this.settings.minCameraRatio,this.camera.maxRatio=this.settings.maxCameraRatio,this.camera.setState(this.camera.validateState(this.camera.getState())),this},t.prototype._refresh=function(){return this.needToProcess?this.process():this.needToSoftProcess&&this.process(!0),this.needToProcess=!1,this.needToSoftProcess=!1,this.render(),this},t.prototype._scheduleRefresh=function(){var e=this;return this.renderFrame||(this.renderFrame=(0,f.requestFrame)((function(){e._refresh(),e.renderFrame=null}))),this},t.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var e=this.camera.getState(),t=this.labelGrid.getLabelsToDisplay(e.ratio,this.settings.labelDensity);(0,u.default)(t,this.nodesWithForcedLabels),this.displayedLabels=new Set;for(var n=this.canvasContexts.labels,r=0,i=t.length;r<i;r++){var a=t[r],s=this.nodeDataCache[a];if(!this.displayedLabels.has(a)&&!s.hidden){var c=this.framedGraphToViewport(s),d=c.x,h=c.y,l=this.scaleSize(s.size);!s.forceLabel&&l<this.settings.labelRenderedSizeThreshold||d<-150||d>this.width+150||h<-50||h>this.height+50||(this.displayedLabels.add(a),this.settings.labelRenderer(n,o(o({key:a},s),{size:l,x:d,y:h}),this.settings))}}return this},t.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var e=this.canvasContexts.edgeLabels;e.clearRect(0,0,this.width,this.height);for(var t=(0,p.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedLabels,highlightedNodes:this.highlightedNodes}).concat(this.edgesWithForcedLabels),n=new Set,r=0,i=t.length;r<i;r++){var a=t[r],s=this.graph.extremities(a),u=this.nodeDataCache[s[0]],c=this.nodeDataCache[s[1]],d=this.edgeDataCache[a];n.has(a)||d.hidden||u.hidden||c.hidden||(this.settings.edgeLabelRenderer(e,o(o({key:a},d),{size:this.scaleSize(d.size)}),o(o(o({key:s[0]},u),this.framedGraphToViewport(u)),{size:this.scaleSize(u.size)}),o(o(o({key:s[1]},c),this.framedGraphToViewport(c)),{size:this.scaleSize(c.size)}),this.settings),n.add(a))}return this},t.prototype.renderHighlightedNodes=function(){var e=this,t=this.canvasContexts.hovers;t.clearRect(0,0,this.width,this.height);var n=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&n.push(this.hoveredNode),this.highlightedNodes.forEach((function(t){t!==e.hoveredNode&&n.push(t)})),n.forEach((function(n){return function(n){var r=e.nodeDataCache[n],i=e.framedGraphToViewport(r),a=i.x,s=i.y,u=e.scaleSize(r.size);e.settings.hoverRenderer(t,o(o({key:n},r),{size:u,x:a,y:s}),e.settings)}(n)}));var r={};for(var i in n.forEach((function(t){var n=e.nodeDataCache[t].type;r[n]=(r[n]||0)+1})),this.nodeHoverPrograms)this.nodeHoverPrograms[i].allocate(r[i]||0),r[i]=0;for(var i in n.forEach((function(t){var n=e.nodeDataCache[t];e.nodeHoverPrograms[n.type].process(n,n.hidden,r[n.type]++)})),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.nodeHoverPrograms){var a=this.nodeHoverPrograms[i];a.bind(),a.bufferData(),a.render({matrix:this.matrix,width:this.width,height:this.height,ratio:this.camera.ratio,correctionRatio:this.correctionRatio/this.camera.ratio,scalingRatio:this.pixelRatio})}},t.prototype.scheduleHighlightedNodesRender=function(){var e=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,f.requestFrame)((function(){e.renderHighlightedNodesFrame=null,e.renderHighlightedNodes(),e.renderEdgeLabels()})))},t.prototype.render=function(){var e=this;this.emit("beforeRender");var t=function(){return e.emit("afterRender"),e};if(this.renderFrame&&((0,f.cancelFrame)(this.renderFrame),this.renderFrame=null,this.needToProcess=!1,this.needToSoftProcess=!1),this.resize(),this.clear(),this.updateCachedValues(),!this.graph.order)return t();var n=this.mouseCaptor,r=this.camera.isAnimated()||n.isMoving||n.draggedEvents||n.currentWheelDirection,i=this.camera.getState(),o=this.getDimensions(),a=this.getGraphDimensions(),s=this.getSetting("stagePadding")||0;for(var u in this.matrix=(0,f.matrixFromCamera)(i,o,a,s),this.invMatrix=(0,f.matrixFromCamera)(i,o,a,s,!0),this.correctionRatio=(0,f.getMatrixImpact)(this.matrix,i,o),this.nodePrograms)(c=this.nodePrograms[u]).bind(),c.bufferData(),c.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio});if(!this.settings.hideEdgesOnMove||!r)for(var u in this.edgePrograms){var c;(c=this.edgePrograms[u]).bind(),c.bufferData(),c.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio})}return this.settings.hideLabelsOnMove&&r||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes()),t()},t.prototype.updateCachedValues=function(){var e=this.camera.getState().ratio;this.cameraSizeRatio=Math.sqrt(e)},t.prototype.getCamera=function(){return this.camera},t.prototype.getContainer=function(){return this.container},t.prototype.getGraph=function(){return this.graph},t.prototype.setGraph=function(e){e!==this.graph&&(this.unbindGraphHandlers(),this.nodeDataCache={},this.edgeDataCache={},this.displayedLabels.clear(),this.highlightedNodes.clear(),this.hoveredNode=null,this.hoveredEdge=null,this.nodesWithForcedLabels.length=0,this.edgesWithForcedLabels.length=0,null!==this.checkEdgesEventsFrame&&((0,f.cancelFrame)(this.checkEdgesEventsFrame),this.checkEdgesEventsFrame=null),this.graph=e,this.bindGraphHandlers(),this.process(),this.render())},t.prototype.getMouseCaptor=function(){return this.mouseCaptor},t.prototype.getTouchCaptor=function(){return this.touchCaptor},t.prototype.getDimensions=function(){return{width:this.width,height:this.height}},t.prototype.getGraphDimensions=function(){var e=this.customBBox||this.nodeExtent;return{width:e.x[1]-e.x[0]||1,height:e.y[1]-e.y[0]||1}},t.prototype.getNodeDisplayData=function(e){var t=this.nodeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getEdgeDisplayData=function(e){var t=this.edgeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getSettings=function(){return o({},this.settings)},t.prototype.getSetting=function(e){return this.settings[e]},t.prototype.setSetting=function(e,t){return this.settings[e]=t,(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.updateSetting=function(e,t){return this.settings[e]=t(this.settings[e]),(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.resize=function(){var e=this.width,t=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.pixelRatio=(0,f.getPixelRatio)(),0===this.width){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.width=1}if(0===this.height){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.height=1}if(e===this.width&&t===this.height)return this;for(var n in this.emit("resize"),this.elements){var r=this.elements[n];r.style.width=this.width+"px",r.style.height=this.height+"px"}for(var n in this.canvasContexts)this.elements[n].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[n].setAttribute("height",this.height*this.pixelRatio+"px"),1!==this.pixelRatio&&this.canvasContexts[n].scale(this.pixelRatio,this.pixelRatio);for(var n in this.webGLContexts)this.elements[n].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[n].setAttribute("height",this.height*this.pixelRatio+"px"),this.webGLContexts[n].viewport(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio);return this},t.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},t.prototype.refresh=function(){return this.needToProcess=!0,this._refresh(),this},t.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.getViewportZoomedState=function(e,t){var n=this.camera.getState(),r=n.ratio,i=n.angle,o=n.x,a=n.y,s=t/r,u={x:this.width/2,y:this.height/2},c=this.viewportToFramedGraph(e),d=this.viewportToFramedGraph(u);return{angle:i,x:(c.x-d.x)*(1-s)+o,y:(c.y-d.y)*(1-s)+a,ratio:t}},t.prototype.viewRectangle=function(){var e=0*this.width/8,t=0*this.height/8,n=this.viewportToFramedGraph({x:0-e,y:0-t}),r=this.viewportToFramedGraph({x:this.width+e,y:0-t}),i=this.viewportToFramedGraph({x:0,y:this.height+t});return{x1:n.x,y1:n.y,x2:r.x,y2:r.y,height:r.y-i.y}},t.prototype.framedGraphToViewport=function(e,t){void 0===t&&(t={});var n=!!t.cameraState||!!t.viewportDimensions||!!t.graphDimensions,r=t.matrix?t.matrix:n?(0,f.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0):this.matrix,i=(0,y.multiplyVec2)(r,e);return{x:(1+i.x)*this.width/2,y:(1-i.y)*this.height/2}},t.prototype.viewportToFramedGraph=function(e,t){void 0===t&&(t={});var n=!!t.cameraState||!!t.viewportDimensions||!t.graphDimensions,r=t.matrix?t.matrix:n?(0,f.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,i=(0,y.multiplyVec2)(r,{x:e.x/this.width*2-1,y:1-e.y/this.height*2});return isNaN(i.x)&&(i.x=0),isNaN(i.y)&&(i.y=0),i},t.prototype.viewportToGraph=function(e,t){return void 0===t&&(t={}),this.normalizationFunction.inverse(this.viewportToFramedGraph(e,t))},t.prototype.graphToViewport=function(e,t){return void 0===t&&(t={}),this.framedGraphToViewport(this.normalizationFunction(e),t)},t.prototype.getBBox=function(){return(0,f.graphExtent)(this.graph)},t.prototype.getCustomBBox=function(){return this.customBBox},t.prototype.setCustomBBox=function(e){return this.customBBox=e,this._scheduleRefresh(),this},t.prototype.kill=function(){this.emit("kill"),this.removeAllListeners(),this.camera.removeListener("updated",this.activeListeners.camera),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),this.unbindGraphHandlers(),this.quadtree=new h.default,this.nodeDataCache={},this.edgeDataCache={},this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[],this.highlightedNodes.clear(),this.renderFrame&&((0,f.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,f.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var e=this.container;e.firstChild;)e.removeChild(e.firstChild)},t.prototype.scaleSize=function(e){return e/this.cameraSizeRatio},t.prototype.getCanvases=function(){return o({},this.elements)},t}(l.TypedEventEmitter);t.default=x},3291:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.TypedEventEmitter=void 0;var o=function(e){function t(){var t=e.call(this)||this;return t.rawEmitter=t,t}return i(t,e),t}(n(7187).EventEmitter);t.TypedEventEmitter=o},5227:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.animateNodes=t.ANIMATE_DEFAULTS=void 0;var i=n(4524),o=r(n(8941));t.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},t.animateNodes=function(e,n,r,a){var s=Object.assign({},t.ANIMATE_DEFAULTS,r),u="function"==typeof s.easing?s.easing:o.default[s.easing],c=Date.now(),d={};for(var h in n){var l=n[h];for(var f in d[h]={},l)d[h][f]=e.getNodeAttribute(h,f)}var p=null,g=function(){p=null;var t=(Date.now()-c)/s.duration;if(t>=1){for(var r in n){var o=n[r];for(var h in o)e.setNodeAttribute(r,h,o[h])}"function"==typeof a&&a()}else{for(var r in t=u(t),n){o=n[r];var l=d[r];for(var h in o)e.setNodeAttribute(r,h,o[h]*t+l[h]*(1-t))}p=(0,i.requestFrame)(g)}};return g(),function(){p&&(0,i.cancelFrame)(p)}}},8109:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HTML_COLORS=void 0,t.HTML_COLORS={black:"#000000",silver:"#C0C0C0",gray:"#808080",grey:"#808080",white:"#FFFFFF",maroon:"#800000",red:"#FF0000",purple:"#800080",fuchsia:"#FF00FF",green:"#008000",lime:"#00FF00",olive:"#808000",yellow:"#FFFF00",navy:"#000080",blue:"#0000FF",teal:"#008080",aqua:"#00FFFF",darkblue:"#00008B",mediumblue:"#0000CD",darkgreen:"#006400",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",springgreen:"#00FF7F",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",rebeccapurple:"#663399",mediumaquamarine:"#66CDAA",dimgray:"#696969",dimgrey:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",slategrey:"#708090",lightslategray:"#778899",lightslategrey:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370DB",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",palevioletred:"#DB7093",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",lightyellow:"#FFFFE0",ivory:"#FFFFF0"}},8941:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicInOut=t.cubicOut=t.cubicIn=t.quadraticInOut=t.quadraticOut=t.quadraticIn=t.linear=void 0,t.linear=function(e){return e},t.quadraticIn=function(e){return e*e},t.quadraticOut=function(e){return e*(2-e)},t.quadraticInOut=function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)},t.cubicIn=function(e){return e*e*e},t.cubicOut=function(e){return--e*e*e+1},t.cubicInOut=function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)};var n={linear:t.linear,quadraticIn:t.quadraticIn,quadraticOut:t.quadraticOut,quadraticInOut:t.quadraticInOut,cubicIn:t.cubicIn,cubicOut:t.cubicOut,cubicInOut:t.cubicInOut};t.default=n},9822:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.doEdgeCollideWithPoint=t.isPixelColored=void 0,t.isPixelColored=function(e,t,n){var r=new Uint8Array(4);return e.readPixels(t,e.drawingBufferHeight-n,1,1,e.RGBA,e.UNSIGNED_BYTE,r),r[3]>0},t.doEdgeCollideWithPoint=function(e,t,n,r,i,o,a){return!(e<n-a&&e<i-a||t<r-a&&t<o-a||e>n+a&&e>i+a||t>r+a&&t>o+a||!(Math.abs((i-n)*(r-t)-(n-e)*(o-r))/Math.sqrt(Math.pow(i-n,2)+Math.pow(o-r,2))<a/2))}},4524:function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.validateGraph=t.canUse32BitsIndices=t.extractPixel=t.getMatrixImpact=t.matrixFromCamera=t.getCorrectionRatio=t.floatColor=t.floatArrayColor=t.parseColor=t.zIndexOrdering=t.createNormalizationFunction=t.graphExtent=t.getPixelRatio=t.createElement=t.cancelFrame=t.requestFrame=t.assignDeep=t.assign=t.isPlainObject=void 0;var o=i(n(6186)),a=n(5132),s=n(8109);function u(e){return"object"==typeof e&&null!==e&&e.constructor===Object}t.isPlainObject=u,t.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e=e||{};for(var r=0,i=t.length;r<i;r++){var o=t[r];o&&Object.assign(e,o)}return e},t.assignDeep=function e(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];t=t||{};for(var i=0,o=n.length;i<o;i++){var a=n[i];if(a)for(var s in a)u(a[s])?t[s]=e(t[s],a[s]):t[s]=a[s]}return t},t.requestFrame="undefined"!=typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,0)},t.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:function(e){return clearTimeout(e)},t.createElement=function(e,t,n){var r=document.createElement(e);if(t)for(var i in t)r.style[i]=t[i];if(n)for(var i in n)r.setAttribute(i,n[i]);return r},t.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},t.graphExtent=function(e){if(!e.order)return{x:[0,1],y:[0,1]};var t=1/0,n=-1/0,r=1/0,i=-1/0;return e.forEachNode((function(e,o){var a=o.x,s=o.y;a<t&&(t=a),a>n&&(n=a),s<r&&(r=s),s>i&&(i=s)})),{x:[t,n],y:[r,i]}},t.createNormalizationFunction=function(e){var t=r(e.x,2),n=t[0],i=t[1],o=r(e.y,2),a=o[0],s=o[1],u=Math.max(i-n,s-a),c=(i+n)/2,d=(s+a)/2;(0===u||Math.abs(u)===1/0||isNaN(u))&&(u=1),isNaN(c)&&(c=0),isNaN(d)&&(d=0);var h=function(e){return{x:.5+(e.x-c)/u,y:.5+(e.y-d)/u}};return h.applyTo=function(e){e.x=.5+(e.x-c)/u,e.y=.5+(e.y-d)/u},h.inverse=function(e){return{x:c+u*(e.x-.5),y:d+u*(e.y-.5)}},h.ratio=u,h},t.zIndexOrdering=function(e,t,n){return n.sort((function(e,n){var r=t(e)||0,i=t(n)||0;return r<i?-1:r>i?1:0}))};var c=new Int8Array(4),d=new Int32Array(c.buffer,0,1),h=new Float32Array(c.buffer,0,1),l=/^\s*rgba?\s*\(/,f=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function p(e){var t=0,n=0,r=0,i=1;if("#"===e[0])4===e.length?(t=parseInt(e.charAt(1)+e.charAt(1),16),n=parseInt(e.charAt(2)+e.charAt(2),16),r=parseInt(e.charAt(3)+e.charAt(3),16)):(t=parseInt(e.charAt(1)+e.charAt(2),16),n=parseInt(e.charAt(3)+e.charAt(4),16),r=parseInt(e.charAt(5)+e.charAt(6),16)),9===e.length&&(i=parseInt(e.charAt(7)+e.charAt(8),16)/255);else if(l.test(e)){var o=e.match(f);o&&(t=+o[1],n=+o[2],r=+o[3],o[4]&&(i=+o[4]))}return{r:t,g:n,b:r,a:i}}t.parseColor=p;var g={};for(var v in s.HTML_COLORS)g[v]=y(s.HTML_COLORS[v]),g[s.HTML_COLORS[v]]=g[v];function y(e){if(void 0!==g[e])return g[e];var t=p(e),n=t.r,r=t.g,i=t.b,o=t.a;o=255*o|0,d[0]=4278190079&(o<<24|i<<16|r<<8|n);var a=h[0];return g[e]=a,a}function m(e,t){var n=e.height/e.width,r=t.height/t.width;return n<1&&r>1||n>1&&r<1?1:Math.min(Math.max(r,1/r),Math.max(1/n,n))}t.floatArrayColor=function(e){var t=p(e=s.HTML_COLORS[e]||e),n=t.r,r=t.g,i=t.b,o=t.a;return new Float32Array([n/255,r/255,i/255,o])},t.floatColor=y,t.getCorrectionRatio=m,t.matrixFromCamera=function(e,t,n,r,i){var o=e.angle,s=e.ratio,u=e.x,c=e.y,d=t.width,h=t.height,l=(0,a.identity)(),f=Math.min(d,h)-2*r,p=m(t,n);return i?((0,a.multiply)(l,(0,a.translate)((0,a.identity)(),u,c)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),s)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),d/f/2/p,h/f/2/p))):((0,a.multiply)(l,(0,a.scale)((0,a.identity)(),f/d*2*p,f/h*2*p)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),-o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),1/s)),(0,a.multiply)(l,(0,a.translate)((0,a.identity)(),-u,-c))),l},t.getMatrixImpact=function(e,t,n){var r=(0,a.multiplyVec2)(e,{x:Math.cos(t.angle),y:Math.sin(t.angle)},0),i=r.x,o=r.y;return 1/Math.sqrt(Math.pow(i,2)+Math.pow(o,2))/n.width},t.extractPixel=function(e,t,n,r){var i=r||new Uint8Array(4);return e.readPixels(t,n,1,1,e.RGBA,e.UNSIGNED_BYTE,i),i},t.canUse32BitsIndices=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||!!e.getExtension("OES_element_index_uint")},t.validateGraph=function(e){if(!(0,o.default)(e))throw new Error("Sigma: invalid graph instance.");e.forEachNode((function(e,t){if(!Number.isFinite(t.x)||!Number.isFinite(t.y))throw new Error("Sigma: Coordinates of node ".concat(e," are invalid. A node must have a numeric 'x' and 'y' attribute."))}))}},5132:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiplyVec2=t.multiply=t.translate=t.rotate=t.scale=t.identity=void 0,t.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},t.scale=function(e,t,n){return e[0]=t,e[4]="number"==typeof n?n:t,e},t.rotate=function(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[3]=-n,e[4]=r,e},t.translate=function(e,t,n){return e[6]=t,e[7]=n,e},t.multiply=function(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],d=e[8],h=t[0],l=t[1],f=t[2],p=t[3],g=t[4],v=t[5],y=t[6],m=t[7],b=t[8];return e[0]=h*n+l*o+f*u,e[1]=h*r+l*a+f*c,e[2]=h*i+l*s+f*d,e[3]=p*n+g*o+v*u,e[4]=p*r+g*a+v*c,e[5]=p*i+g*s+v*d,e[6]=y*n+m*o+b*u,e[7]=y*r+m*a+b*c,e[8]=y*i+m*s+b*d,e},t.multiplyVec2=function(e,t,n){void 0===n&&(n=1);var r=e[0],i=e[1],o=e[3],a=e[4],s=e[6],u=e[7],c=t.x,d=t.y;return{x:c*r+d*o+s*n,y:c*i+d*a+u*n}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.r(r),n.d(r,{SigmaGraphCreator:()=>f});var e=n(2698),t=n(9026),i=n.n(t);const o=({url:e,options:t,values:n})=>fetch(((e,t)=>void 0!==t?`${window.origin}${e}?from=${t[0]}&to=${t[1]}`:`${window.origin}${e}`)(e,n),t);var a=n(6038);const s="#808080",u={allowInvalidContainer:!0,enableEdgeClickEvents:!0,renderLabels:!1,enableEdgeHoverEvents:!0,nodeProgramClasses:{base:n.n(a)()}},c={type:"arrow",size:2,color:s};var d=n(1687),h=n(9755),l=n.n(h);class f{constructor(t){this.sigmaContainer=t.querySelector("#sigma-container"),this.maxTrainLength=0,this.enableNodeHover=!1,this.state={},this.nodesForGivenTrainId=new Map,this.subGraph=new e.DirectedGraph,this.graph=new e.DirectedGraph,this.getInitGraph(this.graph);var n=this;l()("#node-enable").on("change",(function(){n.enableNodeHover=l()("#node-enable").is(":checked")})),l()("#route-input").on("change",(function(){n.processRouteID()})),l()("#Scaling-input").on("change",(function(){n.destroySigmaGraph(),n.subGraphRouteIds=new Set,n.inputScaling=parseInt(l()("#Scaling-input").val()),n.createSubGraph(),n.processRouteID()})),l()("#search").on("input","#search-input, #neighbor-input",(function(){n.processInput(),n.validateInputTrainId()&&(n.createSubGraph(),n.createRouteSuggestions())}))}processRouteID(){this.inputRouteID=l()("#route-input").val(),"null"!=this.inputRouteID?this.highlightRoute(this.subGraph,parseInt(this.inputRouteID)):(this.state.selectedNodes=void 0,this.renderer.refresh())}processInput(){l()("#route-input").empty(),l()("#route-input").append('<option value="null">--- Select RouteID ---</option>'),""!==l()("#search-input").val()?(this.destroySigmaGraph(),this.state.selectedNodes=void 0,this.subGraphRouteIds=new Set,this.maxTrainLength=0,this.inputTrainID=parseInt(l()("#search-input").val()),this.inputNeighbor=l()("#neighbor-input").val(),this.inputScaling=parseInt(l()("#Scaling-input").val()),l()("#output").html(this.inputNeighbor),this.validateInputTrainId()?(l()("#route-row").show(),l()("#search-input").removeClass("has-error"),l()("#warning").hide()):(l()("#route-row").hide(),l()("#search-input").addClass("has-error"),l()("#warning").show())):(l()("#route-row").hide(),l()("#search-input").removeClass("has-error"),l()("#warning").hide(),this.inputTrainID=void 0)}validateInputTrainId(){return this.nodesForGivenTrainId.has(this.inputTrainID)}getRelevantTrainIds(){let e=new Set;e.add(this.inputTrainID);for(let t=0;t<this.inputNeighbor;t++)e=new Set([...e,...this.getNeighborTrainIds(e)]);return e}getNeighborTrainIds(e){let t=new Set;return e.forEach((e=>{this.nodesForGivenTrainId.get(e).forEach((e=>{this.graph.forEachNeighbor(e,(n=>{this.graph.getNodeAttribute(e,"t")!=this.graph.getNodeAttribute(n,"t")&&t.add(this.graph.getNodeAttribute(n,"t"))}))}))})),t}getRelevantNodes(e){let t=new Set;return e.forEach((e=>{const n=this.nodesForGivenTrainId.get(e);this.maxTrainLength=this.maxTrainLength<n.length?n.length:this.maxTrainLength,n.forEach((e=>{const n=this.graph.getNodeAttribute(e,"r");this.intializeRouteInfo(n,e),t.add(e)}))})),t}intializeRouteInfo(e,t){this.subGraphRouteIds.add(e),void 0===this.nodesForGivenRouteId.get(e)?this.nodesForGivenRouteId.set(e,[t]):this.nodesForGivenRouteId.get(e).push(t)}createRouteSuggestions(){this.subGraphRouteIds.forEach((e=>{l()("#route-input").append('<option value="'+e+'">'+e+"</option>")}))}createSubGraph(){let e=this.getRelevantTrainIds();const t=e.size;e=[...e].sort(((e,t)=>e-t)),this.nodesForGivenRouteId=new Map,this.subGraph=(0,d.subgraph)(this.graph,this.getRelevantNodes(e)),this.subGraphRouteIds=[...this.subGraphRouteIds].sort(((e,t)=>e-t)),this.setGraphAttributes(this.subGraph,t,this.inputScaling),this.renderer=new(i())(this.subGraph,this.sigmaContainer,u),this.bindRendererEvents(this.subGraph)}setGraphAttributes(e,t,n){this.setNodeAttributes(e,t,n),this.setEdgeAttributes(e)}setNodeAttributes(e,t,n){let r=null,i=this.maxTrainLength/t,o=0,a=-1;e.forEachNode((t=>{const s=e.getNodeAttribute(t,"t"),u="Train:"+s+" Route:"+e.getNodeAttribute(t,"r");r!=s?(o=0,a++):o++,r=s,e.setNodeAttribute(t,"x",500*o*(n/10)).setNodeAttribute(t,"y",500*a*i).setNodeAttribute(t,"label",u).setNodeAttribute(t,"color","#000000").setNodeAttribute(t,"size",2).setNodeAttribute(t,"type","base")}))}setEdgeAttributes(e){e.forEachEdge((t=>{this.edgeAttributes(e,t)}))}isRouteEdge(e,t){const n=e.source(t),r=e.target(t);return e.getNodeAttribute(n,"t")!==e.getNodeAttribute(r,"t")}edgeAttributes(e,t){e.mergeEdgeAttributes(t,c)}bindRendererEvents(e){this.invertEdge(e),this.highlightHoveredEdge(e),this.highlightHoveredNode(e)}resizeSigmaGraph(){void 0!==this.renderer?this.renderer.refresh():console.log("graph doesn't exist!")}destroySigmaGraph(){void 0!==this.renderer&&(this.renderer.clear(),this.renderer.kill())}setHoveredNode(e,t){t&&this.enableNodeHover?(this.state.hoveredNode=t,this.state.hoveredNeighbors=new Set(e.neighbors(t))):(this.state.hoveredNode=void 0,this.state.hoveredNeighbors=void 0)}rendererReducer(e){this.rendererNodeReducer(e),this.rendererEdgeReducer(e)}rendererNodeReducer(e,t){this.renderer.setSetting("nodeReducer",((t,n)=>{const r=Object.assign({},n);return this.state.hoveredNeighbors&&!this.state.hoveredNeighbors.has(t)&&this.state.hoveredNode!==t&&(r.label="",r.color="#f6f6f6"),!this.state.selectedNodes||this.state.selectedNodes.has(t)&&this.stateEdgeValidation(e,t)?this.state.selectedNodes&&this.state.selectedNodes.has(t)&&(r.highlighted=!0):(r.label=null,r.color="#f6f6f6"),r}))}stateEdgeValidation(e,t){var n;let r=!1;return null===(n=this.state.selectedNodes)||void 0===n||n.forEach((n=>{e.areNeighbors(t,n)&&(r=!0)})),r}rendererEdgeReducer(e){this.renderer.setSetting("edgeReducer",((t,n)=>{const r=Object.assign({},n);return this.state.hoveredNode&&!e.hasExtremity(t,this.state.hoveredNode)&&(r.hidden=!0),!this.state.selectedNodes||this.state.selectedNodes.has(e.source(t))&&this.state.selectedNodes.has(e.target(t))||(r.hidden=!0),r}))}highlightRoute(e,t){this.state.selectedNodes=new Set(this.nodesForGivenRouteId.get(t)),this.rendererNodeReducer(e,t),this.rendererEdgeReducer(e),this.renderer.refresh()}highlightHoveredNode(e){this.renderer.on("enterNode",(({node:t})=>{this.hoveredNodeActions(e,t)})),this.renderer.on("leaveNode",(()=>{this.hoveredNodeActions(e,void 0)}))}hoveredNodeActions(e,t){this.setHoveredNode(e,t),this.rendererReducer(e),this.renderer.refresh()}highlightHoveredEdge(e){this.renderer.on("enterEdge",(({edge:t})=>{e.setEdgeAttribute(t,"color","blue")})),this.renderer.on("leaveEdge",(({edge:t})=>{e.setEdgeAttribute(t,"color",s)}))}invertEdge(e){this.renderer.on("clickEdge",(t=>{if(this.isRouteEdge(e,t.edge)){const n=[e.source(t.edge),e.target(t.edge)];this.getUpdatedGraph(n,e)}})),this.renderer.refresh()}getInitGraph(e){return t=this,n=void 0,i=function*(){o({url:"/api/ordering_graph/"}).then((e=>e.json())).then((t=>{this.unsafeImport(t,e)}))},new((r=void 0)||(r=Promise))((function(e,o){function a(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,s)}u((i=i.apply(t,n||[])).next())}));var t,n,r,i}getUpdatedGraph(e,t){(({url:e,data:t,values:n})=>o({url:e,options:{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}},values:n}))({url:"/api/ordering_graph/invert",data:this.exportGraphAsJson(t),values:e}).then((e=>e.json())).then((e=>this.unsafeImport(e,t)))}exportGraphAsJson(e){const t=new Array(e._nodes.size);let n=0;e.forEachNode(((e,r)=>{t[n++]=[e,r.r,r.t]}));const r=new Array(e._edges.size);return n=0,e.forEachEdge((t=>{r[n++]=[e.source(t),e.target(t)]})),{a:{},n:t,e:r}}unsafeImport(e,t){let n,r;if(e.a&&t.replaceAttributes(e.a),e.n)for(n=0,r=e.n.length;n<r;n++){const r=e.n[n][1],i=e.n[n][2];t.addNode(e.n[n][0],{r,t:i}),void 0===this.nodesForGivenTrainId.get(i)?this.nodesForGivenTrainId.set(i,[e.n[n][0]]):this.nodesForGivenTrainId.get(i).push(e.n[n][0])}if(e.e)for(n=0,r=e.e.length;n<r;n++)t.addDirectedEdgeWithKey(n,e.e[n][0],e.e[n][1]);return t}}})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FBS3FOLEVBQUs3TCxFQUFFdEYsR0FBRyxJQUk3SixHQUFJbVIsRUFBS3JGLEVBQ0wsSUFBSzlMLEVBQUksRUFBRzJOLEVBQUl3RCxFQUFLckYsRUFBRWhNLE9BQVFFLEVBQUkyTixFQUFHM04sSUFDbEM4SSxFQUFNNEMsdUJBQXVCMUwsRUFBR21SLEVBQUtyRixFQUFFOUwsR0FBRyxHQUFJbVIsRUFBS3JGLEVBQUU5TCxHQUFHLElBR2hFLE9BQU84SSxDQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL0B5b21ndWl0aGVyZWFsL2hlbHBlcnMvZXh0ZW5kLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1vcGVyYXRvcnMvZGlzam9pbnQtdW5pb24uanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1vcGVyYXRvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1vcGVyYXRvcnMvcmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LW9wZXJhdG9ycy9zdWJncmFwaC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LW9wZXJhdG9ycy90by1kaXJlY3RlZC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LW9wZXJhdG9ycy90by1taXhlZC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LW9wZXJhdG9ycy90by1tdWx0aS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LW9wZXJhdG9ycy90by1zaW1wbGUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1vcGVyYXRvcnMvdG8tdW5kaXJlY3RlZC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LW9wZXJhdG9ycy91bmlvbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LXV0aWxzL2FkZC1lZGdlLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL2dyYXBob2xvZ3ktdXRpbHMvYWRkLW5vZGUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5L2Rpc3QvZ3JhcGhvbG9neS51bWQubWluLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9jb3JlL2NhbWVyYS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9jb3JlL2NhcHRvcnMvY2FwdG9yLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL2NvcmUvY2FwdG9ycy9tb3VzZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9jb3JlL2NhcHRvcnMvdG91Y2guanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvY29yZS9sYWJlbHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvY29yZS9xdWFkdHJlZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvY2FudmFzL2VkZ2UtbGFiZWwuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL2NhbnZhcy9ob3Zlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvY2FudmFzL2xhYmVsLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9wcm9ncmFtcy9jb21tb24vZWRnZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvY29tbW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL2NvbW1vbi9wcm9ncmFtLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9wcm9ncmFtcy9lZGdlLmFycm93LmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9wcm9ncmFtcy9lZGdlLmFycm93SGVhZC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvZWRnZS5jbGFtcGVkLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9wcm9ncmFtcy9lZGdlLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9wcm9ncmFtcy9ub2RlLmZhc3QuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL25vZGUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3NoYWRlcnMvZWRnZS5hcnJvd0hlYWQuZnJhZy5nbHNsLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9zaGFkZXJzL2VkZ2UuYXJyb3dIZWFkLnZlcnQuZ2xzbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvc2hhZGVycy9lZGdlLmNsYW1wZWQudmVydC5nbHNsLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9zaGFkZXJzL2VkZ2UuZnJhZy5nbHNsLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9zaGFkZXJzL2VkZ2UudmVydC5nbHNsLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9zaGFkZXJzL25vZGUuZmFzdC5mcmFnLmdsc2wuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3NoYWRlcnMvbm9kZS5mYXN0LnZlcnQuZ2xzbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvc2hhZGVycy9ub2RlLmZyYWcuZ2xzbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvc2hhZGVycy9ub2RlLnZlcnQuZ2xzbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvc2hhZGVycy91dGlscy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9zaWdtYS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS90eXBlcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS91dGlscy9hbmltYXRlLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3V0aWxzL2RhdGEuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvdXRpbHMvZWFzaW5ncy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS91dGlscy9lZGdlLWNvbGxpc2lvbnMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvdXRpbHMvbWF0cmljZXMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL2NvbXBvbmVudHMvb3JkZXJpbmdfZ3JhcGgvYXBpL2FwaV9ncmFwaC50cyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL2NvbXBvbmVudHMvb3JkZXJpbmdfZ3JhcGgvZ3JhcGgvc2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9jb21wb25lbnRzL29yZGVyaW5nX2dyYXBoL2dyYXBoL3NpZ21hX2dyYXBoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIndlYnBhY2tTaWdtYUdyYXBoXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIndlYnBhY2tTaWdtYUdyYXBoXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgKCkgPT4ge1xucmV0dXJuICIsIi8qKlxuICogRXh0ZW5kIGZ1bmN0aW9uXG4gKiA9PT09PT09PT09PT09PT09XG4gKlxuICogRnVuY3Rpb24gdXNlZCB0byBwdXNoIGEgYnVuY2ggb2YgdmFsdWVzIGludG8gYW4gYXJyYXkgYXQgb25jZS5cbiAqXG4gKiBJdHMgc3RyYXRlZ3kgaXMgdG8gbXV0YXRlIHRhcmdldCBhcnJheSdzIGxlbmd0aCB0aGVuIHNldHRpbmcgdGhlIG5ldyBpbmRpY2VzXG4gKiB0byBiZSB0aGUgdmFsdWVzIHRvIGFkZC5cbiAqXG4gKiBBIGJlbmNobWFyayBwcm92ZWQgdGhhdCBpdCBpcyBmYXN0ZXIgdGhhbiB0aGUgZm9sbG93aW5nIHN0cmF0ZWdpZXM6XG4gKiAgIDEpIGBhcnJheS5wdXNoLmFwcGx5KGFycmF5LCB2YWx1ZXMpYC5cbiAqICAgMikgQSBsb29wIG9mIHB1c2hlcy5cbiAqICAgMykgYGFycmF5ID0gYXJyYXkuY29uY2F0KHZhbHVlcylgLCBvYnZpb3VzbHkuXG4gKlxuICogSW50dWl0aXZlbHksIHRoaXMgaXMgY29ycmVjdCBiZWNhdXNlIHdoZW4gYWRkaW5nIGEgbG90IG9mIGVsZW1lbnRzLCB0aGVcbiAqIGNob3NlbiBzdHJhdGVnaWVzIGRvZXMgbm90IG5lZWQgdG8gaGFuZGxlIHRoZSBgYXJndW1lbnRzYCBvYmplY3QgdG9cbiAqIGV4ZWN1dGUgIy5hcHBseSdzIHZhcmlhZGljaXR5IGFuZCBiZWNhdXNlIHRoZSBhcnJheSBrbm93IGl0cyBmaW5hbCBsZW5ndGhcbiAqIGF0IHRoZSBiZWdpbm5pbmcsIGF2b2lkaW5nIHBvdGVudGlhbCBtdWx0aXBsZSByZWFsbG9jYXRpb25zIG9mIHRoZSB1bmRlcmx5aW5nXG4gKiBjb250aWd1b3VzIGFycmF5LiBTb21lIGVuZ2luZXMgbWF5IGJlIGFibGUgdG8gb3B0aW1pemUgdGhlIGxvb3Agb2YgcHVzaFxuICogb3BlcmF0aW9ucyBidXQgZW1waXJpY2FsbHkgdGhleSBkb24ndCBzZWVtIHRvIGRvIHNvLlxuICovXG5cbi8qKlxuICogRXh0ZW5kcyB0aGUgdGFyZ2V0IGFycmF5IHdpdGggdGhlIGdpdmVuIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gIHthcnJheX0gYXJyYXkgIC0gVGFyZ2V0IGFycmF5LlxuICogQHBhcmFtICB7YXJyYXl9IHZhbHVlcyAtIFZhbHVlcyB0byBhZGQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGwyID0gdmFsdWVzLmxlbmd0aDtcblxuICBpZiAobDIgPT09IDApXG4gICAgcmV0dXJuO1xuXG4gIHZhciBsMSA9IGFycmF5Lmxlbmd0aDtcblxuICBhcnJheS5sZW5ndGggKz0gbDI7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsMjsgaSsrKVxuICAgIGFycmF5W2wxICsgaV0gPSB2YWx1ZXNbaV07XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIi8qKlxuICogR3JhcGhvbG9neSBEaXNqb2ludCBVbmlvbiBPcGVyYXRvclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xudmFyIGlzR3JhcGggPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2lzLWdyYXBoJyk7XG52YXIgY29weU5vZGUgPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2FkZC1ub2RlJykuY29weU5vZGU7XG52YXIgY29weUVkZ2UgPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2FkZC1lZGdlJykuY29weUVkZ2U7XG5cbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBkaXNqb2ludCB1bmlvbiBvZiB0d28gZ2l2ZW4gZ3JhcGhzIGJ5IGdpdmluZyBuZXcga2V5c1xuICogdG8gbm9kZXMgJiBlZGdlcy5cbiAqXG4gKiBAcGFyYW0gIHtHcmFwaH0gRyAtIFRoZSBmaXJzdCBncmFwaC5cbiAqIEBwYXJhbSAge0dyYXBofSBIIC0gVGhlIHNlY29uZCBncmFwaC5cbiAqIEByZXR1cm4ge0dyYXBofVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc2pvaW50VW5pb24oRywgSCkge1xuICBpZiAoIWlzR3JhcGgoRykgfHwgIWlzR3JhcGgoSCkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdncmFwaG9sb2d5LW9wZXJhdG9ycy9kaXNqb2ludC11bmlvbjogaW52YWxpZCBncmFwaC4nKTtcblxuICBpZiAoRy5tdWx0aSAhPT0gSC5tdWx0aSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1vcGVyYXRvcnMvZGlzam9pbnQtdW5pb246IGJvdGggZ3JhcGggc2hvdWxkIGJlIHNpbXBsZSBvciBtdWx0aS4nXG4gICAgKTtcblxuICB2YXIgUiA9IEcubnVsbENvcHkoKTtcblxuICAvLyBUT0RPOiBpbiB0aGUgc3Bpcml0IG9mIHRoaXMgb3BlcmF0b3Igd2Ugc2hvdWxkIHByb2JhYmx5IHByZWZpeCBzb21ldGhpbmdcbiAgUi5tZXJnZUF0dHJpYnV0ZXMoRy5nZXRBdHRyaWJ1dGVzKCkpO1xuXG4gIHZhciBsYWJlbHNHID0ge307XG4gIHZhciBsYWJlbHNIID0ge307XG5cbiAgdmFyIGkgPSAwO1xuXG4gIC8vIEFkZGluZyBub2Rlc1xuICBHLmZvckVhY2hOb2RlKGZ1bmN0aW9uIChrZXksIGF0dHIpIHtcbiAgICBsYWJlbHNHW2tleV0gPSBpO1xuXG4gICAgY29weU5vZGUoUiwgaSwgYXR0cik7XG5cbiAgICBpKys7XG4gIH0pO1xuXG4gIEguZm9yRWFjaE5vZGUoZnVuY3Rpb24gKGtleSwgYXR0cikge1xuICAgIGxhYmVsc0hba2V5XSA9IGk7XG5cbiAgICBjb3B5Tm9kZShSLCBpLCBhdHRyKTtcblxuICAgIGkrKztcbiAgfSk7XG5cbiAgLy8gQWRkaW5nIGVkZ2VzXG4gIGkgPSAwO1xuXG4gIEcuZm9yRWFjaEVkZ2UoZnVuY3Rpb24gKGtleSwgYXR0ciwgc291cmNlLCB0YXJnZXQsIF9zLCBfdCwgdW5kaXJlY3RlZCkge1xuICAgIGNvcHlFZGdlKFxuICAgICAgUixcbiAgICAgIHVuZGlyZWN0ZWQsXG4gICAgICBpKyssXG4gICAgICBsYWJlbHNHW3NvdXJjZV0sXG4gICAgICBsYWJlbHNHW3RhcmdldF0sXG4gICAgICB0YXJnZXQsXG4gICAgICBhdHRyXG4gICAgKTtcbiAgfSk7XG5cbiAgSC5mb3JFYWNoRWRnZShmdW5jdGlvbiAoa2V5LCBhdHRyLCBzb3VyY2UsIHRhcmdldCwgX3MsIF90LCB1bmRpcmVjdGVkKSB7XG4gICAgY29weUVkZ2UoXG4gICAgICBSLFxuICAgICAgdW5kaXJlY3RlZCxcbiAgICAgIGkrKyxcbiAgICAgIGxhYmVsc0hbc291cmNlXSxcbiAgICAgIGxhYmVsc0hbdGFyZ2V0XSxcbiAgICAgIHRhcmdldCxcbiAgICAgIGF0dHJcbiAgICApO1xuICB9KTtcblxuICByZXR1cm4gUjtcbn07XG4iLCIvKipcbiAqIEdyYXBob2xvZ3kgT3BlcmF0b3JzXG4gKiA9PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBMaWJyYXJ5IGVuZHBvaW50LlxuICovXG5leHBvcnRzLmRpc2pvaW50VW5pb24gPSByZXF1aXJlKCcuL2Rpc2pvaW50LXVuaW9uLmpzJyk7XG5leHBvcnRzLnJldmVyc2UgPSByZXF1aXJlKCcuL3JldmVyc2UuanMnKTtcbmV4cG9ydHMuc3ViZ3JhcGggPSByZXF1aXJlKCcuL3N1YmdyYXBoLmpzJyk7XG5leHBvcnRzLnRvRGlyZWN0ZWQgPSByZXF1aXJlKCcuL3RvLWRpcmVjdGVkLmpzJyk7XG5leHBvcnRzLnRvTWl4ZWQgPSByZXF1aXJlKCcuL3RvLW1peGVkLmpzJyk7XG5leHBvcnRzLnRvTXVsdGkgPSByZXF1aXJlKCcuL3RvLW11bHRpLmpzJyk7XG5leHBvcnRzLnRvU2ltcGxlID0gcmVxdWlyZSgnLi90by1zaW1wbGUuanMnKTtcbmV4cG9ydHMudG9VbmRpcmVjdGVkID0gcmVxdWlyZSgnLi90by11bmRpcmVjdGVkLmpzJyk7XG5leHBvcnRzLnVuaW9uID0gcmVxdWlyZSgnLi91bmlvbi5qcycpO1xuIiwiLyoqXG4gKiBHcmFwaG9sb2d5IFJldmVycyBPcGVyYXRvclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbnZhciBpc0dyYXBoID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaCcpO1xudmFyIGNvcHlFZGdlID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9hZGQtZWRnZScpLmNvcHlFZGdlO1xuXG4vKipcbiAqIEZ1bmN0aW9uIHJldmVyc2luZyB0aGUgZ2l2ZW4gZ3JhcGguXG4gKlxuICogQHBhcmFtICB7R3JhcGh9IGdyYXBoIC0gVGFyZ2V0IGdyYXBoLlxuICogQHJldHVybiB7R3JhcGh9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmV2ZXJzZShncmFwaCkge1xuICBpZiAoIWlzR3JhcGgoZ3JhcGgpKVxuICAgIHRocm93IG5ldyBFcnJvcignZ3JhcGhvbG9neS1vcGVyYXRvcnMvcmV2ZXJzZTogaW52YWxpZCBncmFwaC4nKTtcblxuICB2YXIgcmV2ZXJzZWQgPSBncmFwaC5lbXB0eUNvcHkoKTtcblxuICAvLyBJbXBvcnRpbmcgdW5kaXJlY3RlZCBlZGdlc1xuICBncmFwaC5mb3JFYWNoVW5kaXJlY3RlZEVkZ2UoZnVuY3Rpb24gKGtleSwgYXR0ciwgc291cmNlLCB0YXJnZXQpIHtcbiAgICBjb3B5RWRnZShyZXZlcnNlZCwgdHJ1ZSwga2V5LCBzb3VyY2UsIHRhcmdldCwgYXR0cik7XG4gIH0pO1xuXG4gIC8vIFJldmVyc2luZyBkaXJlY3RlZCBlZGdlc1xuICBncmFwaC5mb3JFYWNoRGlyZWN0ZWRFZGdlKGZ1bmN0aW9uIChrZXksIGF0dHIsIHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgY29weUVkZ2UocmV2ZXJzZWQsIGZhbHNlLCBrZXksIHRhcmdldCwgc291cmNlLCBhdHRyKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJldmVyc2VkO1xufTtcbiIsIi8qKlxuICogR3JhcGhvbG9neSBTdWIgR3JhcGhcbiAqID09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgc3ViZ3JhcGggY29tcG9zZWQgb2YgdGhlIG5vZGVzIHBhc3NlZCBhcyBwYXJhbWV0ZXJzLlxuICovXG52YXIgaXNHcmFwaCA9IHJlcXVpcmUoJ2dyYXBob2xvZ3ktdXRpbHMvaXMtZ3JhcGgnKTtcbnZhciBjb3B5Tm9kZSA9IHJlcXVpcmUoJ2dyYXBob2xvZ3ktdXRpbHMvYWRkLW5vZGUnKS5jb3B5Tm9kZTtcbnZhciBjb3B5RWRnZSA9IHJlcXVpcmUoJ2dyYXBob2xvZ3ktdXRpbHMvYWRkLWVkZ2UnKS5jb3B5RWRnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdWJncmFwaChncmFwaCwgbm9kZXMpIHtcbiAgaWYgKCFpc0dyYXBoKGdyYXBoKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dyYXBob2xvZ3ktb3BlcmF0b3JzL3N1YmdyYXBoOiBpbnZhbGlkIGdyYXBoIGluc3RhbmNlLicpO1xuXG4gIHZhciBTID0gZ3JhcGgubnVsbENvcHkoKTtcblxuICB2YXIgZmlsdGVyTm9kZSA9IG5vZGVzO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGVzKSkge1xuICAgIGlmIChub2Rlcy5sZW5ndGggPT09IDApIHJldHVybiBTO1xuXG4gICAgbm9kZXMgPSBuZXcgU2V0KG5vZGVzKTtcbiAgfVxuXG4gIGlmIChub2RlcyBpbnN0YW5jZW9mIFNldCkge1xuICAgIGlmIChub2Rlcy5zaXplID09PSAwKSByZXR1cm4gUztcblxuICAgIGZpbHRlck5vZGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gbm9kZXMuaGFzKGtleSk7XG4gICAgfTtcblxuICAgIC8vIEVuc3VyaW5nIGdpdmVuIGtleXMgYXJlIGNhc3RlZCB0byBzdHJpbmdcbiAgICB2YXIgb2xkID0gbm9kZXM7XG4gICAgbm9kZXMgPSBuZXcgU2V0KCk7XG5cbiAgICBvbGQuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgbm9kZXMuYWRkKCcnICsgbm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGZpbHRlck5vZGUgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2dyYXBob2xvZ3ktb3BlcmF0b3JzL3N1YmdyYXBoOiBpbnZhbGlkIG5vZGVzLiBFeHBlY3RpbmcgYW4gYXJyYXkgb3IgYSBzZXQgb3IgYSBmaWx0ZXJpbmcgZnVuY3Rpb24uJ1xuICAgICk7XG5cbiAgaWYgKHR5cGVvZiBub2RlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGdyYXBoLmZvckVhY2hOb2RlKGZ1bmN0aW9uIChrZXksIGF0dHIpIHtcbiAgICAgIGlmICghZmlsdGVyTm9kZShrZXksIGF0dHIpKSByZXR1cm47XG5cbiAgICAgIGNvcHlOb2RlKFMsIGtleSwgYXR0cik7XG4gICAgfSk7XG5cbiAgICAvLyBFYXJseSB0ZXJtaW5hdGlvblxuICAgIGlmIChTLm9yZGVyID09PSAwKSByZXR1cm4gUztcbiAgfSBlbHNlIHtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghZ3JhcGguaGFzTm9kZShrZXkpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2dyYXBob2xvZ3ktb3BlcmF0b3JzL3N1YmdyYXBoOiB0aGUgXCInICtcbiAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICAnXCIgbm9kZSB3YXMgbm90IGZvdW5kIGluIHRoZSBncmFwaC4nXG4gICAgICAgICk7XG5cbiAgICAgIGNvcHlOb2RlKFMsIGtleSwgZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZXMoa2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICBncmFwaC5mb3JFYWNoRWRnZShmdW5jdGlvbiAoXG4gICAga2V5LFxuICAgIGF0dHIsXG4gICAgc291cmNlLFxuICAgIHRhcmdldCxcbiAgICBzb3VyY2VBdHRyLFxuICAgIHRhcmdldEF0dHIsXG4gICAgdW5kaXJlY3RlZFxuICApIHtcbiAgICBpZiAoIWZpbHRlck5vZGUoc291cmNlLCBzb3VyY2VBdHRyKSkgcmV0dXJuO1xuXG4gICAgaWYgKHRhcmdldCAhPT0gc291cmNlICYmICFmaWx0ZXJOb2RlKHRhcmdldCwgdGFyZ2V0QXR0cikpIHJldHVybjtcblxuICAgIGNvcHlFZGdlKFMsIHVuZGlyZWN0ZWQsIGtleSwgc291cmNlLCB0YXJnZXQsIGF0dHIpO1xuICB9KTtcblxuICByZXR1cm4gUztcbn07XG4iLCIvKipcbiAqIEdyYXBob2xvZ3kgT3BlcmF0b3JzIFRvIERpcmVjdGVkIENhc3RlclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gY2FzdCBhbnkgZ3JhcGggdG8gYSBkaXJlY3RlZCBvbmUuXG4gKi9cbnZhciBpc0dyYXBoID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaCcpO1xudmFyIGNvcHlFZGdlID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9hZGQtZWRnZScpLmNvcHlFZGdlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRvRGlyZWN0ZWQoZ3JhcGgsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc0dyYXBoKGdyYXBoKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1vcGVyYXRvcnMvdG8tZGlyZWN0ZWQ6IGV4cGVjdGluZyBhIHZhbGlkIGdyYXBob2xvZ3kgaW5zdGFuY2UuJ1xuICAgICk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSBvcHRpb25zID0ge21lcmdlRWRnZTogb3B0aW9uc307XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIG1lcmdlRWRnZSA9XG4gICAgdHlwZW9mIG9wdGlvbnMubWVyZ2VFZGdlID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5tZXJnZUVkZ2UgOiBudWxsO1xuXG4gIGlmIChncmFwaC50eXBlID09PSAnZGlyZWN0ZWQnKSByZXR1cm4gZ3JhcGguY29weSgpO1xuXG4gIHZhciBkaXJlY3RlZEdyYXBoID0gZ3JhcGguZW1wdHlDb3B5KHt0eXBlOiAnZGlyZWN0ZWQnfSk7XG5cbiAgLy8gQWRkaW5nIGRpcmVjdGVkIGVkZ2VzXG4gIGdyYXBoLmZvckVhY2hEaXJlY3RlZEVkZ2UoZnVuY3Rpb24gKGVkZ2UsIGF0dHIsIHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgY29weUVkZ2UoZGlyZWN0ZWRHcmFwaCwgZmFsc2UsIGVkZ2UsIHNvdXJjZSwgdGFyZ2V0LCBhdHRyKTtcbiAgfSk7XG5cbiAgLy8gTWVyZ2luZyB1bmRpcmVjdGVkIGVkZ2VzXG4gIGdyYXBoLmZvckVhY2hVbmRpcmVjdGVkRWRnZShmdW5jdGlvbiAoXywgYXR0ciwgc291cmNlLCB0YXJnZXQpIHtcbiAgICB2YXIgZXhpc3RpbmdPdXRFZGdlID1cbiAgICAgICFncmFwaC5tdWx0aSAmJlxuICAgICAgZ3JhcGgudHlwZSA9PT0gJ21peGVkJyAmJlxuICAgICAgZGlyZWN0ZWRHcmFwaC5lZGdlKHNvdXJjZSwgdGFyZ2V0KTtcblxuICAgIHZhciBleGlzdGluZ0luRWRnZSA9XG4gICAgICAhZ3JhcGgubXVsdGkgJiZcbiAgICAgIGdyYXBoLnR5cGUgPT09ICdtaXhlZCcgJiZcbiAgICAgIGRpcmVjdGVkR3JhcGguZWRnZSh0YXJnZXQsIHNvdXJjZSk7XG5cbiAgICBpZiAoZXhpc3RpbmdPdXRFZGdlKSB7XG4gICAgICBkaXJlY3RlZEdyYXBoLnJlcGxhY2VFZGdlQXR0cmlidXRlcyhcbiAgICAgICAgZXhpc3RpbmdPdXRFZGdlLFxuICAgICAgICBtZXJnZUVkZ2UoZGlyZWN0ZWRHcmFwaC5nZXRFZGdlQXR0cmlidXRlcyhleGlzdGluZ091dEVkZ2UpLCBhdHRyKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUVkZ2UoZGlyZWN0ZWRHcmFwaCwgZmFsc2UsIG51bGwsIHNvdXJjZSwgdGFyZ2V0LCBhdHRyKTtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBhZGQgc2VsZi1sb29wcyB0d2ljZVxuICAgIGlmIChzb3VyY2UgPT09IHRhcmdldCkgcmV0dXJuO1xuXG4gICAgaWYgKGV4aXN0aW5nSW5FZGdlKSB7XG4gICAgICBkaXJlY3RlZEdyYXBoLnJlcGxhY2VFZGdlQXR0cmlidXRlcyhcbiAgICAgICAgZXhpc3RpbmdJbkVkZ2UsXG4gICAgICAgIG1lcmdlRWRnZShkaXJlY3RlZEdyYXBoLmdldEVkZ2VBdHRyaWJ1dGVzKGV4aXN0aW5nSW5FZGdlKSwgYXR0cilcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlFZGdlKGRpcmVjdGVkR3JhcGgsIGZhbHNlLCBudWxsLCB0YXJnZXQsIHNvdXJjZSwgYXR0cik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGlyZWN0ZWRHcmFwaDtcbn07XG4iLCIvKipcbiAqIEdyYXBob2xvZ3kgT3BlcmF0b3JzIFRvIE1peGVkIENhc3RlclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gY2FzdCBhbnkgZ3JhcGggdG8gYSBtaXhlZCBvbmUuXG4gKi9cbnZhciBpc0dyYXBoID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRvTWl4ZWQoZ3JhcGgpIHtcbiAgaWYgKCFpc0dyYXBoKGdyYXBoKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1vcGVyYXRvcnMvdG8tbWl4ZWQ6IGV4cGVjdGluZyBhIHZhbGlkIGdyYXBob2xvZ3kgaW5zdGFuY2UuJ1xuICAgICk7XG5cbiAgcmV0dXJuIGdyYXBoLmNvcHkoe3R5cGU6ICdtaXhlZCd9KTtcbn07XG4iLCIvKipcbiAqIEdyYXBob2xvZ3kgT3BlcmF0b3JzIFRvIE11bHRpIENhc3RlclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gY2FzdCBhbnkgZ3JhcGggdG8gYSBtdWx0aSBvbmUuXG4gKi9cbnZhciBpc0dyYXBoID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRvTXVsdGkoZ3JhcGgpIHtcbiAgaWYgKCFpc0dyYXBoKGdyYXBoKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1vcGVyYXRvcnMvdG8tbXVsdGk6IGV4cGVjdGluZyBhIHZhbGlkIGdyYXBob2xvZ3kgaW5zdGFuY2UuJ1xuICAgICk7XG5cbiAgcmV0dXJuIGdyYXBoLmNvcHkoe211bHRpOiB0cnVlfSk7XG59O1xuIiwiLyoqXG4gKiBHcmFwaG9sb2d5IE9wZXJhdG9ycyBUbyBTaW1wbGUgQ2FzdGVyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gY2FzdCBhIG11bHRpIGdyYXBoIHRvIGEgc2ltcGxlIG9uZS5cbiAqL1xudmFyIGlzR3JhcGggPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2lzLWdyYXBoJyk7XG52YXIgY29weUVkZ2UgPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2FkZC1lZGdlJykuY29weUVkZ2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdG9TaW1wbGUobXVsdGlHcmFwaCwgb3B0aW9ucykge1xuICBpZiAoIWlzR3JhcGgobXVsdGlHcmFwaCkpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2dyYXBob2xvZ3ktb3BlcmF0b3JzL3RvLXNpbXBsZTogZXhwZWN0aW5nIGEgdmFsaWQgZ3JhcGhvbG9neSBpbnN0YW5jZS4nXG4gICAgKTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIG9wdGlvbnMgPSB7bWVyZ2VFZGdlOiBvcHRpb25zfTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgbWVyZ2VFZGdlID1cbiAgICB0eXBlb2Ygb3B0aW9ucy5tZXJnZUVkZ2UgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLm1lcmdlRWRnZSA6IG51bGw7XG5cbiAgLy8gVGhlIGdyYXBoIGlzIG5vdCBtdWx0aS4gV2UganVzdCByZXR1cm4gYSBwbGFpbiBjb3B5XG4gIGlmICghbXVsdGlHcmFwaC5tdWx0aSkgcmV0dXJuIG11bHRpR3JhcGguY29weSgpO1xuXG4gIC8vIENyZWF0aW5nIGEgdHdlYWtlZCBlbXB0eSBjb3B5XG4gIHZhciBzaW1wbGVHcmFwaCA9IG11bHRpR3JhcGguZW1wdHlDb3B5KHttdWx0aTogZmFsc2V9KTtcblxuICAvLyBQcm9jZXNzaW5nIGVkZ2VzXG4gIG11bHRpR3JhcGguZm9yRWFjaEVkZ2UoZnVuY3Rpb24gKFxuICAgIGVkZ2UsXG4gICAgYXR0cixcbiAgICBzb3VyY2UsXG4gICAgdGFyZ2V0LFxuICAgIF9zYSxcbiAgICBfdGEsXG4gICAgdW5kaXJlY3RlZFxuICApIHtcbiAgICB2YXIgZXhpc3RpbmdFZGdlID0gdW5kaXJlY3RlZFxuICAgICAgPyBzaW1wbGVHcmFwaC51bmRpcmVjdGVkRWRnZShzb3VyY2UsIHRhcmdldClcbiAgICAgIDogc2ltcGxlR3JhcGguZGlyZWN0ZWRFZGdlKHNvdXJjZSwgdGFyZ2V0KTtcblxuICAgIGlmIChleGlzdGluZ0VkZ2UpIHtcbiAgICAgIGlmIChtZXJnZUVkZ2UpIHtcbiAgICAgICAgc2ltcGxlR3JhcGgucmVwbGFjZUVkZ2VBdHRyaWJ1dGVzKFxuICAgICAgICAgIGV4aXN0aW5nRWRnZSxcbiAgICAgICAgICBtZXJnZUVkZ2Uoc2ltcGxlR3JhcGguZ2V0RWRnZUF0dHJpYnV0ZXMoZXhpc3RpbmdFZGdlKSwgYXR0cilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb3B5RWRnZShzaW1wbGVHcmFwaCwgdW5kaXJlY3RlZCwgZWRnZSwgc291cmNlLCB0YXJnZXQsIGF0dHIpO1xuICB9KTtcblxuICByZXR1cm4gc2ltcGxlR3JhcGg7XG59O1xuIiwiLyoqXG4gKiBHcmFwaG9sb2d5IE9wZXJhdG9ycyBUbyBVbmRpcmVjdGVkIENhc3RlclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogRnVuY3Rpb24gdXNlZCB0byBjYXN0IGFueSBncmFwaCB0byBhbiB1bmRpcmVjdGVkIG9uZS5cbiAqL1xudmFyIGlzR3JhcGggPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2lzLWdyYXBoJyk7XG52YXIgY29weUVkZ2UgPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2FkZC1lZGdlJykuY29weUVkZ2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdG9VbmRpcmVjdGVkKGdyYXBoLCBvcHRpb25zKSB7XG4gIGlmICghaXNHcmFwaChncmFwaCkpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2dyYXBob2xvZ3ktb3BlcmF0b3JzL3RvLXVuZGlyZWN0ZWQ6IGV4cGVjdGluZyBhIHZhbGlkIGdyYXBob2xvZ3kgaW5zdGFuY2UuJ1xuICAgICk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSBvcHRpb25zID0ge21lcmdlRWRnZTogb3B0aW9uc307XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIG1lcmdlRWRnZSA9XG4gICAgdHlwZW9mIG9wdGlvbnMubWVyZ2VFZGdlID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5tZXJnZUVkZ2UgOiBudWxsO1xuXG4gIGlmIChncmFwaC50eXBlID09PSAndW5kaXJlY3RlZCcpIHJldHVybiBncmFwaC5jb3B5KCk7XG5cbiAgdmFyIHVuZGlyZWN0ZWRHcmFwaCA9IGdyYXBoLmVtcHR5Q29weSh7dHlwZTogJ3VuZGlyZWN0ZWQnfSk7XG5cbiAgLy8gQWRkaW5nIHVuZGlyZWN0ZWQgZWRnZXNcbiAgZ3JhcGguZm9yRWFjaFVuZGlyZWN0ZWRFZGdlKGZ1bmN0aW9uIChlZGdlLCBhdHRyLCBzb3VyY2UsIHRhcmdldCkge1xuICAgIGNvcHlFZGdlKHVuZGlyZWN0ZWRHcmFwaCwgdHJ1ZSwgZWRnZSwgc291cmNlLCB0YXJnZXQsIGF0dHIpO1xuICB9KTtcblxuICAvLyBUT0RPOiBvbmUgbG9vcCBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG5cbiAgLy8gTWVyZ2luZyBkaXJlY3RlZCBlZGdlc1xuICBncmFwaC5mb3JFYWNoRGlyZWN0ZWRFZGdlKGZ1bmN0aW9uIChlZGdlLCBhdHRyLCBzb3VyY2UsIHRhcmdldCkge1xuICAgIGlmICghZ3JhcGgubXVsdGkpIHtcbiAgICAgIHZhciBleGlzdGluZ0VkZ2UgPSB1bmRpcmVjdGVkR3JhcGguZWRnZShzb3VyY2UsIHRhcmdldCk7XG5cbiAgICAgIGlmIChleGlzdGluZ0VkZ2UpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBtZXJnZVxuICAgICAgICBpZiAobWVyZ2VFZGdlKVxuICAgICAgICAgIHVuZGlyZWN0ZWRHcmFwaC5yZXBsYWNlRWRnZUF0dHJpYnV0ZXMoXG4gICAgICAgICAgICBleGlzdGluZ0VkZ2UsXG4gICAgICAgICAgICBtZXJnZUVkZ2UodW5kaXJlY3RlZEdyYXBoLmdldEVkZ2VBdHRyaWJ1dGVzKGV4aXN0aW5nRWRnZSksIGF0dHIpXG4gICAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29weUVkZ2UodW5kaXJlY3RlZEdyYXBoLCB0cnVlLCBudWxsLCBzb3VyY2UsIHRhcmdldCwgYXR0cik7XG4gIH0pO1xuXG4gIHJldHVybiB1bmRpcmVjdGVkR3JhcGg7XG59O1xuIiwiLyoqXG4gKiBHcmFwaG9sb2d5IFVuaW9uIE9wZXJhdG9yXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG52YXIgaXNHcmFwaCA9IHJlcXVpcmUoJ2dyYXBob2xvZ3ktdXRpbHMvaXMtZ3JhcGgnKTtcblxuLyoqXG4gKiBGdW5jdGlvbiByZXR1cm5pbmcgdGhlIHVuaW9uIG9mIHR3byBnaXZlbiBncmFwaHMuXG4gKlxuICogQHBhcmFtICB7R3JhcGh9IEcgLSBUaGUgZmlyc3QgZ3JhcGguXG4gKiBAcGFyYW0gIHtHcmFwaH0gSCAtIFRoZSBzZWNvbmQgZ3JhcGguXG4gKiBAcmV0dXJuIHtHcmFwaH1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1bmlvbihHLCBIKSB7XG4gIGlmICghaXNHcmFwaChHKSB8fCAhaXNHcmFwaChIKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dyYXBob2xvZ3ktb3BlcmF0b3JzL3VuaW9uOiBpbnZhbGlkIGdyYXBoLicpO1xuXG4gIGlmIChHLm11bHRpICE9PSBILm11bHRpKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdncmFwaG9sb2d5LW9wZXJhdG9ycy91bmlvbjogYm90aCBncmFwaCBzaG91bGQgYmUgc2ltcGxlIG9yIG11bHRpLidcbiAgICApO1xuXG4gIHZhciBSID0gRy5jb3B5KCk7XG4gIFIuaW1wb3J0KEgsIHRydWUpO1xuXG4gIHJldHVybiBSO1xufTtcbiIsIi8qKlxuICogR3JhcGhvbG9neSBFZGdlIEFkZGVyc1xuICogPT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBHZW5lcmljIGVkZ2UgYWRkaXRpb24gZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXZvaWQgbmFzdHkgcmVwZXRpdGl2ZVxuICogY29uZGl0aW9ucy5cbiAqL1xuZXhwb3J0cy5hZGRFZGdlID0gZnVuY3Rpb24gYWRkRWRnZShcbiAgZ3JhcGgsXG4gIHVuZGlyZWN0ZWQsXG4gIGtleSxcbiAgc291cmNlLFxuICB0YXJnZXQsXG4gIGF0dHJpYnV0ZXNcbikge1xuICBpZiAodW5kaXJlY3RlZCkge1xuICAgIGlmIChrZXkgPT09IG51bGwgfHwga2V5ID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gZ3JhcGguYWRkVW5kaXJlY3RlZEVkZ2Uoc291cmNlLCB0YXJnZXQsIGF0dHJpYnV0ZXMpO1xuICAgIGVsc2UgcmV0dXJuIGdyYXBoLmFkZFVuZGlyZWN0ZWRFZGdlV2l0aEtleShrZXksIHNvdXJjZSwgdGFyZ2V0LCBhdHRyaWJ1dGVzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGdyYXBoLmFkZERpcmVjdGVkRWRnZShzb3VyY2UsIHRhcmdldCwgYXR0cmlidXRlcyk7XG4gICAgZWxzZSByZXR1cm4gZ3JhcGguYWRkRGlyZWN0ZWRFZGdlV2l0aEtleShrZXksIHNvdXJjZSwgdGFyZ2V0LCBhdHRyaWJ1dGVzKTtcbiAgfVxufTtcblxuZXhwb3J0cy5jb3B5RWRnZSA9IGZ1bmN0aW9uIGNvcHlFZGdlKFxuICBncmFwaCxcbiAgdW5kaXJlY3RlZCxcbiAga2V5LFxuICBzb3VyY2UsXG4gIHRhcmdldCxcbiAgYXR0cmlidXRlc1xuKSB7XG4gIGF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCBhdHRyaWJ1dGVzKTtcblxuICBpZiAodW5kaXJlY3RlZCkge1xuICAgIGlmIChrZXkgPT09IG51bGwgfHwga2V5ID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gZ3JhcGguYWRkVW5kaXJlY3RlZEVkZ2Uoc291cmNlLCB0YXJnZXQsIGF0dHJpYnV0ZXMpO1xuICAgIGVsc2UgcmV0dXJuIGdyYXBoLmFkZFVuZGlyZWN0ZWRFZGdlV2l0aEtleShrZXksIHNvdXJjZSwgdGFyZ2V0LCBhdHRyaWJ1dGVzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGdyYXBoLmFkZERpcmVjdGVkRWRnZShzb3VyY2UsIHRhcmdldCwgYXR0cmlidXRlcyk7XG4gICAgZWxzZSByZXR1cm4gZ3JhcGguYWRkRGlyZWN0ZWRFZGdlV2l0aEtleShrZXksIHNvdXJjZSwgdGFyZ2V0LCBhdHRyaWJ1dGVzKTtcbiAgfVxufTtcblxuZXhwb3J0cy5tZXJnZUVkZ2UgPSBmdW5jdGlvbiBtZXJnZUVkZ2UoXG4gIGdyYXBoLFxuICB1bmRpcmVjdGVkLFxuICBrZXksXG4gIHNvdXJjZSxcbiAgdGFyZ2V0LFxuICBhdHRyaWJ1dGVzXG4pIHtcbiAgaWYgKHVuZGlyZWN0ZWQpIHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGdyYXBoLm1lcmdlVW5kaXJlY3RlZEVkZ2Uoc291cmNlLCB0YXJnZXQsIGF0dHJpYnV0ZXMpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBncmFwaC5tZXJnZVVuZGlyZWN0ZWRFZGdlV2l0aEtleShrZXksIHNvdXJjZSwgdGFyZ2V0LCBhdHRyaWJ1dGVzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGdyYXBoLm1lcmdlRGlyZWN0ZWRFZGdlKHNvdXJjZSwgdGFyZ2V0LCBhdHRyaWJ1dGVzKTtcbiAgICBlbHNlIHJldHVybiBncmFwaC5tZXJnZURpcmVjdGVkRWRnZVdpdGhLZXkoa2V5LCBzb3VyY2UsIHRhcmdldCwgYXR0cmlidXRlcyk7XG4gIH1cbn07XG5cbmV4cG9ydHMudXBkYXRlRWRnZSA9IGZ1bmN0aW9uIHVwZGF0ZUVkZ2UoXG4gIGdyYXBoLFxuICB1bmRpcmVjdGVkLFxuICBrZXksXG4gIHNvdXJjZSxcbiAgdGFyZ2V0LFxuICB1cGRhdGVyXG4pIHtcbiAgaWYgKHVuZGlyZWN0ZWQpIHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGdyYXBoLnVwZGF0ZVVuZGlyZWN0ZWRFZGdlKHNvdXJjZSwgdGFyZ2V0LCB1cGRhdGVyKTtcbiAgICBlbHNlIHJldHVybiBncmFwaC51cGRhdGVVbmRpcmVjdGVkRWRnZVdpdGhLZXkoa2V5LCBzb3VyY2UsIHRhcmdldCwgdXBkYXRlcik7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiBncmFwaC51cGRhdGVEaXJlY3RlZEVkZ2Uoc291cmNlLCB0YXJnZXQsIHVwZGF0ZXIpO1xuICAgIGVsc2UgcmV0dXJuIGdyYXBoLnVwZGF0ZURpcmVjdGVkRWRnZVdpdGhLZXkoa2V5LCBzb3VyY2UsIHRhcmdldCwgdXBkYXRlcik7XG4gIH1cbn07XG4iLCIvKipcbiAqIEdyYXBob2xvZ3kgTm9kZSBBZGRlcnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogR2VuZXJpYyBub2RlIGFkZGl0aW9uIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGF2b2lkIG5hc3R5IHJlcGV0aXRpdmVcbiAqIGNvbmRpdGlvbnMuXG4gKi9cbmV4cG9ydHMuY29weU5vZGUgPSBmdW5jdGlvbiAoZ3JhcGgsIGtleSwgYXR0cmlidXRlcykge1xuICBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlcyk7XG4gIHJldHVybiBncmFwaC5hZGROb2RlKGtleSwgYXR0cmlidXRlcyk7XG59O1xuIiwiLyoqXG4gKiBHcmFwaG9sb2d5IGlzR3JhcGhcbiAqID09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBWZXJ5IHNpbXBsZSBmdW5jdGlvbiBhaW1pbmcgYXQgZW5zdXJpbmcgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGFcbiAqIGdyYXBob2xvZ3kgaW5zdGFuY2UuXG4gKi9cblxuLyoqXG4gKiBDaGVja2luZyB0aGUgdmFsdWUgaXMgYSBncmFwaG9sb2d5IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSAge2FueX0gICAgIHZhbHVlIC0gVGFyZ2V0IHZhbHVlLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0dyYXBoKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIHZhbHVlLmFkZFVuZGlyZWN0ZWRFZGdlV2l0aEtleSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5kcm9wTm9kZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5tdWx0aSA9PT0gJ2Jvb2xlYW4nXG4gICk7XG59O1xuIiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5ncmFwaG9sb2d5PWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3JldHVybiB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LHQoZSl9ZnVuY3Rpb24gZSh0LGUpe3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQscih0LGUpfWZ1bmN0aW9uIG4odCl7cmV0dXJuIG49T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LG4odCl9ZnVuY3Rpb24gcih0LGUpe3JldHVybiByPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0scih0LGUpfWZ1bmN0aW9uIGkoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1mdW5jdGlvbiBvKHQsZSxuKXtyZXR1cm4gbz1pKCk/UmVmbGVjdC5jb25zdHJ1Y3QuYmluZCgpOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1bbnVsbF07aS5wdXNoLmFwcGx5KGksZSk7dmFyIG89bmV3KEZ1bmN0aW9uLmJpbmQuYXBwbHkodCxpKSk7cmV0dXJuIG4mJnIobyxuLnByb3RvdHlwZSksb30sby5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gYSh0KXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXA/bmV3IE1hcDp2b2lkIDA7cmV0dXJuIGE9ZnVuY3Rpb24odCl7aWYobnVsbD09PXR8fChpPXQsLTE9PT1GdW5jdGlvbi50b1N0cmluZy5jYWxsKGkpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpKSlyZXR1cm4gdDt2YXIgaTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtpZih2b2lkIDAhPT1lKXtpZihlLmhhcyh0KSlyZXR1cm4gZS5nZXQodCk7ZS5zZXQodCxhKX1mdW5jdGlvbiBhKCl7cmV0dXJuIG8odCxhcmd1bWVudHMsbih0aGlzKS5jb25zdHJ1Y3Rvcil9cmV0dXJuIGEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTphLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHIoYSx0KX0sYSh0KX1mdW5jdGlvbiBjKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fXZhciB1PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPTEsbj1hcmd1bWVudHMubGVuZ3RoO2U8bjtlKyspaWYoYXJndW1lbnRzW2VdKWZvcih2YXIgciBpbiBhcmd1bWVudHNbZV0pdFtyXT1hcmd1bWVudHNbZV1bcl07cmV0dXJuIHR9O2Z1bmN0aW9uIGQodCxlLG4scil7dmFyIGk9dC5fbm9kZXMuZ2V0KGUpLG89bnVsbDtyZXR1cm4gaT9vPVwibWl4ZWRcIj09PXI/aS5vdXQmJmkub3V0W25dfHxpLnVuZGlyZWN0ZWQmJmkudW5kaXJlY3RlZFtuXTpcImRpcmVjdGVkXCI9PT1yP2kub3V0JiZpLm91dFtuXTppLnVuZGlyZWN0ZWQmJmkudW5kaXJlY3RlZFtuXTpvfWZ1bmN0aW9uIHMoZSl7cmV0dXJuXCJvYmplY3RcIj09PXQoZSkmJm51bGwhPT1lJiZlLmNvbnN0cnVjdG9yPT09T2JqZWN0fWZ1bmN0aW9uIGgodCl7dmFyIGU7Zm9yKGUgaW4gdClyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBwKHQsZSxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMSx3cml0YWJsZTohMCx2YWx1ZTpufSl9ZnVuY3Rpb24gZih0LGUsbil7dmFyIHI9e2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP3IuZ2V0PW46KHIudmFsdWU9bixyLndyaXRhYmxlPSExKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHIpfWZ1bmN0aW9uIGwodCl7cmV0dXJuISFzKHQpJiYhKHQuYXR0cmlidXRlcyYmIUFycmF5LmlzQXJyYXkodC5hdHRyaWJ1dGVzKSl9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmFzc2lnbiYmKHU9T2JqZWN0LmFzc2lnbik7dmFyIGcseT17ZXhwb3J0czp7fX0sdz1cIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdD9SZWZsZWN0Om51bGwsdj13JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB3LmFwcGx5P3cuYXBwbHk6ZnVuY3Rpb24odCxlLG4pe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0LGUsbil9O2c9dyYmXCJmdW5jdGlvblwiPT10eXBlb2Ygdy5vd25LZXlzP3cub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KSl9OmZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KX07dmFyIGI9TnVtYmVyLmlzTmFOfHxmdW5jdGlvbih0KXtyZXR1cm4gdCE9dH07ZnVuY3Rpb24gbSgpe20uaW5pdC5jYWxsKHRoaXMpfXkuZXhwb3J0cz1tLHkuZXhwb3J0cy5vbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe2Z1bmN0aW9uIGkobil7dC5yZW1vdmVMaXN0ZW5lcihlLG8pLHIobil9ZnVuY3Rpb24gbygpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQucmVtb3ZlTGlzdGVuZXImJnQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGkpLG4oW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKX1VKHQsZSxvLHtvbmNlOiEwfSksXCJlcnJvclwiIT09ZSYmZnVuY3Rpb24odCxlLG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQub24mJlUodCxcImVycm9yXCIsZSxuKX0odCxpLHtvbmNlOiEwfSl9KSl9LG0uRXZlbnRFbWl0dGVyPW0sbS5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsbS5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAsbS5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIGs9MTA7ZnVuY3Rpb24gXyh0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpfWZ1bmN0aW9uIEcodCl7cmV0dXJuIHZvaWQgMD09PXQuX21heExpc3RlbmVycz9tLmRlZmF1bHRNYXhMaXN0ZW5lcnM6dC5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIHgodCxlLG4scil7dmFyIGksbyxhLGM7aWYoXyhuKSx2b2lkIDA9PT0obz10Ll9ldmVudHMpPyhvPXQuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHQuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1vLm5ld0xpc3RlbmVyJiYodC5lbWl0KFwibmV3TGlzdGVuZXJcIixlLG4ubGlzdGVuZXI/bi5saXN0ZW5lcjpuKSxvPXQuX2V2ZW50cyksYT1vW2VdKSx2b2lkIDA9PT1hKWE9b1tlXT1uLCsrdC5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2E9b1tlXT1yP1tuLGFdOlthLG5dOnI/YS51bnNoaWZ0KG4pOmEucHVzaChuKSwoaT1HKHQpKT4wJiZhLmxlbmd0aD5pJiYhYS53YXJuZWQpe2Eud2FybmVkPSEwO3ZhciB1PW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrYS5sZW5ndGgrXCIgXCIrU3RyaW5nKGUpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7dS5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsdS5lbWl0dGVyPXQsdS50eXBlPWUsdS5jb3VudD1hLmxlbmd0aCxjPXUsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oYyl9cmV0dXJuIHR9ZnVuY3Rpb24gRSgpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gQSh0LGUsbil7dmFyIHI9e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OnQsdHlwZTplLGxpc3RlbmVyOm59LGk9RS5iaW5kKHIpO3JldHVybiBpLmxpc3RlbmVyPW4sci53cmFwRm49aSxpfWZ1bmN0aW9uIEwodCxlLG4pe3ZhciByPXQuX2V2ZW50cztpZih2b2lkIDA9PT1yKXJldHVybltdO3ZhciBpPXJbZV07cmV0dXJuIHZvaWQgMD09PWk/W106XCJmdW5jdGlvblwiPT10eXBlb2YgaT9uP1tpLmxpc3RlbmVyfHxpXTpbaV06bj9mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KHQubGVuZ3RoKSxuPTA7bjxlLmxlbmd0aDsrK24pZVtuXT10W25dLmxpc3RlbmVyfHx0W25dO3JldHVybiBlfShpKTpEKGksaS5sZW5ndGgpfWZ1bmN0aW9uIFModCl7dmFyIGU9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PWUpe3ZhciBuPWVbdF07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gMTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiBEKHQsZSl7Zm9yKHZhciBuPW5ldyBBcnJheShlKSxyPTA7cjxlOysrciluW3JdPXRbcl07cmV0dXJuIG59ZnVuY3Rpb24gVSh0LGUsbixyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uKXIub25jZT90Lm9uY2UoZSxuKTp0Lm9uKGUsbik7ZWxzZXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LmFkZEV2ZW50TGlzdGVuZXIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgdCk7dC5hZGRFdmVudExpc3RlbmVyKGUsKGZ1bmN0aW9uIGkobyl7ci5vbmNlJiZ0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxpKSxuKG8pfSkpfX1mdW5jdGlvbiBOKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwib2JsaXRlcmF0b3IvaXRlcmF0b3I6IGV4cGVjdGluZyBhIGZ1bmN0aW9uIVwiKTt0aGlzLm5leHQ9dH1PYmplY3QuZGVmaW5lUHJvcGVydHkobSxcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0fHx0PDB8fGIodCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK3QrXCIuXCIpO2s9dH19KSxtLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxtLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHR8fHQ8MHx8Yih0KSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrdCtcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz10LHRoaXN9LG0ucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBHKHRoaXMpfSxtLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyllLnB1c2goYXJndW1lbnRzW25dKTt2YXIgcj1cImVycm9yXCI9PT10LGk9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PWkpcj1yJiZ2b2lkIDA9PT1pLmVycm9yO2Vsc2UgaWYoIXIpcmV0dXJuITE7aWYocil7dmFyIG87aWYoZS5sZW5ndGg+MCYmKG89ZVswXSksbyBpbnN0YW5jZW9mIEVycm9yKXRocm93IG87dmFyIGE9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhvP1wiIChcIitvLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IGEuY29udGV4dD1vLGF9dmFyIGM9aVt0XTtpZih2b2lkIDA9PT1jKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMpdihjLHRoaXMsZSk7ZWxzZXt2YXIgdT1jLmxlbmd0aCxkPUQoYyx1KTtmb3Iobj0wO248dTsrK24pdihkW25dLHRoaXMsZSl9cmV0dXJuITB9LG0ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHgodGhpcyx0LGUsITEpfSxtLnByb3RvdHlwZS5vbj1tLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixtLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4geCh0aGlzLHQsZSwhMCl9LG0ucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gXyhlKSx0aGlzLm9uKHQsQSh0aGlzLHQsZSkpLHRoaXN9LG0ucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gXyhlKSx0aGlzLnByZXBlbmRMaXN0ZW5lcih0LEEodGhpcyx0LGUpKSx0aGlzfSxtLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3ZhciBuLHIsaSxvLGE7aWYoXyhlKSx2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShuPXJbdF0pKXJldHVybiB0aGlzO2lmKG49PT1lfHxuLmxpc3RlbmVyPT09ZSkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgclt0XSxyLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLHQsbi5saXN0ZW5lcnx8ZSkpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil7Zm9yKGk9LTEsbz1uLmxlbmd0aC0xO28+PTA7by0tKWlmKG5bb109PT1lfHxuW29dLmxpc3RlbmVyPT09ZSl7YT1uW29dLmxpc3RlbmVyLGk9bzticmVha31pZihpPDApcmV0dXJuIHRoaXM7MD09PWk/bi5zaGlmdCgpOmZ1bmN0aW9uKHQsZSl7Zm9yKDtlKzE8dC5sZW5ndGg7ZSsrKXRbZV09dFtlKzFdO3QucG9wKCl9KG4saSksMT09PW4ubGVuZ3RoJiYoclt0XT1uWzBdKSx2b2lkIDAhPT1yLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLHQsYXx8ZSl9cmV0dXJuIHRoaXN9LG0ucHJvdG90eXBlLm9mZj1tLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixtLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7dmFyIGUsbixyO2lmKHZvaWQgMD09PShuPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09bi5yZW1vdmVMaXN0ZW5lcilyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApOnZvaWQgMCE9PW5bdF0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOmRlbGV0ZSBuW3RdKSx0aGlzO2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaSxvPU9iamVjdC5rZXlzKG4pO2ZvcihyPTA7cjxvLmxlbmd0aDsrK3IpXCJyZW1vdmVMaXN0ZW5lclwiIT09KGk9b1tyXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGkpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTAsdGhpc31pZihcImZ1bmN0aW9uXCI9PXR5cGVvZihlPW5bdF0pKXRoaXMucmVtb3ZlTGlzdGVuZXIodCxlKTtlbHNlIGlmKHZvaWQgMCE9PWUpZm9yKHI9ZS5sZW5ndGgtMTtyPj0wO3ItLSl0aGlzLnJlbW92ZUxpc3RlbmVyKHQsZVtyXSk7cmV0dXJuIHRoaXN9LG0ucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbih0KXtyZXR1cm4gTCh0aGlzLHQsITApfSxtLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuIEwodGhpcyx0LCExKX0sbS5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdC5saXN0ZW5lckNvdW50P3QubGlzdGVuZXJDb3VudChlKTpTLmNhbGwodCxlKX0sbS5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1TLG0ucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9nKHRoaXMuX2V2ZW50cyk6W119LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJihOLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxOLm9mPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLGU9dC5sZW5ndGgsbj0wO3JldHVybiBuZXcgTigoZnVuY3Rpb24oKXtyZXR1cm4gbj49ZT97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6dFtuKytdfX0pKX0sTi5lbXB0eT1mdW5jdGlvbigpe3JldHVybiBuZXcgTigoZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTohMH19KSl9LE4uZnJvbVNlcXVlbmNlPWZ1bmN0aW9uKHQpe3ZhciBlPTAsbj10Lmxlbmd0aDtyZXR1cm4gbmV3IE4oKGZ1bmN0aW9uKCl7cmV0dXJuIGU+PW4/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbZSsrXX19KSl9LE4uaXM9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBOfHxcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9PXQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQubmV4dH07dmFyIE89TixqPXt9O2ouQVJSQVlfQlVGRkVSX1NVUFBPUlQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyLGouU1lNQk9MX1NVUFBPUlQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbDt2YXIgQz1PLE09aix6PU0uQVJSQVlfQlVGRkVSX1NVUFBPUlQsVz1NLlNZTUJPTF9TVVBQT1JUO3ZhciBQPWZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0fHxBcnJheS5pc0FycmF5KHQpfHx6JiZBcnJheUJ1ZmZlci5pc1ZpZXcodCk/Qy5mcm9tU2VxdWVuY2UodCk6XCJvYmplY3RcIiE9dHlwZW9mIHR8fG51bGw9PT10P251bGw6VyYmXCJmdW5jdGlvblwiPT10eXBlb2YgdFtTeW1ib2wuaXRlcmF0b3JdP3RbU3ltYm9sLml0ZXJhdG9yXSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQubmV4dD90Om51bGx9KHQpO2lmKCFlKXRocm93IG5ldyBFcnJvcihcIm9ibGl0ZXJhdG9yOiB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG5vciBhIHZhbGlkIGl0ZXJhdG9yLlwiKTtyZXR1cm4gZX0sUj1QLEs9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4scj1hcmd1bWVudHMubGVuZ3RoPjE/ZToxLzAsaT1yIT09MS8wP25ldyBBcnJheShyKTpbXSxvPTAsYT1SKHQpOzspe2lmKG89PT1yKXJldHVybiBpO2lmKChuPWEubmV4dCgpKS5kb25lKXJldHVybiBvIT09ZSYmKGkubGVuZ3RoPW8pLGk7aVtvKytdPW4udmFsdWV9fSxUPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSl7dmFyIG47cmV0dXJuKG49dC5jYWxsKHRoaXMpfHx0aGlzKS5uYW1lPVwiR3JhcGhFcnJvclwiLG4ubWVzc2FnZT1lLG59cmV0dXJuIGUobix0KSxufShhKEVycm9yKSksQj1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciByO3JldHVybihyPXQuY2FsbCh0aGlzLGUpfHx0aGlzKS5uYW1lPVwiSW52YWxpZEFyZ3VtZW50c0dyYXBoRXJyb3JcIixcImZ1bmN0aW9uXCI9PXR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoYyhyKSxuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikscn1yZXR1cm4gZShuLHQpLG59KFQpLEY9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgcjtyZXR1cm4ocj10LmNhbGwodGhpcyxlKXx8dGhpcykubmFtZT1cIk5vdEZvdW5kR3JhcGhFcnJvclwiLFwiZnVuY3Rpb25cIj09dHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlJiZFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShjKHIpLG4ucHJvdG90eXBlLmNvbnN0cnVjdG9yKSxyfXJldHVybiBlKG4sdCksbn0oVCksST1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciByO3JldHVybihyPXQuY2FsbCh0aGlzLGUpfHx0aGlzKS5uYW1lPVwiVXNhZ2VHcmFwaEVycm9yXCIsXCJmdW5jdGlvblwiPT10eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UmJkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGMociksbi5wcm90b3R5cGUuY29uc3RydWN0b3IpLHJ9cmV0dXJuIGUobix0KSxufShUKTtmdW5jdGlvbiBZKHQsZSl7dGhpcy5rZXk9dCx0aGlzLmF0dHJpYnV0ZXM9ZSx0aGlzLmNsZWFyKCl9ZnVuY3Rpb24gcSh0LGUpe3RoaXMua2V5PXQsdGhpcy5hdHRyaWJ1dGVzPWUsdGhpcy5jbGVhcigpfWZ1bmN0aW9uIEoodCxlKXt0aGlzLmtleT10LHRoaXMuYXR0cmlidXRlcz1lLHRoaXMuY2xlYXIoKX1mdW5jdGlvbiBWKHQsZSxuLHIsaSl7dGhpcy5rZXk9ZSx0aGlzLmF0dHJpYnV0ZXM9aSx0aGlzLnVuZGlyZWN0ZWQ9dCx0aGlzLnNvdXJjZT1uLHRoaXMudGFyZ2V0PXJ9WS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmluRGVncmVlPTAsdGhpcy5vdXREZWdyZWU9MCx0aGlzLnVuZGlyZWN0ZWREZWdyZWU9MCx0aGlzLnVuZGlyZWN0ZWRMb29wcz0wLHRoaXMuZGlyZWN0ZWRMb29wcz0wLHRoaXMuaW49e30sdGhpcy5vdXQ9e30sdGhpcy51bmRpcmVjdGVkPXt9fSxxLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuaW5EZWdyZWU9MCx0aGlzLm91dERlZ3JlZT0wLHRoaXMuZGlyZWN0ZWRMb29wcz0wLHRoaXMuaW49e30sdGhpcy5vdXQ9e319LEoucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy51bmRpcmVjdGVkRGVncmVlPTAsdGhpcy51bmRpcmVjdGVkTG9vcHM9MCx0aGlzLnVuZGlyZWN0ZWQ9e319LFYucHJvdG90eXBlLmF0dGFjaD1mdW5jdGlvbigpe3ZhciB0PVwib3V0XCIsZT1cImluXCI7dGhpcy51bmRpcmVjdGVkJiYodD1lPVwidW5kaXJlY3RlZFwiKTt2YXIgbj10aGlzLnNvdXJjZS5rZXkscj10aGlzLnRhcmdldC5rZXk7dGhpcy5zb3VyY2VbdF1bcl09dGhpcyx0aGlzLnVuZGlyZWN0ZWQmJm49PT1yfHwodGhpcy50YXJnZXRbZV1bbl09dGhpcyl9LFYucHJvdG90eXBlLmF0dGFjaE11bHRpPWZ1bmN0aW9uKCl7dmFyIHQ9XCJvdXRcIixlPVwiaW5cIixuPXRoaXMuc291cmNlLmtleSxyPXRoaXMudGFyZ2V0LmtleTt0aGlzLnVuZGlyZWN0ZWQmJih0PWU9XCJ1bmRpcmVjdGVkXCIpO3ZhciBpPXRoaXMuc291cmNlW3RdLG89aVtyXTtpZih2b2lkIDA9PT1vKXJldHVybiBpW3JdPXRoaXMsdm9pZCh0aGlzLnVuZGlyZWN0ZWQmJm49PT1yfHwodGhpcy50YXJnZXRbZV1bbl09dGhpcykpO28ucHJldmlvdXM9dGhpcyx0aGlzLm5leHQ9byxpW3JdPXRoaXMsdGhpcy50YXJnZXRbZV1bbl09dGhpc30sVi5wcm90b3R5cGUuZGV0YWNoPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zb3VyY2Uua2V5LGU9dGhpcy50YXJnZXQua2V5LG49XCJvdXRcIixyPVwiaW5cIjt0aGlzLnVuZGlyZWN0ZWQmJihuPXI9XCJ1bmRpcmVjdGVkXCIpLGRlbGV0ZSB0aGlzLnNvdXJjZVtuXVtlXSxkZWxldGUgdGhpcy50YXJnZXRbcl1bdF19LFYucHJvdG90eXBlLmRldGFjaE11bHRpPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zb3VyY2Uua2V5LGU9dGhpcy50YXJnZXQua2V5LG49XCJvdXRcIixyPVwiaW5cIjt0aGlzLnVuZGlyZWN0ZWQmJihuPXI9XCJ1bmRpcmVjdGVkXCIpLHZvaWQgMD09PXRoaXMucHJldmlvdXM/dm9pZCAwPT09dGhpcy5uZXh0PyhkZWxldGUgdGhpcy5zb3VyY2Vbbl1bZV0sZGVsZXRlIHRoaXMudGFyZ2V0W3JdW3RdKToodGhpcy5uZXh0LnByZXZpb3VzPXZvaWQgMCx0aGlzLnNvdXJjZVtuXVtlXT10aGlzLm5leHQsdGhpcy50YXJnZXRbcl1bdF09dGhpcy5uZXh0KToodGhpcy5wcmV2aW91cy5uZXh0PXRoaXMubmV4dCx2b2lkIDAhPT10aGlzLm5leHQmJih0aGlzLm5leHQucHJldmlvdXM9dGhpcy5wcmV2aW91cykpfTtmdW5jdGlvbiBIKHQsZSxuLHIsaSxvLGEpe3ZhciBjLHUsZCxzO2lmKHI9XCJcIityLDA9PT1uKXtpZighKGM9dC5fbm9kZXMuZ2V0KHIpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChyLCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7ZD1pLHM9b31lbHNlIGlmKDM9PT1uKXtpZihpPVwiXCIraSwhKHU9dC5fZWRnZXMuZ2V0KGkpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChpLCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7dmFyIGg9dS5zb3VyY2Uua2V5LHA9dS50YXJnZXQua2V5O2lmKHI9PT1oKWM9dS50YXJnZXQ7ZWxzZXtpZihyIT09cCl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHRoZSBcIicpLmNvbmNhdChyLCdcIiBub2RlIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgXCInKS5jb25jYXQoaSwnXCIgZWRnZSAoJykuY29uY2F0KGgsXCIsIFwiKS5jb25jYXQocCxcIikuXCIpKTtjPXUuc291cmNlfWQ9byxzPWF9ZWxzZXtpZighKHU9dC5fZWRnZXMuZ2V0KHIpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChyLCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7Yz0xPT09bj91LnNvdXJjZTp1LnRhcmdldCxkPWkscz1vfXJldHVybltjLGQsc119dmFyIFE9W3tuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiZ2V0XCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG89SCh0aGlzLGUsbix0LHIsaSksYT1vWzBdLGM9b1sxXTtyZXR1cm4gYS5hdHRyaWJ1dGVzW2NdfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiZ2V0XCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXtyZXR1cm4gSCh0aGlzLGUsbix0LHIpWzBdLmF0dHJpYnV0ZXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJoYXNcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbz1IKHRoaXMsZSxuLHQscixpKSxhPW9bMF0sYz1vWzFdO3JldHVybiBhLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoYyl9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJzZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpLG8pe3ZhciBhPUgodGhpcyxlLG4sdCxyLGksbyksYz1hWzBdLHU9YVsxXSxkPWFbMl07cmV0dXJuIGMuYXR0cmlidXRlc1t1XT1kLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6Yy5rZXksdHlwZTpcInNldFwiLGF0dHJpYnV0ZXM6Yy5hdHRyaWJ1dGVzLG5hbWU6dX0pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJ1cGRhdGVcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpLG8pe3ZhciBhPUgodGhpcyxlLG4sdCxyLGksbyksYz1hWzBdLHU9YVsxXSxkPWFbMl07aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZCl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiB1cGRhdGVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uLlwiKSk7dmFyIHM9Yy5hdHRyaWJ1dGVzLGg9ZChzW3VdKTtyZXR1cm4gc1t1XT1oLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6Yy5rZXksdHlwZTpcInNldFwiLGF0dHJpYnV0ZXM6Yy5hdHRyaWJ1dGVzLG5hbWU6dX0pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJyZW1vdmVcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbz1IKHRoaXMsZSxuLHQscixpKSxhPW9bMF0sYz1vWzFdO3JldHVybiBkZWxldGUgYS5hdHRyaWJ1dGVzW2NdLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6YS5rZXksdHlwZTpcInJlbW92ZVwiLGF0dHJpYnV0ZXM6YS5hdHRyaWJ1dGVzLG5hbWU6Y30pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJyZXBsYWNlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGkpe3ZhciBvPUgodGhpcyxlLG4sdCxyLGkpLGE9b1swXSxjPW9bMV07aWYoIXMoYykpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKSk7cmV0dXJuIGEuYXR0cmlidXRlcz1jLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6YS5rZXksdHlwZTpcInJlcGxhY2VcIixhdHRyaWJ1dGVzOmEuYXR0cmlidXRlc30pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJtZXJnZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlc1wiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbz1IKHRoaXMsZSxuLHQscixpKSxhPW9bMF0sYz1vWzFdO2lmKCFzKGMpKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHByb3ZpZGVkIGF0dHJpYnV0ZXMgYXJlIG5vdCBhIHBsYWluIG9iamVjdC5cIikpO3JldHVybiB1KGEuYXR0cmlidXRlcyxjKSx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5OmEua2V5LHR5cGU6XCJtZXJnZVwiLGF0dHJpYnV0ZXM6YS5hdHRyaWJ1dGVzLGRhdGE6Y30pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJ1cGRhdGVcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG89SCh0aGlzLGUsbix0LHIsaSksYT1vWzBdLGM9b1sxXTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBjKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHByb3ZpZGVkIHVwZGF0ZXIgaXMgbm90IGEgZnVuY3Rpb24uXCIpKTtyZXR1cm4gYS5hdHRyaWJ1dGVzPWMoYS5hdHRyaWJ1dGVzKSx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5OmEua2V5LHR5cGU6XCJ1cGRhdGVcIixhdHRyaWJ1dGVzOmEuYXR0cmlidXRlc30pLHRoaXN9fX1dO3ZhciBYPVt7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cImdldFwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNle2lmKFwibWl4ZWRcIiE9PW4pdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIG9ubHkgYSBrZXkgKHZzLiBhIHNvdXJjZSBhbmQgdGFyZ2V0KSBkb2VzIG5vdCBtYWtlIHNlbnNlIHNpbmNlIGFuIGVkZ2Ugd2l0aCB0aGlzIGtleSBjb3VsZCBoYXZlIHRoZSBvdGhlciB0eXBlLlwiKSk7aWYodD1cIlwiK3QsIShpPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfXJldHVybiBpLmF0dHJpYnV0ZXNbcl19fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJnZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0KXt2YXIgcjtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgaT1cIlwiK3Qsbz1cIlwiK2FyZ3VtZW50c1sxXTtpZighKHI9ZCh0aGlzLGksbyxuKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQoaSwnXCIgLSBcIicpLmNvbmNhdChvLCdcIikuJykpfWVsc2V7aWYoXCJtaXhlZFwiIT09bil0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGggb25seSBhIGtleSAodnMuIGEgc291cmNlIGFuZCB0YXJnZXQpIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugc2luY2UgYW4gZWRnZSB3aXRoIHRoaXMga2V5IGNvdWxkIGhhdmUgdGhlIG90aGVyIHR5cGUuXCIpKTtpZih0PVwiXCIrdCwhKHI9dGhpcy5fZWRnZXMuZ2V0KHQpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSl9cmV0dXJuIHIuYXR0cmlidXRlc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cImhhc1wiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNle2lmKFwibWl4ZWRcIiE9PW4pdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIG9ubHkgYSBrZXkgKHZzLiBhIHNvdXJjZSBhbmQgdGFyZ2V0KSBkb2VzIG5vdCBtYWtlIHNlbnNlIHNpbmNlIGFuIGVkZ2Ugd2l0aCB0aGlzIGtleSBjb3VsZCBoYXZlIHRoZSBvdGhlciB0eXBlLlwiKSk7aWYodD1cIlwiK3QsIShpPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfXJldHVybiBpLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocil9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJzZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbztpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjMpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgYT1cIlwiK3QsYz1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0saT1hcmd1bWVudHNbM10sIShvPWQodGhpcyxhLGMsbikpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KGEsJ1wiIC0gXCInKS5jb25jYXQoYywnXCIpLicpKX1lbHNle2lmKFwibWl4ZWRcIiE9PW4pdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIG9ubHkgYSBrZXkgKHZzLiBhIHNvdXJjZSBhbmQgdGFyZ2V0KSBkb2VzIG5vdCBtYWtlIHNlbnNlIHNpbmNlIGFuIGVkZ2Ugd2l0aCB0aGlzIGtleSBjb3VsZCBoYXZlIHRoZSBvdGhlciB0eXBlLlwiKSk7aWYodD1cIlwiK3QsIShvPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfXJldHVybiBvLmF0dHJpYnV0ZXNbcl09aSx0aGlzLmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5Om8ua2V5LHR5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOm8uYXR0cmlidXRlcyxuYW1lOnJ9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwidXBkYXRlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG87aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4zKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIGE9XCJcIit0LGM9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdLCEobz1kKHRoaXMsYSxjLG4pKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChhLCdcIiAtIFwiJykuY29uY2F0KGMsJ1wiKS4nKSl9ZWxzZXtpZihcIm1peGVkXCIhPT1uKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCBvbmx5IGEga2V5ICh2cy4gYSBzb3VyY2UgYW5kIHRhcmdldCkgZG9lcyBub3QgbWFrZSBzZW5zZSBzaW5jZSBhbiBlZGdlIHdpdGggdGhpcyBrZXkgY291bGQgaGF2ZSB0aGUgb3RoZXIgdHlwZS5cIikpO2lmKHQ9XCJcIit0LCEobz10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKX1pZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHVwZGF0ZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24uXCIpKTtyZXR1cm4gby5hdHRyaWJ1dGVzW3JdPWkoby5hdHRyaWJ1dGVzW3JdKSx0aGlzLmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5Om8ua2V5LHR5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOm8uYXR0cmlidXRlcyxuYW1lOnJ9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwicmVtb3ZlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIpe3ZhciBpO2lmKFwibWl4ZWRcIiE9PXRoaXMudHlwZSYmXCJtaXhlZFwiIT09biYmbiE9PXRoaXMudHlwZSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgZmluZCB0aGlzIHR5cGUgb2YgZWRnZXMgaW4geW91ciBcIikuY29uY2F0KHRoaXMudHlwZSxcIiBncmFwaC5cIikpO2lmKGFyZ3VtZW50cy5sZW5ndGg+Mil7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gYXNraW5nIGFib3V0IGFuIGVkZ2UncyBhdHRyaWJ1dGVzIGluIGEgTXVsdGlHcmFwaCBzaW5jZSB3ZSBjYW5ub3QgaW5mZXIgdGhlIG9uZSB5b3Ugd2FudCBpbmZvcm1hdGlvbiBhYm91dC5cIikpO3ZhciBvPVwiXCIrdCxhPVwiXCIrcjtpZihyPWFyZ3VtZW50c1syXSwhKGk9ZCh0aGlzLG8sYSxuKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQobywnXCIgLSBcIicpLmNvbmNhdChhLCdcIikuJykpfWVsc2V7aWYoXCJtaXhlZFwiIT09bil0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGggb25seSBhIGtleSAodnMuIGEgc291cmNlIGFuZCB0YXJnZXQpIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugc2luY2UgYW4gZWRnZSB3aXRoIHRoaXMga2V5IGNvdWxkIGhhdmUgdGhlIG90aGVyIHR5cGUuXCIpKTtpZih0PVwiXCIrdCwhKGk9dGhpcy5fZWRnZXMuZ2V0KHQpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSl9cmV0dXJuIGRlbGV0ZSBpLmF0dHJpYnV0ZXNbcl0sdGhpcy5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTppLmtleSx0eXBlOlwicmVtb3ZlXCIsYXR0cmlidXRlczppLmF0dHJpYnV0ZXMsbmFtZTpyfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInJlcGxhY2VcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIpe3ZhciBpO2lmKFwibWl4ZWRcIiE9PXRoaXMudHlwZSYmXCJtaXhlZFwiIT09biYmbiE9PXRoaXMudHlwZSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgZmluZCB0aGlzIHR5cGUgb2YgZWRnZXMgaW4geW91ciBcIikuY29uY2F0KHRoaXMudHlwZSxcIiBncmFwaC5cIikpO2lmKGFyZ3VtZW50cy5sZW5ndGg+Mil7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gYXNraW5nIGFib3V0IGFuIGVkZ2UncyBhdHRyaWJ1dGVzIGluIGEgTXVsdGlHcmFwaCBzaW5jZSB3ZSBjYW5ub3QgaW5mZXIgdGhlIG9uZSB5b3Ugd2FudCBpbmZvcm1hdGlvbiBhYm91dC5cIikpO3ZhciBvPVwiXCIrdCxhPVwiXCIrcjtpZihyPWFyZ3VtZW50c1syXSwhKGk9ZCh0aGlzLG8sYSxuKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQobywnXCIgLSBcIicpLmNvbmNhdChhLCdcIikuJykpfWVsc2V7aWYoXCJtaXhlZFwiIT09bil0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGggb25seSBhIGtleSAodnMuIGEgc291cmNlIGFuZCB0YXJnZXQpIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugc2luY2UgYW4gZWRnZSB3aXRoIHRoaXMga2V5IGNvdWxkIGhhdmUgdGhlIG90aGVyIHR5cGUuXCIpKTtpZih0PVwiXCIrdCwhKGk9dGhpcy5fZWRnZXMuZ2V0KHQpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSl9aWYoIXMocikpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKSk7cmV0dXJuIGkuYXR0cmlidXRlcz1yLHRoaXMuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6aS5rZXksdHlwZTpcInJlcGxhY2VcIixhdHRyaWJ1dGVzOmkuYXR0cmlidXRlc30pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJtZXJnZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlc1wiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscil7dmFyIGk7aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4yKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIG89XCJcIit0LGE9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLCEoaT1kKHRoaXMsbyxhLG4pKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChvLCdcIiAtIFwiJykuY29uY2F0KGEsJ1wiKS4nKSl9ZWxzZXtpZihcIm1peGVkXCIhPT1uKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCBvbmx5IGEga2V5ICh2cy4gYSBzb3VyY2UgYW5kIHRhcmdldCkgZG9lcyBub3QgbWFrZSBzZW5zZSBzaW5jZSBhbiBlZGdlIHdpdGggdGhpcyBrZXkgY291bGQgaGF2ZSB0aGUgb3RoZXIgdHlwZS5cIikpO2lmKHQ9XCJcIit0LCEoaT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKX1pZighcyhyKSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBwcm92aWRlZCBhdHRyaWJ1dGVzIGFyZSBub3QgYSBwbGFpbiBvYmplY3QuXCIpKTtyZXR1cm4gdShpLmF0dHJpYnV0ZXMsciksdGhpcy5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTppLmtleSx0eXBlOlwibWVyZ2VcIixhdHRyaWJ1dGVzOmkuYXR0cmlidXRlcyxkYXRhOnJ9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwidXBkYXRlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNle2lmKFwibWl4ZWRcIiE9PW4pdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIG9ubHkgYSBrZXkgKHZzLiBhIHNvdXJjZSBhbmQgdGFyZ2V0KSBkb2VzIG5vdCBtYWtlIHNlbnNlIHNpbmNlIGFuIGVkZ2Ugd2l0aCB0aGlzIGtleSBjb3VsZCBoYXZlIHRoZSBvdGhlciB0eXBlLlwiKSk7aWYodD1cIlwiK3QsIShpPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfWlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogcHJvdmlkZWQgdXBkYXRlciBpcyBub3QgYSBmdW5jdGlvbi5cIikpO3JldHVybiBpLmF0dHJpYnV0ZXM9cihpLmF0dHJpYnV0ZXMpLHRoaXMuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6aS5rZXksdHlwZTpcInVwZGF0ZVwiLGF0dHJpYnV0ZXM6aS5hdHRyaWJ1dGVzfSksdGhpc319fV07dmFyIFo9TywkPVAsdHQ9ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMsZT1udWxsLG49LTE7cmV0dXJuIG5ldyBaKChmdW5jdGlvbigpe2Zvcih2YXIgcj1udWxsOzspe2lmKG51bGw9PT1lKXtpZigrK24+PXQubGVuZ3RoKXJldHVybntkb25lOiEwfTtlPSQodFtuXSl9aWYoITAhPT0ocj1lLm5leHQoKSkuZG9uZSlicmVhaztlPW51bGx9cmV0dXJuIHJ9KSl9LGV0PVt7bmFtZTpcImVkZ2VzXCIsdHlwZTpcIm1peGVkXCJ9LHtuYW1lOlwiaW5FZGdlc1wiLHR5cGU6XCJkaXJlY3RlZFwiLGRpcmVjdGlvbjpcImluXCJ9LHtuYW1lOlwib3V0RWRnZXNcIix0eXBlOlwiZGlyZWN0ZWRcIixkaXJlY3Rpb246XCJvdXRcIn0se25hbWU6XCJpbmJvdW5kRWRnZXNcIix0eXBlOlwibWl4ZWRcIixkaXJlY3Rpb246XCJpblwifSx7bmFtZTpcIm91dGJvdW5kRWRnZXNcIix0eXBlOlwibWl4ZWRcIixkaXJlY3Rpb246XCJvdXRcIn0se25hbWU6XCJkaXJlY3RlZEVkZ2VzXCIsdHlwZTpcImRpcmVjdGVkXCJ9LHtuYW1lOlwidW5kaXJlY3RlZEVkZ2VzXCIsdHlwZTpcInVuZGlyZWN0ZWRcIn1dO2Z1bmN0aW9uIG50KHQsZSxuLHIpe3ZhciBpPSExO2Zvcih2YXIgbyBpbiBlKWlmKG8hPT1yKXt2YXIgYT1lW29dO2lmKGk9bihhLmtleSxhLmF0dHJpYnV0ZXMsYS5zb3VyY2Uua2V5LGEudGFyZ2V0LmtleSxhLnNvdXJjZS5hdHRyaWJ1dGVzLGEudGFyZ2V0LmF0dHJpYnV0ZXMsYS51bmRpcmVjdGVkKSx0JiZpKXJldHVybiBhLmtleX19ZnVuY3Rpb24gcnQodCxlLG4scil7dmFyIGksbyxhLGM9ITE7Zm9yKHZhciB1IGluIGUpaWYodSE9PXIpe2k9ZVt1XTtkb3tpZihvPWkuc291cmNlLGE9aS50YXJnZXQsYz1uKGkua2V5LGkuYXR0cmlidXRlcyxvLmtleSxhLmtleSxvLmF0dHJpYnV0ZXMsYS5hdHRyaWJ1dGVzLGkudW5kaXJlY3RlZCksdCYmYylyZXR1cm4gaS5rZXk7aT1pLm5leHR9d2hpbGUodm9pZCAwIT09aSl9fWZ1bmN0aW9uIGl0KHQsZSl7dmFyIG4scj1PYmplY3Qua2V5cyh0KSxpPXIubGVuZ3RoLG89MDtyZXR1cm4gbmV3IE8oKGZ1bmN0aW9uKCl7ZG97aWYobiluPW4ubmV4dDtlbHNle2lmKG8+PWkpcmV0dXJue2RvbmU6ITB9O3ZhciBhPXJbbysrXTtpZihhPT09ZSl7bj12b2lkIDA7Y29udGludWV9bj10W2FdfX13aGlsZSghbik7cmV0dXJue2RvbmU6ITEsdmFsdWU6e2VkZ2U6bi5rZXksYXR0cmlidXRlczpuLmF0dHJpYnV0ZXMsc291cmNlOm4uc291cmNlLmtleSx0YXJnZXQ6bi50YXJnZXQua2V5LHNvdXJjZUF0dHJpYnV0ZXM6bi5zb3VyY2UuYXR0cmlidXRlcyx0YXJnZXRBdHRyaWJ1dGVzOm4udGFyZ2V0LmF0dHJpYnV0ZXMsdW5kaXJlY3RlZDpuLnVuZGlyZWN0ZWR9fX0pKX1mdW5jdGlvbiBvdCh0LGUsbixyKXt2YXIgaT1lW25dO2lmKGkpe3ZhciBvPWkuc291cmNlLGE9aS50YXJnZXQ7cmV0dXJuIHIoaS5rZXksaS5hdHRyaWJ1dGVzLG8ua2V5LGEua2V5LG8uYXR0cmlidXRlcyxhLmF0dHJpYnV0ZXMsaS51bmRpcmVjdGVkKSYmdD9pLmtleTp2b2lkIDB9fWZ1bmN0aW9uIGF0KHQsZSxuLHIpe3ZhciBpPWVbbl07aWYoaSl7dmFyIG89ITE7ZG97aWYobz1yKGkua2V5LGkuYXR0cmlidXRlcyxpLnNvdXJjZS5rZXksaS50YXJnZXQua2V5LGkuc291cmNlLmF0dHJpYnV0ZXMsaS50YXJnZXQuYXR0cmlidXRlcyxpLnVuZGlyZWN0ZWQpLHQmJm8pcmV0dXJuIGkua2V5O2k9aS5uZXh0fXdoaWxlKHZvaWQgMCE9PWkpfX1mdW5jdGlvbiBjdCh0LGUpe3ZhciBuPXRbZV07cmV0dXJuIHZvaWQgMCE9PW4ubmV4dD9uZXcgTygoZnVuY3Rpb24oKXtpZighbilyZXR1cm57ZG9uZTohMH07dmFyIHQ9e2VkZ2U6bi5rZXksYXR0cmlidXRlczpuLmF0dHJpYnV0ZXMsc291cmNlOm4uc291cmNlLmtleSx0YXJnZXQ6bi50YXJnZXQua2V5LHNvdXJjZUF0dHJpYnV0ZXM6bi5zb3VyY2UuYXR0cmlidXRlcyx0YXJnZXRBdHRyaWJ1dGVzOm4udGFyZ2V0LmF0dHJpYnV0ZXMsdW5kaXJlY3RlZDpuLnVuZGlyZWN0ZWR9O3JldHVybiBuPW4ubmV4dCx7ZG9uZTohMSx2YWx1ZTp0fX0pKTpPLm9mKHtlZGdlOm4ua2V5LGF0dHJpYnV0ZXM6bi5hdHRyaWJ1dGVzLHNvdXJjZTpuLnNvdXJjZS5rZXksdGFyZ2V0Om4udGFyZ2V0LmtleSxzb3VyY2VBdHRyaWJ1dGVzOm4uc291cmNlLmF0dHJpYnV0ZXMsdGFyZ2V0QXR0cmlidXRlczpuLnRhcmdldC5hdHRyaWJ1dGVzLHVuZGlyZWN0ZWQ6bi51bmRpcmVjdGVkfSl9ZnVuY3Rpb24gdXQodCxlKXtpZigwPT09dC5zaXplKXJldHVybltdO2lmKFwibWl4ZWRcIj09PWV8fGU9PT10LnR5cGUpcmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXkuZnJvbT9BcnJheS5mcm9tKHQuX2VkZ2VzLmtleXMoKSk6Syh0Ll9lZGdlcy5rZXlzKCksdC5fZWRnZXMuc2l6ZSk7Zm9yKHZhciBuLHIsaT1cInVuZGlyZWN0ZWRcIj09PWU/dC51bmRpcmVjdGVkU2l6ZTp0LmRpcmVjdGVkU2l6ZSxvPW5ldyBBcnJheShpKSxhPVwidW5kaXJlY3RlZFwiPT09ZSxjPXQuX2VkZ2VzLnZhbHVlcygpLHU9MDshMCE9PShuPWMubmV4dCgpKS5kb25lOykocj1uLnZhbHVlKS51bmRpcmVjdGVkPT09YSYmKG9bdSsrXT1yLmtleSk7cmV0dXJuIG99ZnVuY3Rpb24gZHQodCxlLG4scil7aWYoMCE9PWUuc2l6ZSlmb3IodmFyIGksbyxhPVwibWl4ZWRcIiE9PW4mJm4hPT1lLnR5cGUsYz1cInVuZGlyZWN0ZWRcIj09PW4sdT0hMSxkPWUuX2VkZ2VzLnZhbHVlcygpOyEwIT09KGk9ZC5uZXh0KCkpLmRvbmU7KWlmKG89aS52YWx1ZSwhYXx8by51bmRpcmVjdGVkPT09Yyl7dmFyIHM9byxoPXMua2V5LHA9cy5hdHRyaWJ1dGVzLGY9cy5zb3VyY2UsbD1zLnRhcmdldDtpZih1PXIoaCxwLGYua2V5LGwua2V5LGYuYXR0cmlidXRlcyxsLmF0dHJpYnV0ZXMsby51bmRpcmVjdGVkKSx0JiZ1KXJldHVybiBofX1mdW5jdGlvbiBzdCh0LGUpe2lmKDA9PT10LnNpemUpcmV0dXJuIE8uZW1wdHkoKTt2YXIgbj1cIm1peGVkXCIhPT1lJiZlIT09dC50eXBlLHI9XCJ1bmRpcmVjdGVkXCI9PT1lLGk9dC5fZWRnZXMudmFsdWVzKCk7cmV0dXJuIG5ldyBPKChmdW5jdGlvbigpe2Zvcih2YXIgdCxlOzspe2lmKCh0PWkubmV4dCgpKS5kb25lKXJldHVybiB0O2lmKGU9dC52YWx1ZSwhbnx8ZS51bmRpcmVjdGVkPT09cilicmVha31yZXR1cm57dmFsdWU6e2VkZ2U6ZS5rZXksYXR0cmlidXRlczplLmF0dHJpYnV0ZXMsc291cmNlOmUuc291cmNlLmtleSx0YXJnZXQ6ZS50YXJnZXQua2V5LHNvdXJjZUF0dHJpYnV0ZXM6ZS5zb3VyY2UuYXR0cmlidXRlcyx0YXJnZXRBdHRyaWJ1dGVzOmUudGFyZ2V0LmF0dHJpYnV0ZXMsdW5kaXJlY3RlZDplLnVuZGlyZWN0ZWR9LGRvbmU6ITF9fSkpfWZ1bmN0aW9uIGh0KHQsZSxuLHIsaSxvKXt2YXIgYSxjPWU/cnQ6bnQ7aWYoXCJ1bmRpcmVjdGVkXCIhPT1uKXtpZihcIm91dFwiIT09ciYmKGE9Yyh0LGkuaW4sbyksdCYmYSkpcmV0dXJuIGE7aWYoXCJpblwiIT09ciYmKGE9Yyh0LGkub3V0LG8scj92b2lkIDA6aS5rZXkpLHQmJmEpKXJldHVybiBhfWlmKFwiZGlyZWN0ZWRcIiE9PW4mJihhPWModCxpLnVuZGlyZWN0ZWQsbyksdCYmYSkpcmV0dXJuIGF9ZnVuY3Rpb24gcHQodCxlLG4scil7dmFyIGk9W107cmV0dXJuIGh0KCExLHQsZSxuLHIsKGZ1bmN0aW9uKHQpe2kucHVzaCh0KX0pKSxpfWZ1bmN0aW9uIGZ0KHQsZSxuKXt2YXIgcj1PLmVtcHR5KCk7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT10JiYoXCJvdXRcIiE9PWUmJnZvaWQgMCE9PW4uaW4mJihyPXR0KHIsaXQobi5pbikpKSxcImluXCIhPT1lJiZ2b2lkIDAhPT1uLm91dCYmKHI9dHQocixpdChuLm91dCxlP3ZvaWQgMDpuLmtleSkpKSksXCJkaXJlY3RlZFwiIT09dCYmdm9pZCAwIT09bi51bmRpcmVjdGVkJiYocj10dChyLGl0KG4udW5kaXJlY3RlZCkpKSxyfWZ1bmN0aW9uIGx0KHQsZSxuLHIsaSxvLGEpe3ZhciBjLHU9bj9hdDpvdDtpZihcInVuZGlyZWN0ZWRcIiE9PWUpe2lmKHZvaWQgMCE9PWkuaW4mJlwib3V0XCIhPT1yJiYoYz11KHQsaS5pbixvLGEpLHQmJmMpKXJldHVybiBjO2lmKHZvaWQgMCE9PWkub3V0JiZcImluXCIhPT1yJiYocnx8aS5rZXkhPT1vKSYmKGM9dSh0LGkub3V0LG8sYSksdCYmYykpcmV0dXJuIGN9aWYoXCJkaXJlY3RlZFwiIT09ZSYmdm9pZCAwIT09aS51bmRpcmVjdGVkJiYoYz11KHQsaS51bmRpcmVjdGVkLG8sYSksdCYmYykpcmV0dXJuIGN9ZnVuY3Rpb24gZ3QodCxlLG4scixpKXt2YXIgbz1bXTtyZXR1cm4gbHQoITEsdCxlLG4scixpLChmdW5jdGlvbih0KXtvLnB1c2godCl9KSksb31mdW5jdGlvbiB5dCh0LGUsbixyKXt2YXIgaT1PLmVtcHR5KCk7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT10JiYodm9pZCAwIT09bi5pbiYmXCJvdXRcIiE9PWUmJnIgaW4gbi5pbiYmKGk9dHQoaSxjdChuLmluLHIpKSksdm9pZCAwIT09bi5vdXQmJlwiaW5cIiE9PWUmJnIgaW4gbi5vdXQmJihlfHxuLmtleSE9PXIpJiYoaT10dChpLGN0KG4ub3V0LHIpKSkpLFwiZGlyZWN0ZWRcIiE9PXQmJnZvaWQgMCE9PW4udW5kaXJlY3RlZCYmciBpbiBuLnVuZGlyZWN0ZWQmJihpPXR0KGksY3Qobi51bmRpcmVjdGVkLHIpKSksaX12YXIgd3Q9W3tuYW1lOlwibmVpZ2hib3JzXCIsdHlwZTpcIm1peGVkXCJ9LHtuYW1lOlwiaW5OZWlnaGJvcnNcIix0eXBlOlwiZGlyZWN0ZWRcIixkaXJlY3Rpb246XCJpblwifSx7bmFtZTpcIm91dE5laWdoYm9yc1wiLHR5cGU6XCJkaXJlY3RlZFwiLGRpcmVjdGlvbjpcIm91dFwifSx7bmFtZTpcImluYm91bmROZWlnaGJvcnNcIix0eXBlOlwibWl4ZWRcIixkaXJlY3Rpb246XCJpblwifSx7bmFtZTpcIm91dGJvdW5kTmVpZ2hib3JzXCIsdHlwZTpcIm1peGVkXCIsZGlyZWN0aW9uOlwib3V0XCJ9LHtuYW1lOlwiZGlyZWN0ZWROZWlnaGJvcnNcIix0eXBlOlwiZGlyZWN0ZWRcIn0se25hbWU6XCJ1bmRpcmVjdGVkTmVpZ2hib3JzXCIsdHlwZTpcInVuZGlyZWN0ZWRcIn1dO2Z1bmN0aW9uIHZ0KCl7dGhpcy5BPW51bGwsdGhpcy5CPW51bGx9ZnVuY3Rpb24gYnQodCxlLG4scixpKXtmb3IodmFyIG8gaW4gcil7dmFyIGE9cltvXSxjPWEuc291cmNlLHU9YS50YXJnZXQsZD1jPT09bj91OmM7aWYoIWV8fCFlLmhhcyhkLmtleSkpe3ZhciBzPWkoZC5rZXksZC5hdHRyaWJ1dGVzKTtpZih0JiZzKXJldHVybiBkLmtleX19fWZ1bmN0aW9uIG10KHQsZSxuLHIsaSl7aWYoXCJtaXhlZFwiIT09ZSl7aWYoXCJ1bmRpcmVjdGVkXCI9PT1lKXJldHVybiBidCh0LG51bGwscixyLnVuZGlyZWN0ZWQsaSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIG4pcmV0dXJuIGJ0KHQsbnVsbCxyLHJbbl0saSl9dmFyIG8sYT1uZXcgdnQ7aWYoXCJ1bmRpcmVjdGVkXCIhPT1lKXtpZihcIm91dFwiIT09bil7aWYobz1idCh0LG51bGwscixyLmluLGkpLHQmJm8pcmV0dXJuIG87YS53cmFwKHIuaW4pfWlmKFwiaW5cIiE9PW4pe2lmKG89YnQodCxhLHIsci5vdXQsaSksdCYmbylyZXR1cm4gbzthLndyYXAoci5vdXQpfX1pZihcImRpcmVjdGVkXCIhPT1lJiYobz1idCh0LGEscixyLnVuZGlyZWN0ZWQsaSksdCYmbykpcmV0dXJuIG99ZnVuY3Rpb24ga3QodCxlLG4pe3ZhciByPU9iamVjdC5rZXlzKG4pLGk9ci5sZW5ndGgsbz0wO3JldHVybiBuZXcgTygoZnVuY3Rpb24oKXt2YXIgYT1udWxsO2Rve2lmKG8+PWkpcmV0dXJuIHQmJnQud3JhcChuKSx7ZG9uZTohMH07dmFyIGM9bltyW28rK11dLHU9Yy5zb3VyY2UsZD1jLnRhcmdldDthPXU9PT1lP2Q6dSx0JiZ0LmhhcyhhLmtleSkmJihhPW51bGwpfXdoaWxlKG51bGw9PT1hKTtyZXR1cm57ZG9uZTohMSx2YWx1ZTp7bmVpZ2hib3I6YS5rZXksYXR0cmlidXRlczphLmF0dHJpYnV0ZXN9fX0pKX1mdW5jdGlvbiBfdCh0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uO3QucHJvdG90eXBlW25dPWZ1bmN0aW9uKHQpe2lmKFwibWl4ZWRcIiE9PXImJlwibWl4ZWRcIiE9PXRoaXMudHlwZSYmciE9PXRoaXMudHlwZSlyZXR1cm5bXTt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChuLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXtpZihcIm1peGVkXCIhPT10KXtpZihcInVuZGlyZWN0ZWRcIj09PXQpcmV0dXJuIE9iamVjdC5rZXlzKG4udW5kaXJlY3RlZCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIE9iamVjdC5rZXlzKG5bZV0pfXZhciByPVtdO3JldHVybiBtdCghMSx0LGUsbiwoZnVuY3Rpb24odCl7ci5wdXNoKHQpfSkpLHJ9KFwibWl4ZWRcIj09PXI/dGhpcy50eXBlOnIsaSxlKX19ZnVuY3Rpb24gR3QodCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPW4uc2xpY2UoMCwtMSkrXCJFbnRyaWVzXCI7dC5wcm90b3R5cGVbb109ZnVuY3Rpb24odCl7aWYoXCJtaXhlZFwiIT09ciYmXCJtaXhlZFwiIT09dGhpcy50eXBlJiZyIT09dGhpcy50eXBlKXJldHVybiBPLmVtcHR5KCk7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobywnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBmdW5jdGlvbih0LGUsbil7aWYoXCJtaXhlZFwiIT09dCl7aWYoXCJ1bmRpcmVjdGVkXCI9PT10KXJldHVybiBrdChudWxsLG4sbi51bmRpcmVjdGVkKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4ga3QobnVsbCxuLG5bZV0pfXZhciByPU8uZW1wdHkoKSxpPW5ldyB2dDtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXQmJihcIm91dFwiIT09ZSYmKHI9dHQocixrdChpLG4sbi5pbikpKSxcImluXCIhPT1lJiYocj10dChyLGt0KGksbixuLm91dCkpKSksXCJkaXJlY3RlZFwiIT09dCYmKHI9dHQocixrdChpLG4sbi51bmRpcmVjdGVkKSkpLHJ9KFwibWl4ZWRcIj09PXI/dGhpcy50eXBlOnIsaSxlKX19ZnVuY3Rpb24geHQodCxlLG4scixpKXtmb3IodmFyIG8sYSxjLHUsZCxzLGgscD1yLl9ub2Rlcy52YWx1ZXMoKSxmPXIudHlwZTshMCE9PShvPXAubmV4dCgpKS5kb25lOyl7dmFyIGw9ITE7aWYoYT1vLnZhbHVlLFwidW5kaXJlY3RlZFwiIT09Zilmb3IoYyBpbiB1PWEub3V0KXtkPXVbY107ZG97aWYocz1kLnRhcmdldCxsPSEwLGg9aShhLmtleSxzLmtleSxhLmF0dHJpYnV0ZXMscy5hdHRyaWJ1dGVzLGQua2V5LGQuYXR0cmlidXRlcyxkLnVuZGlyZWN0ZWQpLHQmJmgpcmV0dXJuIGQ7ZD1kLm5leHR9d2hpbGUoZCl9aWYoXCJkaXJlY3RlZFwiIT09Zilmb3IoYyBpbiB1PWEudW5kaXJlY3RlZClpZighKGUmJmEua2V5PmMpKXtkPXVbY107ZG97aWYoKHM9ZC50YXJnZXQpLmtleSE9PWMmJihzPWQuc291cmNlKSxsPSEwLGg9aShhLmtleSxzLmtleSxhLmF0dHJpYnV0ZXMscy5hdHRyaWJ1dGVzLGQua2V5LGQuYXR0cmlidXRlcyxkLnVuZGlyZWN0ZWQpLHQmJmgpcmV0dXJuIGQ7ZD1kLm5leHR9d2hpbGUoZCl9aWYobiYmIWwmJihoPWkoYS5rZXksbnVsbCxhLmF0dHJpYnV0ZXMsbnVsbCxudWxsLG51bGwsbnVsbCksdCYmaCkpcmV0dXJuIG51bGx9fWZ1bmN0aW9uIEV0KHQpe2lmKCFzKHQpKXRocm93IG5ldyBCKCdHcmFwaC5pbXBvcnQ6IGludmFsaWQgc2VyaWFsaXplZCBub2RlLiBBIHNlcmlhbGl6ZWQgbm9kZSBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3Qgd2l0aCBhdCBsZWFzdCBhIFwia2V5XCIgcHJvcGVydHkuJyk7aWYoIShcImtleVwiaW4gdCkpdGhyb3cgbmV3IEIoXCJHcmFwaC5pbXBvcnQ6IHNlcmlhbGl6ZWQgbm9kZSBpcyBtaXNzaW5nIGl0cyBrZXkuXCIpO2lmKFwiYXR0cmlidXRlc1wiaW4gdCYmKCFzKHQuYXR0cmlidXRlcyl8fG51bGw9PT10LmF0dHJpYnV0ZXMpKXRocm93IG5ldyBCKFwiR3JhcGguaW1wb3J0OiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEF0dHJpYnV0ZXMgc2hvdWxkIGJlIGEgcGxhaW4gb2JqZWN0LCBudWxsIG9yIG9taXR0ZWQuXCIpfWZ1bmN0aW9uIEF0KHQpe2lmKCFzKHQpKXRocm93IG5ldyBCKCdHcmFwaC5pbXBvcnQ6IGludmFsaWQgc2VyaWFsaXplZCBlZGdlLiBBIHNlcmlhbGl6ZWQgZWRnZSBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3Qgd2l0aCBhdCBsZWFzdCBhIFwic291cmNlXCIgJiBcInRhcmdldFwiIHByb3BlcnR5LicpO2lmKCEoXCJzb3VyY2VcImluIHQpKXRocm93IG5ldyBCKFwiR3JhcGguaW1wb3J0OiBzZXJpYWxpemVkIGVkZ2UgaXMgbWlzc2luZyBpdHMgc291cmNlLlwiKTtpZighKFwidGFyZ2V0XCJpbiB0KSl0aHJvdyBuZXcgQihcIkdyYXBoLmltcG9ydDogc2VyaWFsaXplZCBlZGdlIGlzIG1pc3NpbmcgaXRzIHRhcmdldC5cIik7aWYoXCJhdHRyaWJ1dGVzXCJpbiB0JiYoIXModC5hdHRyaWJ1dGVzKXx8bnVsbD09PXQuYXR0cmlidXRlcykpdGhyb3cgbmV3IEIoXCJHcmFwaC5pbXBvcnQ6IGludmFsaWQgYXR0cmlidXRlcy4gQXR0cmlidXRlcyBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QsIG51bGwgb3Igb21pdHRlZC5cIik7aWYoXCJ1bmRpcmVjdGVkXCJpbiB0JiZcImJvb2xlYW5cIiE9dHlwZW9mIHQudW5kaXJlY3RlZCl0aHJvdyBuZXcgQihcIkdyYXBoLmltcG9ydDogaW52YWxpZCB1bmRpcmVjdGVkbmVzcyBpbmZvcm1hdGlvbi4gVW5kaXJlY3RlZCBzaG91bGQgYmUgYm9vbGVhbiBvciBvbWl0dGVkLlwiKX12dC5wcm90b3R5cGUud3JhcD1mdW5jdGlvbih0KXtudWxsPT09dGhpcy5BP3RoaXMuQT10Om51bGw9PT10aGlzLkImJih0aGlzLkI9dCl9LHZ0LnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPT10aGlzLkEmJnQgaW4gdGhpcy5BfHxudWxsIT09dGhpcy5CJiZ0IGluIHRoaXMuQn07dmFyIEx0LFN0PShMdD0yNTUmTWF0aC5mbG9vcigyNTYqTWF0aC5yYW5kb20oKSksZnVuY3Rpb24oKXtyZXR1cm4gTHQrK30pLER0PW5ldyBTZXQoW1wiZGlyZWN0ZWRcIixcInVuZGlyZWN0ZWRcIixcIm1peGVkXCJdKSxVdD1uZXcgU2V0KFtcImRvbWFpblwiLFwiX2V2ZW50c1wiLFwiX2V2ZW50c0NvdW50XCIsXCJfbWF4TGlzdGVuZXJzXCJdKSxOdD17YWxsb3dTZWxmTG9vcHM6ITAsbXVsdGk6ITEsdHlwZTpcIm1peGVkXCJ9O2Z1bmN0aW9uIE90KHQsZSxuKXt2YXIgcj1uZXcgdC5Ob2RlRGF0YUNsYXNzKGUsbik7cmV0dXJuIHQuX25vZGVzLnNldChlLHIpLHQuZW1pdChcIm5vZGVBZGRlZFwiLHtrZXk6ZSxhdHRyaWJ1dGVzOm59KSxyfWZ1bmN0aW9uIGp0KHQsZSxuLHIsaSxvLGEsYyl7aWYoIXImJlwidW5kaXJlY3RlZFwiPT09dC50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHlvdSBjYW5ub3QgYWRkIGEgZGlyZWN0ZWQgZWRnZSB0byBhbiB1bmRpcmVjdGVkIGdyYXBoLiBVc2UgdGhlICMuYWRkRWRnZSBvciAjLmFkZFVuZGlyZWN0ZWRFZGdlIGluc3RlYWQuXCIpKTtpZihyJiZcImRpcmVjdGVkXCI9PT10LnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogeW91IGNhbm5vdCBhZGQgYW4gdW5kaXJlY3RlZCBlZGdlIHRvIGEgZGlyZWN0ZWQgZ3JhcGguIFVzZSB0aGUgIy5hZGRFZGdlIG9yICMuYWRkRGlyZWN0ZWRFZGdlIGluc3RlYWQuXCIpKTtpZihjJiYhcyhjKSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGludmFsaWQgYXR0cmlidXRlcy4gRXhwZWN0aW5nIGFuIG9iamVjdCBidXQgZ290IFwiJykuY29uY2F0KGMsJ1wiJykpO2lmKG89XCJcIitvLGE9XCJcIithLGM9Y3x8e30sIXQuYWxsb3dTZWxmTG9vcHMmJm89PT1hKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsJzogc291cmNlICYgdGFyZ2V0IGFyZSB0aGUgc2FtZSAoXCInKS5jb25jYXQobyxcIlxcXCIpLCB0aHVzIGNyZWF0aW5nIGEgbG9vcCBleHBsaWNpdGx5IGZvcmJpZGRlbiBieSB0aGlzIGdyYXBoICdhbGxvd1NlbGZMb29wcycgb3B0aW9uIHNldCB0byBmYWxzZS5cIikpO3ZhciB1PXQuX25vZGVzLmdldChvKSxkPXQuX25vZGVzLmdldChhKTtpZighdSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHNvdXJjZSBub2RlIFwiJykuY29uY2F0KG8sJ1wiIG5vdCBmb3VuZC4nKSk7aWYoIWQpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiB0YXJnZXQgbm9kZSBcIicpLmNvbmNhdChhLCdcIiBub3QgZm91bmQuJykpO3ZhciBoPXtrZXk6bnVsbCx1bmRpcmVjdGVkOnIsc291cmNlOm8sdGFyZ2V0OmEsYXR0cmlidXRlczpjfTtpZihuKWk9dC5fZWRnZUtleUdlbmVyYXRvcigpO2Vsc2UgaWYoaT1cIlwiK2ksdC5fZWRnZXMuaGFzKGkpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsJzogdGhlIFwiJykuY29uY2F0KGksJ1wiIGVkZ2UgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGdyYXBoLicpKTtpZighdC5tdWx0aSYmKHI/dm9pZCAwIT09dS51bmRpcmVjdGVkW2FdOnZvaWQgMCE9PXUub3V0W2FdKSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGFuIGVkZ2UgbGlua2luZyBcIicpLmNvbmNhdChvLCdcIiB0byBcIicpLmNvbmNhdChhLFwiXFxcIiBhbHJlYWR5IGV4aXN0cy4gSWYgeW91IHJlYWxseSB3YW50IHRvIGFkZCBtdWx0aXBsZSBlZGdlcyBsaW5raW5nIHRob3NlIG5vZGVzLCB5b3Ugc2hvdWxkIGNyZWF0ZSBhIG11bHRpIGdyYXBoIGJ5IHVzaW5nIHRoZSAnbXVsdGknIG9wdGlvbi5cIikpO3ZhciBwPW5ldyBWKHIsaSx1LGQsYyk7dC5fZWRnZXMuc2V0KGkscCk7dmFyIGY9bz09PWE7cmV0dXJuIHI/KHUudW5kaXJlY3RlZERlZ3JlZSsrLGQudW5kaXJlY3RlZERlZ3JlZSsrLGYmJih1LnVuZGlyZWN0ZWRMb29wcysrLHQuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50KyspKToodS5vdXREZWdyZWUrKyxkLmluRGVncmVlKyssZiYmKHUuZGlyZWN0ZWRMb29wcysrLHQuX2RpcmVjdGVkU2VsZkxvb3BDb3VudCsrKSksdC5tdWx0aT9wLmF0dGFjaE11bHRpKCk6cC5hdHRhY2goKSxyP3QuX3VuZGlyZWN0ZWRTaXplKys6dC5fZGlyZWN0ZWRTaXplKyssaC5rZXk9aSx0LmVtaXQoXCJlZGdlQWRkZWRcIixoKSxpfWZ1bmN0aW9uIEN0KHQsZSxuLHIsaSxvLGEsYyxkKXtpZighciYmXCJ1bmRpcmVjdGVkXCI9PT10LnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogeW91IGNhbm5vdCBtZXJnZS91cGRhdGUgYSBkaXJlY3RlZCBlZGdlIHRvIGFuIHVuZGlyZWN0ZWQgZ3JhcGguIFVzZSB0aGUgIy5tZXJnZUVkZ2UvIy51cGRhdGVFZGdlIG9yICMuYWRkVW5kaXJlY3RlZEVkZ2UgaW5zdGVhZC5cIikpO2lmKHImJlwiZGlyZWN0ZWRcIj09PXQudHlwZSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiB5b3UgY2Fubm90IG1lcmdlL3VwZGF0ZSBhbiB1bmRpcmVjdGVkIGVkZ2UgdG8gYSBkaXJlY3RlZCBncmFwaC4gVXNlIHRoZSAjLm1lcmdlRWRnZS8jLnVwZGF0ZUVkZ2Ugb3IgIy5hZGREaXJlY3RlZEVkZ2UgaW5zdGVhZC5cIikpO2lmKGMpaWYoZCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgYyl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGludmFsaWQgdXBkYXRlciBmdW5jdGlvbi4gRXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIicpLmNvbmNhdChjLCdcIicpKX1lbHNlIGlmKCFzKGMpKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsJzogaW52YWxpZCBhdHRyaWJ1dGVzLiBFeHBlY3RpbmcgYW4gb2JqZWN0IGJ1dCBnb3QgXCInKS5jb25jYXQoYywnXCInKSk7dmFyIGg7aWYobz1cIlwiK28sYT1cIlwiK2EsZCYmKGg9YyxjPXZvaWQgMCksIXQuYWxsb3dTZWxmTG9vcHMmJm89PT1hKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsJzogc291cmNlICYgdGFyZ2V0IGFyZSB0aGUgc2FtZSAoXCInKS5jb25jYXQobyxcIlxcXCIpLCB0aHVzIGNyZWF0aW5nIGEgbG9vcCBleHBsaWNpdGx5IGZvcmJpZGRlbiBieSB0aGlzIGdyYXBoICdhbGxvd1NlbGZMb29wcycgb3B0aW9uIHNldCB0byBmYWxzZS5cIikpO3ZhciBwLGYsbD10Ll9ub2Rlcy5nZXQobyksZz10Ll9ub2Rlcy5nZXQoYSk7aWYoIW4mJihwPXQuX2VkZ2VzLmdldChpKSkpe2lmKCEocC5zb3VyY2Uua2V5PT09byYmcC50YXJnZXQua2V5PT09YXx8ciYmcC5zb3VyY2Uua2V5PT09YSYmcC50YXJnZXQua2V5PT09bykpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBpbmNvbnNpc3RlbmN5IGRldGVjdGVkIHdoZW4gYXR0ZW1wdGluZyB0byBtZXJnZSB0aGUgXCInKS5jb25jYXQoaSwnXCIgZWRnZSB3aXRoIFwiJykuY29uY2F0KG8sJ1wiIHNvdXJjZSAmIFwiJykuY29uY2F0KGEsJ1wiIHRhcmdldCB2cy4gKFwiJykuY29uY2F0KHAuc291cmNlLmtleSwnXCIsIFwiJykuY29uY2F0KHAudGFyZ2V0LmtleSwnXCIpLicpKTtmPXB9aWYoZnx8dC5tdWx0aXx8IWx8fChmPXI/bC51bmRpcmVjdGVkW2FdOmwub3V0W2FdKSxmKXt2YXIgeT1bZi5rZXksITEsITEsITFdO2lmKGQ/IWg6IWMpcmV0dXJuIHk7aWYoZCl7dmFyIHc9Zi5hdHRyaWJ1dGVzO2YuYXR0cmlidXRlcz1oKHcpLHQuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwicmVwbGFjZVwiLGtleTpmLmtleSxhdHRyaWJ1dGVzOmYuYXR0cmlidXRlc30pfWVsc2UgdShmLmF0dHJpYnV0ZXMsYyksdC5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJtZXJnZVwiLGtleTpmLmtleSxhdHRyaWJ1dGVzOmYuYXR0cmlidXRlcyxkYXRhOmN9KTtyZXR1cm4geX1jPWN8fHt9LGQmJmgmJihjPWgoYykpO3ZhciB2PXtrZXk6bnVsbCx1bmRpcmVjdGVkOnIsc291cmNlOm8sdGFyZ2V0OmEsYXR0cmlidXRlczpjfTtpZihuKWk9dC5fZWRnZUtleUdlbmVyYXRvcigpO2Vsc2UgaWYoaT1cIlwiK2ksdC5fZWRnZXMuaGFzKGkpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsJzogdGhlIFwiJykuY29uY2F0KGksJ1wiIGVkZ2UgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGdyYXBoLicpKTt2YXIgYj0hMSxtPSExO2x8fChsPU90KHQsbyx7fSksYj0hMCxvPT09YSYmKGc9bCxtPSEwKSksZ3x8KGc9T3QodCxhLHt9KSxtPSEwKSxwPW5ldyBWKHIsaSxsLGcsYyksdC5fZWRnZXMuc2V0KGkscCk7dmFyIGs9bz09PWE7cmV0dXJuIHI/KGwudW5kaXJlY3RlZERlZ3JlZSsrLGcudW5kaXJlY3RlZERlZ3JlZSsrLGsmJihsLnVuZGlyZWN0ZWRMb29wcysrLHQuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50KyspKToobC5vdXREZWdyZWUrKyxnLmluRGVncmVlKyssayYmKGwuZGlyZWN0ZWRMb29wcysrLHQuX2RpcmVjdGVkU2VsZkxvb3BDb3VudCsrKSksdC5tdWx0aT9wLmF0dGFjaE11bHRpKCk6cC5hdHRhY2goKSxyP3QuX3VuZGlyZWN0ZWRTaXplKys6dC5fZGlyZWN0ZWRTaXplKyssdi5rZXk9aSx0LmVtaXQoXCJlZGdlQWRkZWRcIix2KSxbaSwhMCxiLG1dfWZ1bmN0aW9uIE10KHQsZSl7dC5fZWRnZXMuZGVsZXRlKGUua2V5KTt2YXIgbj1lLnNvdXJjZSxyPWUudGFyZ2V0LGk9ZS5hdHRyaWJ1dGVzLG89ZS51bmRpcmVjdGVkLGE9bj09PXI7bz8obi51bmRpcmVjdGVkRGVncmVlLS0sci51bmRpcmVjdGVkRGVncmVlLS0sYSYmKG4udW5kaXJlY3RlZExvb3BzLS0sdC5fdW5kaXJlY3RlZFNlbGZMb29wQ291bnQtLSkpOihuLm91dERlZ3JlZS0tLHIuaW5EZWdyZWUtLSxhJiYobi5kaXJlY3RlZExvb3BzLS0sdC5fZGlyZWN0ZWRTZWxmTG9vcENvdW50LS0pKSx0Lm11bHRpP2UuZGV0YWNoTXVsdGkoKTplLmRldGFjaCgpLG8/dC5fdW5kaXJlY3RlZFNpemUtLTp0Ll9kaXJlY3RlZFNpemUtLSx0LmVtaXQoXCJlZGdlRHJvcHBlZFwiLHtrZXk6ZS5rZXksYXR0cmlidXRlczppLHNvdXJjZTpuLmtleSx0YXJnZXQ6ci5rZXksdW5kaXJlY3RlZDpvfSl9dmFyIHp0PWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU7aWYoZT1uLmNhbGwodGhpcyl8fHRoaXMsXCJib29sZWFuXCIhPXR5cGVvZih0PXUoe30sTnQsdCkpLm11bHRpKXRocm93IG5ldyBCKFwiR3JhcGguY29uc3RydWN0b3I6IGludmFsaWQgJ211bHRpJyBvcHRpb24uIEV4cGVjdGluZyBhIGJvb2xlYW4gYnV0IGdvdCBcXFwiXCIuY29uY2F0KHQubXVsdGksJ1wiLicpKTtpZighRHQuaGFzKHQudHlwZSkpdGhyb3cgbmV3IEIoJ0dyYXBoLmNvbnN0cnVjdG9yOiBpbnZhbGlkIFxcJ3R5cGVcXCcgb3B0aW9uLiBTaG91bGQgYmUgb25lIG9mIFwibWl4ZWRcIiwgXCJkaXJlY3RlZFwiIG9yIFwidW5kaXJlY3RlZFwiIGJ1dCBnb3QgXCInLmNvbmNhdCh0LnR5cGUsJ1wiLicpKTtpZihcImJvb2xlYW5cIiE9dHlwZW9mIHQuYWxsb3dTZWxmTG9vcHMpdGhyb3cgbmV3IEIoXCJHcmFwaC5jb25zdHJ1Y3RvcjogaW52YWxpZCAnYWxsb3dTZWxmTG9vcHMnIG9wdGlvbi4gRXhwZWN0aW5nIGEgYm9vbGVhbiBidXQgZ290IFxcXCJcIi5jb25jYXQodC5hbGxvd1NlbGZMb29wcywnXCIuJykpO3ZhciByPVwibWl4ZWRcIj09PXQudHlwZT9ZOlwiZGlyZWN0ZWRcIj09PXQudHlwZT9xOko7cChjKGUpLFwiTm9kZURhdGFDbGFzc1wiLHIpO3ZhciBpPVwiZ2VpZF9cIitTdCgpK1wiX1wiLG89MDtyZXR1cm4gcChjKGUpLFwiX2F0dHJpYnV0ZXNcIix7fSkscChjKGUpLFwiX25vZGVzXCIsbmV3IE1hcCkscChjKGUpLFwiX2VkZ2VzXCIsbmV3IE1hcCkscChjKGUpLFwiX2RpcmVjdGVkU2l6ZVwiLDApLHAoYyhlKSxcIl91bmRpcmVjdGVkU2l6ZVwiLDApLHAoYyhlKSxcIl9kaXJlY3RlZFNlbGZMb29wQ291bnRcIiwwKSxwKGMoZSksXCJfdW5kaXJlY3RlZFNlbGZMb29wQ291bnRcIiwwKSxwKGMoZSksXCJfZWRnZUtleUdlbmVyYXRvclwiLChmdW5jdGlvbigpe3ZhciB0O2Rve3Q9aStvKyt9d2hpbGUoZS5fZWRnZXMuaGFzKHQpKTtyZXR1cm4gdH0pKSxwKGMoZSksXCJfb3B0aW9uc1wiLHQpLFV0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBwKGMoZSksdCxlW3RdKX0pKSxmKGMoZSksXCJvcmRlclwiLChmdW5jdGlvbigpe3JldHVybiBlLl9ub2Rlcy5zaXplfSkpLGYoYyhlKSxcInNpemVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fZWRnZXMuc2l6ZX0pKSxmKGMoZSksXCJkaXJlY3RlZFNpemVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fZGlyZWN0ZWRTaXplfSkpLGYoYyhlKSxcInVuZGlyZWN0ZWRTaXplXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX3VuZGlyZWN0ZWRTaXplfSkpLGYoYyhlKSxcInNlbGZMb29wQ291bnRcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fZGlyZWN0ZWRTZWxmTG9vcENvdW50K2UuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50fSkpLGYoYyhlKSxcImRpcmVjdGVkU2VsZkxvb3BDb3VudFwiLChmdW5jdGlvbigpe3JldHVybiBlLl9kaXJlY3RlZFNlbGZMb29wQ291bnR9KSksZihjKGUpLFwidW5kaXJlY3RlZFNlbGZMb29wQ291bnRcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fdW5kaXJlY3RlZFNlbGZMb29wQ291bnR9KSksZihjKGUpLFwibXVsdGlcIixlLl9vcHRpb25zLm11bHRpKSxmKGMoZSksXCJ0eXBlXCIsZS5fb3B0aW9ucy50eXBlKSxmKGMoZSksXCJhbGxvd1NlbGZMb29wc1wiLGUuX29wdGlvbnMuYWxsb3dTZWxmTG9vcHMpLGYoYyhlKSxcImltcGxlbWVudGF0aW9uXCIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJncmFwaG9sb2d5XCJ9KSksZX1lKHIsbik7dmFyIGk9ci5wcm90b3R5cGU7cmV0dXJuIGkuX3Jlc2V0SW5zdGFuY2VDb3VudGVycz1mdW5jdGlvbigpe3RoaXMuX2RpcmVjdGVkU2l6ZT0wLHRoaXMuX3VuZGlyZWN0ZWRTaXplPTAsdGhpcy5fZGlyZWN0ZWRTZWxmTG9vcENvdW50PTAsdGhpcy5fdW5kaXJlY3RlZFNlbGZMb29wQ291bnQ9MH0saS5oYXNOb2RlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9ub2Rlcy5oYXMoXCJcIit0KX0saS5oYXNEaXJlY3RlZEVkZ2U9ZnVuY3Rpb24odCxlKXtpZihcInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZSlyZXR1cm4hMTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49XCJcIit0LHI9dGhpcy5fZWRnZXMuZ2V0KG4pO3JldHVybiEhciYmIXIudW5kaXJlY3RlZH1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIGk9dGhpcy5fbm9kZXMuZ2V0KHQpO3JldHVybiEhaSYmaS5vdXQuaGFzT3duUHJvcGVydHkoZSl9dGhyb3cgbmV3IEIoXCJHcmFwaC5oYXNEaXJlY3RlZEVkZ2U6IGludmFsaWQgYXJpdHkgKFwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiLCBpbnN0ZWFkIG9mIDEgb3IgMikuIFlvdSBjYW4gZWl0aGVyIGFzayBmb3IgYW4gZWRnZSBpZCBvciBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBlZGdlIGJldHdlZW4gYSBzb3VyY2UgJiBhIHRhcmdldC5cIikpfSxpLmhhc1VuZGlyZWN0ZWRFZGdlPWZ1bmN0aW9uKHQsZSl7aWYoXCJkaXJlY3RlZFwiPT09dGhpcy50eXBlKXJldHVybiExO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1cIlwiK3Qscj10aGlzLl9lZGdlcy5nZXQobik7cmV0dXJuISFyJiZyLnVuZGlyZWN0ZWR9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBpPXRoaXMuX25vZGVzLmdldCh0KTtyZXR1cm4hIWkmJmkudW5kaXJlY3RlZC5oYXNPd25Qcm9wZXJ0eShlKX10aHJvdyBuZXcgQihcIkdyYXBoLmhhc0RpcmVjdGVkRWRnZTogaW52YWxpZCBhcml0eSAoXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIsIGluc3RlYWQgb2YgMSBvciAyKS4gWW91IGNhbiBlaXRoZXIgYXNrIGZvciBhbiBlZGdlIGlkIG9yIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIGVkZ2UgYmV0d2VlbiBhIHNvdXJjZSAmIGEgdGFyZ2V0LlwiKSl9LGkuaGFzRWRnZT1mdW5jdGlvbih0LGUpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1cIlwiK3Q7cmV0dXJuIHRoaXMuX2VkZ2VzLmhhcyhuKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIHI9dGhpcy5fbm9kZXMuZ2V0KHQpO3JldHVybiEhciYmKHZvaWQgMCE9PXIub3V0JiZyLm91dC5oYXNPd25Qcm9wZXJ0eShlKXx8dm9pZCAwIT09ci51bmRpcmVjdGVkJiZyLnVuZGlyZWN0ZWQuaGFzT3duUHJvcGVydHkoZSkpfXRocm93IG5ldyBCKFwiR3JhcGguaGFzRWRnZTogaW52YWxpZCBhcml0eSAoXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIsIGluc3RlYWQgb2YgMSBvciAyKS4gWW91IGNhbiBlaXRoZXIgYXNrIGZvciBhbiBlZGdlIGlkIG9yIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIGVkZ2UgYmV0d2VlbiBhIHNvdXJjZSAmIGEgdGFyZ2V0LlwiKSl9LGkuZGlyZWN0ZWRFZGdlPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUpe2lmKHQ9XCJcIit0LGU9XCJcIitlLHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5kaXJlY3RlZEVkZ2U6IHRoaXMgbWV0aG9kIGlzIGlycmVsZXZhbnQgd2l0aCBtdWx0aWdyYXBocyBzaW5jZSB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZSBlZGdlcyBiZXR3ZWVuIHNvdXJjZSAmIHRhcmdldC4gU2VlICMuZGlyZWN0ZWRFZGdlcyBpbnN0ZWFkLlwiKTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmRpcmVjdGVkRWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBGKCdHcmFwaC5kaXJlY3RlZEVkZ2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KGUsJ1wiIHRhcmdldCBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIHI9bi5vdXQmJm4ub3V0W2VdfHx2b2lkIDA7cmV0dXJuIHI/ci5rZXk6dm9pZCAwfX0saS51bmRpcmVjdGVkRWRnZT1mdW5jdGlvbih0LGUpe2lmKFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSl7aWYodD1cIlwiK3QsZT1cIlwiK2UsdGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLnVuZGlyZWN0ZWRFZGdlOiB0aGlzIG1ldGhvZCBpcyBpcnJlbGV2YW50IHdpdGggbXVsdGlncmFwaHMgc2luY2UgdGhlcmUgbWlnaHQgYmUgbXVsdGlwbGUgZWRnZXMgYmV0d2VlbiBzb3VyY2UgJiB0YXJnZXQuIFNlZSAjLnVuZGlyZWN0ZWRFZGdlcyBpbnN0ZWFkLlwiKTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLnVuZGlyZWN0ZWRFZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBzb3VyY2Ugbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKCF0aGlzLl9ub2Rlcy5oYXMoZSkpdGhyb3cgbmV3IEYoJ0dyYXBoLnVuZGlyZWN0ZWRFZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3ZhciByPW4udW5kaXJlY3RlZCYmbi51bmRpcmVjdGVkW2VdfHx2b2lkIDA7cmV0dXJuIHI/ci5rZXk6dm9pZCAwfX0saS5lZGdlPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLmVkZ2U6IHRoaXMgbWV0aG9kIGlzIGlycmVsZXZhbnQgd2l0aCBtdWx0aWdyYXBocyBzaW5jZSB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZSBlZGdlcyBiZXR3ZWVuIHNvdXJjZSAmIHRhcmdldC4gU2VlICMuZWRnZXMgaW5zdGVhZC5cIik7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5lZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBzb3VyY2Ugbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKCF0aGlzLl9ub2Rlcy5oYXMoZSkpdGhyb3cgbmV3IEYoJ0dyYXBoLmVkZ2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KGUsJ1wiIHRhcmdldCBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIHI9bi5vdXQmJm4ub3V0W2VdfHxuLnVuZGlyZWN0ZWQmJm4udW5kaXJlY3RlZFtlXXx8dm9pZCAwO2lmKHIpcmV0dXJuIHIua2V5fSxpLmFyZURpcmVjdGVkTmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5hcmVEaXJlY3RlZE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYoZSBpbiBuLmlufHxlIGluIG4ub3V0KX0saS5hcmVPdXROZWlnaGJvcnM9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmFyZU91dE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiZlIGluIG4ub3V0fSxpLmFyZUluTmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5hcmVJbk5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiZlIGluIG4uaW59LGkuYXJlVW5kaXJlY3RlZE5laWdoYm9ycz1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgRignR3JhcGguYXJlVW5kaXJlY3RlZE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuYXJlTmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5hcmVOZWlnaGJvcnM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKGUgaW4gbi5pbnx8ZSBpbiBuLm91dCl8fFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuYXJlSW5ib3VuZE5laWdoYm9ycz1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgRignR3JhcGguYXJlSW5ib3VuZE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiZlIGluIG4uaW58fFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuYXJlT3V0Ym91bmROZWlnaGJvcnM9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmFyZU91dGJvdW5kTmVpZ2hib3JzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJmUgaW4gbi5vdXR8fFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuaW5EZWdyZWU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5pbkRlZ3JlZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiPT09dGhpcy50eXBlPzA6ZS5pbkRlZ3JlZX0saS5vdXREZWdyZWU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5vdXREZWdyZWU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUub3V0RGVncmVlfSxpLmRpcmVjdGVkRGVncmVlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguZGlyZWN0ZWREZWdyZWU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUuaW5EZWdyZWUrZS5vdXREZWdyZWV9LGkudW5kaXJlY3RlZERlZ3JlZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLnVuZGlyZWN0ZWREZWdyZWU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cImRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLnVuZGlyZWN0ZWREZWdyZWV9LGkuaW5ib3VuZERlZ3JlZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmluYm91bmREZWdyZWU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTt2YXIgbj0wO3JldHVyblwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUudW5kaXJlY3RlZERlZ3JlZSksXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLmluRGVncmVlKSxufSxpLm91dGJvdW5kRGVncmVlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGgub3V0Ym91bmREZWdyZWU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTt2YXIgbj0wO3JldHVyblwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUudW5kaXJlY3RlZERlZ3JlZSksXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLm91dERlZ3JlZSksbn0saS5kZWdyZWU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5kZWdyZWU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTt2YXIgbj0wO3JldHVyblwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUudW5kaXJlY3RlZERlZ3JlZSksXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLmluRGVncmVlK2Uub3V0RGVncmVlKSxufSxpLmluRGVncmVlV2l0aG91dFNlbGZMb29wcz1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmluRGVncmVlV2l0aG91dFNlbGZMb29wczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiPT09dGhpcy50eXBlPzA6ZS5pbkRlZ3JlZS1lLmRpcmVjdGVkTG9vcHN9LGkub3V0RGVncmVlV2l0aG91dFNlbGZMb29wcz1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLm91dERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUub3V0RGVncmVlLWUuZGlyZWN0ZWRMb29wc30saS5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUuaW5EZWdyZWUrZS5vdXREZWdyZWUtMiplLmRpcmVjdGVkTG9vcHN9LGkudW5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC51bmRpcmVjdGVkRGVncmVlV2l0aG91dFNlbGZMb29wczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwiZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUudW5kaXJlY3RlZERlZ3JlZS0yKmUudW5kaXJlY3RlZExvb3BzfSxpLmluYm91bmREZWdyZWVXaXRob3V0U2VsZkxvb3BzPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguaW5ib3VuZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTt2YXIgbj0wLHI9MDtyZXR1cm5cImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLnVuZGlyZWN0ZWREZWdyZWUscis9MiplLnVuZGlyZWN0ZWRMb29wcyksXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLmluRGVncmVlLHIrPWUuZGlyZWN0ZWRMb29wcyksbi1yfSxpLm91dGJvdW5kRGVncmVlV2l0aG91dFNlbGZMb29wcz1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLm91dGJvdW5kRGVncmVlV2l0aG91dFNlbGZMb29wczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3ZhciBuPTAscj0wO3JldHVyblwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUudW5kaXJlY3RlZERlZ3JlZSxyKz0yKmUudW5kaXJlY3RlZExvb3BzKSxcInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUub3V0RGVncmVlLHIrPWUuZGlyZWN0ZWRMb29wcyksbi1yfSxpLmRlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5kZWdyZWVXaXRob3V0U2VsZkxvb3BzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIG49MCxyPTA7cmV0dXJuXCJkaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS51bmRpcmVjdGVkRGVncmVlLHIrPTIqZS51bmRpcmVjdGVkTG9vcHMpLFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS5pbkRlZ3JlZStlLm91dERlZ3JlZSxyKz0yKmUuZGlyZWN0ZWRMb29wcyksbi1yfSxpLnNvdXJjZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9lZGdlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLnNvdXJjZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBlLnNvdXJjZS5rZXl9LGkudGFyZ2V0PWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX2VkZ2VzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGgudGFyZ2V0OiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGUudGFyZ2V0LmtleX0saS5leHRyZW1pdGllcz1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9lZGdlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmV4dHJlbWl0aWVzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuW2Uuc291cmNlLmtleSxlLnRhcmdldC5rZXldfSxpLm9wcG9zaXRlPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fZWRnZXMuZ2V0KGUpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5vcHBvc2l0ZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQoZSwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3ZhciByPW4uc291cmNlLmtleSxpPW4udGFyZ2V0LmtleTtpZih0PT09cilyZXR1cm4gaTtpZih0PT09aSlyZXR1cm4gcjt0aHJvdyBuZXcgRignR3JhcGgub3Bwb3NpdGU6IHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaXMgbm90IGF0dGFjaGVkIHRvIHRoZSBcIicpLmNvbmNhdChlLCdcIiBlZGdlICgnKS5jb25jYXQocixcIiwgXCIpLmNvbmNhdChpLFwiKS5cIikpfSxpLmhhc0V4dHJlbWl0eT1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX2VkZ2VzLmdldCh0KTtpZighbil0aHJvdyBuZXcgRignR3JhcGguaGFzRXh0cmVtaXR5OiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIG4uc291cmNlLmtleT09PWV8fG4udGFyZ2V0LmtleT09PWV9LGkuaXNVbmRpcmVjdGVkPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX2VkZ2VzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguaXNVbmRpcmVjdGVkOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGUudW5kaXJlY3RlZH0saS5pc0RpcmVjdGVkPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX2VkZ2VzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguaXNEaXJlY3RlZDogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiFlLnVuZGlyZWN0ZWR9LGkuaXNTZWxmTG9vcD1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9lZGdlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmlzU2VsZkxvb3A6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZS5zb3VyY2U9PT1lLnRhcmdldH0saS5hZGROb2RlPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZnVuY3Rpb24odCxlLG4pe2lmKG4mJiFzKG4pKXRocm93IG5ldyBCKCdHcmFwaC5hZGROb2RlOiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEV4cGVjdGluZyBhbiBvYmplY3QgYnV0IGdvdCBcIicuY29uY2F0KG4sJ1wiJykpO2lmKGU9XCJcIitlLG49bnx8e30sdC5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBJKCdHcmFwaC5hZGROb2RlOiB0aGUgXCInLmNvbmNhdChlLCdcIiBub2RlIGFscmVhZHkgZXhpc3QgaW4gdGhlIGdyYXBoLicpKTt2YXIgcj1uZXcgdC5Ob2RlRGF0YUNsYXNzKGUsbik7cmV0dXJuIHQuX25vZGVzLnNldChlLHIpLHQuZW1pdChcIm5vZGVBZGRlZFwiLHtrZXk6ZSxhdHRyaWJ1dGVzOm59KSxyfSh0aGlzLHQsZSk7cmV0dXJuIG4ua2V5fSxpLm1lcmdlTm9kZT1mdW5jdGlvbih0LGUpe2lmKGUmJiFzKGUpKXRocm93IG5ldyBCKCdHcmFwaC5tZXJnZU5vZGU6IGludmFsaWQgYXR0cmlidXRlcy4gRXhwZWN0aW5nIGFuIG9iamVjdCBidXQgZ290IFwiJy5jb25jYXQoZSwnXCInKSk7dD1cIlwiK3QsZT1lfHx7fTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7cmV0dXJuIG4/KGUmJih1KG4uYXR0cmlidXRlcyxlKSx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcIm1lcmdlXCIsa2V5OnQsYXR0cmlidXRlczpuLmF0dHJpYnV0ZXMsZGF0YTplfSkpLFt0LCExXSk6KG49bmV3IHRoaXMuTm9kZURhdGFDbGFzcyh0LGUpLHRoaXMuX25vZGVzLnNldCh0LG4pLHRoaXMuZW1pdChcIm5vZGVBZGRlZFwiLHtrZXk6dCxhdHRyaWJ1dGVzOmV9KSxbdCwhMF0pfSxpLnVwZGF0ZU5vZGU9ZnVuY3Rpb24odCxlKXtpZihlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBCKCdHcmFwaC51cGRhdGVOb2RlOiBpbnZhbGlkIHVwZGF0ZXIgZnVuY3Rpb24uIEV4cGVjdGluZyBhIGZ1bmN0aW9uIGJ1dCBnb3QgXCInLmNvbmNhdChlLCdcIicpKTt0PVwiXCIrdDt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYobil7aWYoZSl7dmFyIHI9bi5hdHRyaWJ1dGVzO24uYXR0cmlidXRlcz1lKHIpLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwicmVwbGFjZVwiLGtleTp0LGF0dHJpYnV0ZXM6bi5hdHRyaWJ1dGVzfSl9cmV0dXJuW3QsITFdfXZhciBpPWU/ZSh7fSk6e307cmV0dXJuIG49bmV3IHRoaXMuTm9kZURhdGFDbGFzcyh0LGkpLHRoaXMuX25vZGVzLnNldCh0LG4pLHRoaXMuZW1pdChcIm5vZGVBZGRlZFwiLHtrZXk6dCxhdHRyaWJ1dGVzOml9KSxbdCwhMF19LGkuZHJvcE5vZGU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGUsbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmRyb3BOb2RlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7aWYoXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUpe2Zvcih2YXIgciBpbiBuLm91dCl7ZT1uLm91dFtyXTtkb3tNdCh0aGlzLGUpLGU9ZS5uZXh0fXdoaWxlKGUpfWZvcih2YXIgaSBpbiBuLmluKXtlPW4uaW5baV07ZG97TXQodGhpcyxlKSxlPWUubmV4dH13aGlsZShlKX19aWYoXCJkaXJlY3RlZFwiIT09dGhpcy50eXBlKWZvcih2YXIgbyBpbiBuLnVuZGlyZWN0ZWQpe2U9bi51bmRpcmVjdGVkW29dO2Rve010KHRoaXMsZSksZT1lLm5leHR9d2hpbGUoZSl9dGhpcy5fbm9kZXMuZGVsZXRlKHQpLHRoaXMuZW1pdChcIm5vZGVEcm9wcGVkXCIse2tleTp0LGF0dHJpYnV0ZXM6bi5hdHRyaWJ1dGVzfSl9LGkuZHJvcEVkZ2U9ZnVuY3Rpb24odCl7dmFyIGU7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXt2YXIgbj1cIlwiK2FyZ3VtZW50c1swXSxyPVwiXCIrYXJndW1lbnRzWzFdO2lmKCEoZT1kKHRoaXMsbixyLHRoaXMudHlwZSkpKXRocm93IG5ldyBGKCdHcmFwaC5kcm9wRWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQobiwnXCIgLT4gXCInKS5jb25jYXQociwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfWVsc2UgaWYodD1cIlwiK3QsIShlPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoJ0dyYXBoLmRyb3BFZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIE10KHRoaXMsZSksdGhpc30saS5kcm9wRGlyZWN0ZWRFZGdlPWZ1bmN0aW9uKHQsZSl7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXRocm93IG5ldyBJKFwiR3JhcGguZHJvcERpcmVjdGVkRWRnZTogaXQgZG9lcyBub3QgbWFrZSBzZW5zZSB0byB0cnkgYW5kIGRyb3AgYSBkaXJlY3RlZCBlZGdlIGJ5IGtleS4gV2hhdCBpZiB0aGUgZWRnZSB3aXRoIHRoaXMga2V5IGlzIHVuZGlyZWN0ZWQ/IFVzZSAjLmRyb3BFZGdlIGZvciB0aGlzIHB1cnBvc2UgaW5zdGVhZC5cIik7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLmRyb3BEaXJlY3RlZEVkZ2U6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBkcm9wcGluZyBhbiBlZGdlIGluIGEgTXVsdGlHcmFwaCBzaW5jZSB3ZSBjYW5ub3QgaW5mZXIgdGhlIG9uZSB5b3Ugd2FudCB0byBkZWxldGUgYXMgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgb25lcy5cIik7dmFyIG49ZCh0aGlzLHQ9XCJcIit0LGU9XCJcIitlLFwiZGlyZWN0ZWRcIik7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmRyb3BEaXJlY3RlZEVkZ2U6IGNvdWxkIG5vdCBmaW5kIGEgXCInLmNvbmNhdCh0LCdcIiAtPiBcIicpLmNvbmNhdChlLCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIE10KHRoaXMsbiksdGhpc30saS5kcm9wVW5kaXJlY3RlZEVkZ2U9ZnVuY3Rpb24odCxlKXtpZihhcmd1bWVudHMubGVuZ3RoPDIpdGhyb3cgbmV3IEkoXCJHcmFwaC5kcm9wVW5kaXJlY3RlZEVkZ2U6IGl0IGRvZXMgbm90IG1ha2Ugc2Vuc2UgdG8gZHJvcCBhIGRpcmVjdGVkIGVkZ2UgYnkga2V5LiBXaGF0IGlmIHRoZSBlZGdlIHdpdGggdGhpcyBrZXkgaXMgdW5kaXJlY3RlZD8gVXNlICMuZHJvcEVkZ2UgZm9yIHRoaXMgcHVycG9zZSBpbnN0ZWFkLlwiKTtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguZHJvcFVuZGlyZWN0ZWRFZGdlOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gZHJvcHBpbmcgYW4gZWRnZSBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgdG8gZGVsZXRlIGFzIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIG9uZXMuXCIpO3ZhciBuPWQodGhpcyx0LGUsXCJ1bmRpcmVjdGVkXCIpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5kcm9wVW5kaXJlY3RlZEVkZ2U6IGNvdWxkIG5vdCBmaW5kIGEgXCInLmNvbmNhdCh0LCdcIiAtPiBcIicpLmNvbmNhdChlLCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIE10KHRoaXMsbiksdGhpc30saS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX2VkZ2VzLmNsZWFyKCksdGhpcy5fbm9kZXMuY2xlYXIoKSx0aGlzLl9yZXNldEluc3RhbmNlQ291bnRlcnMoKSx0aGlzLmVtaXQoXCJjbGVhcmVkXCIpfSxpLmNsZWFyRWRnZXM9ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PSh0PWUubmV4dCgpKS5kb25lOyl0LnZhbHVlLmNsZWFyKCk7dGhpcy5fZWRnZXMuY2xlYXIoKSx0aGlzLl9yZXNldEluc3RhbmNlQ291bnRlcnMoKSx0aGlzLmVtaXQoXCJlZGdlc0NsZWFyZWRcIil9LGkuZ2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzW3RdfSxpLmdldEF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXR0cmlidXRlc30saS5oYXNBdHRyaWJ1dGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkodCl9LGkuc2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXNbdF09ZSx0aGlzLmVtaXQoXCJhdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwic2V0XCIsYXR0cmlidXRlczp0aGlzLl9hdHRyaWJ1dGVzLG5hbWU6dH0pLHRoaXN9LGkudXBkYXRlQXR0cmlidXRlPWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgQihcIkdyYXBoLnVwZGF0ZUF0dHJpYnV0ZTogdXBkYXRlciBzaG91bGQgYmUgYSBmdW5jdGlvbi5cIik7dmFyIG49dGhpcy5fYXR0cmlidXRlc1t0XTtyZXR1cm4gdGhpcy5fYXR0cmlidXRlc1t0XT1lKG4pLHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXMsbmFtZTp0fSksdGhpc30saS5yZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24odCl7cmV0dXJuIGRlbGV0ZSB0aGlzLl9hdHRyaWJ1dGVzW3RdLHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJyZW1vdmVcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXMsbmFtZTp0fSksdGhpc30saS5yZXBsYWNlQXR0cmlidXRlcz1mdW5jdGlvbih0KXtpZighcyh0KSl0aHJvdyBuZXcgQihcIkdyYXBoLnJlcGxhY2VBdHRyaWJ1dGVzOiBwcm92aWRlZCBhdHRyaWJ1dGVzIGFyZSBub3QgYSBwbGFpbiBvYmplY3QuXCIpO3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzPXQsdGhpcy5lbWl0KFwiYXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcInJlcGxhY2VcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXN9KSx0aGlzfSxpLm1lcmdlQXR0cmlidXRlcz1mdW5jdGlvbih0KXtpZighcyh0KSl0aHJvdyBuZXcgQihcIkdyYXBoLm1lcmdlQXR0cmlidXRlczogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKTtyZXR1cm4gdSh0aGlzLl9hdHRyaWJ1dGVzLHQpLHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJtZXJnZVwiLGF0dHJpYnV0ZXM6dGhpcy5fYXR0cmlidXRlcyxkYXRhOnR9KSx0aGlzfSxpLnVwZGF0ZUF0dHJpYnV0ZXM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLnVwZGF0ZUF0dHJpYnV0ZXM6IHByb3ZpZGVkIHVwZGF0ZXIgaXMgbm90IGEgZnVuY3Rpb24uXCIpO3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzPXQodGhpcy5fYXR0cmlidXRlcyksdGhpcy5lbWl0KFwiYXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcInVwZGF0ZVwiLGF0dHJpYnV0ZXM6dGhpcy5fYXR0cmlidXRlc30pLHRoaXN9LGkudXBkYXRlRWFjaE5vZGVBdHRyaWJ1dGVzPWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLnVwZGF0ZUVhY2hOb2RlQXR0cmlidXRlczogZXhwZWN0aW5nIGFuIHVwZGF0ZXIgZnVuY3Rpb24uXCIpO2lmKGUmJiFsKGUpKXRocm93IG5ldyBCKFwiR3JhcGgudXBkYXRlRWFjaE5vZGVBdHRyaWJ1dGVzOiBpbnZhbGlkIGhpbnRzLiBFeHBlY3RpbmcgYW4gb2JqZWN0IGhhdmluZyB0aGUgZm9sbG93aW5nIHNoYXBlOiB7YXR0cmlidXRlcz86IFtzdHJpbmddfVwiKTtmb3IodmFyIG4scixpPXRoaXMuX25vZGVzLnZhbHVlcygpOyEwIT09KG49aS5uZXh0KCkpLmRvbmU7KShyPW4udmFsdWUpLmF0dHJpYnV0ZXM9dChyLmtleSxyLmF0dHJpYnV0ZXMpO3RoaXMuZW1pdChcImVhY2hOb2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7aGludHM6ZXx8bnVsbH0pfSxpLnVwZGF0ZUVhY2hFZGdlQXR0cmlidXRlcz1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC51cGRhdGVFYWNoRWRnZUF0dHJpYnV0ZXM6IGV4cGVjdGluZyBhbiB1cGRhdGVyIGZ1bmN0aW9uLlwiKTtpZihlJiYhbChlKSl0aHJvdyBuZXcgQihcIkdyYXBoLnVwZGF0ZUVhY2hFZGdlQXR0cmlidXRlczogaW52YWxpZCBoaW50cy4gRXhwZWN0aW5nIGFuIG9iamVjdCBoYXZpbmcgdGhlIGZvbGxvd2luZyBzaGFwZToge2F0dHJpYnV0ZXM/OiBbc3RyaW5nXX1cIik7Zm9yKHZhciBuLHIsaSxvLGE9dGhpcy5fZWRnZXMudmFsdWVzKCk7ITAhPT0obj1hLm5leHQoKSkuZG9uZTspaT0ocj1uLnZhbHVlKS5zb3VyY2Usbz1yLnRhcmdldCxyLmF0dHJpYnV0ZXM9dChyLmtleSxyLmF0dHJpYnV0ZXMsaS5rZXksby5rZXksaS5hdHRyaWJ1dGVzLG8uYXR0cmlidXRlcyxyLnVuZGlyZWN0ZWQpO3RoaXMuZW1pdChcImVhY2hFZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7aGludHM6ZXx8bnVsbH0pfSxpLmZvckVhY2hBZGphY2VuY3lFbnRyeT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGguZm9yRWFjaEFkamFjZW5jeUVudHJ5OiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7eHQoITEsITEsITEsdGhpcyx0KX0saS5mb3JFYWNoQWRqYWNlbmN5RW50cnlXaXRoT3JwaGFucz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGguZm9yRWFjaEFkamFjZW5jeUVudHJ5V2l0aE9ycGhhbnM6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTt4dCghMSwhMSwhMCx0aGlzLHQpfSxpLmZvckVhY2hBc3N5bWV0cmljQWRqYWNlbmN5RW50cnk9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLmZvckVhY2hBc3N5bWV0cmljQWRqYWNlbmN5RW50cnk6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTt4dCghMSwhMCwhMSx0aGlzLHQpfSxpLmZvckVhY2hBc3N5bWV0cmljQWRqYWNlbmN5RW50cnlXaXRoT3JwaGFucz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGguZm9yRWFjaEFzc3ltZXRyaWNBZGphY2VuY3lFbnRyeVdpdGhPcnBoYW5zOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7eHQoITEsITAsITAsdGhpcyx0KX0saS5ub2Rlcz1mdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIEFycmF5LmZyb20/QXJyYXkuZnJvbSh0aGlzLl9ub2Rlcy5rZXlzKCkpOksodGhpcy5fbm9kZXMua2V5cygpLHRoaXMuX25vZGVzLnNpemUpfSxpLmZvckVhY2hOb2RlPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC5mb3JFYWNoTm9kZTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2Zvcih2YXIgZSxuLHI9dGhpcy5fbm9kZXMudmFsdWVzKCk7ITAhPT0oZT1yLm5leHQoKSkuZG9uZTspdCgobj1lLnZhbHVlKS5rZXksbi5hdHRyaWJ1dGVzKX0saS5maW5kTm9kZT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGguZmluZE5vZGU6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTtmb3IodmFyIGUsbixyPXRoaXMuX25vZGVzLnZhbHVlcygpOyEwIT09KGU9ci5uZXh0KCkpLmRvbmU7KWlmKHQoKG49ZS52YWx1ZSkua2V5LG4uYXR0cmlidXRlcykpcmV0dXJuIG4ua2V5fSxpLm1hcE5vZGVzPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC5tYXBOb2RlOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7Zm9yKHZhciBlLG4scj10aGlzLl9ub2Rlcy52YWx1ZXMoKSxpPW5ldyBBcnJheSh0aGlzLm9yZGVyKSxvPTA7ITAhPT0oZT1yLm5leHQoKSkuZG9uZTspbj1lLnZhbHVlLGlbbysrXT10KG4ua2V5LG4uYXR0cmlidXRlcyk7cmV0dXJuIGl9LGkuc29tZU5vZGU9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLnNvbWVOb2RlOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7Zm9yKHZhciBlLG4scj10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PShlPXIubmV4dCgpKS5kb25lOylpZih0KChuPWUudmFsdWUpLmtleSxuLmF0dHJpYnV0ZXMpKXJldHVybiEwO3JldHVybiExfSxpLmV2ZXJ5Tm9kZT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGguZXZlcnlOb2RlOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7Zm9yKHZhciBlLG4scj10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PShlPXIubmV4dCgpKS5kb25lOylpZighdCgobj1lLnZhbHVlKS5rZXksbi5hdHRyaWJ1dGVzKSlyZXR1cm4hMTtyZXR1cm4hMH0saS5maWx0ZXJOb2Rlcz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGguZmlsdGVyTm9kZXM6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTtmb3IodmFyIGUsbixyPXRoaXMuX25vZGVzLnZhbHVlcygpLGk9W107ITAhPT0oZT1yLm5leHQoKSkuZG9uZTspdCgobj1lLnZhbHVlKS5rZXksbi5hdHRyaWJ1dGVzKSYmaS5wdXNoKG4ua2V5KTtyZXR1cm4gaX0saS5yZWR1Y2VOb2Rlcz1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC5yZWR1Y2VOb2RlczogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil0aHJvdyBuZXcgQihcIkdyYXBoLnJlZHVjZU5vZGVzOiBtaXNzaW5nIGluaXRpYWwgdmFsdWUuIFlvdSBtdXN0IHByb3ZpZGUgaXQgYmVjYXVzZSB0aGUgY2FsbGJhY2sgdGFrZXMgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBhbmQgd2UgY2Fubm90IGluZmVyIHRoZSBpbml0aWFsIHZhbHVlIGZyb20gdGhlIGZpcnN0IGl0ZXJhdGlvbiwgYXMgeW91IGNvdWxkIHdpdGggYSBzaW1wbGUgYXJyYXkuXCIpO2Zvcih2YXIgbixyLGk9ZSxvPXRoaXMuX25vZGVzLnZhbHVlcygpOyEwIT09KG49by5uZXh0KCkpLmRvbmU7KWk9dChpLChyPW4udmFsdWUpLmtleSxyLmF0dHJpYnV0ZXMpO3JldHVybiBpfSxpLm5vZGVFbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fbm9kZXMudmFsdWVzKCk7cmV0dXJuIG5ldyBPKChmdW5jdGlvbigpe3ZhciBlPXQubmV4dCgpO2lmKGUuZG9uZSlyZXR1cm4gZTt2YXIgbj1lLnZhbHVlO3JldHVybnt2YWx1ZTp7bm9kZTpuLmtleSxhdHRyaWJ1dGVzOm4uYXR0cmlidXRlc30sZG9uZTohMX19KSl9LGkuZXhwb3J0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPW5ldyBBcnJheSh0aGlzLl9ub2Rlcy5zaXplKSxuPTA7dGhpcy5fbm9kZXMuZm9yRWFjaCgoZnVuY3Rpb24odCxyKXtlW24rK109ZnVuY3Rpb24odCxlKXt2YXIgbj17a2V5OnR9O3JldHVybiBoKGUuYXR0cmlidXRlcyl8fChuLmF0dHJpYnV0ZXM9dSh7fSxlLmF0dHJpYnV0ZXMpKSxufShyLHQpfSkpO3ZhciByPW5ldyBBcnJheSh0aGlzLl9lZGdlcy5zaXplKTtyZXR1cm4gbj0wLHRoaXMuX2VkZ2VzLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7cltuKytdPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj17a2V5OmUsc291cmNlOm4uc291cmNlLmtleSx0YXJnZXQ6bi50YXJnZXQua2V5fTtyZXR1cm4gaChuLmF0dHJpYnV0ZXMpfHwoci5hdHRyaWJ1dGVzPXUoe30sbi5hdHRyaWJ1dGVzKSksXCJtaXhlZFwiPT09dCYmbi51bmRpcmVjdGVkJiYoci51bmRpcmVjdGVkPSEwKSxyfSh0LnR5cGUsaSxlKX0pKSx7b3B0aW9uczp7dHlwZTp0aGlzLnR5cGUsbXVsdGk6dGhpcy5tdWx0aSxhbGxvd1NlbGZMb29wczp0aGlzLmFsbG93U2VsZkxvb3BzfSxhdHRyaWJ1dGVzOnRoaXMuZ2V0QXR0cmlidXRlcygpLG5vZGVzOmUsZWRnZXM6cn19LGkuaW1wb3J0PWZ1bmN0aW9uKHQpe3ZhciBlLG4saSxvLGEsYz10aGlzLHU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXTtpZih0IGluc3RhbmNlb2YgcilyZXR1cm4gdC5mb3JFYWNoTm9kZSgoZnVuY3Rpb24odCxlKXt1P2MubWVyZ2VOb2RlKHQsZSk6Yy5hZGROb2RlKHQsZSl9KSksdC5mb3JFYWNoRWRnZSgoZnVuY3Rpb24odCxlLG4scixpLG8sYSl7dT9hP2MubWVyZ2VVbmRpcmVjdGVkRWRnZVdpdGhLZXkodCxuLHIsZSk6Yy5tZXJnZURpcmVjdGVkRWRnZVdpdGhLZXkodCxuLHIsZSk6YT9jLmFkZFVuZGlyZWN0ZWRFZGdlV2l0aEtleSh0LG4scixlKTpjLmFkZERpcmVjdGVkRWRnZVdpdGhLZXkodCxuLHIsZSl9KSksdGhpcztpZighcyh0KSl0aHJvdyBuZXcgQihcIkdyYXBoLmltcG9ydDogaW52YWxpZCBhcmd1bWVudC4gRXhwZWN0aW5nIGEgc2VyaWFsaXplZCBncmFwaCBvciwgYWx0ZXJuYXRpdmVseSwgYSBHcmFwaCBpbnN0YW5jZS5cIik7aWYodC5hdHRyaWJ1dGVzKXtpZighcyh0LmF0dHJpYnV0ZXMpKXRocm93IG5ldyBCKFwiR3JhcGguaW1wb3J0OiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEV4cGVjdGluZyBhIHBsYWluIG9iamVjdC5cIik7dT90aGlzLm1lcmdlQXR0cmlidXRlcyh0LmF0dHJpYnV0ZXMpOnRoaXMucmVwbGFjZUF0dHJpYnV0ZXModC5hdHRyaWJ1dGVzKX1pZih0Lm5vZGVzKXtpZihpPXQubm9kZXMsIUFycmF5LmlzQXJyYXkoaSkpdGhyb3cgbmV3IEIoXCJHcmFwaC5pbXBvcnQ6IGludmFsaWQgbm9kZXMuIEV4cGVjdGluZyBhbiBhcnJheS5cIik7Zm9yKGU9MCxuPWkubGVuZ3RoO2U8bjtlKyspe0V0KG89aVtlXSk7dmFyIGQ9byxoPWQua2V5LHA9ZC5hdHRyaWJ1dGVzO3U/dGhpcy5tZXJnZU5vZGUoaCxwKTp0aGlzLmFkZE5vZGUoaCxwKX19aWYodC5lZGdlcyl7dmFyIGY9ITE7aWYoXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGUmJihmPSEwKSxpPXQuZWRnZXMsIUFycmF5LmlzQXJyYXkoaSkpdGhyb3cgbmV3IEIoXCJHcmFwaC5pbXBvcnQ6IGludmFsaWQgZWRnZXMuIEV4cGVjdGluZyBhbiBhcnJheS5cIik7Zm9yKGU9MCxuPWkubGVuZ3RoO2U8bjtlKyspe0F0KGE9aVtlXSk7dmFyIGw9YSxnPWwuc291cmNlLHk9bC50YXJnZXQsdz1sLmF0dHJpYnV0ZXMsdj1sLnVuZGlyZWN0ZWQsYj12b2lkIDA9PT12P2Y6djtcImtleVwiaW4gYT8odT9iP3RoaXMubWVyZ2VVbmRpcmVjdGVkRWRnZVdpdGhLZXk6dGhpcy5tZXJnZURpcmVjdGVkRWRnZVdpdGhLZXk6Yj90aGlzLmFkZFVuZGlyZWN0ZWRFZGdlV2l0aEtleTp0aGlzLmFkZERpcmVjdGVkRWRnZVdpdGhLZXkpLmNhbGwodGhpcyxhLmtleSxnLHksdyk6KHU/Yj90aGlzLm1lcmdlVW5kaXJlY3RlZEVkZ2U6dGhpcy5tZXJnZURpcmVjdGVkRWRnZTpiP3RoaXMuYWRkVW5kaXJlY3RlZEVkZ2U6dGhpcy5hZGREaXJlY3RlZEVkZ2UpLmNhbGwodGhpcyxnLHksdyl9fXJldHVybiB0aGlzfSxpLm51bGxDb3B5PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyByKHUoe30sdGhpcy5fb3B0aW9ucyx0KSk7cmV0dXJuIGUucmVwbGFjZUF0dHJpYnV0ZXModSh7fSx0aGlzLmdldEF0dHJpYnV0ZXMoKSkpLGV9LGkuZW1wdHlDb3B5PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubnVsbENvcHkodCk7cmV0dXJuIHRoaXMuX25vZGVzLmZvckVhY2goKGZ1bmN0aW9uKHQsbil7dmFyIHI9dSh7fSx0LmF0dHJpYnV0ZXMpO3Q9bmV3IGUuTm9kZURhdGFDbGFzcyhuLHIpLGUuX25vZGVzLnNldChuLHQpfSkpLGV9LGkuY29weT1mdW5jdGlvbih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YodD10fHx7fSkudHlwZSYmdC50eXBlIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT10LnR5cGUpdGhyb3cgbmV3IEkoJ0dyYXBoLmNvcHk6IGNhbm5vdCBjcmVhdGUgYW4gaW5jb21wYXRpYmxlIGNvcHkgZnJvbSBcIicuY29uY2F0KHRoaXMudHlwZSwnXCIgdHlwZSB0byBcIicpLmNvbmNhdCh0LnR5cGUsJ1wiIGJlY2F1c2UgdGhpcyB3b3VsZCBtZWFuIGxvc2luZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBncmFwaC4nKSk7aWYoXCJib29sZWFuXCI9PXR5cGVvZiB0Lm11bHRpJiZ0Lm11bHRpIT09dGhpcy5tdWx0aSYmITAhPT10Lm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguY29weTogY2Fubm90IGNyZWF0ZSBhbiBpbmNvbXBhdGlibGUgY29weSBieSBkb3duZ3JhZGluZyBhIG11bHRpIGdyYXBoIHRvIGEgc2ltcGxlIG9uZSBiZWNhdXNlIHRoaXMgd291bGQgbWVhbiBsb3NpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgZ3JhcGguXCIpO2lmKFwiYm9vbGVhblwiPT10eXBlb2YgdC5hbGxvd1NlbGZMb29wcyYmdC5hbGxvd1NlbGZMb29wcyE9PXRoaXMuYWxsb3dTZWxmTG9vcHMmJiEwIT09dC5hbGxvd1NlbGZMb29wcyl0aHJvdyBuZXcgSShcIkdyYXBoLmNvcHk6IGNhbm5vdCBjcmVhdGUgYW4gaW5jb21wYXRpYmxlIGNvcHkgZnJvbSBhIGdyYXBoIGFsbG93aW5nIHNlbGYgbG9vcHMgdG8gb25lIHRoYXQgZG9lcyBub3QgYmVjYXVzZSB0aGlzIHdvdWxkIG1lYW4gbG9zaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGdyYXBoLlwiKTtmb3IodmFyIGUsbixyPXRoaXMuZW1wdHlDb3B5KHQpLGk9dGhpcy5fZWRnZXMudmFsdWVzKCk7ITAhPT0oZT1pLm5leHQoKSkuZG9uZTspanQocixcImNvcHlcIiwhMSwobj1lLnZhbHVlKS51bmRpcmVjdGVkLG4ua2V5LG4uc291cmNlLmtleSxuLnRhcmdldC5rZXksdSh7fSxuLmF0dHJpYnV0ZXMpKTtyZXR1cm4gcn0saS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5leHBvcnQoKX0saS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBHcmFwaF1cIn0saS5pbnNwZWN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXt9O3RoaXMuX25vZGVzLmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7bltlXT10LmF0dHJpYnV0ZXN9KSk7dmFyIHI9e30saT17fTt0aGlzLl9lZGdlcy5mb3JFYWNoKChmdW5jdGlvbih0LG4pe3ZhciBvLGE9dC51bmRpcmVjdGVkP1wiLS1cIjpcIi0+XCIsYz1cIlwiLHU9dC5zb3VyY2Uua2V5LGQ9dC50YXJnZXQua2V5O3QudW5kaXJlY3RlZCYmdT5kJiYobz11LHU9ZCxkPW8pO3ZhciBzPVwiKFwiLmNvbmNhdCh1LFwiKVwiKS5jb25jYXQoYSxcIihcIikuY29uY2F0KGQsXCIpXCIpO24uc3RhcnRzV2l0aChcImdlaWRfXCIpP2UubXVsdGkmJih2b2lkIDA9PT1pW3NdP2lbc109MDppW3NdKyssYys9XCJcIi5jb25jYXQoaVtzXSxcIi4gXCIpKTpjKz1cIltcIi5jb25jYXQobixcIl06IFwiKSxyW2MrPXNdPXQuYXR0cmlidXRlc30pKTt2YXIgbz17fTtmb3IodmFyIGEgaW4gdGhpcyl0aGlzLmhhc093blByb3BlcnR5KGEpJiYhVXQuaGFzKGEpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2FdJiZcInN5bWJvbFwiIT09dChhKSYmKG9bYV09dGhpc1thXSk7cmV0dXJuIG8uYXR0cmlidXRlcz10aGlzLl9hdHRyaWJ1dGVzLG8ubm9kZXM9bixvLmVkZ2VzPXIscChvLFwiY29uc3RydWN0b3JcIix0aGlzLmNvbnN0cnVjdG9yKSxvfSxyfSh5LmV4cG9ydHMuRXZlbnRFbWl0dGVyKTtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiYoenQucHJvdG90eXBlW1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKV09enQucHJvdG90eXBlLmluc3BlY3QpLFt7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cIlwiLmNvbmNhdCh0LFwiRWRnZVwiKX0sZ2VuZXJhdGVLZXk6ITB9LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiXCIuY29uY2F0KHQsXCJEaXJlY3RlZEVkZ2VcIil9LGdlbmVyYXRlS2V5OiEwLHR5cGU6XCJkaXJlY3RlZFwifSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cIlwiLmNvbmNhdCh0LFwiVW5kaXJlY3RlZEVkZ2VcIil9LGdlbmVyYXRlS2V5OiEwLHR5cGU6XCJ1bmRpcmVjdGVkXCJ9LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiXCIuY29uY2F0KHQsXCJFZGdlV2l0aEtleVwiKX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiXCIuY29uY2F0KHQsXCJEaXJlY3RlZEVkZ2VXaXRoS2V5XCIpfSx0eXBlOlwiZGlyZWN0ZWRcIn0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIi5jb25jYXQodCxcIlVuZGlyZWN0ZWRFZGdlV2l0aEtleVwiKX0sdHlwZTpcInVuZGlyZWN0ZWRcIn1dLmZvckVhY2goKGZ1bmN0aW9uKHQpe1tcImFkZFwiLFwibWVyZ2VcIixcInVwZGF0ZVwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgbj10Lm5hbWUoZSkscj1cImFkZFwiPT09ZT9qdDpDdDt0LmdlbmVyYXRlS2V5P3p0LnByb3RvdHlwZVtuXT1mdW5jdGlvbihpLG8sYSl7cmV0dXJuIHIodGhpcyxuLCEwLFwidW5kaXJlY3RlZFwiPT09KHQudHlwZXx8dGhpcy50eXBlKSxudWxsLGksbyxhLFwidXBkYXRlXCI9PT1lKX06enQucHJvdG90eXBlW25dPWZ1bmN0aW9uKGksbyxhLGMpe3JldHVybiByKHRoaXMsbiwhMSxcInVuZGlyZWN0ZWRcIj09PSh0LnR5cGV8fHRoaXMudHlwZSksaSxvLGEsYyxcInVwZGF0ZVwiPT09ZSl9fSkpfSkpLGZ1bmN0aW9uKHQpe1EuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ZS5uYW1lLHI9ZS5hdHRhY2hlcjtyKHQsbihcIk5vZGVcIiksMCkscih0LG4oXCJTb3VyY2VcIiksMSkscih0LG4oXCJUYXJnZXRcIiksMikscih0LG4oXCJPcHBvc2l0ZVwiKSwzKX0pKX0oenQpLGZ1bmN0aW9uKHQpe1guZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ZS5uYW1lLHI9ZS5hdHRhY2hlcjtyKHQsbihcIkVkZ2VcIiksXCJtaXhlZFwiKSxyKHQsbihcIkRpcmVjdGVkRWRnZVwiKSxcImRpcmVjdGVkXCIpLHIodCxuKFwiVW5kaXJlY3RlZEVkZ2VcIiksXCJ1bmRpcmVjdGVkXCIpfSkpfSh6dCksZnVuY3Rpb24odCl7ZXQuZm9yRWFjaCgoZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5uYW1lLHI9ZS50eXBlLGk9ZS5kaXJlY3Rpb247dC5wcm90b3R5cGVbbl09ZnVuY3Rpb24odCxlKXtpZihcIm1peGVkXCIhPT1yJiZcIm1peGVkXCIhPT10aGlzLnR5cGUmJnIhPT10aGlzLnR5cGUpcmV0dXJuW107aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHV0KHRoaXMscik7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0O3ZhciBvPXRoaXMuX25vZGVzLmdldCh0KTtpZih2b2lkIDA9PT1vKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG4sJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gcHQodGhpcy5tdWx0aSxcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksbyl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBhPXRoaXMuX25vZGVzLmdldCh0KTtpZighYSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChuLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG4sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBndChyLHRoaXMubXVsdGksaSxhLGUpfXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KG4sXCI6IHRvbyBtYW55IGFyZ3VtZW50cyAoZXhwZWN0aW5nIDAsIDEgb3IgMiBhbmQgZ290IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCxcIikuXCIpKX19KHQsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPVwiZm9yRWFjaFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEsLTEpO3QucHJvdG90eXBlW29dPWZ1bmN0aW9uKHQsZSxuKXtpZihcIm1peGVkXCI9PT1yfHxcIm1peGVkXCI9PT10aGlzLnR5cGV8fHI9PT10aGlzLnR5cGUpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBkdCghMSx0aGlzLHIsbj10KTtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dD1cIlwiK3Qsbj1lO3ZhciBhPXRoaXMuX25vZGVzLmdldCh0KTtpZih2b2lkIDA9PT1hKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gaHQoITEsdGhpcy5tdWx0aSxcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksYSxuKX1pZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIGM9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFjKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBzb3VyY2Ugbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKCF0aGlzLl9ub2Rlcy5oYXMoZSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobywnOiAgY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KGUsJ1wiIHRhcmdldCBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGx0KCExLHIsdGhpcy5tdWx0aSxpLGMsZSxuKX10aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChvLFwiOiB0b28gbWFueSBhcmd1bWVudHMgKGV4cGVjdGluZyAxLCAyIG9yIDMgYW5kIGdvdCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIpLlwiKSl9fTt2YXIgYT1cIm1hcFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEpO3QucHJvdG90eXBlW2FdPWZ1bmN0aW9uKCl7dmFyIHQsZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLG49ZS5wb3AoKTtpZigwPT09ZS5sZW5ndGgpe3ZhciBpPTA7XCJkaXJlY3RlZFwiIT09ciYmKGkrPXRoaXMudW5kaXJlY3RlZFNpemUpLFwidW5kaXJlY3RlZFwiIT09ciYmKGkrPXRoaXMuZGlyZWN0ZWRTaXplKSx0PW5ldyBBcnJheShpKTt2YXIgYT0wO2UucHVzaCgoZnVuY3Rpb24oZSxyLGksbyxjLHUsZCl7dFthKytdPW4oZSxyLGksbyxjLHUsZCl9KSl9ZWxzZSB0PVtdLGUucHVzaCgoZnVuY3Rpb24oZSxyLGksbyxhLGMsdSl7dC5wdXNoKG4oZSxyLGksbyxhLGMsdSkpfSkpO3JldHVybiB0aGlzW29dLmFwcGx5KHRoaXMsZSksdH07dmFyIGM9XCJmaWx0ZXJcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTt0LnByb3RvdHlwZVtjXT1mdW5jdGlvbigpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZT10LnBvcCgpLG49W107cmV0dXJuIHQucHVzaCgoZnVuY3Rpb24odCxyLGksbyxhLGMsdSl7ZSh0LHIsaSxvLGEsYyx1KSYmbi5wdXNoKHQpfSkpLHRoaXNbb10uYXBwbHkodGhpcyx0KSxufTt2YXIgdT1cInJlZHVjZVwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEpO3QucHJvdG90eXBlW3VdPWZ1bmN0aW9uKCl7dmFyIHQsZSxuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7aWYobi5sZW5ndGg8Mnx8bi5sZW5ndGg+NCl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdCh1LFwiOiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMgKGV4cGVjdGluZyAyLCAzIG9yIDQgYW5kIGdvdCBcIikuY29uY2F0KG4ubGVuZ3RoLFwiKS5cIikpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG5bbi5sZW5ndGgtMV0mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG5bbi5sZW5ndGgtMl0pdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQodSxcIjogbWlzc2luZyBpbml0aWFsIHZhbHVlLiBZb3UgbXVzdCBwcm92aWRlIGl0IGJlY2F1c2UgdGhlIGNhbGxiYWNrIHRha2VzIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgYW5kIHdlIGNhbm5vdCBpbmZlciB0aGUgaW5pdGlhbCB2YWx1ZSBmcm9tIHRoZSBmaXJzdCBpdGVyYXRpb24sIGFzIHlvdSBjb3VsZCB3aXRoIGEgc2ltcGxlIGFycmF5LlwiKSk7Mj09PW4ubGVuZ3RoPyh0PW5bMF0sZT1uWzFdLG49W10pOjM9PT1uLmxlbmd0aD8odD1uWzFdLGU9blsyXSxuPVtuWzBdXSk6ND09PW4ubGVuZ3RoJiYodD1uWzJdLGU9blszXSxuPVtuWzBdLG5bMV1dKTt2YXIgcj1lO3JldHVybiBuLnB1c2goKGZ1bmN0aW9uKGUsbixpLG8sYSxjLHUpe3I9dChyLGUsbixpLG8sYSxjLHUpfSkpLHRoaXNbb10uYXBwbHkodGhpcyxuKSxyfX0odCxlKSxmdW5jdGlvbih0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uLG89XCJmaW5kXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSwtMSk7dC5wcm90b3R5cGVbb109ZnVuY3Rpb24odCxlLG4pe2lmKFwibWl4ZWRcIiE9PXImJlwibWl4ZWRcIiE9PXRoaXMudHlwZSYmciE9PXRoaXMudHlwZSlyZXR1cm4hMTtpZigxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZHQoITAsdGhpcyxyLG49dCk7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LG49ZTt2YXIgYT10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09YSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGh0KCEwLHRoaXMubXVsdGksXCJtaXhlZFwiPT09cj90aGlzLnR5cGU6cixpLGEsbil9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBjPXRoaXMuX25vZGVzLmdldCh0KTtpZighYyl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBsdCghMCxyLHRoaXMubXVsdGksaSxjLGUsbil9dGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQobyxcIjogdG9vIG1hbnkgYXJndW1lbnRzIChleHBlY3RpbmcgMSwgMiBvciAzIGFuZCBnb3QgXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiKS5cIikpfTt2YXIgYT1cInNvbWVcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxLC0xKTt0LnByb3RvdHlwZVthXT1mdW5jdGlvbigpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZT10LnBvcCgpO3JldHVybiB0LnB1c2goKGZ1bmN0aW9uKHQsbixyLGksbyxhLGMpe3JldHVybiBlKHQsbixyLGksbyxhLGMpfSkpLCEhdGhpc1tvXS5hcHBseSh0aGlzLHQpfTt2YXIgYz1cImV2ZXJ5XCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSwtMSk7dC5wcm90b3R5cGVbY109ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGU9dC5wb3AoKTtyZXR1cm4gdC5wdXNoKChmdW5jdGlvbih0LG4scixpLG8sYSxjKXtyZXR1cm4hZSh0LG4scixpLG8sYSxjKX0pKSwhdGhpc1tvXS5hcHBseSh0aGlzLHQpfX0odCxlKSxmdW5jdGlvbih0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uLG89bi5zbGljZSgwLC0xKStcIkVudHJpZXNcIjt0LnByb3RvdHlwZVtvXT1mdW5jdGlvbih0LGUpe2lmKFwibWl4ZWRcIiE9PXImJlwibWl4ZWRcIiE9PXRoaXMudHlwZSYmciE9PXRoaXMudHlwZSlyZXR1cm4gTy5lbXB0eSgpO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiBzdCh0aGlzLHIpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdDt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobywnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBmdChyLGksbil9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBhPXRoaXMuX25vZGVzLmdldCh0KTtpZighYSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiB5dChyLGksYSxlKX10aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChvLFwiOiB0b28gbWFueSBhcmd1bWVudHMgKGV4cGVjdGluZyAwLCAxIG9yIDIgYW5kIGdvdCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIpLlwiKSl9fSh0LGUpfSkpfSh6dCksZnVuY3Rpb24odCl7d3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7X3QodCxlKSxmdW5jdGlvbih0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uLG89XCJmb3JFYWNoXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSwtMSk7dC5wcm90b3R5cGVbb109ZnVuY3Rpb24odCxlKXtpZihcIm1peGVkXCI9PT1yfHxcIm1peGVkXCI9PT10aGlzLnR5cGV8fHI9PT10aGlzLnR5cGUpe3Q9XCJcIit0O3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZih2b2lkIDA9PT1uKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTttdCghMSxcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksbixlKX19O3ZhciBhPVwibWFwXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSk7dC5wcm90b3R5cGVbYV09ZnVuY3Rpb24odCxlKXt2YXIgbj1bXTtyZXR1cm4gdGhpc1tvXSh0LChmdW5jdGlvbih0LHIpe24ucHVzaChlKHQscikpfSkpLG59O3ZhciBjPVwiZmlsdGVyXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSk7dC5wcm90b3R5cGVbY109ZnVuY3Rpb24odCxlKXt2YXIgbj1bXTtyZXR1cm4gdGhpc1tvXSh0LChmdW5jdGlvbih0LHIpe2UodCxyKSYmbi5wdXNoKHQpfSkpLG59O3ZhciB1PVwicmVkdWNlXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSk7dC5wcm90b3R5cGVbdV09ZnVuY3Rpb24odCxlLG4pe2lmKGFyZ3VtZW50cy5sZW5ndGg8Myl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdCh1LFwiOiBtaXNzaW5nIGluaXRpYWwgdmFsdWUuIFlvdSBtdXN0IHByb3ZpZGUgaXQgYmVjYXVzZSB0aGUgY2FsbGJhY2sgdGFrZXMgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBhbmQgd2UgY2Fubm90IGluZmVyIHRoZSBpbml0aWFsIHZhbHVlIGZyb20gdGhlIGZpcnN0IGl0ZXJhdGlvbiwgYXMgeW91IGNvdWxkIHdpdGggYSBzaW1wbGUgYXJyYXkuXCIpKTt2YXIgcj1uO3JldHVybiB0aGlzW29dKHQsKGZ1bmN0aW9uKHQsbil7cj1lKHIsdCxuKX0pKSxyfX0odCxlKSxmdW5jdGlvbih0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uLG89blswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSwtMSksYT1cImZpbmRcIitvO3QucHJvdG90eXBlW2FdPWZ1bmN0aW9uKHQsZSl7aWYoXCJtaXhlZFwiPT09cnx8XCJtaXhlZFwiPT09dGhpcy50eXBlfHxyPT09dGhpcy50eXBlKXt0PVwiXCIrdDt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09bil0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChhLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIG10KCEwLFwibWl4ZWRcIj09PXI/dGhpcy50eXBlOnIsaSxuLGUpfX07dmFyIGM9XCJzb21lXCIrbzt0LnByb3RvdHlwZVtjXT1mdW5jdGlvbih0LGUpe3JldHVybiEhdGhpc1thXSh0LGUpfTt2YXIgdT1cImV2ZXJ5XCIrbzt0LnByb3RvdHlwZVt1XT1mdW5jdGlvbih0LGUpe3JldHVybiF0aGlzW2FdKHQsKGZ1bmN0aW9uKHQsbil7cmV0dXJuIWUodCxuKX0pKX19KHQsZSksR3QodCxlKX0pKX0oenQpO3ZhciBXdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciBuPXUoe3R5cGU6XCJkaXJlY3RlZFwifSxlKTtpZihcIm11bHRpXCJpbiBuJiYhMSE9PW4ubXVsdGkpdGhyb3cgbmV3IEIoXCJEaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBpbmRpY2F0aW9uIHRoYXQgdGhlIGdyYXBoIHNob3VsZCBiZSBtdWx0aSBpbiBnaXZlbiBvcHRpb25zIVwiKTtpZihcImRpcmVjdGVkXCIhPT1uLnR5cGUpdGhyb3cgbmV3IEIoJ0RpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IFwiJytuLnR5cGUrJ1wiIHR5cGUgaW4gZ2l2ZW4gb3B0aW9ucyEnKTtyZXR1cm4gdC5jYWxsKHRoaXMsbil8fHRoaXN9cmV0dXJuIGUobix0KSxufSh6dCksUHQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgbj11KHt0eXBlOlwidW5kaXJlY3RlZFwifSxlKTtpZihcIm11bHRpXCJpbiBuJiYhMSE9PW4ubXVsdGkpdGhyb3cgbmV3IEIoXCJVbmRpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IGluZGljYXRpb24gdGhhdCB0aGUgZ3JhcGggc2hvdWxkIGJlIG11bHRpIGluIGdpdmVuIG9wdGlvbnMhXCIpO2lmKFwidW5kaXJlY3RlZFwiIT09bi50eXBlKXRocm93IG5ldyBCKCdVbmRpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IFwiJytuLnR5cGUrJ1wiIHR5cGUgaW4gZ2l2ZW4gb3B0aW9ucyEnKTtyZXR1cm4gdC5jYWxsKHRoaXMsbil8fHRoaXN9cmV0dXJuIGUobix0KSxufSh6dCksUnQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgbj11KHttdWx0aTohMH0sZSk7aWYoXCJtdWx0aVwiaW4gbiYmITAhPT1uLm11bHRpKXRocm93IG5ldyBCKFwiTXVsdGlHcmFwaC5mcm9tOiBpbmNvbnNpc3RlbnQgaW5kaWNhdGlvbiB0aGF0IHRoZSBncmFwaCBzaG91bGQgYmUgc2ltcGxlIGluIGdpdmVuIG9wdGlvbnMhXCIpO3JldHVybiB0LmNhbGwodGhpcyxuKXx8dGhpc31yZXR1cm4gZShuLHQpLG59KHp0KSxLdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciBuPXUoe3R5cGU6XCJkaXJlY3RlZFwiLG11bHRpOiEwfSxlKTtpZihcIm11bHRpXCJpbiBuJiYhMCE9PW4ubXVsdGkpdGhyb3cgbmV3IEIoXCJNdWx0aURpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IGluZGljYXRpb24gdGhhdCB0aGUgZ3JhcGggc2hvdWxkIGJlIHNpbXBsZSBpbiBnaXZlbiBvcHRpb25zIVwiKTtpZihcImRpcmVjdGVkXCIhPT1uLnR5cGUpdGhyb3cgbmV3IEIoJ011bHRpRGlyZWN0ZWRHcmFwaC5mcm9tOiBpbmNvbnNpc3RlbnQgXCInK24udHlwZSsnXCIgdHlwZSBpbiBnaXZlbiBvcHRpb25zIScpO3JldHVybiB0LmNhbGwodGhpcyxuKXx8dGhpc31yZXR1cm4gZShuLHQpLG59KHp0KSxUdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciBuPXUoe3R5cGU6XCJ1bmRpcmVjdGVkXCIsbXVsdGk6ITB9LGUpO2lmKFwibXVsdGlcImluIG4mJiEwIT09bi5tdWx0aSl0aHJvdyBuZXcgQihcIk11bHRpVW5kaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBpbmRpY2F0aW9uIHRoYXQgdGhlIGdyYXBoIHNob3VsZCBiZSBzaW1wbGUgaW4gZ2l2ZW4gb3B0aW9ucyFcIik7aWYoXCJ1bmRpcmVjdGVkXCIhPT1uLnR5cGUpdGhyb3cgbmV3IEIoJ011bHRpVW5kaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBcIicrbi50eXBlKydcIiB0eXBlIGluIGdpdmVuIG9wdGlvbnMhJyk7cmV0dXJuIHQuY2FsbCh0aGlzLG4pfHx0aGlzfXJldHVybiBlKG4sdCksbn0oenQpO2Z1bmN0aW9uIEJ0KHQpe3QuZnJvbT1mdW5jdGlvbihlLG4pe3ZhciByPXUoe30sZS5vcHRpb25zLG4pLGk9bmV3IHQocik7cmV0dXJuIGkuaW1wb3J0KGUpLGl9fXJldHVybiBCdCh6dCksQnQoV3QpLEJ0KFB0KSxCdChSdCksQnQoS3QpLEJ0KFR0KSx6dC5HcmFwaD16dCx6dC5EaXJlY3RlZEdyYXBoPVd0LHp0LlVuZGlyZWN0ZWRHcmFwaD1QdCx6dC5NdWx0aUdyYXBoPVJ0LHp0Lk11bHRpRGlyZWN0ZWRHcmFwaD1LdCx6dC5NdWx0aVVuZGlyZWN0ZWRHcmFwaD1UdCx6dC5JbnZhbGlkQXJndW1lbnRzR3JhcGhFcnJvcj1CLHp0Lk5vdEZvdW5kR3JhcGhFcnJvcj1GLHp0LlVzYWdlR3JhcGhFcnJvcj1JLHp0fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGhvbG9neS51bWQubWluLmpzLm1hcFxuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjYuNFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIzLTAzLTA4VDE1OjI4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCB0cmFjLTE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcblx0XHQvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcblx0XHQvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuXHRcdC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cblx0XHQvLyBTdXBwb3J0OiBRdFdlYiA8PTMuOC41LCBXZWJLaXQgPD01MzQuMzQsIHdraHRtbHRvcGRmIHRvb2wgPD0wLjEyLjVcblx0XHQvLyBQbHVzIGZvciBvbGQgV2ViS2l0LCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgY29sbGVjdGlvbnNcblx0XHQvLyAoZS5nLiwgYHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKSA9PT0gXCJmdW5jdGlvblwiYCkuIChnaC00NzU2KVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0dHlwZW9mIG9iai5pdGVtICE9PSBcImZ1bmN0aW9uXCI7XG5cdH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjYuNFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4xMFxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMy0wMi0xNFxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJsZWFkaW5nQ29tYmluYXRvciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCBybGVhZGluZ0NvbWJpbmF0b3IudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0gJiYgZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTArLCBTYWZhcmkgMTUuNCAtIDE2LjMrXG5cdC8vIE1ha2Ugc3VyZSB0aGUgdGhlIGA6aGFzKClgIGFyZ3VtZW50IGlzIHBhcnNlZCB1bmZvcmdpdmluZ2x5LlxuXHQvLyBXZSBpbmNsdWRlIGAqYCBpbiB0aGUgdGVzdCB0byBkZXRlY3QgYnVnZ3kgaW1wbGVtZW50YXRpb25zIHRoYXQgYXJlXG5cdC8vIF9zZWxlY3RpdmVseV8gZm9yZ2l2aW5nIChzcGVjaWZpY2FsbHkgd2hlbiB0aGUgbGlzdCBpbmNsdWRlcyBhdCBsZWFzdFxuXHQvLyBvbmUgdmFsaWQgc2VsZWN0b3IpLlxuXHQvLyBOb3RlIHRoYXQgd2UgdHJlYXQgY29tcGxldGUgbGFjayBvZiBzdXBwb3J0IGZvciBgOmhhcygpYCBhcyBpZiBpdCB3ZXJlXG5cdC8vIHNwZWMtY29tcGxpYW50IHN1cHBvcnQsIHdoaWNoIGlzIGZpbmUgYmVjYXVzZSB1c2Ugb2YgYDpoYXMoKWAgaW4gc3VjaFxuXHQvLyBlbnZpcm9ubWVudHMgd2lsbCBmYWlsIGluIHRoZSBxU0EgcGF0aCBhbmQgZmFsbCBiYWNrIHRvIGpRdWVyeSB0cmF2ZXJzYWxcblx0Ly8gYW55d2F5LlxuXHRzdXBwb3J0LmNzc0hhcyA9IGFzc2VydCggZnVuY3Rpb24oKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIFwiOmhhcygqLDpqcWZha2UpXCIgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICFzdXBwb3J0LmNzc0hhcyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTArLCBTYWZhcmkgMTUuNCAtIDE2LjMrXG5cdFx0Ly8gT3VyIHJlZ3VsYXIgYHRyeS1jYXRjaGAgbWVjaGFuaXNtIGZhaWxzIHRvIGRldGVjdCBuYXRpdmVseS11bnN1cHBvcnRlZFxuXHRcdC8vIHBzZXVkby1jbGFzc2VzIGluc2lkZSBgOmhhcygpYCAoc3VjaCBhcyBgOmhhcyg6Y29udGFpbnMoXCJGb29cIikpYClcblx0XHQvLyBpbiBicm93c2VycyB0aGF0IHBhcnNlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBhcyBhIGZvcmdpdmluZyBzZWxlY3RvciBsaXN0LlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMvI3JlbGF0aW9uYWwgbm93IHJlcXVpcmVzIHRoZSBhcmd1bWVudFxuXHRcdC8vIHRvIGJlIHBhcnNlZCB1bmZvcmdpdmluZ2x5LCBidXQgYnJvd3NlcnMgaGF2ZSBub3QgeWV0IGZ1bGx5IGFkanVzdGVkLlxuXHRcdHJidWdneVFTQS5wdXNoKCBcIjpoYXNcIiApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHQvLyBJRSBkb2Vzbid0IGhhdmUgYGNvbnRhaW5zYCBvbiBgZG9jdW1lbnRgIHNvIHdlIG5lZWQgdG8gY2hlY2sgZm9yXG5cdFx0XHQvLyBgZG9jdW1lbnRFbGVtZW50YCBwcmVzZW5jZS5cblx0XHRcdC8vIFdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIGBhYCB3aGVuIGBkb2N1bWVudEVsZW1lbnRgIGlzIG1pc3Npbmdcblx0XHRcdC8vIGFzIGBvd25lckRvY3VtZW50YCBvZiBlbGVtZW50cyB3aXRoaW4gYDx0ZW1wbGF0ZS8+YCBtYXkgaGF2ZVxuXHRcdFx0Ly8gYSBudWxsIG9uZSAtIGEgZGVmYXVsdCBiZWhhdmlvciBvZiBhbGwgbW9kZXJuIGJyb3dzZXJzLlxuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSAmJiBhLmRvY3VtZW50RWxlbWVudCB8fCBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8MTAgb25seVxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJsZWFkaW5nQ29tYmluYXRvci5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKHRyYWMtOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKHRyYWMtMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgdHJhYy02NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKHRyYWMtOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlIHRyYWMtODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKHRyYWMtMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKHRyYWMtMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICh0cmFjLTE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICh0cmFjLTEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAodHJhYy0xNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKHRyYWMtMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKHRyYWMtMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICh0cmFjLTY5MTEsIHRyYWMtODE2NSwgdHJhYy0xMTM4MiwgdHJhYy0xMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICh0cmFjLTEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0XHRcdC8vIEluIENocm9tZSwgaWYgYW4gZWxlbWVudCBoYXZpbmcgYSBmb2N1c291dCBoYW5kbGVyIGlzIGJsdXJyZWQgYnlcblx0XHRcdFx0XHRcdC8vIGNsaWNraW5nIG91dHNpZGUgb2YgaXQsIGl0IGludm9rZXMgdGhlIGhhbmRsZXIgc3luY2hyb25vdXNseS4gSWZcblx0XHRcdFx0XHRcdC8vIHRoYXQgaGFuZGxlciBjYWxscyBgLnJlbW92ZSgpYCBvbiB0aGUgZWxlbWVudCwgdGhlIGRhdGEgaXMgY2xlYXJlZCxcblx0XHRcdFx0XHRcdC8vIGxlYXZpbmcgYHJlc3VsdGAgdW5kZWZpbmVkLiBXZSBuZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhpcy5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKHRyYWMtNTA0LCB0cmFjLTEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cdHdoaWNoOiB0cnVlXG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHByZXNzIG5hdGl2ZSBmb2N1cyBvciBibHVyIGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGVcblx0XHQvLyBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZXZlbnQudGFyZ2V0LCB0eXBlICk7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhXFxbQ0RBVEFcXFt8XFxdXFxdPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICh0cmFjLTgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVud3JhcCBhIENEQVRBIHNlY3Rpb24gY29udGFpbmluZyBzY3JpcHQgY29udGVudHMuIFRoaXMgc2hvdWxkbid0IGJlXG5cdFx0XHRcdFx0XHRcdC8vIG5lZWRlZCBhcyBpbiBYTUwgZG9jdW1lbnRzIHRoZXkncmUgYWxyZWFkeSBub3QgdmlzaWJsZSB3aGVuXG5cdFx0XHRcdFx0XHRcdC8vIGluc3BlY3RpbmcgZWxlbWVudCBjb250ZW50cyBhbmQgaW4gSFRNTCBkb2N1bWVudHMgdGhleSBoYXZlIG5vXG5cdFx0XHRcdFx0XHRcdC8vIG1lYW5pbmcgYnV0IHdlJ3JlIHByZXNlcnZpbmcgdGhhdCBsb2dpYyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgd2lsbCBiZSByZW1vdmVkIGNvbXBsZXRlbHkgaW4gNC4wLiBTZWUgZ2gtNDkwNC5cblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgcmN1c3RvbVByb3AgPSAvXi0tLztcblxuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAodHJhYy0xNTA5OCwgdHJhYy0xNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cbnZhciB3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiO1xuXG5cbnZhciBydHJpbUNTUyA9IG5ldyBSZWdFeHAoXG5cdFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsXG5cdFwiZ1wiXG4pO1xuXG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKHRyYWMtODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgdHJhYy0xMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoZ2gtMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdC8vIElFIG9ubHkgc3VwcG9ydHMgYFwiZmxvYXRcImAgaW4gYGdldFByb3BlcnR5VmFsdWVgOyBpbiBjb21wdXRlZCBzdHlsZXNcblx0XHQvLyBpdCdzIG9ubHkgYXZhaWxhYmxlIGFzIGBcImNzc0Zsb2F0XCJgLiBXZSBubyBsb25nZXIgbW9kaWZ5IHByb3BlcnRpZXNcblx0XHQvLyBzZW50IHRvIGAuY3NzKClgIGFwYXJ0IGZyb20gY2FtZWxDYXNpbmcsIHNvIHdlIG5lZWQgdG8gY2hlY2sgYm90aC5cblx0XHQvLyBOb3JtYWxseSwgdGhpcyB3b3VsZCBjcmVhdGUgZGlmZmVyZW5jZSBpbiBiZWhhdmlvcjogaWZcblx0XHQvLyBgZ2V0UHJvcGVydHlWYWx1ZWAgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcsIHRoZSB2YWx1ZSByZXR1cm5lZFxuXHRcdC8vIGJ5IGAuY3NzKClgIHdvdWxkIGJlIGB1bmRlZmluZWRgLiBUaGlzIGlzIHVzdWFsbHkgdGhlIGNhc2UgZm9yXG5cdFx0Ly8gZGlzY29ubmVjdGVkIGVsZW1lbnRzLiBIb3dldmVyLCBpbiBJRSBldmVuIGRpc2Nvbm5lY3RlZCBlbGVtZW50c1xuXHRcdC8vIHdpdGggbm8gc3R5bGVzIHJldHVybiBgXCJub25lXCJgIGZvciBgZ2V0UHJvcGVydHlWYWx1ZSggXCJmbG9hdFwiIClgXG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIGlzQ3VzdG9tUHJvcCAmJiByZXQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMTA1KywgQ2hyb21lIDw9MTA1K1xuXHRcdFx0Ly8gU3BlYyByZXF1aXJlcyB0cmltbWluZyB3aGl0ZXNwYWNlIGZvciBjdXN0b20gcHJvcGVydGllcyAoZ2gtNDkyNikuXG5cdFx0XHQvLyBGaXJlZm94IG9ubHkgdHJpbXMgbGVhZGluZyB3aGl0ZXNwYWNlLiBDaHJvbWUganVzdCBjb2xsYXBzZXNcblx0XHRcdC8vIGJvdGggbGVhZGluZyAmIHRyYWlsaW5nIHdoaXRlc3BhY2UgdG8gYSBzaW5nbGUgc3BhY2UuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gRmFsbCBiYWNrIHRvIGB1bmRlZmluZWRgIGlmIGVtcHR5IHN0cmluZyByZXR1cm5lZC5cblx0XHRcdC8vIFRoaXMgY29sbGFwc2VzIGEgbWlzc2luZyBkZWZpbml0aW9uIHdpdGggcHJvcGVydHkgZGVmaW5lZFxuXHRcdFx0Ly8gYW5kIHNldCB0byBhbiBlbXB0eSBzdHJpbmcgYnV0IHRoZXJlJ3Mgbm8gc3RhbmRhcmQgQVBJXG5cdFx0XHQvLyBhbGxvd2luZyB1cyB0byBkaWZmZXJlbnRpYXRlIHRoZW0gd2l0aG91dCBhIHBlcmZvcm1hbmNlIHBlbmFsdHlcblx0XHRcdC8vIGFuZCByZXR1cm5pbmcgYHVuZGVmaW5lZGAgYWxpZ25zIHdpdGggb2xkZXIgalF1ZXJ5LlxuXHRcdFx0Ly9cblx0XHRcdC8vIHJ0cmltQ1NTIHRyZWF0cyBVKzAwMEQgQ0FSUklBR0UgUkVUVVJOIGFuZCBVKzAwMEMgRk9STSBGRUVEXG5cdFx0XHQvLyBhcyB3aGl0ZXNwYWNlIHdoaWxlIENTUyBkb2VzIG5vdCwgYnV0IHRoaXMgaXMgbm90IGEgcHJvYmxlbVxuXHRcdFx0Ly8gYmVjYXVzZSBDU1MgcHJlcHJvY2Vzc2luZyByZXBsYWNlcyB0aGVtIHdpdGggVSswMDBBIExJTkUgRkVFRFxuXHRcdFx0Ly8gKHdoaWNoICppcyogQ1NTIHdoaXRlc3BhY2UpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpbnB1dC1wcmVwcm9jZXNzaW5nXG5cdFx0XHRyZXQgPSByZXQucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApIHx8IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKHRyYWMtNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnIHRyYWMtOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICh0cmFjLTcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAodHJhYy0xMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCAodHJhYy0xMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGFzc05hbWUgKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3NOYW1lcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGNsYXNzTmFtZSwgaSwgc2VsZixcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKHRyYWMtMTQ2ODYsIHRyYWMtMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICh0cmFjLTI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAodHJhYy05OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAodHJhYy05NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsICkgKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICh0cmFjLTYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gdHJhYy03NjUzLCB0cmFjLTgxMjUsIHRyYWMtODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAodHJhYy0xMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyB0cmFjLTk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICh0cmFjLTEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0IHRyYWMtMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICh0cmFjLTE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gdHJhYy05NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICh0cmFjLTExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyB0cmFjLTE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSB0cmFjLTg2MDUsIHRyYWMtMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIHRyYWMtMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG4vLyBSZXF1aXJlIHRoYXQgdGhlIFwid2hpdGVzcGFjZSBydW5cIiBzdGFydHMgZnJvbSBhIG5vbi13aGl0ZXNwYWNlXG4vLyB0byBhdm9pZCBPKE5eMikgYmVoYXZpb3Igd2hlbiB0aGUgZW5naW5lIHdvdWxkIHRyeSBtYXRjaGluZyBcIlxccyskXCIgYXQgZWFjaCBzcGFjZSBwb3NpdGlvbi5cbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfChbXlxcc1xcdUZFRkZcXHhBMF0pW1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAodHJhYy03MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAodHJhYy0xMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFNpZ21hLmpzIENhbWVyYSBDbGFzc1xuICogPT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIENsYXNzIGRlc2lnbmVkIHRvIHN0b3JlIGNhbWVyYSBpbmZvcm1hdGlvbiAmIHVzZWQgdG8gdXBkYXRlIGl0LlxuICogQG1vZHVsZVxuICovXG52YXIgYW5pbWF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2FuaW1hdGVcIik7XG52YXIgZWFzaW5nc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9lYXNpbmdzXCIpKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG4vKipcbiAqIERlZmF1bHRzLlxuICovXG52YXIgREVGQVVMVF9aT09NSU5HX1JBVElPID0gMS41O1xuLyoqXG4gKiBDYW1lcmEgY2xhc3NcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIENhbWVyYSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ2FtZXJhLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENhbWVyYSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMueCA9IDAuNTtcbiAgICAgICAgX3RoaXMueSA9IDAuNTtcbiAgICAgICAgX3RoaXMuYW5nbGUgPSAwO1xuICAgICAgICBfdGhpcy5yYXRpbyA9IDE7XG4gICAgICAgIF90aGlzLm1pblJhdGlvID0gbnVsbDtcbiAgICAgICAgX3RoaXMubWF4UmF0aW8gPSBudWxsO1xuICAgICAgICBfdGhpcy5uZXh0RnJhbWUgPSBudWxsO1xuICAgICAgICBfdGhpcy5wcmV2aW91c1N0YXRlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIC8vIFN0YXRlXG4gICAgICAgIF90aGlzLnByZXZpb3VzU3RhdGUgPSBfdGhpcy5nZXRTdGF0ZSgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBtZXRob2QgdXNlZCB0byBjcmVhdGUgYSBDYW1lcmEgb2JqZWN0IHdpdGggYSBnaXZlbiBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGF0ZVxuICAgICAqIEByZXR1cm4ge0NhbWVyYX1cbiAgICAgKi9cbiAgICBDYW1lcmEuZnJvbSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2FtZXJhID0gbmV3IENhbWVyYSgpO1xuICAgICAgICByZXR1cm4gY2FtZXJhLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGVuYWJsZSB0aGUgY2FtZXJhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Q2FtZXJhfVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGRpc2FibGUgdGhlIGNhbWVyYS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0NhbWVyYX1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJldHJpZXZlIHRoZSBjYW1lcmEncyBjdXJyZW50IHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0aGlzLngsXG4gICAgICAgICAgICB5OiB0aGlzLnksXG4gICAgICAgICAgICBhbmdsZTogdGhpcy5hbmdsZSxcbiAgICAgICAgICAgIHJhdGlvOiB0aGlzLnJhdGlvLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gY2hlY2sgd2hldGhlciB0aGUgY2FtZXJhIGhhcyB0aGUgZ2l2ZW4gc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5oYXNTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09PSBzdGF0ZS54ICYmIHRoaXMueSA9PT0gc3RhdGUueSAmJiB0aGlzLnJhdGlvID09PSBzdGF0ZS5yYXRpbyAmJiB0aGlzLmFuZ2xlID09PSBzdGF0ZS5hbmdsZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJldHJpZXZlIHRoZSBjYW1lcmEncyBwcmV2aW91cyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmdldFByZXZpb3VzU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMucHJldmlvdXNTdGF0ZTtcbiAgICAgICAgaWYgKCFzdGF0ZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogc3RhdGUueCxcbiAgICAgICAgICAgIHk6IHN0YXRlLnksXG4gICAgICAgICAgICBhbmdsZTogc3RhdGUuYW5nbGUsXG4gICAgICAgICAgICByYXRpbzogc3RhdGUucmF0aW8sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBjaGVjayBtaW5SYXRpbyBhbmQgbWF4UmF0aW8gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJhdGlvXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuZ2V0Qm91bmRlZFJhdGlvID0gZnVuY3Rpb24gKHJhdGlvKSB7XG4gICAgICAgIHZhciByID0gcmF0aW87XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5taW5SYXRpbyA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHIgPSBNYXRoLm1heChyLCB0aGlzLm1pblJhdGlvKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1heFJhdGlvID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgciA9IE1hdGgubWluKHIsIHRoaXMubWF4UmF0aW8pO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGNoZWNrIHZhcmlvdXMgdGhpbmdzIHRvIHJldHVybiBhIGxlZ2l0IHN0YXRlIGNhbmRpZGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGF0ZVxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLnZhbGlkYXRlU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHZhbGlkYXRlZFN0YXRlID0ge307XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGUueCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHZhbGlkYXRlZFN0YXRlLnggPSBzdGF0ZS54O1xuICAgICAgICBpZiAodHlwZW9mIHN0YXRlLnkgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB2YWxpZGF0ZWRTdGF0ZS55ID0gc3RhdGUueTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS5hbmdsZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHZhbGlkYXRlZFN0YXRlLmFuZ2xlID0gc3RhdGUuYW5nbGU7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGUucmF0aW8gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB2YWxpZGF0ZWRTdGF0ZS5yYXRpbyA9IHRoaXMuZ2V0Qm91bmRlZFJhdGlvKHN0YXRlLnJhdGlvKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZFN0YXRlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gY2hlY2sgd2hldGhlciB0aGUgY2FtZXJhIGlzIGN1cnJlbnRseSBiZWluZyBhbmltYXRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5pc0FuaW1hdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLm5leHRGcmFtZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHNldCB0aGUgY2FtZXJhJ3Mgc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHN0YXRlIC0gTmV3IHN0YXRlLlxuICAgICAqIEByZXR1cm4ge0NhbWVyYX1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIC8vIFRPRE86IHVwZGF0ZSBieSBmdW5jdGlvblxuICAgICAgICAvLyBLZWVwaW5nIHRyYWNrIG9mIGxhc3Qgc3RhdGVcbiAgICAgICAgdGhpcy5wcmV2aW91c1N0YXRlID0gdGhpcy5nZXRTdGF0ZSgpO1xuICAgICAgICB2YXIgdmFsaWRTdGF0ZSA9IHRoaXMudmFsaWRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsaWRTdGF0ZS54ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhpcy54ID0gdmFsaWRTdGF0ZS54O1xuICAgICAgICBpZiAodHlwZW9mIHZhbGlkU3RhdGUueSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRoaXMueSA9IHZhbGlkU3RhdGUueTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWxpZFN0YXRlLmFuZ2xlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhpcy5hbmdsZSA9IHZhbGlkU3RhdGUuYW5nbGU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsaWRTdGF0ZS5yYXRpbyA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRoaXMucmF0aW8gPSB2YWxpZFN0YXRlLnJhdGlvO1xuICAgICAgICAvLyBFbWl0dGluZ1xuICAgICAgICBpZiAoIXRoaXMuaGFzU3RhdGUodGhpcy5wcmV2aW91c1N0YXRlKSlcbiAgICAgICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZWRcIiwgdGhpcy5nZXRTdGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byB1cGRhdGUgdGhlIGNhbWVyYSdzIHN0YXRlIHVzaW5nIGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtmdW5jdGlvbn0gdXBkYXRlciAtIFVwZGF0ZWQgZnVuY3Rpb24gdGFraW5nIGN1cnJlbnQgc3RhdGUgYW5kXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5pbmcgbmV4dCBzdGF0ZS5cbiAgICAgKiBAcmV0dXJuIHtDYW1lcmF9XG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uICh1cGRhdGVyKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodXBkYXRlcih0aGlzLmdldFN0YXRlKCkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBhbmltYXRlIHRoZSBjYW1lcmEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9ICAgICAgICAgICAgICAgICAgICBzdGF0ZSAgICAgIC0gU3RhdGUgdG8gcmVhY2ggZXZlbnR1YWxseS5cbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9ICAgICAgICAgICAgICAgICAgICBvcHRzICAgICAgIC0gT3B0aW9uczpcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uIC0gRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmcgfCBudW1iZXIgPT4gbnVtYmVyfSAgIGVhc2luZyAgIC0gRWFzaW5nIGZ1bmN0aW9uIG9yIG5hbWUgb2YgYW4gZXhpc3Rpbmcgb25lXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259ICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgICAtIENhbGxiYWNrXG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5hbmltYXRlID0gZnVuY3Rpb24gKHN0YXRlLCBvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBhbmltYXRlXzEuQU5JTUFURV9ERUZBVUxUUywgb3B0cyk7XG4gICAgICAgIHZhciB2YWxpZFN0YXRlID0gdGhpcy52YWxpZGF0ZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgdmFyIGVhc2luZyA9IHR5cGVvZiBvcHRpb25zLmVhc2luZyA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5lYXNpbmcgOiBlYXNpbmdzXzEuZGVmYXVsdFtvcHRpb25zLmVhc2luZ107XG4gICAgICAgIC8vIFN0YXRlXG4gICAgICAgIHZhciBzdGFydCA9IERhdGUubm93KCksIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICAgICAgLy8gRnVuY3Rpb24gcGVyZm9ybWluZyB0aGUgYW5pbWF0aW9uXG4gICAgICAgIHZhciBmbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0ID0gKERhdGUubm93KCkgLSBzdGFydCkgLyBvcHRpb25zLmR1cmF0aW9uO1xuICAgICAgICAgICAgLy8gVGhlIGFuaW1hdGlvbiBpcyBvdmVyOlxuICAgICAgICAgICAgaWYgKHQgPj0gMSkge1xuICAgICAgICAgICAgICAgIF90aGlzLm5leHRGcmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUodmFsaWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmFuaW1hdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbkNhbGxiYWNrLmNhbGwobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbkNhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29lZmZpY2llbnQgPSBlYXNpbmcodCk7XG4gICAgICAgICAgICB2YXIgbmV3U3RhdGUgPSB7fTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRTdGF0ZS54ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG5ld1N0YXRlLnggPSBpbml0aWFsU3RhdGUueCArICh2YWxpZFN0YXRlLnggLSBpbml0aWFsU3RhdGUueCkgKiBjb2VmZmljaWVudDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRTdGF0ZS55ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG5ld1N0YXRlLnkgPSBpbml0aWFsU3RhdGUueSArICh2YWxpZFN0YXRlLnkgLSBpbml0aWFsU3RhdGUueSkgKiBjb2VmZmljaWVudDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRTdGF0ZS5hbmdsZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZS5hbmdsZSA9IGluaXRpYWxTdGF0ZS5hbmdsZSArICh2YWxpZFN0YXRlLmFuZ2xlIC0gaW5pdGlhbFN0YXRlLmFuZ2xlKSAqIGNvZWZmaWNpZW50O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWxpZFN0YXRlLnJhdGlvID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG5ld1N0YXRlLnJhdGlvID0gaW5pdGlhbFN0YXRlLnJhdGlvICsgKHZhbGlkU3RhdGUucmF0aW8gLSBpbml0aWFsU3RhdGUucmF0aW8pICogY29lZmZpY2llbnQ7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gICAgICAgICAgICBfdGhpcy5uZXh0RnJhbWUgPSAoMCwgdXRpbHNfMS5yZXF1ZXN0RnJhbWUpKGZuKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMubmV4dEZyYW1lKSB7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5jYW5jZWxGcmFtZSkodGhpcy5uZXh0RnJhbWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25DYWxsYmFjay5jYWxsKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5uZXh0RnJhbWUgPSAoMCwgdXRpbHNfMS5yZXF1ZXN0RnJhbWUpKGZuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRpb25DYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gem9vbSB0aGUgY2FtZXJhLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7bnVtYmVyfG9iamVjdH0gZmFjdG9yT3JPcHRpb25zIC0gRmFjdG9yIG9yIG9wdGlvbnMuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5hbmltYXRlZFpvb20gPSBmdW5jdGlvbiAoZmFjdG9yT3JPcHRpb25zKSB7XG4gICAgICAgIGlmICghZmFjdG9yT3JPcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUoeyByYXRpbzogdGhpcy5yYXRpbyAvIERFRkFVTFRfWk9PTUlOR19SQVRJTyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmFjdG9yT3JPcHRpb25zID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGUoeyByYXRpbzogdGhpcy5yYXRpbyAvIGZhY3Rvck9yT3B0aW9ucyB9KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICByYXRpbzogdGhpcy5yYXRpbyAvIChmYWN0b3JPck9wdGlvbnMuZmFjdG9yIHx8IERFRkFVTFRfWk9PTUlOR19SQVRJTyksXG4gICAgICAgICAgICAgICAgfSwgZmFjdG9yT3JPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gdW56b29tIHRoZSBjYW1lcmEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ8b2JqZWN0fSBmYWN0b3JPck9wdGlvbnMgLSBGYWN0b3Igb3Igb3B0aW9ucy5cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmFuaW1hdGVkVW56b29tID0gZnVuY3Rpb24gKGZhY3Rvck9yT3B0aW9ucykge1xuICAgICAgICBpZiAoIWZhY3Rvck9yT3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRlKHsgcmF0aW86IHRoaXMucmF0aW8gKiBERUZBVUxUX1pPT01JTkdfUkFUSU8gfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZhY3Rvck9yT3B0aW9ucyA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRlKHsgcmF0aW86IHRoaXMucmF0aW8gKiBmYWN0b3JPck9wdGlvbnMgfSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgcmF0aW86IHRoaXMucmF0aW8gKiAoZmFjdG9yT3JPcHRpb25zLmZhY3RvciB8fCBERUZBVUxUX1pPT01JTkdfUkFUSU8pLFxuICAgICAgICAgICAgICAgIH0sIGZhY3Rvck9yT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJlc2V0IHRoZSBjYW1lcmEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zLlxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuYW5pbWF0ZWRSZXNldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZSh7XG4gICAgICAgICAgICB4OiAwLjUsXG4gICAgICAgICAgICB5OiAwLjUsXG4gICAgICAgICAgICByYXRpbzogMSxcbiAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgQ2FtZXJhIGluc3RhbmNlLCB3aXRoIHRoZSBzYW1lIHN0YXRlIGFzIHRoZSBjdXJyZW50IGNhbWVyYS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0NhbWVyYX1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBDYW1lcmEuZnJvbSh0aGlzLmdldFN0YXRlKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIENhbWVyYTtcbn0odHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ2FtZXJhO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0V2hlZWxEZWx0YSA9IGV4cG9ydHMuZ2V0VG91Y2hDb29yZHMgPSBleHBvcnRzLmdldFRvdWNoZXNBcnJheSA9IGV4cG9ydHMuZ2V0V2hlZWxDb29yZHMgPSBleHBvcnRzLmdldE1vdXNlQ29vcmRzID0gZXhwb3J0cy5nZXRQb3NpdGlvbiA9IHZvaWQgMDtcbi8qKlxuICogU2lnbWEuanMgQ2FwdG9yIENsYXNzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09XG4gKiBAbW9kdWxlXG4gKi9cbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL3R5cGVzXCIpO1xuLyoqXG4gKiBDYXB0b3IgdXRpbHMgZnVuY3Rpb25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbi8qKlxuICogRXh0cmFjdCB0aGUgbG9jYWwgWCBhbmQgWSBjb29yZGluYXRlcyBmcm9tIGEgbW91c2UgZXZlbnQgb3IgdG91Y2ggb2JqZWN0LiBJZlxuICogYSBET00gZWxlbWVudCBpcyBnaXZlbiwgaXQgdXNlcyB0aGlzIGVsZW1lbnQncyBvZmZzZXQgdG8gY29tcHV0ZSB0aGUgcG9zaXRpb25cbiAqICh0aGlzIGFsbG93cyB1c2luZyBldmVudHMgdGhhdCBhcmUgbm90IGJvdW5kIHRvIHRoZSBjb250YWluZXIgaXRzZWxmIGFuZFxuICogc3RpbGwgaGF2ZSBhIHByb3BlciBwb3NpdGlvbikuXG4gKlxuICogQHBhcmFtICB7ZXZlbnR9ICAgICAgIGUgLSBBIG1vdXNlIGV2ZW50IG9yIHRvdWNoIG9iamVjdC5cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBkb20gLSBBIERPTSBlbGVtZW50IHRvIGNvbXB1dGUgb2Zmc2V0IHJlbGF0aXZlbHkgdG8uXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgVGhlIGxvY2FsIFkgdmFsdWUgb2YgdGhlIG1vdXNlLlxuICovXG5mdW5jdGlvbiBnZXRQb3NpdGlvbihlLCBkb20pIHtcbiAgICB2YXIgYmJveCA9IGRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBlLmNsaWVudFggLSBiYm94LmxlZnQsXG4gICAgICAgIHk6IGUuY2xpZW50WSAtIGJib3gudG9wLFxuICAgIH07XG59XG5leHBvcnRzLmdldFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG4vKipcbiAqIENvbnZlcnQgbW91c2UgY29vcmRzIHRvIHNpZ21hIGNvb3Jkcy5cbiAqXG4gKiBAcGFyYW0gIHtldmVudH0gICAgICAgZSAgIC0gQSBtb3VzZSBldmVudCBvciB0b3VjaCBvYmplY3QuXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZG9tIC0gQSBET00gZWxlbWVudCB0byBjb21wdXRlIG9mZnNldCByZWxhdGl2ZWx5IHRvLlxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRNb3VzZUNvb3JkcyhlLCBkb20pIHtcbiAgICB2YXIgcmVzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGdldFBvc2l0aW9uKGUsIGRvbSkpLCB7IHNpZ21hRGVmYXVsdFByZXZlbnRlZDogZmFsc2UsIHByZXZlbnRTaWdtYURlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlcy5zaWdtYURlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICB9LCBvcmlnaW5hbDogZSB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5nZXRNb3VzZUNvb3JkcyA9IGdldE1vdXNlQ29vcmRzO1xuLyoqXG4gKiBDb252ZXJ0IG1vdXNlIHdoZWVsIGV2ZW50IGNvb3JkcyB0byBzaWdtYSBjb29yZHMuXG4gKlxuICogQHBhcmFtICB7ZXZlbnR9ICAgICAgIGUgICAtIEEgd2hlZWwgbW91c2UgZXZlbnQuXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZG9tIC0gQSBET00gZWxlbWVudCB0byBjb21wdXRlIG9mZnNldCByZWxhdGl2ZWx5IHRvLlxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRXaGVlbENvb3JkcyhlLCBkb20pIHtcbiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGdldE1vdXNlQ29vcmRzKGUsIGRvbSkpLCB7IGRlbHRhOiBnZXRXaGVlbERlbHRhKGUpIH0pO1xufVxuZXhwb3J0cy5nZXRXaGVlbENvb3JkcyA9IGdldFdoZWVsQ29vcmRzO1xudmFyIE1BWF9UT1VDSEVTID0gMjtcbmZ1bmN0aW9uIGdldFRvdWNoZXNBcnJheSh0b3VjaGVzKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gTWF0aC5taW4odG91Y2hlcy5sZW5ndGgsIE1BWF9UT1VDSEVTKTsgaSA8IGw7IGkrKylcbiAgICAgICAgYXJyLnB1c2godG91Y2hlc1tpXSk7XG4gICAgcmV0dXJuIGFycjtcbn1cbmV4cG9ydHMuZ2V0VG91Y2hlc0FycmF5ID0gZ2V0VG91Y2hlc0FycmF5O1xuLyoqXG4gKiBDb252ZXJ0IHRvdWNoIGNvb3JkcyB0byBzaWdtYSBjb29yZHMuXG4gKlxuICogQHBhcmFtICB7ZXZlbnR9ICAgICAgIGUgICAtIEEgdG91Y2ggZXZlbnQuXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZG9tIC0gQSBET00gZWxlbWVudCB0byBjb21wdXRlIG9mZnNldCByZWxhdGl2ZWx5IHRvLlxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRUb3VjaENvb3JkcyhlLCBkb20pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3VjaGVzOiBnZXRUb3VjaGVzQXJyYXkoZS50b3VjaGVzKS5tYXAoZnVuY3Rpb24gKHRvdWNoKSB7IHJldHVybiBnZXRQb3NpdGlvbih0b3VjaCwgZG9tKTsgfSksXG4gICAgICAgIG9yaWdpbmFsOiBlLFxuICAgIH07XG59XG5leHBvcnRzLmdldFRvdWNoQ29vcmRzID0gZ2V0VG91Y2hDb29yZHM7XG4vKipcbiAqIEV4dHJhY3QgdGhlIHdoZWVsIGRlbHRhIGZyb20gYSBtb3VzZSBldmVudCBvciB0b3VjaCBvYmplY3QuXG4gKlxuICogQHBhcmFtICB7ZXZlbnR9ICBlIC0gQSBtb3VzZSBldmVudCBvciB0b3VjaCBvYmplY3QuXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAgICBUaGUgd2hlZWwgZGVsdGEgb2YgdGhlIG1vdXNlLlxuICovXG5mdW5jdGlvbiBnZXRXaGVlbERlbHRhKGUpIHtcbiAgICAvLyBUT0RPOiBjaGVjayB0aG9zZSByYXRpb3MgYWdhaW4gdG8gZW5zdXJlIGEgY2xlYW4gQ2hyb21lL0ZpcmVmb3ggY29tcGF0XG4gICAgaWYgKHR5cGVvZiBlLmRlbHRhWSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIChlLmRlbHRhWSAqIC0zKSAvIDM2MDtcbiAgICBpZiAodHlwZW9mIGUuZGV0YWlsICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZS5kZXRhaWwgLyAtOTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYXB0b3I6IGNvdWxkIG5vdCBleHRyYWN0IGRlbHRhIGZyb20gZXZlbnQuXCIpO1xufVxuZXhwb3J0cy5nZXRXaGVlbERlbHRhID0gZ2V0V2hlZWxEZWx0YTtcbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgcmVwcmVzZW50aW5nIGEgY2FwdG9yIGxpa2UgdGhlIHVzZXIncyBtb3VzZSBvciB0b3VjaCBjb250cm9scy5cbiAqL1xudmFyIENhcHRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ2FwdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENhcHRvcihjb250YWluZXIsIHJlbmRlcmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIC8vIFByb3BlcnRpZXNcbiAgICAgICAgX3RoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICBfdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBDYXB0b3I7XG59KHR5cGVzXzEuVHlwZWRFdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENhcHRvcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNhcHRvcl8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NhcHRvclwiKSk7XG4vKipcbiAqIENvbnN0YW50cy5cbiAqL1xudmFyIERSQUdfVElNRU9VVCA9IDEwMDtcbnZhciBEUkFHR0VEX0VWRU5UU19UT0xFUkFOQ0UgPSAzO1xudmFyIE1PVVNFX0lORVJUSUFfRFVSQVRJT04gPSAyMDA7XG52YXIgTU9VU0VfSU5FUlRJQV9SQVRJTyA9IDM7XG52YXIgTU9VU0VfWk9PTV9EVVJBVElPTiA9IDI1MDtcbnZhciBaT09NSU5HX1JBVElPID0gMS43O1xudmFyIERPVUJMRV9DTElDS19USU1FT1VUID0gMzAwO1xudmFyIERPVUJMRV9DTElDS19aT09NSU5HX1JBVElPID0gMi4yO1xudmFyIERPVUJMRV9DTElDS19aT09NSU5HX0RVUkFUSU9OID0gMjAwO1xuLyoqXG4gKiBNb3VzZSBjYXB0b3IgY2xhc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBNb3VzZUNhcHRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTW91c2VDYXB0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTW91c2VDYXB0b3IoY29udGFpbmVyLCByZW5kZXJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250YWluZXIsIHJlbmRlcmVyKSB8fCB0aGlzO1xuICAgICAgICAvLyBTdGF0ZVxuICAgICAgICBfdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuZHJhZ2dlZEV2ZW50cyA9IDA7XG4gICAgICAgIF90aGlzLmRvd25TdGFydFRpbWUgPSBudWxsO1xuICAgICAgICBfdGhpcy5sYXN0TW91c2VYID0gbnVsbDtcbiAgICAgICAgX3RoaXMubGFzdE1vdXNlWSA9IG51bGw7XG4gICAgICAgIF90aGlzLmlzTW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm1vdmluZ1RpbWVvdXQgPSBudWxsO1xuICAgICAgICBfdGhpcy5zdGFydENhbWVyYVN0YXRlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuY2xpY2tzID0gMDtcbiAgICAgICAgX3RoaXMuZG91YmxlQ2xpY2tUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuY3VycmVudFdoZWVsRGlyZWN0aW9uID0gMDtcbiAgICAgICAgLy8gQmluZGluZyBtZXRob2RzXG4gICAgICAgIF90aGlzLmhhbmRsZUNsaWNrID0gX3RoaXMuaGFuZGxlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZVJpZ2h0Q2xpY2sgPSBfdGhpcy5oYW5kbGVSaWdodENsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVEb3duID0gX3RoaXMuaGFuZGxlRG93bi5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlVXAgPSBfdGhpcy5oYW5kbGVVcC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlTW92ZSA9IF90aGlzLmhhbmRsZU1vdmUuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZVdoZWVsID0gX3RoaXMuaGFuZGxlV2hlZWwuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZU91dCA9IF90aGlzLmhhbmRsZU91dC5iaW5kKF90aGlzKTtcbiAgICAgICAgLy8gQmluZGluZyBldmVudHNcbiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfdGhpcy5oYW5kbGVDbGljaywgZmFsc2UpO1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIF90aGlzLmhhbmRsZVJpZ2h0Q2xpY2ssIGZhbHNlKTtcbiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgX3RoaXMuaGFuZGxlRG93biwgZmFsc2UpO1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIF90aGlzLmhhbmRsZVdoZWVsLCBmYWxzZSk7XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgX3RoaXMuaGFuZGxlT3V0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgX3RoaXMuaGFuZGxlTW92ZSwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBfdGhpcy5oYW5kbGVVcCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5raWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy5oYW5kbGVSaWdodENsaWNrKTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5oYW5kbGVEb3duKTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLmhhbmRsZVdoZWVsKTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCB0aGlzLmhhbmRsZU91dCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3ZlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVVcCk7XG4gICAgfTtcbiAgICBNb3VzZUNhcHRvci5wcm90b3R5cGUuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5jbGlja3MrKztcbiAgICAgICAgaWYgKHRoaXMuY2xpY2tzID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrcyA9IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZG91YmxlQ2xpY2tUaW1lb3V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZG91YmxlQ2xpY2tUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRvdWJsZUNsaWNrVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVEb3VibGVDbGljayhlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmNsaWNrcyA9IDA7XG4gICAgICAgICAgICBfdGhpcy5kb3VibGVDbGlja1RpbWVvdXQgPSBudWxsO1xuICAgICAgICB9LCBET1VCTEVfQ0xJQ0tfVElNRU9VVCk7XG4gICAgICAgIC8vIE5PVEU6IHRoaXMgaXMgaGVyZSB0byBwcmV2ZW50IGNsaWNrIGV2ZW50cyBvbiBkcmFnXG4gICAgICAgIGlmICh0aGlzLmRyYWdnZWRFdmVudHMgPCBEUkFHR0VEX0VWRU5UU19UT0xFUkFOQ0UpXG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJjbGlja1wiLCAoMCwgY2FwdG9yXzEuZ2V0TW91c2VDb29yZHMpKGUsIHRoaXMuY29udGFpbmVyKSk7XG4gICAgfTtcbiAgICBNb3VzZUNhcHRvci5wcm90b3R5cGUuaGFuZGxlUmlnaHRDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmVtaXQoXCJyaWdodENsaWNrXCIsICgwLCBjYXB0b3JfMS5nZXRNb3VzZUNvb3JkcykoZSwgdGhpcy5jb250YWluZXIpKTtcbiAgICB9O1xuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVEb3VibGVDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHZhciBtb3VzZUNvb3JkcyA9ICgwLCBjYXB0b3JfMS5nZXRNb3VzZUNvb3JkcykoZSwgdGhpcy5jb250YWluZXIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJkb3VibGVDbGlja1wiLCBtb3VzZUNvb3Jkcyk7XG4gICAgICAgIGlmIChtb3VzZUNvb3Jkcy5zaWdtYURlZmF1bHRQcmV2ZW50ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIGRlZmF1bHQgYmVoYXZpb3JcbiAgICAgICAgdmFyIGNhbWVyYSA9IHRoaXMucmVuZGVyZXIuZ2V0Q2FtZXJhKCk7XG4gICAgICAgIHZhciBuZXdSYXRpbyA9IGNhbWVyYS5nZXRCb3VuZGVkUmF0aW8oY2FtZXJhLmdldFN0YXRlKCkucmF0aW8gLyBET1VCTEVfQ0xJQ0tfWk9PTUlOR19SQVRJTyk7XG4gICAgICAgIGNhbWVyYS5hbmltYXRlKHRoaXMucmVuZGVyZXIuZ2V0Vmlld3BvcnRab29tZWRTdGF0ZSgoMCwgY2FwdG9yXzEuZ2V0UG9zaXRpb24pKGUsIHRoaXMuY29udGFpbmVyKSwgbmV3UmF0aW8pLCB7XG4gICAgICAgICAgICBlYXNpbmc6IFwicXVhZHJhdGljSW5PdXRcIixcbiAgICAgICAgICAgIGR1cmF0aW9uOiBET1VCTEVfQ0xJQ0tfWk9PTUlOR19EVVJBVElPTixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNb3VzZUNhcHRvci5wcm90b3R5cGUuaGFuZGxlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBXZSBvbmx5IHN0YXJ0IGRyYWdnaW5nIG9uIGxlZnQgYnV0dG9uXG4gICAgICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydENhbWVyYVN0YXRlID0gdGhpcy5yZW5kZXJlci5nZXRDYW1lcmEoKS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgdmFyIF9hID0gKDAsIGNhcHRvcl8xLmdldFBvc2l0aW9uKShlLCB0aGlzLmNvbnRhaW5lciksIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICAgICAgICAgIHRoaXMubGFzdE1vdXNlWCA9IHg7XG4gICAgICAgICAgICB0aGlzLmxhc3RNb3VzZVkgPSB5O1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2VkRXZlbnRzID0gMDtcbiAgICAgICAgICAgIHRoaXMuZG93blN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB0aGlzLmlzTW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoXCJtb3VzZWRvd25cIiwgKDAsIGNhcHRvcl8xLmdldE1vdXNlQ29vcmRzKShlLCB0aGlzLmNvbnRhaW5lcikpO1xuICAgIH07XG4gICAgTW91c2VDYXB0b3IucHJvdG90eXBlLmhhbmRsZVVwID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQgfHwgIXRoaXMuaXNNb3VzZURvd24pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBjYW1lcmEgPSB0aGlzLnJlbmRlcmVyLmdldENhbWVyYSgpO1xuICAgICAgICB0aGlzLmlzTW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5tb3ZpbmdUaW1lb3V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tb3ZpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMubW92aW5nVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gKDAsIGNhcHRvcl8xLmdldFBvc2l0aW9uKShlLCB0aGlzLmNvbnRhaW5lciksIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICAgICAgdmFyIGNhbWVyYVN0YXRlID0gY2FtZXJhLmdldFN0YXRlKCksIHByZXZpb3VzQ2FtZXJhU3RhdGUgPSBjYW1lcmEuZ2V0UHJldmlvdXNTdGF0ZSgpIHx8IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBpZiAodGhpcy5pc01vdmluZykge1xuICAgICAgICAgICAgY2FtZXJhLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHg6IGNhbWVyYVN0YXRlLnggKyBNT1VTRV9JTkVSVElBX1JBVElPICogKGNhbWVyYVN0YXRlLnggLSBwcmV2aW91c0NhbWVyYVN0YXRlLngpLFxuICAgICAgICAgICAgICAgIHk6IGNhbWVyYVN0YXRlLnkgKyBNT1VTRV9JTkVSVElBX1JBVElPICogKGNhbWVyYVN0YXRlLnkgLSBwcmV2aW91c0NhbWVyYVN0YXRlLnkpLFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBNT1VTRV9JTkVSVElBX0RVUkFUSU9OLFxuICAgICAgICAgICAgICAgIGVhc2luZzogXCJxdWFkcmF0aWNPdXRcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubGFzdE1vdXNlWCAhPT0geCB8fCB0aGlzLmxhc3RNb3VzZVkgIT09IHkpIHtcbiAgICAgICAgICAgIGNhbWVyYS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgeDogY2FtZXJhU3RhdGUueCxcbiAgICAgICAgICAgICAgICB5OiBjYW1lcmFTdGF0ZS55LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmRyYWdnZWRFdmVudHMgPSAwO1xuICAgICAgICAgICAgLy8gTk9URTogdGhpcyByZWZyZXNoIGlzIGhlcmUgdG8gbWFrZSBzdXJlIGBoaWRlRWRnZXNPbk1vdmVgIGNhbiB3b3JrXG4gICAgICAgICAgICAvLyB3aGVuIHNvbWVvbmUgcmVsZWFzZXMgY2FtZXJhIHBhbiBkcmFnIGFmdGVyIGhhdmluZyBzdG9wcGVkIG1vdmluZy5cbiAgICAgICAgICAgIC8vIFNlZSBjb21taXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYWNvbXlhbC9zaWdtYS5qcy9jb21taXQvY2ZkOTE5N2Y3MDMxOTEwOWRiNmI2NzVkZDdjODJiZTQ5M2NhOTVhMlxuICAgICAgICAgICAgLy8gU2VlIGFsc28gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYWNvbXlhbC9zaWdtYS5qcy9pc3N1ZXMvMTI5MFxuICAgICAgICAgICAgLy8gSXQgY291bGQgYmUgcG9zc2libGUgdG8gcmVuZGVyIGluc3RlYWQgb2Ygc2NoZWR1bGluZyBhIHJlZnJlc2ggYnV0IGZvclxuICAgICAgICAgICAgLy8gbm93IGl0IHNlZW1zIGdvb2QgZW5vdWdoLlxuICAgICAgICAgICAgX3RoaXMucmVuZGVyZXIucmVmcmVzaCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgdGhpcy5lbWl0KFwibW91c2V1cFwiLCAoMCwgY2FwdG9yXzEuZ2V0TW91c2VDb29yZHMpKGUsIHRoaXMuY29udGFpbmVyKSk7XG4gICAgfTtcbiAgICBNb3VzZUNhcHRvci5wcm90b3R5cGUuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgbW91c2VDb29yZHMgPSAoMCwgY2FwdG9yXzEuZ2V0TW91c2VDb29yZHMpKGUsIHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgLy8gQWx3YXlzIHRyaWdnZXIgYSBcIm1vdXNlbW92ZWJvZHlcIiBldmVudCwgc28gdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBkZXZlbG9wXG4gICAgICAgIC8vIGEgZHJhZy1hbmQtZHJvcCBlZmZlY3QgdGhhdCB3b3JrcyBldmVuIHdoZW4gdGhlIG1vdXNlIGlzIG91dCBvZiB0aGVcbiAgICAgICAgLy8gY29udGFpbmVyOlxuICAgICAgICB0aGlzLmVtaXQoXCJtb3VzZW1vdmVib2R5XCIsIG1vdXNlQ29vcmRzKTtcbiAgICAgICAgLy8gT25seSB0cmlnZ2VyIHRoZSBcIm1vdXNlbW92ZVwiIGV2ZW50IHdoZW4gdGhlIG1vdXNlIGlzIGFjdHVhbGx5IGhvdmVyaW5nXG4gICAgICAgIC8vIHRoZSBjb250YWluZXIsIHRvIGF2b2lkIHdlaXJkbHkgaG92ZXJpbmcgbm9kZXMgYW5kL29yIGVkZ2VzIHdoZW4gdGhlXG4gICAgICAgIC8vIG1vdXNlIGlzIG5vdCBob3ZlciB0aGUgY29udGFpbmVyOlxuICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJtb3VzZW1vdmVcIiwgbW91c2VDb29yZHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb3VzZUNvb3Jkcy5zaWdtYURlZmF1bHRQcmV2ZW50ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIFwiaXNNb3VzZURvd25cIiBhbGwgdGhlIHRpbWUsIHRvIGFsbG93IGRyYWdnaW5nIHRoZVxuICAgICAgICAvLyBzdGFnZSB3aGlsZSB0aGUgbW91c2UgaXMgbm90IGhvdmVyIHRoZSBjb250YWluZXI6XG4gICAgICAgIGlmICh0aGlzLmlzTW91c2VEb3duKSB7XG4gICAgICAgICAgICB0aGlzLmlzTW92aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZHJhZ2dlZEV2ZW50cysrO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1vdmluZ1RpbWVvdXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tb3ZpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW92aW5nVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tb3ZpbmdUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgRFJBR19USU1FT1VUKTtcbiAgICAgICAgICAgIHZhciBjYW1lcmEgPSB0aGlzLnJlbmRlcmVyLmdldENhbWVyYSgpO1xuICAgICAgICAgICAgdmFyIF9hID0gKDAsIGNhcHRvcl8xLmdldFBvc2l0aW9uKShlLCB0aGlzLmNvbnRhaW5lciksIGVYID0gX2EueCwgZVkgPSBfYS55O1xuICAgICAgICAgICAgdmFyIGxhc3RNb3VzZSA9IHRoaXMucmVuZGVyZXIudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLmxhc3RNb3VzZVgsXG4gICAgICAgICAgICAgICAgeTogdGhpcy5sYXN0TW91c2VZLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbW91c2UgPSB0aGlzLnJlbmRlcmVyLnZpZXdwb3J0VG9GcmFtZWRHcmFwaCh7IHg6IGVYLCB5OiBlWSB9KTtcbiAgICAgICAgICAgIHZhciBvZmZzZXRYID0gbGFzdE1vdXNlLnggLSBtb3VzZS54LCBvZmZzZXRZID0gbGFzdE1vdXNlLnkgLSBtb3VzZS55O1xuICAgICAgICAgICAgdmFyIGNhbWVyYVN0YXRlID0gY2FtZXJhLmdldFN0YXRlKCk7XG4gICAgICAgICAgICB2YXIgeCA9IGNhbWVyYVN0YXRlLnggKyBvZmZzZXRYLCB5ID0gY2FtZXJhU3RhdGUueSArIG9mZnNldFk7XG4gICAgICAgICAgICBjYW1lcmEuc2V0U3RhdGUoeyB4OiB4LCB5OiB5IH0pO1xuICAgICAgICAgICAgdGhpcy5sYXN0TW91c2VYID0gZVg7XG4gICAgICAgICAgICB0aGlzLmxhc3RNb3VzZVkgPSBlWTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVXaGVlbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHZhciBkZWx0YSA9ICgwLCBjYXB0b3JfMS5nZXRXaGVlbERlbHRhKShlKTtcbiAgICAgICAgaWYgKCFkZWx0YSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHdoZWVsQ29vcmRzID0gKDAsIGNhcHRvcl8xLmdldFdoZWVsQ29vcmRzKShlLCB0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuZW1pdChcIndoZWVsXCIsIHdoZWVsQ29vcmRzKTtcbiAgICAgICAgaWYgKHdoZWVsQ29vcmRzLnNpZ21hRGVmYXVsdFByZXZlbnRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gRGVmYXVsdCBiZWhhdmlvclxuICAgICAgICB2YXIgcmF0aW9EaWZmID0gZGVsdGEgPiAwID8gMSAvIFpPT01JTkdfUkFUSU8gOiBaT09NSU5HX1JBVElPO1xuICAgICAgICB2YXIgY2FtZXJhID0gdGhpcy5yZW5kZXJlci5nZXRDYW1lcmEoKTtcbiAgICAgICAgdmFyIG5ld1JhdGlvID0gY2FtZXJhLmdldEJvdW5kZWRSYXRpbyhjYW1lcmEuZ2V0U3RhdGUoKS5yYXRpbyAqIHJhdGlvRGlmZik7XG4gICAgICAgIHZhciB3aGVlbERpcmVjdGlvbiA9IGRlbHRhID4gMCA/IDEgOiAtMTtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIC8vIENhbmNlbCBldmVudHMgdGhhdCBhcmUgdG9vIGNsb3NlIHRvbyBlYWNoIG90aGVyIGFuZCBpbiB0aGUgc2FtZSBkaXJlY3Rpb246XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRXaGVlbERpcmVjdGlvbiA9PT0gd2hlZWxEaXJlY3Rpb24gJiZcbiAgICAgICAgICAgIHRoaXMubGFzdFdoZWVsVHJpZ2dlclRpbWUgJiZcbiAgICAgICAgICAgIG5vdyAtIHRoaXMubGFzdFdoZWVsVHJpZ2dlclRpbWUgPCBNT1VTRV9aT09NX0RVUkFUSU9OIC8gNSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhbWVyYS5hbmltYXRlKHRoaXMucmVuZGVyZXIuZ2V0Vmlld3BvcnRab29tZWRTdGF0ZSgoMCwgY2FwdG9yXzEuZ2V0UG9zaXRpb24pKGUsIHRoaXMuY29udGFpbmVyKSwgbmV3UmF0aW8pLCB7XG4gICAgICAgICAgICBlYXNpbmc6IFwicXVhZHJhdGljT3V0XCIsXG4gICAgICAgICAgICBkdXJhdGlvbjogTU9VU0VfWk9PTV9EVVJBVElPTixcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudFdoZWVsRGlyZWN0aW9uID0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3VycmVudFdoZWVsRGlyZWN0aW9uID0gd2hlZWxEaXJlY3Rpb247XG4gICAgICAgIHRoaXMubGFzdFdoZWVsVHJpZ2dlclRpbWUgPSBub3c7XG4gICAgfTtcbiAgICBNb3VzZUNhcHRvci5wcm90b3R5cGUuaGFuZGxlT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUT0RPOiBkaXNwYXRjaCBldmVudFxuICAgIH07XG4gICAgcmV0dXJuIE1vdXNlQ2FwdG9yO1xufShjYXB0b3JfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBNb3VzZUNhcHRvcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNhcHRvcl8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NhcHRvclwiKSk7XG52YXIgRFJBR19USU1FT1VUID0gMjAwO1xudmFyIFRPVUNIX0lORVJUSUFfUkFUSU8gPSAzO1xudmFyIFRPVUNIX0lORVJUSUFfRFVSQVRJT04gPSAyMDA7XG4vKipcbiAqIFRvdWNoIGNhcHRvciBjbGFzcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFRvdWNoQ2FwdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUb3VjaENhcHRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUb3VjaENhcHRvcihjb250YWluZXIsIHJlbmRlcmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRhaW5lciwgcmVuZGVyZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy50b3VjaE1vZGUgPSAwOyAvLyBudW1iZXIgb2YgdG91Y2hlcyBkb3duXG4gICAgICAgIF90aGlzLnN0YXJ0VG91Y2hlc1Bvc2l0aW9ucyA9IFtdO1xuICAgICAgICAvLyBCaW5kaW5nIG1ldGhvZHM6XG4gICAgICAgIF90aGlzLmhhbmRsZVN0YXJ0ID0gX3RoaXMuaGFuZGxlU3RhcnQuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZUxlYXZlID0gX3RoaXMuaGFuZGxlTGVhdmUuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZU1vdmUgPSBfdGhpcy5oYW5kbGVNb3ZlLmJpbmQoX3RoaXMpO1xuICAgICAgICAvLyBCaW5kaW5nIGV2ZW50c1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgX3RoaXMuaGFuZGxlU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBfdGhpcy5oYW5kbGVMZWF2ZSwgZmFsc2UpO1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIF90aGlzLmhhbmRsZUxlYXZlLCBmYWxzZSk7XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIF90aGlzLmhhbmRsZU1vdmUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUb3VjaENhcHRvci5wcm90b3R5cGUua2lsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5oYW5kbGVTdGFydCk7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5oYW5kbGVMZWF2ZSk7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgdGhpcy5oYW5kbGVMZWF2ZSk7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlTW92ZSk7XG4gICAgfTtcbiAgICBUb3VjaENhcHRvci5wcm90b3R5cGUuZ2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5jb250YWluZXIub2Zmc2V0SGVpZ2h0LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgVG91Y2hDYXB0b3IucHJvdG90eXBlLmRpc3BhdGNoUmVsYXRlZE1vdXNlRXZlbnQgPSBmdW5jdGlvbiAodHlwZSwgZSwgdG91Y2gsIGVtaXR0ZXIpIHtcbiAgICAgICAgdmFyIG1vdXNlUG9zaXRpb24gPSB0b3VjaCB8fCBlLnRvdWNoZXNbMF07XG4gICAgICAgIHZhciBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQodHlwZSwge1xuICAgICAgICAgICAgY2xpZW50WDogbW91c2VQb3NpdGlvbi5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WTogbW91c2VQb3NpdGlvbi5jbGllbnRZLFxuICAgICAgICAgICAgYWx0S2V5OiBlLmFsdEtleSxcbiAgICAgICAgICAgIGN0cmxLZXk6IGUuY3RybEtleSxcbiAgICAgICAgfSk7XG4gICAgICAgIG1vdXNlRXZlbnQuaXNGYWtlU2lnbWFNb3VzZUV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgKGVtaXR0ZXIgfHwgdGhpcy5jb250YWluZXIpLmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XG4gICAgfTtcbiAgICBUb3VjaENhcHRvci5wcm90b3R5cGUuaGFuZGxlU3RhcnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IHRvIGF2b2lkIGRlZmF1bHQgYnJvd3NlciBiZWhhdmlvcnMuLi5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyAuLi5idXQgc2ltdWxhdGUgbW91c2UgYmVoYXZpb3IgYW55d2F5LCB0byBnZXQgdGhlIE1vdXNlQ2FwdG9yIHdvcmtpbmcgYXMgd2VsbDpcbiAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoUmVsYXRlZE1vdXNlRXZlbnQoXCJtb3VzZWRvd25cIiwgZSk7XG4gICAgICAgIHZhciB0b3VjaGVzID0gKDAsIGNhcHRvcl8xLmdldFRvdWNoZXNBcnJheSkoZS50b3VjaGVzKTtcbiAgICAgICAgdGhpcy50b3VjaE1vZGUgPSB0b3VjaGVzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5zdGFydENhbWVyYVN0YXRlID0gdGhpcy5yZW5kZXJlci5nZXRDYW1lcmEoKS5nZXRTdGF0ZSgpO1xuICAgICAgICB0aGlzLnN0YXJ0VG91Y2hlc1Bvc2l0aW9ucyA9IHRvdWNoZXMubWFwKGZ1bmN0aW9uICh0b3VjaCkgeyByZXR1cm4gKDAsIGNhcHRvcl8xLmdldFBvc2l0aW9uKSh0b3VjaCwgX3RoaXMuY29udGFpbmVyKTsgfSk7XG4gICAgICAgIHRoaXMubGFzdFRvdWNoZXMgPSB0b3VjaGVzO1xuICAgICAgICB0aGlzLmxhc3RUb3VjaGVzUG9zaXRpb25zID0gdGhpcy5zdGFydFRvdWNoZXNQb3NpdGlvbnM7XG4gICAgICAgIC8vIFdoZW4gdGhlcmUgYXJlIHR3byB0b3VjaGVzIGRvd24sIGxldCdzIHJlY29yZCBkaXN0YW5jZSBhbmQgYW5nbGUgYXMgd2VsbDpcbiAgICAgICAgaWYgKHRoaXMudG91Y2hNb2RlID09PSAyKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfX3JlYWQodGhpcy5zdGFydFRvdWNoZXNQb3NpdGlvbnMsIDIpLCBfYiA9IF9hWzBdLCB4MCA9IF9iLngsIHkwID0gX2IueSwgX2MgPSBfYVsxXSwgeDEgPSBfYy54LCB5MSA9IF9jLnk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VG91Y2hlc0FuZ2xlID0gTWF0aC5hdGFuMih5MSAtIHkwLCB4MSAtIHgwKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUb3VjaGVzRGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDEgLSB4MCwgMikgKyBNYXRoLnBvdyh5MSAtIHkwLCAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KFwidG91Y2hkb3duXCIsICgwLCBjYXB0b3JfMS5nZXRUb3VjaENvb3JkcykoZSwgdGhpcy5jb250YWluZXIpKTtcbiAgICB9O1xuICAgIFRvdWNoQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVMZWF2ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgdG8gYXZvaWQgZGVmYXVsdCBicm93c2VyIGJlaGF2aW9ycy4uLlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIC4uLmJ1dCBzaW11bGF0ZSBtb3VzZSBiZWhhdmlvciBhbnl3YXksIHRvIGdldCB0aGUgTW91c2VDYXB0b3Igd29ya2luZyBhcyB3ZWxsOlxuICAgICAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxhc3RUb3VjaGVzICYmIHRoaXMubGFzdFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoUmVsYXRlZE1vdXNlRXZlbnQoXCJtb3VzZXVwXCIsIGUsIHRoaXMubGFzdFRvdWNoZXNbMF0sIGRvY3VtZW50KTtcbiAgICAgICAgICAgIC8vIC4uLiBhbmQgb25seSBjbGljayBpZiBubyBtb3ZlIHdhcyBtYWRlXG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzTW92ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoUmVsYXRlZE1vdXNlRXZlbnQoXCJjbGlja1wiLCBlLCB0aGlzLmxhc3RUb3VjaGVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tb3ZpbmdUaW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tb3ZpbmdUaW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMudG91Y2hNb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdGFydChlKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgLy8gVE9ET1xuICAgICAgICAgICAgICAgIC8vIERpc3BhdGNoIGV2ZW50XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNNb3ZpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbWVyYSA9IHRoaXMucmVuZGVyZXIuZ2V0Q2FtZXJhKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW1lcmFTdGF0ZSA9IGNhbWVyYS5nZXRTdGF0ZSgpLCBwcmV2aW91c0NhbWVyYVN0YXRlID0gY2FtZXJhLmdldFByZXZpb3VzU3RhdGUoKSB8fCB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogY2FtZXJhU3RhdGUueCArIFRPVUNIX0lORVJUSUFfUkFUSU8gKiAoY2FtZXJhU3RhdGUueCAtIHByZXZpb3VzQ2FtZXJhU3RhdGUueCksXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBjYW1lcmFTdGF0ZS55ICsgVE9VQ0hfSU5FUlRJQV9SQVRJTyAqIChjYW1lcmFTdGF0ZS55IC0gcHJldmlvdXNDYW1lcmFTdGF0ZS55KSxcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFRPVUNIX0lORVJUSUFfRFVSQVRJT04sXG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwicXVhZHJhdGljT3V0XCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmhhc01vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hNb2RlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoXCJ0b3VjaHVwXCIsICgwLCBjYXB0b3JfMS5nZXRUb3VjaENvb3JkcykoZSwgdGhpcy5jb250YWluZXIpKTtcbiAgICB9O1xuICAgIFRvdWNoQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVNb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IHRvIGF2b2lkIGRlZmF1bHQgYnJvd3NlciBiZWhhdmlvcnMuLi5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyAuLi5idXQgc2ltdWxhdGUgbW91c2UgYmVoYXZpb3IgYW55d2F5LCB0byBnZXQgdGhlIE1vdXNlQ2FwdG9yIHdvcmtpbmcgYXMgd2VsbDpcbiAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoUmVsYXRlZE1vdXNlRXZlbnQoXCJtb3VzZW1vdmVcIiwgZSk7XG4gICAgICAgIHZhciB0b3VjaGVzID0gKDAsIGNhcHRvcl8xLmdldFRvdWNoZXNBcnJheSkoZS50b3VjaGVzKTtcbiAgICAgICAgdmFyIHRvdWNoZXNQb3NpdGlvbnMgPSB0b3VjaGVzLm1hcChmdW5jdGlvbiAodG91Y2gpIHsgcmV0dXJuICgwLCBjYXB0b3JfMS5nZXRQb3NpdGlvbikodG91Y2gsIF90aGlzLmNvbnRhaW5lcik7IH0pO1xuICAgICAgICB0aGlzLmxhc3RUb3VjaGVzID0gdG91Y2hlcztcbiAgICAgICAgdGhpcy5sYXN0VG91Y2hlc1Bvc2l0aW9ucyA9IHRvdWNoZXNQb3NpdGlvbnM7XG4gICAgICAgIC8vIElmIGEgbW92ZSB3YXMgaW5pdGlhdGVkIGF0IHNvbWUgcG9pbnQgYW5kIHdlIGdldCBiYWNrIHRvIHN0YXJ0cG9pbnQsXG4gICAgICAgIC8vIHdlIHNob3VsZCBzdGlsbCBjb25zaWRlciB0aGF0IHdlIGRpZCBtb3ZlICh3aGljaCBhbHNvIGhhcHBlbnMgYWZ0ZXIgYVxuICAgICAgICAvLyBtdWx0aXBsZSB0b3VjaCB3aGVuIG9ubHkgb25lIHRvdWNoIHJlbWFpbnMgaW4gd2hpY2ggY2FzZSBoYW5kbGVTdGFydFxuICAgICAgICAvLyBpcyByZWNhbGxlZCB3aXRoaW4gaGFuZGxlTGVhdmUpLlxuICAgICAgICAvLyBOb3csIHNvbWUgbW9iaWxlIGJyb3dzZXJzIHJlcG9ydCB6ZXJvLWRpc3RhbmNlIG1vdmVzIHNvIHdlIGFsc28gY2hlY2sgdGhhdFxuICAgICAgICAvLyBvbmUgb2YgdGhlIHRvdWNoZXMgZGlkIGFjdHVhbGx5IG1vdmUgZnJvbSB0aGUgb3JpZ2luIHBvc2l0aW9uLlxuICAgICAgICB0aGlzLmhhc01vdmVkIHx8ICh0aGlzLmhhc01vdmVkID0gdG91Y2hlc1Bvc2l0aW9ucy5zb21lKGZ1bmN0aW9uIChwb3NpdGlvbiwgaWR4KSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IF90aGlzLnN0YXJ0VG91Y2hlc1Bvc2l0aW9uc1tpZHhdO1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uLnggIT09IHN0YXJ0UG9zaXRpb24ueCB8fCBwb3NpdGlvbi55ICE9PSBzdGFydFBvc2l0aW9uLnk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIG1vdmUsIGRvIG5vdCB0cmlnZ2VyIHRvdWNoIG1vdmVzIGJlaGF2aW9yXG4gICAgICAgIGlmICghdGhpcy5oYXNNb3ZlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNNb3ZpbmcgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5tb3ZpbmdUaW1lb3V0KVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubW92aW5nVGltZW91dCk7XG4gICAgICAgIHRoaXMubW92aW5nVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgIH0sIERSQUdfVElNRU9VVCk7XG4gICAgICAgIHZhciBjYW1lcmEgPSB0aGlzLnJlbmRlcmVyLmdldENhbWVyYSgpO1xuICAgICAgICB2YXIgc3RhcnRDYW1lcmFTdGF0ZSA9IHRoaXMuc3RhcnRDYW1lcmFTdGF0ZTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnRvdWNoTW9kZSkge1xuICAgICAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5yZW5kZXJlci52aWV3cG9ydFRvRnJhbWVkR3JhcGgoKHRoaXMuc3RhcnRUb3VjaGVzUG9zaXRpb25zIHx8IFtdKVswXSksIHhTdGFydCA9IF9iLngsIHlTdGFydCA9IF9iLnk7XG4gICAgICAgICAgICAgICAgdmFyIF9jID0gdGhpcy5yZW5kZXJlci52aWV3cG9ydFRvRnJhbWVkR3JhcGgodG91Y2hlc1Bvc2l0aW9uc1swXSksIHggPSBfYy54LCB5ID0gX2MueTtcbiAgICAgICAgICAgICAgICBjYW1lcmEuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB4OiBzdGFydENhbWVyYVN0YXRlLnggKyB4U3RhcnQgLSB4LFxuICAgICAgICAgICAgICAgICAgICB5OiBzdGFydENhbWVyYVN0YXRlLnkgKyB5U3RhcnQgLSB5LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSGVyZSBpcyB0aGUgdGhpbmtpbmcgaGVyZTpcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIDEuIFdlIGNhbiBmaW5kIHRoZSBuZXcgYW5nbGUgYW5kIHJhdGlvLCBieSBjb21wYXJpbmcgdGhlIHZlY3RvciBmcm9tIFwidG91Y2ggb25lXCIgdG8gXCJ0b3VjaCB0d29cIiBhdCB0aGUgc3RhcnRcbiAgICAgICAgICAgICAgICAgKiAgICBvZiB0aGUgZCduJ2QgYW5kIG5vd1xuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogMi4gV2UgY2FuIHVzZSBgQ2FtZXJhI3ZpZXdwb3J0VG9HcmFwaGAgaW5zaWRlIGZvcm11bGEgdG8gcmV0cmlldmUgdGhlIG5ldyBjYW1lcmEgcG9zaXRpb24sIHVzaW5nIHRoZSBncmFwaFxuICAgICAgICAgICAgICAgICAqICAgIHBvc2l0aW9uIG9mIGEgdG91Y2ggYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgZCduJ2QgKHVzaW5nIGBzdGFydENhbWVyYS52aWV3cG9ydFRvR3JhcGhgKSBhbmQgdGhlIHZpZXdwb3J0XG4gICAgICAgICAgICAgICAgICogICAgcG9zaXRpb24gb2YgdGhpcyBzYW1lIHRvdWNoIG5vd1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHZhciBuZXdDYW1lcmFTdGF0ZSA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IHRvdWNoZXNQb3NpdGlvbnNbMF0sIHgwID0gX2QueCwgeTAgPSBfZC55O1xuICAgICAgICAgICAgICAgIHZhciBfZSA9IHRvdWNoZXNQb3NpdGlvbnNbMV0sIHgxID0gX2UueCwgeTEgPSBfZS55O1xuICAgICAgICAgICAgICAgIHZhciBhbmdsZURpZmYgPSBNYXRoLmF0YW4yKHkxIC0geTAsIHgxIC0geDApIC0gdGhpcy5zdGFydFRvdWNoZXNBbmdsZTtcbiAgICAgICAgICAgICAgICB2YXIgcmF0aW9EaWZmID0gTWF0aC5oeXBvdCh5MSAtIHkwLCB4MSAtIHgwKSAvIHRoaXMuc3RhcnRUb3VjaGVzRGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgLy8gMS5cbiAgICAgICAgICAgICAgICB2YXIgbmV3UmF0aW8gPSBjYW1lcmEuZ2V0Qm91bmRlZFJhdGlvKHN0YXJ0Q2FtZXJhU3RhdGUucmF0aW8gLyByYXRpb0RpZmYpO1xuICAgICAgICAgICAgICAgIG5ld0NhbWVyYVN0YXRlLnJhdGlvID0gbmV3UmF0aW87XG4gICAgICAgICAgICAgICAgbmV3Q2FtZXJhU3RhdGUuYW5nbGUgPSBzdGFydENhbWVyYVN0YXRlLmFuZ2xlICsgYW5nbGVEaWZmO1xuICAgICAgICAgICAgICAgIC8vIDIuXG4gICAgICAgICAgICAgICAgdmFyIGRpbWVuc2lvbnMgPSB0aGlzLmdldERpbWVuc2lvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hHcmFwaFBvc2l0aW9uID0gdGhpcy5yZW5kZXJlci52aWV3cG9ydFRvRnJhbWVkR3JhcGgoKHRoaXMuc3RhcnRUb3VjaGVzUG9zaXRpb25zIHx8IFtdKVswXSwgeyBjYW1lcmFTdGF0ZTogc3RhcnRDYW1lcmFTdGF0ZSB9KTtcbiAgICAgICAgICAgICAgICB2YXIgc21hbGxlc3REaW1lbnNpb24gPSBNYXRoLm1pbihkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgdmFyIGR4ID0gc21hbGxlc3REaW1lbnNpb24gLyBkaW1lbnNpb25zLndpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBkeSA9IHNtYWxsZXN0RGltZW5zaW9uIC8gZGltZW5zaW9ucy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHJhdGlvID0gbmV3UmF0aW8gLyBzbWFsbGVzdERpbWVuc2lvbjtcbiAgICAgICAgICAgICAgICAvLyBBbGlnbiB3aXRoIGNlbnRlciBvZiB0aGUgZ3JhcGg6XG4gICAgICAgICAgICAgICAgdmFyIHggPSB4MCAtIHNtYWxsZXN0RGltZW5zaW9uIC8gMiAvIGR4O1xuICAgICAgICAgICAgICAgIHZhciB5ID0geTAgLSBzbWFsbGVzdERpbWVuc2lvbiAvIDIgLyBkeTtcbiAgICAgICAgICAgICAgICAvLyBSb3RhdGU6XG4gICAgICAgICAgICAgICAgX2EgPSBfX3JlYWQoW1xuICAgICAgICAgICAgICAgICAgICB4ICogTWF0aC5jb3MoLW5ld0NhbWVyYVN0YXRlLmFuZ2xlKSAtIHkgKiBNYXRoLnNpbigtbmV3Q2FtZXJhU3RhdGUuYW5nbGUpLFxuICAgICAgICAgICAgICAgICAgICB5ICogTWF0aC5jb3MoLW5ld0NhbWVyYVN0YXRlLmFuZ2xlKSArIHggKiBNYXRoLnNpbigtbmV3Q2FtZXJhU3RhdGUuYW5nbGUpLFxuICAgICAgICAgICAgICAgIF0sIDIpLCB4ID0gX2FbMF0sIHkgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICBuZXdDYW1lcmFTdGF0ZS54ID0gdG91Y2hHcmFwaFBvc2l0aW9uLnggLSB4ICogcmF0aW87XG4gICAgICAgICAgICAgICAgbmV3Q2FtZXJhU3RhdGUueSA9IHRvdWNoR3JhcGhQb3NpdGlvbi55ICsgeSAqIHJhdGlvO1xuICAgICAgICAgICAgICAgIGNhbWVyYS5zZXRTdGF0ZShuZXdDYW1lcmFTdGF0ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KFwidG91Y2htb3ZlXCIsICgwLCBjYXB0b3JfMS5nZXRUb3VjaENvb3JkcykoZSwgdGhpcy5jb250YWluZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBUb3VjaENhcHRvcjtcbn0oY2FwdG9yXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVG91Y2hDYXB0b3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZWRnZUxhYmVsc1RvRGlzcGxheUZyb21Ob2RlcyA9IGV4cG9ydHMuTGFiZWxHcmlkID0gdm9pZCAwO1xuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBzaW5nbGUgY2FuZGlkYXRlIGZvciB0aGUgbGFiZWwgZ3JpZCBzZWxlY3Rpb24uXG4gKlxuICogSXQgYWxzbyBkZXNjcmliZXMgYSBkZXRlcm1pbmlzdGljIHdheSB0byBjb21wYXJlIHR3byBjYW5kaWRhdGVzIHRvIGFzc2Vzc1xuICogd2hpY2ggb25lIGlzIGJldHRlci5cbiAqL1xudmFyIExhYmVsQ2FuZGlkYXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExhYmVsQ2FuZGlkYXRlKGtleSwgc2l6ZSkge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB9XG4gICAgTGFiZWxDYW5kaWRhdGUuY29tcGFyZSA9IGZ1bmN0aW9uIChmaXJzdCwgc2Vjb25kKSB7XG4gICAgICAgIC8vIEZpcnN0IHdlIGNvbXBhcmUgYnkgc2l6ZVxuICAgICAgICBpZiAoZmlyc3Quc2l6ZSA+IHNlY29uZC5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoZmlyc3Quc2l6ZSA8IHNlY29uZC5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIC8vIFRoZW4gc2luY2Ugbm8gdHdvIG5vZGVzIGNhbiBoYXZlIHRoZSBzYW1lIGtleSwgd2UgdXNlIGl0IHRvXG4gICAgICAgIC8vIGRldGVybWluaXN0aWNhbGx5IHRpZS1icmVhayBieSBrZXlcbiAgICAgICAgaWYgKGZpcnN0LmtleSA+IHNlY29uZC5rZXkpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgLy8gTk9URTogdGhpcyBjb21wYXJhdG9yIGNhbm5vdCByZXR1cm4gMFxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICByZXR1cm4gTGFiZWxDYW5kaWRhdGU7XG59KCkpO1xuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSAyRCBzcGF0aWFsIGdyaWQgZGl2aWRlZCBpbnRvIGNvbnN0YW50LXNpemUgY2VsbHMuXG4gKi9cbnZhciBMYWJlbEdyaWQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGFiZWxHcmlkKCkge1xuICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLmNlbGxTaXplID0gMDtcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gMDtcbiAgICAgICAgdGhpcy5yb3dzID0gMDtcbiAgICAgICAgdGhpcy5jZWxscyA9IHt9O1xuICAgIH1cbiAgICBMYWJlbEdyaWQucHJvdG90eXBlLnJlc2l6ZUFuZENsZWFyID0gZnVuY3Rpb24gKGRpbWVuc2lvbnMsIGNlbGxTaXplKSB7XG4gICAgICAgIHRoaXMud2lkdGggPSBkaW1lbnNpb25zLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGRpbWVuc2lvbnMuaGVpZ2h0O1xuICAgICAgICB0aGlzLmNlbGxTaXplID0gY2VsbFNpemU7XG4gICAgICAgIHRoaXMuY29sdW1ucyA9IE1hdGguY2VpbChkaW1lbnNpb25zLndpZHRoIC8gY2VsbFNpemUpO1xuICAgICAgICB0aGlzLnJvd3MgPSBNYXRoLmNlaWwoZGltZW5zaW9ucy5oZWlnaHQgLyBjZWxsU2l6ZSk7XG4gICAgICAgIHRoaXMuY2VsbHMgPSB7fTtcbiAgICB9O1xuICAgIExhYmVsR3JpZC5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgIHZhciB4SW5kZXggPSBNYXRoLmZsb29yKHBvcy54IC8gdGhpcy5jZWxsU2l6ZSk7XG4gICAgICAgIHZhciB5SW5kZXggPSBNYXRoLmZsb29yKHBvcy55IC8gdGhpcy5jZWxsU2l6ZSk7XG4gICAgICAgIHJldHVybiB5SW5kZXggKiB0aGlzLmNvbHVtbnMgKyB4SW5kZXg7XG4gICAgfTtcbiAgICBMYWJlbEdyaWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChrZXksIHNpemUsIHBvcykge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gbmV3IExhYmVsQ2FuZGlkYXRlKGtleSwgc2l6ZSk7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0SW5kZXgocG9zKTtcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzW2luZGV4XTtcbiAgICAgICAgaWYgKCFjZWxsKSB7XG4gICAgICAgICAgICBjZWxsID0gW107XG4gICAgICAgICAgICB0aGlzLmNlbGxzW2luZGV4XSA9IGNlbGw7XG4gICAgICAgIH1cbiAgICAgICAgY2VsbC5wdXNoKGNhbmRpZGF0ZSk7XG4gICAgfTtcbiAgICBMYWJlbEdyaWQucHJvdG90eXBlLm9yZ2FuaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuY2VsbHMpIHtcbiAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1trXTtcbiAgICAgICAgICAgIGNlbGwuc29ydChMYWJlbENhbmRpZGF0ZS5jb21wYXJlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGFiZWxHcmlkLnByb3RvdHlwZS5nZXRMYWJlbHNUb0Rpc3BsYXkgPSBmdW5jdGlvbiAocmF0aW8sIGRlbnNpdHkpIHtcbiAgICAgICAgLy8gVE9ETzogd29yayBvbiB2aXNpYmxlIG5vZGVzIHRvIG9wdGltaXplPyBeIC0+IHRocmVzaG9sZCBvdXRzaWRlIHNvIHRoYXQgbWVtb2l6YXRpb24gd29ya3M/XG4gICAgICAgIC8vIFRPRE86IGFkanVzdCB0aHJlc2hvbGQgbG93ZXIsIGJ1dCBpbmNyZWFzZSBjZWxscyBhIGJpdD9cbiAgICAgICAgLy8gVE9ETzogaHVudCBmb3IgZ2VvbSBpc3N1ZSBpbiBkaXNndWlzZVxuICAgICAgICAvLyBUT0RPOiBtZW1vaXplIHdoaWxlIHJhdGlvIGRvZXMgbm90IG1vdmUuIG1ldGhvZCB0byBmb3JjZSByZWNvbXB1dGVcbiAgICAgICAgdmFyIGNlbGxBcmVhID0gdGhpcy5jZWxsU2l6ZSAqIHRoaXMuY2VsbFNpemU7XG4gICAgICAgIHZhciBzY2FsZWRDZWxsQXJlYSA9IGNlbGxBcmVhIC8gcmF0aW8gLyByYXRpbztcbiAgICAgICAgdmFyIHNjYWxlZERlbnNpdHkgPSAoc2NhbGVkQ2VsbEFyZWEgKiBkZW5zaXR5KSAvIGNlbGxBcmVhO1xuICAgICAgICB2YXIgbGFiZWxzVG9EaXNwbGF5UGVyQ2VsbCA9IE1hdGguY2VpbChzY2FsZWREZW5zaXR5KTtcbiAgICAgICAgdmFyIGxhYmVscyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuY2VsbHMpIHtcbiAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1trXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5taW4obGFiZWxzVG9EaXNwbGF5UGVyQ2VsbCwgY2VsbC5sZW5ndGgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsYWJlbHMucHVzaChjZWxsW2ldLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhYmVscztcbiAgICB9O1xuICAgIHJldHVybiBMYWJlbEdyaWQ7XG59KCkpO1xuZXhwb3J0cy5MYWJlbEdyaWQgPSBMYWJlbEdyaWQ7XG4vKipcbiAqIExhYmVsIGhldXJpc3RpYyBzZWxlY3RpbmcgZWRnZSBsYWJlbHMgdG8gZGlzcGxheSwgYmFzZWQgb24gZGlzcGxheWVkIG5vZGVcbiAqIGxhYmVsc1xuICpcbiAqIEBwYXJhbSAge29iamVjdH0gcGFyYW1zICAgICAgICAgICAgICAgICAtIFBhcmFtZXRlcnM6XG4gKiBAcGFyYW0gIHtTZXR9ICAgICAgZGlzcGxheWVkTm9kZUxhYmVscyAgLSBDdXJyZW50bHkgZGlzcGxheWVkIG5vZGUgbGFiZWxzLlxuICogQHBhcmFtICB7U2V0fSAgICAgIGhpZ2hsaWdodGVkTm9kZXMgICAgIC0gSGlnaGxpZ2h0ZWQgbm9kZXMuXG4gKiBAcGFyYW0gIHtHcmFwaH0gICAgZ3JhcGggICAgICAgICAgICAgICAgLSBUaGUgcmVuZGVyZWQgZ3JhcGguXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgaG92ZXJlZE5vZGUgICAgICAgICAgLSBIb3ZlcmVkIG5vZGUgKG9wdGlvbmFsKVxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgICAgICAgICAgICAgIC0gVGhlIHNlbGVjdGVkIGxhYmVscy5cbiAqL1xuZnVuY3Rpb24gZWRnZUxhYmVsc1RvRGlzcGxheUZyb21Ob2RlcyhwYXJhbXMpIHtcbiAgICB2YXIgZ3JhcGggPSBwYXJhbXMuZ3JhcGgsIGhvdmVyZWROb2RlID0gcGFyYW1zLmhvdmVyZWROb2RlLCBoaWdobGlnaHRlZE5vZGVzID0gcGFyYW1zLmhpZ2hsaWdodGVkTm9kZXMsIGRpc3BsYXllZE5vZGVMYWJlbHMgPSBwYXJhbXMuZGlzcGxheWVkTm9kZUxhYmVscztcbiAgICB2YXIgd29ydGh5RWRnZXMgPSBbXTtcbiAgICAvLyBUT0RPOiB0aGUgY29kZSBiZWxvdyBjYW4gYmUgb3B0aW1pemVkIHVzaW5nICMuZm9yRWFjaCBhbmQgYmF0Y2hpbmcgdGhlIGNvZGUgcGVyIGFkalxuICAgIC8vIFdlIHNob3VsZCBkaXNwbGF5IGFuIGVkZ2UncyBsYWJlbCBpZjpcbiAgICAvLyAgIC0gQW55IG9mIGl0cyBleHRyZW1pdGllcyBpcyBoaWdobGlnaHRlZCBvciBob3ZlcmVkXG4gICAgLy8gICAtIEJvdGggb2YgaXRzIGV4dHJlbWl0aWVzIGhhcyBpdHMgbGFiZWwgc2hvd25cbiAgICBncmFwaC5mb3JFYWNoRWRnZShmdW5jdGlvbiAoZWRnZSwgXywgc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gaG92ZXJlZE5vZGUgfHxcbiAgICAgICAgICAgIHRhcmdldCA9PT0gaG92ZXJlZE5vZGUgfHxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkTm9kZXMuaGFzKHNvdXJjZSkgfHxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkTm9kZXMuaGFzKHRhcmdldCkgfHxcbiAgICAgICAgICAgIChkaXNwbGF5ZWROb2RlTGFiZWxzLmhhcyhzb3VyY2UpICYmIGRpc3BsYXllZE5vZGVMYWJlbHMuaGFzKHRhcmdldCkpKSB7XG4gICAgICAgICAgICB3b3J0aHlFZGdlcy5wdXNoKGVkZ2UpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHdvcnRoeUVkZ2VzO1xufVxuZXhwb3J0cy5lZGdlTGFiZWxzVG9EaXNwbGF5RnJvbU5vZGVzID0gZWRnZUxhYmVsc1RvRGlzcGxheUZyb21Ob2RlcztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWN0YW5nbGVDb2xsaWRlc1dpdGhRdWFkID0gZXhwb3J0cy5zcXVhcmVDb2xsaWRlc1dpdGhRdWFkID0gZXhwb3J0cy5nZXRDaXJjdW1zY3JpYmVkQWxpZ25lZFJlY3RhbmdsZSA9IGV4cG9ydHMuaXNSZWN0YW5nbGVBbGlnbmVkID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBRdWFkIFRyZWUgQ2xhc3NcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBDbGFzcyBpbXBsZW1lbnRpbmcgdGhlIHF1YWQgdHJlZSBkYXRhIHN0cnVjdHVyZSB1c2VkIHRvIHNvbHZlIGhvdmVycyBhbmRcbiAqIGRldGVybWluZSB3aGljaCBlbGVtZW50cyBhcmUgY3VycmVudGx5IGluIHRoZSBzY29wZSBvZiB0aGUgY2FtZXJhIHNvIHRoYXRcbiAqIHdlIGRvbid0IHdhc3RlIHRpbWUgcmVuZGVyaW5nIHRoaW5ncyB0aGUgdXNlciBjYW5ub3Qgc2VlIGFueXdheS5cbiAqIEBtb2R1bGVcbiAqL1xuLyogZXNsaW50IG5vLW5lc3RlZC10ZXJuYXJ5OiAwICovXG4vKiBlc2xpbnQgbm8tY29uc3RhbnQtY29uZGl0aW9uOiAwICovXG52YXIgZXh0ZW5kXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIkB5b21ndWl0aGVyZWFsL2hlbHBlcnMvZXh0ZW5kXCIpKTtcbi8qKlxuICogTm90ZXM6XG4gKlxuICogICAtIGEgc3F1YXJlIGNhbiBiZSByZXByZXNlbnRlZCBhcyB0b3BsZWZ0ICsgd2lkdGgsIHNheWluZyBmb3IgdGhlIHF1YWQgYmxvY2tzLFxuICogICAgIHRvIHJlZHVjZSBvdmVyYWxsIG1lbW9yeSB1c2FnZSAod2hpY2ggaXMgYWxyZWFkeSBwcmV0dHkgbG93KS5cbiAqICAgLSB0aGlzIGltcGxlbWVudGF0aW9uIG9mIGEgcXVhZHRyZWUgaXMgb2Z0ZW4gY2FsbGVkIGEgTVgtQ0lGIHF1YWR0cmVlLlxuICogICAtIHdlIGNvdWxkIGV4cGxvcmUgc3BhdGlhbCBoYXNoaW5nIChoaWxiZXJ0IHF1YWR0cmVlcywgbm90YWJseSkuXG4gKi9cbi8qKlxuICogQ29uc3RhbnRzLlxuICpcbiAqIE5vdGUgdGhhdCBzaW5jZSB3ZSBhcmUgcmVwcmVzZW50aW5nIGEgc3RhdGljIDQtYXJ5IHRyZWUsIHRoZSBpbmRpY2VzIG9mIHRoZVxuICogcXVhZHJhbnRzIGFyZSB0aGUgZm9sbG93aW5nOlxuICogICAtIFRPUF9MRUZUOiAgICAgNGkgKyBiXG4gKiAgIC0gVE9QX1JJR0hUOiAgICA0aSArIDJiXG4gKiAgIC0gQk9UVE9NX0xFRlQ6ICA0aSArIDNiXG4gKiAgIC0gQk9UVE9NX1JJR0hUOiA0aSArIDRiXG4gKi9cbnZhciBCTE9DS1MgPSA0O1xudmFyIE1BWF9MRVZFTCA9IDU7XG4vLyBPdXRzaWRlIGJsb2NrIGlzIG1heCBibG9jayBpbmRleCArIDEsIGkuZS46XG4vLyBCTE9DS1MgKiAoKDQgKiAoNCAqKiBNQVhfTEVWRUwpIC0gMSkgLyAzKVxudmFyIE9VVFNJREVfQkxPQ0sgPSA1NDYwO1xudmFyIFhfT0ZGU0VUID0gMDtcbnZhciBZX09GRlNFVCA9IDE7XG52YXIgV0lEVEhfT0ZGU0VUID0gMjtcbnZhciBIRUlHSFRfT0ZGU0VUID0gMztcbnZhciBUT1BfTEVGVCA9IDE7XG52YXIgVE9QX1JJR0hUID0gMjtcbnZhciBCT1RUT01fTEVGVCA9IDM7XG52YXIgQk9UVE9NX1JJR0hUID0gNDtcbnZhciBoYXNXYXJuZWRUb29NdWNoT3V0c2lkZSA9IGZhbHNlO1xuLyoqXG4gKiBHZW9tZXRyeSBoZWxwZXJzLlxuICovXG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB3aGV0aGVyIHRoZSBnaXZlbiByZWN0YW5nbGUgaXMgYXhpcy1hbGlnbmVkLlxuICpcbiAqIEBwYXJhbSAge1JlY3RhbmdsZX0gcmVjdFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNSZWN0YW5nbGVBbGlnbmVkKHJlY3QpIHtcbiAgICByZXR1cm4gcmVjdC54MSA9PT0gcmVjdC54MiB8fCByZWN0LnkxID09PSByZWN0LnkyO1xufVxuZXhwb3J0cy5pc1JlY3RhbmdsZUFsaWduZWQgPSBpc1JlY3RhbmdsZUFsaWduZWQ7XG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgc21hbGxlc3QgcmVjdGFuZ2xlIHRoYXQgY29udGFpbnMgdGhlIGdpdmVuIHJlY3RhbmdsZSwgYW5kIHRoYXQgaXMgYWxpZ25lZCB3aXRoIHRoZSBheGlzLlxuICpcbiAqIEBwYXJhbSB7UmVjdGFuZ2xlfSByZWN0XG4gKiBAcmV0dXJuIHtSZWN0YW5nbGV9XG4gKi9cbmZ1bmN0aW9uIGdldENpcmN1bXNjcmliZWRBbGlnbmVkUmVjdGFuZ2xlKHJlY3QpIHtcbiAgICB2YXIgd2lkdGggPSBNYXRoLnNxcnQoTWF0aC5wb3cocmVjdC54MiAtIHJlY3QueDEsIDIpICsgTWF0aC5wb3cocmVjdC55MiAtIHJlY3QueTEsIDIpKTtcbiAgICB2YXIgaGVpZ2h0VmVjdG9yID0ge1xuICAgICAgICB4OiAoKHJlY3QueTEgLSByZWN0LnkyKSAqIHJlY3QuaGVpZ2h0KSAvIHdpZHRoLFxuICAgICAgICB5OiAoKHJlY3QueDIgLSByZWN0LngxKSAqIHJlY3QuaGVpZ2h0KSAvIHdpZHRoLFxuICAgIH07XG4gICAgLy8gQ29tcHV0ZSBhbGwgY29ybmVyczpcbiAgICB2YXIgdGwgPSB7IHg6IHJlY3QueDEsIHk6IHJlY3QueTEgfTtcbiAgICB2YXIgdHIgPSB7IHg6IHJlY3QueDIsIHk6IHJlY3QueTIgfTtcbiAgICB2YXIgYmwgPSB7XG4gICAgICAgIHg6IHJlY3QueDEgKyBoZWlnaHRWZWN0b3IueCxcbiAgICAgICAgeTogcmVjdC55MSArIGhlaWdodFZlY3Rvci55LFxuICAgIH07XG4gICAgdmFyIGJyID0ge1xuICAgICAgICB4OiByZWN0LngyICsgaGVpZ2h0VmVjdG9yLngsXG4gICAgICAgIHk6IHJlY3QueTIgKyBoZWlnaHRWZWN0b3IueSxcbiAgICB9O1xuICAgIHZhciB4TCA9IE1hdGgubWluKHRsLngsIHRyLngsIGJsLngsIGJyLngpO1xuICAgIHZhciB4UiA9IE1hdGgubWF4KHRsLngsIHRyLngsIGJsLngsIGJyLngpO1xuICAgIHZhciB5VCA9IE1hdGgubWluKHRsLnksIHRyLnksIGJsLnksIGJyLnkpO1xuICAgIHZhciB5QiA9IE1hdGgubWF4KHRsLnksIHRyLnksIGJsLnksIGJyLnkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHgxOiB4TCxcbiAgICAgICAgeTE6IHlULFxuICAgICAgICB4MjogeFIsXG4gICAgICAgIHkyOiB5VCxcbiAgICAgICAgaGVpZ2h0OiB5QiAtIHlULFxuICAgIH07XG59XG5leHBvcnRzLmdldENpcmN1bXNjcmliZWRBbGlnbmVkUmVjdGFuZ2xlID0gZ2V0Q2lyY3Vtc2NyaWJlZEFsaWduZWRSZWN0YW5nbGU7XG4vKipcbiAqXG4gKiBAcGFyYW0geDFcbiAqIEBwYXJhbSB5MVxuICogQHBhcmFtIHdcbiAqIEBwYXJhbSBxeFxuICogQHBhcmFtIHF5XG4gKiBAcGFyYW0gcXdcbiAqIEBwYXJhbSBxaFxuICovXG5mdW5jdGlvbiBzcXVhcmVDb2xsaWRlc1dpdGhRdWFkKHgxLCB5MSwgdywgcXgsIHF5LCBxdywgcWgpIHtcbiAgICByZXR1cm4geDEgPCBxeCArIHF3ICYmIHgxICsgdyA+IHF4ICYmIHkxIDwgcXkgKyBxaCAmJiB5MSArIHcgPiBxeTtcbn1cbmV4cG9ydHMuc3F1YXJlQ29sbGlkZXNXaXRoUXVhZCA9IHNxdWFyZUNvbGxpZGVzV2l0aFF1YWQ7XG5mdW5jdGlvbiByZWN0YW5nbGVDb2xsaWRlc1dpdGhRdWFkKHgxLCB5MSwgdywgaCwgcXgsIHF5LCBxdywgcWgpIHtcbiAgICByZXR1cm4geDEgPCBxeCArIHF3ICYmIHgxICsgdyA+IHF4ICYmIHkxIDwgcXkgKyBxaCAmJiB5MSArIGggPiBxeTtcbn1cbmV4cG9ydHMucmVjdGFuZ2xlQ29sbGlkZXNXaXRoUXVhZCA9IHJlY3RhbmdsZUNvbGxpZGVzV2l0aFF1YWQ7XG5mdW5jdGlvbiBwb2ludElzSW5RdWFkKHgsIHksIHF4LCBxeSwgcXcsIHFoKSB7XG4gICAgdmFyIHhtcCA9IHF4ICsgcXcgLyAyLCB5bXAgPSBxeSArIHFoIC8gMiwgdG9wID0geSA8IHltcCwgbGVmdCA9IHggPCB4bXA7XG4gICAgcmV0dXJuIHRvcCA/IChsZWZ0ID8gVE9QX0xFRlQgOiBUT1BfUklHSFQpIDogbGVmdCA/IEJPVFRPTV9MRUZUIDogQk9UVE9NX1JJR0hUO1xufVxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb25zIHRoYXQgYXJlIG5vdCBib3VuZCB0byB0aGUgY2xhc3Mgc28gYW4gZXh0ZXJuYWwgdXNlclxuICogY2Fubm90IG1lc3Mgd2l0aCB0aGVtLlxuICovXG5mdW5jdGlvbiBidWlsZFF1YWRyYW50cyhtYXhMZXZlbCwgZGF0YSkge1xuICAgIC8vIFtibG9jaywgbGV2ZWxdXG4gICAgdmFyIHN0YWNrID0gWzAsIDBdO1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGxldmVsID0gc3RhY2sucG9wKCksIGJsb2NrID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHZhciB0b3BMZWZ0QmxvY2sgPSA0ICogYmxvY2sgKyBCTE9DS1MsIHRvcFJpZ2h0QmxvY2sgPSA0ICogYmxvY2sgKyAyICogQkxPQ0tTLCBib3R0b21MZWZ0QmxvY2sgPSA0ICogYmxvY2sgKyAzICogQkxPQ0tTLCBib3R0b21SaWdodEJsb2NrID0gNCAqIGJsb2NrICsgNCAqIEJMT0NLUztcbiAgICAgICAgdmFyIHggPSBkYXRhW2Jsb2NrICsgWF9PRkZTRVRdLCB5ID0gZGF0YVtibG9jayArIFlfT0ZGU0VUXSwgd2lkdGggPSBkYXRhW2Jsb2NrICsgV0lEVEhfT0ZGU0VUXSwgaGVpZ2h0ID0gZGF0YVtibG9jayArIEhFSUdIVF9PRkZTRVRdLCBodyA9IHdpZHRoIC8gMiwgaGggPSBoZWlnaHQgLyAyO1xuICAgICAgICBkYXRhW3RvcExlZnRCbG9jayArIFhfT0ZGU0VUXSA9IHg7XG4gICAgICAgIGRhdGFbdG9wTGVmdEJsb2NrICsgWV9PRkZTRVRdID0geTtcbiAgICAgICAgZGF0YVt0b3BMZWZ0QmxvY2sgKyBXSURUSF9PRkZTRVRdID0gaHc7XG4gICAgICAgIGRhdGFbdG9wTGVmdEJsb2NrICsgSEVJR0hUX09GRlNFVF0gPSBoaDtcbiAgICAgICAgZGF0YVt0b3BSaWdodEJsb2NrICsgWF9PRkZTRVRdID0geCArIGh3O1xuICAgICAgICBkYXRhW3RvcFJpZ2h0QmxvY2sgKyBZX09GRlNFVF0gPSB5O1xuICAgICAgICBkYXRhW3RvcFJpZ2h0QmxvY2sgKyBXSURUSF9PRkZTRVRdID0gaHc7XG4gICAgICAgIGRhdGFbdG9wUmlnaHRCbG9jayArIEhFSUdIVF9PRkZTRVRdID0gaGg7XG4gICAgICAgIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgWF9PRkZTRVRdID0geDtcbiAgICAgICAgZGF0YVtib3R0b21MZWZ0QmxvY2sgKyBZX09GRlNFVF0gPSB5ICsgaGg7XG4gICAgICAgIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgV0lEVEhfT0ZGU0VUXSA9IGh3O1xuICAgICAgICBkYXRhW2JvdHRvbUxlZnRCbG9jayArIEhFSUdIVF9PRkZTRVRdID0gaGg7XG4gICAgICAgIGRhdGFbYm90dG9tUmlnaHRCbG9jayArIFhfT0ZGU0VUXSA9IHggKyBodztcbiAgICAgICAgZGF0YVtib3R0b21SaWdodEJsb2NrICsgWV9PRkZTRVRdID0geSArIGhoO1xuICAgICAgICBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBXSURUSF9PRkZTRVRdID0gaHc7XG4gICAgICAgIGRhdGFbYm90dG9tUmlnaHRCbG9jayArIEhFSUdIVF9PRkZTRVRdID0gaGg7XG4gICAgICAgIGlmIChsZXZlbCA8IG1heExldmVsIC0gMSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChib3R0b21SaWdodEJsb2NrLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChib3R0b21MZWZ0QmxvY2ssIGxldmVsICsgMSk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRvcFJpZ2h0QmxvY2ssIGxldmVsICsgMSk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRvcExlZnRCbG9jaywgbGV2ZWwgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGluc2VydE5vZGUobWF4TGV2ZWwsIGRhdGEsIGNvbnRhaW5lcnMsIGtleSwgeCwgeSwgc2l6ZSkge1xuICAgIHZhciB4MSA9IHggLSBzaXplLCB5MSA9IHkgLSBzaXplLCB3ID0gc2l6ZSAqIDI7XG4gICAgdmFyIGxldmVsID0gMCwgYmxvY2sgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgbWF4IGxldmVsXG4gICAgICAgIGlmIChsZXZlbCA+PSBtYXhMZXZlbCkge1xuICAgICAgICAgICAgY29udGFpbmVyc1tibG9ja10gPSBjb250YWluZXJzW2Jsb2NrXSB8fCBbXTtcbiAgICAgICAgICAgIGNvbnRhaW5lcnNbYmxvY2tdLnB1c2goa2V5KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG9wTGVmdEJsb2NrID0gNCAqIGJsb2NrICsgQkxPQ0tTLCB0b3BSaWdodEJsb2NrID0gNCAqIGJsb2NrICsgMiAqIEJMT0NLUywgYm90dG9tTGVmdEJsb2NrID0gNCAqIGJsb2NrICsgMyAqIEJMT0NLUywgYm90dG9tUmlnaHRCbG9jayA9IDQgKiBibG9jayArIDQgKiBCTE9DS1M7XG4gICAgICAgIHZhciBjb2xsaWRpbmdXaXRoVG9wTGVmdCA9IHNxdWFyZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBkYXRhW3RvcExlZnRCbG9jayArIFhfT0ZGU0VUXSwgZGF0YVt0b3BMZWZ0QmxvY2sgKyBZX09GRlNFVF0sIGRhdGFbdG9wTGVmdEJsb2NrICsgV0lEVEhfT0ZGU0VUXSwgZGF0YVt0b3BMZWZ0QmxvY2sgKyBIRUlHSFRfT0ZGU0VUXSk7XG4gICAgICAgIHZhciBjb2xsaWRpbmdXaXRoVG9wUmlnaHQgPSBzcXVhcmVDb2xsaWRlc1dpdGhRdWFkKHgxLCB5MSwgdywgZGF0YVt0b3BSaWdodEJsb2NrICsgWF9PRkZTRVRdLCBkYXRhW3RvcFJpZ2h0QmxvY2sgKyBZX09GRlNFVF0sIGRhdGFbdG9wUmlnaHRCbG9jayArIFdJRFRIX09GRlNFVF0sIGRhdGFbdG9wUmlnaHRCbG9jayArIEhFSUdIVF9PRkZTRVRdKTtcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhCb3R0b21MZWZ0ID0gc3F1YXJlQ29sbGlkZXNXaXRoUXVhZCh4MSwgeTEsIHcsIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgWF9PRkZTRVRdLCBkYXRhW2JvdHRvbUxlZnRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVtib3R0b21MZWZ0QmxvY2sgKyBXSURUSF9PRkZTRVRdLCBkYXRhW2JvdHRvbUxlZnRCbG9jayArIEhFSUdIVF9PRkZTRVRdKTtcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhCb3R0b21SaWdodCA9IHNxdWFyZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBYX09GRlNFVF0sIGRhdGFbYm90dG9tUmlnaHRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVtib3R0b21SaWdodEJsb2NrICsgV0lEVEhfT0ZGU0VUXSwgZGF0YVtib3R0b21SaWdodEJsb2NrICsgSEVJR0hUX09GRlNFVF0pO1xuICAgICAgICB2YXIgY29sbGlzaW9ucyA9IFtcbiAgICAgICAgICAgIGNvbGxpZGluZ1dpdGhUb3BMZWZ0LFxuICAgICAgICAgICAgY29sbGlkaW5nV2l0aFRvcFJpZ2h0LFxuICAgICAgICAgICAgY29sbGlkaW5nV2l0aEJvdHRvbUxlZnQsXG4gICAgICAgICAgICBjb2xsaWRpbmdXaXRoQm90dG9tUmlnaHQsXG4gICAgICAgIF0ucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyAxO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIDApO1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vIGNvbGxpc2lvbiBhdCByb290IGxldmVsLCBpbmplY3Qgbm9kZSBpbiB0aGUgb3V0c2lkZSBibG9ja1xuICAgICAgICBpZiAoY29sbGlzaW9ucyA9PT0gMCAmJiBsZXZlbCA9PT0gMCkge1xuICAgICAgICAgICAgY29udGFpbmVyc1tPVVRTSURFX0JMT0NLXS5wdXNoKGtleSk7XG4gICAgICAgICAgICBpZiAoIWhhc1dhcm5lZFRvb011Y2hPdXRzaWRlICYmIGNvbnRhaW5lcnNbT1VUU0lERV9CTE9DS10ubGVuZ3RoID49IDUpIHtcbiAgICAgICAgICAgICAgICBoYXNXYXJuZWRUb29NdWNoT3V0c2lkZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwic2lnbWEvcXVhZHRyZWUuaW5zZXJ0Tm9kZTogQXQgbGVhc3QgNSBub2RlcyBhcmUgb3V0c2lkZSB0aGUgZ2xvYmFsIHF1YWR0cmVlIHpvbmUuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJZb3UgbWlnaHQgaGF2ZSBhIHByb2JsZW0gd2l0aCB0aGUgbm9ybWFsaXphdGlvbiBmdW5jdGlvbiBvciB0aGUgY3VzdG9tIGJvdW5kaW5nIGJveC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhdCBsZWFzdCBhIGNvbGxpc2lvbiBidXQgZGVlcGVyLCB0aGVyZSBpcyBhbiBpc3N1ZVxuICAgICAgICBpZiAoY29sbGlzaW9ucyA9PT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNpZ21hL3F1YWR0cmVlLmluc2VydE5vZGU6IG5vIGNvbGxpc2lvbiAobGV2ZWw6IFwiLmNvbmNhdChsZXZlbCwgXCIsIGtleTogXCIpLmNvbmNhdChrZXksIFwiLCB4OiBcIikuY29uY2F0KHgsIFwiLCB5OiBcIikuY29uY2F0KHksIFwiLCBzaXplOiBcIikuY29uY2F0KHNpemUsIFwiKS5cIikpO1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIDMgY29sbGlzaW9ucywgd2UgaGF2ZSBhIGdlb21ldHJ5IHByb2JsZW0gb2J2aW91c2x5XG4gICAgICAgIGlmIChjb2xsaXNpb25zID09PSAzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2lnbWEvcXVhZHRyZWUuaW5zZXJ0Tm9kZTogMyBpbXBvc3NpYmxlIGNvbGxpc2lvbnMgKGxldmVsOiBcIi5jb25jYXQobGV2ZWwsIFwiLCBrZXk6IFwiKS5jb25jYXQoa2V5LCBcIiwgeDogXCIpLmNvbmNhdCh4LCBcIiwgeTogXCIpLmNvbmNhdCh5LCBcIiwgc2l6ZTogXCIpLmNvbmNhdChzaXplLCBcIikuXCIpKTtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBtb3JlIHRoYXQgb25lIGNvbGxpc2lvbiwgd2Ugc3RvcCBoZXJlIGFuZCBzdG9yZSB0aGUgbm9kZVxuICAgICAgICAvLyBpbiB0aGUgcmVsZXZhbnQgY29udGFpbmVyc1xuICAgICAgICBpZiAoY29sbGlzaW9ucyA+IDEpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lcnNbYmxvY2tdID0gY29udGFpbmVyc1tibG9ja10gfHwgW107XG4gICAgICAgICAgICBjb250YWluZXJzW2Jsb2NrXS5wdXNoKGtleSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXZlbCsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2Ugd2UgcmVjdXJzZSBpbnRvIHRoZSBjb3JyZWN0IHF1YWRzXG4gICAgICAgIGlmIChjb2xsaWRpbmdXaXRoVG9wTGVmdClcbiAgICAgICAgICAgIGJsb2NrID0gdG9wTGVmdEJsb2NrO1xuICAgICAgICBpZiAoY29sbGlkaW5nV2l0aFRvcFJpZ2h0KVxuICAgICAgICAgICAgYmxvY2sgPSB0b3BSaWdodEJsb2NrO1xuICAgICAgICBpZiAoY29sbGlkaW5nV2l0aEJvdHRvbUxlZnQpXG4gICAgICAgICAgICBibG9jayA9IGJvdHRvbUxlZnRCbG9jaztcbiAgICAgICAgaWYgKGNvbGxpZGluZ1dpdGhCb3R0b21SaWdodClcbiAgICAgICAgICAgIGJsb2NrID0gYm90dG9tUmlnaHRCbG9jaztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXROb2Rlc0luQXhpc0FsaWduZWRSZWN0YW5nbGVBcmVhKG1heExldmVsLCBkYXRhLCBjb250YWluZXJzLCB4MSwgeTEsIHcsIGgpIHtcbiAgICAvLyBbYmxvY2ssIGxldmVsXVxuICAgIHZhciBzdGFjayA9IFswLCAwXTtcbiAgICB2YXIgY29sbGVjdGVkTm9kZXMgPSBbXTtcbiAgICB2YXIgY29udGFpbmVyO1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGxldmVsID0gc3RhY2sucG9wKCksIGJsb2NrID0gc3RhY2sucG9wKCk7XG4gICAgICAgIC8vIENvbGxlY3Rpbmcgbm9kZXNcbiAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyc1tibG9ja107XG4gICAgICAgIGlmIChjb250YWluZXIpXG4gICAgICAgICAgICAoMCwgZXh0ZW5kXzEuZGVmYXVsdCkoY29sbGVjdGVkTm9kZXMsIGNvbnRhaW5lcik7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgbWF4IGxldmVsXG4gICAgICAgIGlmIChsZXZlbCA+PSBtYXhMZXZlbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB2YXIgdG9wTGVmdEJsb2NrID0gNCAqIGJsb2NrICsgQkxPQ0tTLCB0b3BSaWdodEJsb2NrID0gNCAqIGJsb2NrICsgMiAqIEJMT0NLUywgYm90dG9tTGVmdEJsb2NrID0gNCAqIGJsb2NrICsgMyAqIEJMT0NLUywgYm90dG9tUmlnaHRCbG9jayA9IDQgKiBibG9jayArIDQgKiBCTE9DS1M7XG4gICAgICAgIHZhciBjb2xsaWRpbmdXaXRoVG9wTGVmdCA9IHJlY3RhbmdsZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBoLCBkYXRhW3RvcExlZnRCbG9jayArIFhfT0ZGU0VUXSwgZGF0YVt0b3BMZWZ0QmxvY2sgKyBZX09GRlNFVF0sIGRhdGFbdG9wTGVmdEJsb2NrICsgV0lEVEhfT0ZGU0VUXSwgZGF0YVt0b3BMZWZ0QmxvY2sgKyBIRUlHSFRfT0ZGU0VUXSk7XG4gICAgICAgIHZhciBjb2xsaWRpbmdXaXRoVG9wUmlnaHQgPSByZWN0YW5nbGVDb2xsaWRlc1dpdGhRdWFkKHgxLCB5MSwgdywgaCwgZGF0YVt0b3BSaWdodEJsb2NrICsgWF9PRkZTRVRdLCBkYXRhW3RvcFJpZ2h0QmxvY2sgKyBZX09GRlNFVF0sIGRhdGFbdG9wUmlnaHRCbG9jayArIFdJRFRIX09GRlNFVF0sIGRhdGFbdG9wUmlnaHRCbG9jayArIEhFSUdIVF9PRkZTRVRdKTtcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhCb3R0b21MZWZ0ID0gcmVjdGFuZ2xlQ29sbGlkZXNXaXRoUXVhZCh4MSwgeTEsIHcsIGgsIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgWF9PRkZTRVRdLCBkYXRhW2JvdHRvbUxlZnRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVtib3R0b21MZWZ0QmxvY2sgKyBXSURUSF9PRkZTRVRdLCBkYXRhW2JvdHRvbUxlZnRCbG9jayArIEhFSUdIVF9PRkZTRVRdKTtcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhCb3R0b21SaWdodCA9IHJlY3RhbmdsZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBoLCBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBYX09GRlNFVF0sIGRhdGFbYm90dG9tUmlnaHRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVtib3R0b21SaWdodEJsb2NrICsgV0lEVEhfT0ZGU0VUXSwgZGF0YVtib3R0b21SaWdodEJsb2NrICsgSEVJR0hUX09GRlNFVF0pO1xuICAgICAgICBpZiAoY29sbGlkaW5nV2l0aFRvcExlZnQpXG4gICAgICAgICAgICBzdGFjay5wdXNoKHRvcExlZnRCbG9jaywgbGV2ZWwgKyAxKTtcbiAgICAgICAgaWYgKGNvbGxpZGluZ1dpdGhUb3BSaWdodClcbiAgICAgICAgICAgIHN0YWNrLnB1c2godG9wUmlnaHRCbG9jaywgbGV2ZWwgKyAxKTtcbiAgICAgICAgaWYgKGNvbGxpZGluZ1dpdGhCb3R0b21MZWZ0KVxuICAgICAgICAgICAgc3RhY2sucHVzaChib3R0b21MZWZ0QmxvY2ssIGxldmVsICsgMSk7XG4gICAgICAgIGlmIChjb2xsaWRpbmdXaXRoQm90dG9tUmlnaHQpXG4gICAgICAgICAgICBzdGFjay5wdXNoKGJvdHRvbVJpZ2h0QmxvY2ssIGxldmVsICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0ZWROb2Rlcztcbn1cbi8qKlxuICogUXVhZFRyZWUgY2xhc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gYm91bmRhcmllcyAtIFRoZSBncmFwaCBib3VuZGFyaWVzLlxuICovXG52YXIgUXVhZFRyZWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUXVhZFRyZWUocGFyYW1zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7IHBhcmFtcyA9IHt9OyB9XG4gICAgICAgIHRoaXMuY29udGFpbmVycyA9IChfYSA9IHt9LCBfYVtPVVRTSURFX0JMT0NLXSA9IFtdLCBfYSk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RSZWN0YW5nbGUgPSBudWxsO1xuICAgICAgICAvLyBBbGxvY2F0aW5nIHRoZSB1bmRlcmx5aW5nIGJ5dGUgYXJyYXlcbiAgICAgICAgdmFyIEwgPSBNYXRoLnBvdyg0LCBNQVhfTEVWRUwpO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KEJMT0NLUyAqICgoNCAqIEwgLSAxKSAvIDMpKTtcbiAgICAgICAgaWYgKHBhcmFtcy5ib3VuZGFyaWVzKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUocGFyYW1zLmJvdW5kYXJpZXMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSh7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBRdWFkVHJlZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGtleSwgeCwgeSwgc2l6ZSkge1xuICAgICAgICBpbnNlcnROb2RlKE1BWF9MRVZFTCwgdGhpcy5kYXRhLCB0aGlzLmNvbnRhaW5lcnMsIGtleSwgeCwgeSwgc2l6ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUXVhZFRyZWUucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIChib3VuZGFyaWVzKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgLy8gQnVpbGRpbmcgdGhlIHF1YWRyYW50c1xuICAgICAgICB0aGlzLmRhdGFbWF9PRkZTRVRdID0gYm91bmRhcmllcy54O1xuICAgICAgICB0aGlzLmRhdGFbWV9PRkZTRVRdID0gYm91bmRhcmllcy55O1xuICAgICAgICB0aGlzLmRhdGFbV0lEVEhfT0ZGU0VUXSA9IGJvdW5kYXJpZXMud2lkdGg7XG4gICAgICAgIHRoaXMuZGF0YVtIRUlHSFRfT0ZGU0VUXSA9IGJvdW5kYXJpZXMuaGVpZ2h0O1xuICAgICAgICBidWlsZFF1YWRyYW50cyhNQVhfTEVWRUwsIHRoaXMuZGF0YSk7XG4gICAgfTtcbiAgICBRdWFkVHJlZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5jb250YWluZXJzID0gKF9hID0ge30sIF9hW09VVFNJREVfQkxPQ0tdID0gW10sIF9hKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBRdWFkVHJlZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLmNvbnRhaW5lcnNbT1VUU0lERV9CTE9DS10uc2xpY2UoKTtcbiAgICAgICAgdmFyIGJsb2NrID0gMCwgbGV2ZWwgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250YWluZXJzW2Jsb2NrXSlcbiAgICAgICAgICAgICAgICAoMCwgZXh0ZW5kXzEuZGVmYXVsdCkobm9kZXMsIHRoaXMuY29udGFpbmVyc1tibG9ja10pO1xuICAgICAgICAgICAgdmFyIHF1YWQgPSBwb2ludElzSW5RdWFkKHgsIHksIHRoaXMuZGF0YVtibG9jayArIFhfT0ZGU0VUXSwgdGhpcy5kYXRhW2Jsb2NrICsgWV9PRkZTRVRdLCB0aGlzLmRhdGFbYmxvY2sgKyBXSURUSF9PRkZTRVRdLCB0aGlzLmRhdGFbYmxvY2sgKyBIRUlHSFRfT0ZGU0VUXSk7XG4gICAgICAgICAgICBibG9jayA9IDQgKiBibG9jayArIHF1YWQgKiBCTE9DS1M7XG4gICAgICAgICAgICBsZXZlbCsrO1xuICAgICAgICB9IHdoaWxlIChsZXZlbCA8PSBNQVhfTEVWRUwpO1xuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfTtcbiAgICBRdWFkVHJlZS5wcm90b3R5cGUucmVjdGFuZ2xlID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyLCBoZWlnaHQpIHtcbiAgICAgICAgdmFyIGxyID0gdGhpcy5sYXN0UmVjdGFuZ2xlO1xuICAgICAgICBpZiAobHIgJiYgeDEgPT09IGxyLngxICYmIHgyID09PSBsci54MiAmJiB5MSA9PT0gbHIueTEgJiYgeTIgPT09IGxyLnkyICYmIGhlaWdodCA9PT0gbHIuaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3RSZWN0YW5nbGUgPSB7XG4gICAgICAgICAgICB4MTogeDEsXG4gICAgICAgICAgICB5MTogeTEsXG4gICAgICAgICAgICB4MjogeDIsXG4gICAgICAgICAgICB5MjogeTIsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgdGhlIHJlY3RhbmdsZSBpcyBzaGlmdGVkLCB3ZSB1c2UgdGhlIHNtYWxsZXN0IGFsaWduZWQgcmVjdGFuZ2xlIHRoYXQgY29udGFpbnMgdGhlIHNoaWZ0ZWQgb25lOlxuICAgICAgICBpZiAoIWlzUmVjdGFuZ2xlQWxpZ25lZCh0aGlzLmxhc3RSZWN0YW5nbGUpKVxuICAgICAgICAgICAgdGhpcy5sYXN0UmVjdGFuZ2xlID0gZ2V0Q2lyY3Vtc2NyaWJlZEFsaWduZWRSZWN0YW5nbGUodGhpcy5sYXN0UmVjdGFuZ2xlKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IGdldE5vZGVzSW5BeGlzQWxpZ25lZFJlY3RhbmdsZUFyZWEoTUFYX0xFVkVMLCB0aGlzLmRhdGEsIHRoaXMuY29udGFpbmVycywgeDEsIHkxLCBNYXRoLmFicyh4MSAtIHgyKSB8fCBNYXRoLmFicyh5MSAtIHkyKSwgaGVpZ2h0KTtcbiAgICAgICAgLy8gQWRkIGFsbCB0aGUgbm9kZXMgaW4gdGhlIG91dHNpZGUgYmxvY2ssIHNpbmNlIHRoZXkgbWlnaHQgYmUgcmVsZXZhbnQsIGFuZCBzaW5jZSB0aGV5IHNob3VsZCBiZSB2ZXJ5IGZldzpcbiAgICAgICAgKDAsIGV4dGVuZF8xLmRlZmF1bHQpKHRoaXMuY2FjaGUsIHRoaXMuY29udGFpbmVyc1tPVVRTSURFX0JMT0NLXSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlO1xuICAgIH07XG4gICAgcmV0dXJuIFF1YWRUcmVlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFF1YWRUcmVlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpZ21hID0gZXhwb3J0cy5Nb3VzZUNhcHRvciA9IGV4cG9ydHMuUXVhZFRyZWUgPSBleHBvcnRzLkNhbWVyYSA9IHZvaWQgMDtcbi8qKlxuICogU2lnbWEuanMgTGlicmFyeSBFbmRwb2ludFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIFRoZSBsaWJyYXJ5IGVuZHBvaW50LlxuICogQG1vZHVsZVxuICovXG52YXIgc2lnbWFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zaWdtYVwiKSk7XG5leHBvcnRzLlNpZ21hID0gc2lnbWFfMS5kZWZhdWx0O1xudmFyIGNhbWVyYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvcmUvY2FtZXJhXCIpKTtcbmV4cG9ydHMuQ2FtZXJhID0gY2FtZXJhXzEuZGVmYXVsdDtcbnZhciBxdWFkdHJlZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvcmUvcXVhZHRyZWVcIikpO1xuZXhwb3J0cy5RdWFkVHJlZSA9IHF1YWR0cmVlXzEuZGVmYXVsdDtcbnZhciBtb3VzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvcmUvY2FwdG9ycy9tb3VzZVwiKSk7XG5leHBvcnRzLk1vdXNlQ2FwdG9yID0gbW91c2VfMS5kZWZhdWx0O1xuZXhwb3J0cy5kZWZhdWx0ID0gc2lnbWFfMS5kZWZhdWx0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBkcmF3RWRnZUxhYmVsKGNvbnRleHQsIGVkZ2VEYXRhLCBzb3VyY2VEYXRhLCB0YXJnZXREYXRhLCBzZXR0aW5ncykge1xuICAgIHZhciBzaXplID0gc2V0dGluZ3MuZWRnZUxhYmVsU2l6ZSwgZm9udCA9IHNldHRpbmdzLmVkZ2VMYWJlbEZvbnQsIHdlaWdodCA9IHNldHRpbmdzLmVkZ2VMYWJlbFdlaWdodCwgY29sb3IgPSBzZXR0aW5ncy5lZGdlTGFiZWxDb2xvci5hdHRyaWJ1dGVcbiAgICAgICAgPyBlZGdlRGF0YVtzZXR0aW5ncy5lZGdlTGFiZWxDb2xvci5hdHRyaWJ1dGVdIHx8IHNldHRpbmdzLmVkZ2VMYWJlbENvbG9yLmNvbG9yIHx8IFwiIzAwMFwiXG4gICAgICAgIDogc2V0dGluZ3MuZWRnZUxhYmVsQ29sb3IuY29sb3I7XG4gICAgdmFyIGxhYmVsID0gZWRnZURhdGEubGFiZWw7XG4gICAgaWYgKCFsYWJlbClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3I7XG4gICAgY29udGV4dC5mb250ID0gXCJcIi5jb25jYXQod2VpZ2h0LCBcIiBcIikuY29uY2F0KHNpemUsIFwicHggXCIpLmNvbmNhdChmb250KTtcbiAgICAvLyBDb21wdXRpbmcgcG9zaXRpb25zIHdpdGhvdXQgY29uc2lkZXJpbmcgbm9kZXMgc2l6ZXM6XG4gICAgdmFyIHNTaXplID0gc291cmNlRGF0YS5zaXplO1xuICAgIHZhciB0U2l6ZSA9IHRhcmdldERhdGEuc2l6ZTtcbiAgICB2YXIgc3ggPSBzb3VyY2VEYXRhLng7XG4gICAgdmFyIHN5ID0gc291cmNlRGF0YS55O1xuICAgIHZhciB0eCA9IHRhcmdldERhdGEueDtcbiAgICB2YXIgdHkgPSB0YXJnZXREYXRhLnk7XG4gICAgdmFyIGN4ID0gKHN4ICsgdHgpIC8gMjtcbiAgICB2YXIgY3kgPSAoc3kgKyB0eSkgLyAyO1xuICAgIHZhciBkeCA9IHR4IC0gc3g7XG4gICAgdmFyIGR5ID0gdHkgLSBzeTtcbiAgICB2YXIgZCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgaWYgKGQgPCBzU2l6ZSArIHRTaXplKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gQWRkaW5nIG5vZGVzIHNpemVzOlxuICAgIHN4ICs9IChkeCAqIHNTaXplKSAvIGQ7XG4gICAgc3kgKz0gKGR5ICogc1NpemUpIC8gZDtcbiAgICB0eCAtPSAoZHggKiB0U2l6ZSkgLyBkO1xuICAgIHR5IC09IChkeSAqIHRTaXplKSAvIGQ7XG4gICAgY3ggPSAoc3ggKyB0eCkgLyAyO1xuICAgIGN5ID0gKHN5ICsgdHkpIC8gMjtcbiAgICBkeCA9IHR4IC0gc3g7XG4gICAgZHkgPSB0eSAtIHN5O1xuICAgIGQgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIC8vIEhhbmRsaW5nIGVsbGlwc2lzXG4gICAgdmFyIHRleHRMZW5ndGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aDtcbiAgICBpZiAodGV4dExlbmd0aCA+IGQpIHtcbiAgICAgICAgdmFyIGVsbGlwc2lzID0gXCLigKZcIjtcbiAgICAgICAgbGFiZWwgPSBsYWJlbCArIGVsbGlwc2lzO1xuICAgICAgICB0ZXh0TGVuZ3RoID0gY29udGV4dC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG4gICAgICAgIHdoaWxlICh0ZXh0TGVuZ3RoID4gZCAmJiBsYWJlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsYWJlbCA9IGxhYmVsLnNsaWNlKDAsIC0yKSArIGVsbGlwc2lzO1xuICAgICAgICAgICAgdGV4dExlbmd0aCA9IGNvbnRleHQubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYWJlbC5sZW5ndGggPCA0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgYW5nbGU7XG4gICAgaWYgKGR4ID4gMCkge1xuICAgICAgICBpZiAoZHkgPiAwKVxuICAgICAgICAgICAgYW5nbGUgPSBNYXRoLmFjb3MoZHggLyBkKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYW5nbGUgPSBNYXRoLmFzaW4oZHkgLyBkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChkeSA+IDApXG4gICAgICAgICAgICBhbmdsZSA9IE1hdGguYWNvcyhkeCAvIGQpICsgTWF0aC5QSTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYW5nbGUgPSBNYXRoLmFzaW4oZHggLyBkKSArIE1hdGguUEkgLyAyO1xuICAgIH1cbiAgICBjb250ZXh0LnNhdmUoKTtcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShjeCwgY3kpO1xuICAgIGNvbnRleHQucm90YXRlKGFuZ2xlKTtcbiAgICBjb250ZXh0LmZpbGxUZXh0KGxhYmVsLCAtdGV4dExlbmd0aCAvIDIsIGVkZ2VEYXRhLnNpemUgLyAyICsgc2l6ZSk7XG4gICAgY29udGV4dC5yZXN0b3JlKCk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkcmF3RWRnZUxhYmVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGFiZWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9sYWJlbFwiKSk7XG4vKipcbiAqIERyYXcgYW4gaG92ZXJlZCBub2RlLlxuICogLSBpZiB0aGVyZSBpcyBubyBsYWJlbCA9PiBkaXNwbGF5IGEgc2hhZG93IG9uIHRoZSBub2RlXG4gKiAtIGlmIHRoZSBsYWJlbCBib3ggaXMgYmlnZ2VyIHRoYW4gbm9kZSBzaXplID0+IGRpc3BsYXkgYSBsYWJlbCBib3ggdGhhdCBjb250YWlucyB0aGUgbm9kZSB3aXRoIGEgc2hhZG93XG4gKiAtIGVsc2Ugbm9kZSB3aXRoIHNoYWRvdyBhbmQgdGhlIGxhYmVsIGJveFxuICovXG5mdW5jdGlvbiBkcmF3SG92ZXIoY29udGV4dCwgZGF0YSwgc2V0dGluZ3MpIHtcbiAgICB2YXIgc2l6ZSA9IHNldHRpbmdzLmxhYmVsU2l6ZSwgZm9udCA9IHNldHRpbmdzLmxhYmVsRm9udCwgd2VpZ2h0ID0gc2V0dGluZ3MubGFiZWxXZWlnaHQ7XG4gICAgY29udGV4dC5mb250ID0gXCJcIi5jb25jYXQod2VpZ2h0LCBcIiBcIikuY29uY2F0KHNpemUsIFwicHggXCIpLmNvbmNhdChmb250KTtcbiAgICAvLyBUaGVuIHdlIGRyYXcgdGhlIGxhYmVsIGJhY2tncm91bmRcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IFwiI0ZGRlwiO1xuICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IDA7XG4gICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gMDtcbiAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSA4O1xuICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSBcIiMwMDBcIjtcbiAgICB2YXIgUEFERElORyA9IDI7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmxhYmVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciB0ZXh0V2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGRhdGEubGFiZWwpLndpZHRoLCBib3hXaWR0aCA9IE1hdGgucm91bmQodGV4dFdpZHRoICsgNSksIGJveEhlaWdodCA9IE1hdGgucm91bmQoc2l6ZSArIDIgKiBQQURESU5HKSwgcmFkaXVzID0gTWF0aC5tYXgoZGF0YS5zaXplLCBzaXplIC8gMikgKyBQQURESU5HO1xuICAgICAgICB2YXIgYW5nbGVSYWRpYW4gPSBNYXRoLmFzaW4oYm94SGVpZ2h0IC8gMiAvIHJhZGl1cyk7XG4gICAgICAgIHZhciB4RGVsdGFDb29yZCA9IE1hdGguc3FydChNYXRoLmFicyhNYXRoLnBvdyhyYWRpdXMsIDIpIC0gTWF0aC5wb3coYm94SGVpZ2h0IC8gMiwgMikpKTtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oZGF0YS54ICsgeERlbHRhQ29vcmQsIGRhdGEueSArIGJveEhlaWdodCAvIDIpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhkYXRhLnggKyByYWRpdXMgKyBib3hXaWR0aCwgZGF0YS55ICsgYm94SGVpZ2h0IC8gMik7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGRhdGEueCArIHJhZGl1cyArIGJveFdpZHRoLCBkYXRhLnkgLSBib3hIZWlnaHQgLyAyKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oZGF0YS54ICsgeERlbHRhQ29vcmQsIGRhdGEueSAtIGJveEhlaWdodCAvIDIpO1xuICAgICAgICBjb250ZXh0LmFyYyhkYXRhLngsIGRhdGEueSwgcmFkaXVzLCBhbmdsZVJhZGlhbiwgLWFuZ2xlUmFkaWFuKTtcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb250ZXh0LmFyYyhkYXRhLngsIGRhdGEueSwgZGF0YS5zaXplICsgUEFERElORywgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gMDtcbiAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xuICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IDA7XG4gICAgLy8gQW5kIGZpbmFsbHkgd2UgZHJhdyB0aGUgbGFiZWxcbiAgICAoMCwgbGFiZWxfMS5kZWZhdWx0KShjb250ZXh0LCBkYXRhLCBzZXR0aW5ncyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkcmF3SG92ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGRyYXdMYWJlbChjb250ZXh0LCBkYXRhLCBzZXR0aW5ncykge1xuICAgIGlmICghZGF0YS5sYWJlbClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBzaXplID0gc2V0dGluZ3MubGFiZWxTaXplLCBmb250ID0gc2V0dGluZ3MubGFiZWxGb250LCB3ZWlnaHQgPSBzZXR0aW5ncy5sYWJlbFdlaWdodCwgY29sb3IgPSBzZXR0aW5ncy5sYWJlbENvbG9yLmF0dHJpYnV0ZVxuICAgICAgICA/IGRhdGFbc2V0dGluZ3MubGFiZWxDb2xvci5hdHRyaWJ1dGVdIHx8IHNldHRpbmdzLmxhYmVsQ29sb3IuY29sb3IgfHwgXCIjMDAwXCJcbiAgICAgICAgOiBzZXR0aW5ncy5sYWJlbENvbG9yLmNvbG9yO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3I7XG4gICAgY29udGV4dC5mb250ID0gXCJcIi5jb25jYXQod2VpZ2h0LCBcIiBcIikuY29uY2F0KHNpemUsIFwicHggXCIpLmNvbmNhdChmb250KTtcbiAgICBjb250ZXh0LmZpbGxUZXh0KGRhdGEubGFiZWwsIGRhdGEueCArIGRhdGEuc2l6ZSArIDMsIGRhdGEueSArIHNpemUgLyAzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRyYXdMYWJlbDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRWRnZUNvbXBvdW5kUHJvZ3JhbSA9IGV4cG9ydHMuQWJzdHJhY3RFZGdlUHJvZ3JhbSA9IHZvaWQgMDtcbi8qKlxuICogU2lnbWEuanMgV2ViR0wgQWJzdHJhY3QgRWRnZSBQcm9ncmFtXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogQG1vZHVsZVxuICovXG52YXIgcHJvZ3JhbV8xID0gcmVxdWlyZShcIi4vcHJvZ3JhbVwiKTtcbi8qKlxuICogRWRnZSBQcm9ncmFtIGNsYXNzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgQWJzdHJhY3RFZGdlUHJvZ3JhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWJzdHJhY3RFZGdlUHJvZ3JhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBYnN0cmFjdEVkZ2VQcm9ncmFtKGdsLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGZyYWdtZW50U2hhZGVyU291cmNlLCBwb2ludHMsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGdsLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGZyYWdtZW50U2hhZGVyU291cmNlLCBwb2ludHMsIGF0dHJpYnV0ZXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBBYnN0cmFjdEVkZ2VQcm9ncmFtO1xufShwcm9ncmFtXzEuQWJzdHJhY3RQcm9ncmFtKSk7XG5leHBvcnRzLkFic3RyYWN0RWRnZVByb2dyYW0gPSBBYnN0cmFjdEVkZ2VQcm9ncmFtO1xuZnVuY3Rpb24gY3JlYXRlRWRnZUNvbXBvdW5kUHJvZ3JhbShwcm9ncmFtQ2xhc3Nlcykge1xuICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEVkZ2VDb21wb3VuZFByb2dyYW0oZ2wsIHJlbmRlcmVyKSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW1zID0gcHJvZ3JhbUNsYXNzZXMubWFwKGZ1bmN0aW9uIChQcm9ncmFtQ2xhc3MpIHsgcmV0dXJuIG5ldyBQcm9ncmFtQ2xhc3MoZ2wsIHJlbmRlcmVyKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgRWRnZUNvbXBvdW5kUHJvZ3JhbS5wcm90b3R5cGUuYnVmZmVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3JhbSkgeyByZXR1cm4gcHJvZ3JhbS5idWZmZXJEYXRhKCk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICBFZGdlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5hbGxvY2F0ZSA9IGZ1bmN0aW9uIChjYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmFtKSB7IHJldHVybiBwcm9ncmFtLmFsbG9jYXRlKGNhcGFjaXR5KTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEVkZ2VDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvZG8sIGl0J3MgYWxyZWFkeSBkb25lIGluIGVhY2ggcHJvZ3JhbSBjb25zdHJ1Y3RvclxuICAgICAgICB9O1xuICAgICAgICBFZGdlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5jb21wdXRlSW5kaWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3JhbSkgeyByZXR1cm4gcHJvZ3JhbS5jb21wdXRlSW5kaWNlcygpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgRWRnZUNvbXBvdW5kUHJvZ3JhbS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kKCk7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5idWZmZXJEYXRhKCk7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5yZW5kZXIocGFyYW1zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBFZGdlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKHNvdXJjZURhdGEsIHRhcmdldERhdGEsIGRhdGEsIGhpZGRlbiwgb2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW1zLmZvckVhY2goZnVuY3Rpb24gKHByb2dyYW0pIHsgcmV0dXJuIHByb2dyYW0ucHJvY2Vzcyhzb3VyY2VEYXRhLCB0YXJnZXREYXRhLCBkYXRhLCBoaWRkZW4sIG9mZnNldCk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRWRnZUNvbXBvdW5kUHJvZ3JhbTtcbiAgICB9KCkpO1xufVxuZXhwb3J0cy5jcmVhdGVFZGdlQ29tcG91bmRQcm9ncmFtID0gY3JlYXRlRWRnZUNvbXBvdW5kUHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlTm9kZUNvbXBvdW5kUHJvZ3JhbSA9IGV4cG9ydHMuQWJzdHJhY3ROb2RlUHJvZ3JhbSA9IHZvaWQgMDtcbi8qKlxuICogU2lnbWEuanMgV2ViR0wgQWJzdHJhY3QgTm9kZSBQcm9ncmFtXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogQG1vZHVsZVxuICovXG52YXIgcHJvZ3JhbV8xID0gcmVxdWlyZShcIi4vcHJvZ3JhbVwiKTtcbi8qKlxuICogTm9kZSBQcm9ncmFtIGNsYXNzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgQWJzdHJhY3ROb2RlUHJvZ3JhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWJzdHJhY3ROb2RlUHJvZ3JhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBYnN0cmFjdE5vZGVQcm9ncmFtKGdsLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGZyYWdtZW50U2hhZGVyU291cmNlLCBwb2ludHMsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ2wsIHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UsIHBvaW50cywgYXR0cmlidXRlcykgfHwgdGhpcztcbiAgICAgICAgLy8gTG9jYXRpb25zXG4gICAgICAgIF90aGlzLnBvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XG4gICAgICAgIF90aGlzLnNpemVMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9zaXplXCIpO1xuICAgICAgICBfdGhpcy5jb2xvckxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX2NvbG9yXCIpO1xuICAgICAgICAvLyBVbmlmb3JtIExvY2F0aW9uXG4gICAgICAgIHZhciBtYXRyaXhMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfbWF0cml4XCIpO1xuICAgICAgICBpZiAobWF0cml4TG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdE5vZGVQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIG1hdHJpeExvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5tYXRyaXhMb2NhdGlvbiA9IG1hdHJpeExvY2F0aW9uO1xuICAgICAgICB2YXIgcmF0aW9Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfcmF0aW9cIik7XG4gICAgICAgIGlmIChyYXRpb0xvY2F0aW9uID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWJzdHJhY3ROb2RlUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyByYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5yYXRpb0xvY2F0aW9uID0gcmF0aW9Mb2NhdGlvbjtcbiAgICAgICAgdmFyIHNjYWxlTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X3NjYWxlXCIpO1xuICAgICAgICBpZiAoc2NhbGVMb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFic3RyYWN0Tm9kZVByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgc2NhbGVMb2NhdGlvblwiKTtcbiAgICAgICAgX3RoaXMuc2NhbGVMb2NhdGlvbiA9IHNjYWxlTG9jYXRpb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQWJzdHJhY3ROb2RlUHJvZ3JhbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5wb3NpdGlvbkxvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5zaXplTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmNvbG9yTG9jYXRpb24pO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMucG9zaXRpb25Mb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCB0aGlzLmF0dHJpYnV0ZXMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDApO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuc2l6ZUxvY2F0aW9uLCAxLCBnbC5GTE9BVCwgZmFsc2UsIHRoaXMuYXR0cmlidXRlcyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgOCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5jb2xvckxvY2F0aW9uLCA0LCBnbC5VTlNJR05FRF9CWVRFLCB0cnVlLCB0aGlzLmF0dHJpYnV0ZXMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDEyKTtcbiAgICB9O1xuICAgIHJldHVybiBBYnN0cmFjdE5vZGVQcm9ncmFtO1xufShwcm9ncmFtXzEuQWJzdHJhY3RQcm9ncmFtKSk7XG5leHBvcnRzLkFic3RyYWN0Tm9kZVByb2dyYW0gPSBBYnN0cmFjdE5vZGVQcm9ncmFtO1xuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gY29tYmluaW5nIHR3byBvciBtb3JlIHByb2dyYW1zIGludG8gYSBzaW5nbGUgY29tcG91bmQgb25lLlxuICogTm90ZSB0aGF0IHRoaXMgaXMgbW9yZSBhIHF1aWNrICYgZWFzeSB3YXkgdG8gY29tYmluZSBwcm9ncmFtIHRoYW4gYSByZWFsbHlcbiAqIHBlcmZvcm1hbnQgb3B0aW9uLiBNb3JlIHBlcmZvcm1hbnQgcHJvZ3JhbXMgY2FuIGJlIHdyaXR0ZW4gZW50aXJlbHkuXG4gKlxuICogQHBhcmFtICB7YXJyYXl9ICAgIHByb2dyYW1DbGFzc2VzIC0gUHJvZ3JhbSBjbGFzc2VzIHRvIGNvbWJpbmUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTm9kZUNvbXBvdW5kUHJvZ3JhbShwcm9ncmFtQ2xhc3Nlcykge1xuICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIE5vZGVDb21wb3VuZFByb2dyYW0oZ2wsIHJlbmRlcmVyKSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW1zID0gcHJvZ3JhbUNsYXNzZXMubWFwKGZ1bmN0aW9uIChQcm9ncmFtQ2xhc3MpIHsgcmV0dXJuIG5ldyBQcm9ncmFtQ2xhc3MoZ2wsIHJlbmRlcmVyKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgTm9kZUNvbXBvdW5kUHJvZ3JhbS5wcm90b3R5cGUuYnVmZmVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3JhbSkgeyByZXR1cm4gcHJvZ3JhbS5idWZmZXJEYXRhKCk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICBOb2RlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5hbGxvY2F0ZSA9IGZ1bmN0aW9uIChjYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmFtKSB7IHJldHVybiBwcm9ncmFtLmFsbG9jYXRlKGNhcGFjaXR5KTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE5vZGVDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvZG8sIGl0J3MgYWxyZWFkeSBkb25lIGluIGVhY2ggcHJvZ3JhbSBjb25zdHJ1Y3RvclxuICAgICAgICB9O1xuICAgICAgICBOb2RlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW1zLmZvckVhY2goZnVuY3Rpb24gKHByb2dyYW0pIHtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmQoKTtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLmJ1ZmZlckRhdGEoKTtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLnJlbmRlcihwYXJhbXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE5vZGVDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoZGF0YSwgaGlkZGVuLCBvZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3JhbSkgeyByZXR1cm4gcHJvZ3JhbS5wcm9jZXNzKGRhdGEsIGhpZGRlbiwgb2Zmc2V0KTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBOb2RlQ29tcG91bmRQcm9ncmFtO1xuICAgIH0oKSk7XG59XG5leHBvcnRzLmNyZWF0ZU5vZGVDb21wb3VuZFByb2dyYW0gPSBjcmVhdGVOb2RlQ29tcG91bmRQcm9ncmFtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFic3RyYWN0UHJvZ3JhbSA9IHZvaWQgMDtcbi8qKlxuICogU2lnbWEuanMgV2ViR0wgUmVuZGVyZXIgUHJvZ3JhbVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBzaW5nbGUgV2ViR0wgcHJvZ3JhbSB1c2VkIGJ5IHNpZ21hJ3MgV2ViR0wgcmVuZGVyZXIuXG4gKiBAbW9kdWxlXG4gKi9cbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3NoYWRlcnMvdXRpbHNcIik7XG4vKipcbiAqIEFic3RyYWN0IFByb2dyYW0gY2xhc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBBYnN0cmFjdFByb2dyYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWJzdHJhY3RQcm9ncmFtKGdsLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGZyYWdtZW50U2hhZGVyU291cmNlLCBwb2ludHMsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdGhpcy5hcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoKTtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy52ZXJ0ZXhTaGFkZXJTb3VyY2UgPSB2ZXJ0ZXhTaGFkZXJTb3VyY2U7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXJTb3VyY2UgPSBmcmFnbWVudFNoYWRlclNvdXJjZTtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBpZiAoYnVmZmVyID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWJzdHJhY3RQcm9ncmFtOiBlcnJvciB3aGlsZSBjcmVhdGluZyB0aGUgYnVmZmVyXCIpO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcbiAgICAgICAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSAoMCwgdXRpbHNfMS5sb2FkVmVydGV4U2hhZGVyKShnbCwgdGhpcy52ZXJ0ZXhTaGFkZXJTb3VyY2UpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gKDAsIHV0aWxzXzEubG9hZEZyYWdtZW50U2hhZGVyKShnbCwgdGhpcy5mcmFnbWVudFNoYWRlclNvdXJjZSk7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9ICgwLCB1dGlsc18xLmxvYWRQcm9ncmFtKShnbCwgW3RoaXMudmVydGV4U2hhZGVyLCB0aGlzLmZyYWdtZW50U2hhZGVyXSk7XG4gICAgfVxuICAgIEFic3RyYWN0UHJvZ3JhbS5wcm90b3R5cGUuYnVmZmVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYXJyYXksIGdsLkRZTkFNSUNfRFJBVyk7XG4gICAgfTtcbiAgICBBYnN0cmFjdFByb2dyYW0ucHJvdG90eXBlLmFsbG9jYXRlID0gZnVuY3Rpb24gKGNhcGFjaXR5KSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMucG9pbnRzICogdGhpcy5hdHRyaWJ1dGVzICogY2FwYWNpdHkpO1xuICAgIH07XG4gICAgQWJzdHJhY3RQcm9ncmFtLnByb3RvdHlwZS5oYXNOb3RoaW5nVG9SZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gMDtcbiAgICB9O1xuICAgIHJldHVybiBBYnN0cmFjdFByb2dyYW07XG59KCkpO1xuZXhwb3J0cy5BYnN0cmFjdFByb2dyYW0gPSBBYnN0cmFjdFByb2dyYW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogU2lnbWEuanMgV2ViR0wgUmVuZGVyZXIgRWRnZSBBcnJvdyBQcm9ncmFtXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogQ29tcG91bmQgcHJvZ3JhbSByZW5kZXJpbmcgZWRnZXMgYXMgYW4gYXJyb3cgZnJvbSB0aGUgc291cmNlIHRvIHRoZSB0YXJnZXQuXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBlZGdlXzEgPSByZXF1aXJlKFwiLi9jb21tb24vZWRnZVwiKTtcbnZhciBlZGdlX2Fycm93SGVhZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2VkZ2UuYXJyb3dIZWFkXCIpKTtcbnZhciBlZGdlX2NsYW1wZWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lZGdlLmNsYW1wZWRcIikpO1xudmFyIEVkZ2VBcnJvd1Byb2dyYW0gPSAoMCwgZWRnZV8xLmNyZWF0ZUVkZ2VDb21wb3VuZFByb2dyYW0pKFtlZGdlX2NsYW1wZWRfMS5kZWZhdWx0LCBlZGdlX2Fycm93SGVhZF8xLmRlZmF1bHRdKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEVkZ2VBcnJvd1Byb2dyYW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlsc1wiKTtcbnZhciBlZGdlX2Fycm93SGVhZF92ZXJ0X2dsc2xfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhZGVycy9lZGdlLmFycm93SGVhZC52ZXJ0Lmdsc2wuanNcIikpO1xudmFyIGVkZ2VfYXJyb3dIZWFkX2ZyYWdfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2VkZ2UuYXJyb3dIZWFkLmZyYWcuZ2xzbC5qc1wiKSk7XG52YXIgZWRnZV8xID0gcmVxdWlyZShcIi4vY29tbW9uL2VkZ2VcIik7XG52YXIgUE9JTlRTID0gMywgQVRUUklCVVRFUyA9IDksIFNUUklERSA9IFBPSU5UUyAqIEFUVFJJQlVURVM7XG52YXIgRWRnZUFycm93SGVhZFByb2dyYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVkZ2VBcnJvd0hlYWRQcm9ncmFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVkZ2VBcnJvd0hlYWRQcm9ncmFtKGdsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGdsLCBlZGdlX2Fycm93SGVhZF92ZXJ0X2dsc2xfMS5kZWZhdWx0LCBlZGdlX2Fycm93SGVhZF9mcmFnX2dsc2xfMS5kZWZhdWx0LCBQT0lOVFMsIEFUVFJJQlVURVMpIHx8IHRoaXM7XG4gICAgICAgIC8vIExvY2F0aW9uc1xuICAgICAgICBfdGhpcy5wb3NpdGlvbkxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpO1xuICAgICAgICBfdGhpcy5jb2xvckxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX2NvbG9yXCIpO1xuICAgICAgICBfdGhpcy5ub3JtYWxMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9ub3JtYWxcIik7XG4gICAgICAgIF90aGlzLnJhZGl1c0xvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX3JhZGl1c1wiKTtcbiAgICAgICAgX3RoaXMuYmFyeWNlbnRyaWNMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9iYXJ5Y2VudHJpY1wiKTtcbiAgICAgICAgLy8gVW5pZm9ybSBsb2NhdGlvbnNcbiAgICAgICAgdmFyIG1hdHJpeExvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9tYXRyaXhcIik7XG4gICAgICAgIGlmIChtYXRyaXhMb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VBcnJvd0hlYWRQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIG1hdHJpeExvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5tYXRyaXhMb2NhdGlvbiA9IG1hdHJpeExvY2F0aW9uO1xuICAgICAgICB2YXIgc3FydFpvb21SYXRpb0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9zcXJ0Wm9vbVJhdGlvXCIpO1xuICAgICAgICBpZiAoc3FydFpvb21SYXRpb0xvY2F0aW9uID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWRnZUFycm93SGVhZFByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgc3FydFpvb21SYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5zcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPSBzcXJ0Wm9vbVJhdGlvTG9jYXRpb247XG4gICAgICAgIHZhciBjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfY29ycmVjdGlvblJhdGlvXCIpO1xuICAgICAgICBpZiAoY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlQXJyb3dIZWFkUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvblwiKTtcbiAgICAgICAgX3RoaXMuY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPSBjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbjtcbiAgICAgICAgX3RoaXMuYmluZCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEVkZ2VBcnJvd0hlYWRQcm9ncmFtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICAvLyBCaW5kaW5nc1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLm5vcm1hbExvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5yYWRpdXNMb2NhdGlvbik7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuY29sb3JMb2NhdGlvbik7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYmFyeWNlbnRyaWNMb2NhdGlvbik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5wb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDApO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMubm9ybWFsTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgQVRUUklCVVRFUyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgOCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5yYWRpdXNMb2NhdGlvbiwgMSwgZ2wuRkxPQVQsIGZhbHNlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAxNik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5jb2xvckxvY2F0aW9uLCA0LCBnbC5VTlNJR05FRF9CWVRFLCB0cnVlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAyMCk7XG4gICAgICAgIC8vIFRPRE86IG1heWJlIHdlIGNhbiBvcHRpbWl6ZSBoZXJlIGJ5IHBhY2tpbmcgdGhpcyBpbiBhIGJpdCBtYXNrXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5iYXJ5Y2VudHJpY0xvY2F0aW9uLCAzLCBnbC5GTE9BVCwgZmFsc2UsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDI0KTtcbiAgICB9O1xuICAgIEVkZ2VBcnJvd0hlYWRQcm9ncmFtLnByb3RvdHlwZS5jb21wdXRlSW5kaWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgIH07XG4gICAgRWRnZUFycm93SGVhZFByb2dyYW0ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoc291cmNlRGF0YSwgdGFyZ2V0RGF0YSwgZGF0YSwgaGlkZGVuLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKGhpZGRlbikge1xuICAgICAgICAgICAgZm9yICh2YXIgaV8xID0gb2Zmc2V0ICogU1RSSURFLCBsID0gaV8xICsgU1RSSURFOyBpXzEgPCBsOyBpXzErKylcbiAgICAgICAgICAgICAgICB0aGlzLmFycmF5W2lfMV0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlja25lc3MgPSBkYXRhLnNpemUgfHwgMSwgcmFkaXVzID0gdGFyZ2V0RGF0YS5zaXplIHx8IDEsIHgxID0gc291cmNlRGF0YS54LCB5MSA9IHNvdXJjZURhdGEueSwgeDIgPSB0YXJnZXREYXRhLngsIHkyID0gdGFyZ2V0RGF0YS55LCBjb2xvciA9ICgwLCB1dGlsc18xLmZsb2F0Q29sb3IpKGRhdGEuY29sb3IpO1xuICAgICAgICAvLyBDb21wdXRpbmcgbm9ybWFsc1xuICAgICAgICB2YXIgZHggPSB4MiAtIHgxLCBkeSA9IHkyIC0geTE7XG4gICAgICAgIHZhciBsZW4gPSBkeCAqIGR4ICsgZHkgKiBkeSwgbjEgPSAwLCBuMiA9IDA7XG4gICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICAgICAgICAgIG4xID0gLWR5ICogbGVuICogdGhpY2tuZXNzO1xuICAgICAgICAgICAgbjIgPSBkeCAqIGxlbiAqIHRoaWNrbmVzcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaSA9IFBPSU5UUyAqIEFUVFJJQlVURVMgKiBvZmZzZXQ7XG4gICAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgICAgIC8vIEZpcnN0IHBvaW50XG4gICAgICAgIGFycmF5W2krK10gPSB4MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkyO1xuICAgICAgICBhcnJheVtpKytdID0gLW4xO1xuICAgICAgICBhcnJheVtpKytdID0gLW4yO1xuICAgICAgICBhcnJheVtpKytdID0gcmFkaXVzO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSAxO1xuICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgYXJyYXlbaSsrXSA9IDA7XG4gICAgICAgIC8vIFNlY29uZCBwb2ludFxuICAgICAgICBhcnJheVtpKytdID0geDI7XG4gICAgICAgIGFycmF5W2krK10gPSB5MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHJhZGl1cztcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgYXJyYXlbaSsrXSA9IDE7XG4gICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICAvLyBUaGlyZCBwb2ludFxuICAgICAgICBhcnJheVtpKytdID0geDI7XG4gICAgICAgIGFycmF5W2krK10gPSB5MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHJhZGl1cztcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgYXJyYXlbaSsrXSA9IDA7XG4gICAgICAgIGFycmF5W2ldID0gMTtcbiAgICB9O1xuICAgIEVkZ2VBcnJvd0hlYWRQcm9ncmFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc05vdGhpbmdUb1JlbmRlcigpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbTtcbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgLy8gQmluZGluZyB1bmlmb3Jtc1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMubWF0cml4TG9jYXRpb24sIGZhbHNlLCBwYXJhbXMubWF0cml4KTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuc3FydFpvb21SYXRpb0xvY2F0aW9uLCBNYXRoLnNxcnQocGFyYW1zLnJhdGlvKSk7XG4gICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLmNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uLCBwYXJhbXMuY29ycmVjdGlvblJhdGlvKTtcbiAgICAgICAgLy8gRHJhd2luZzpcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIHRoaXMuYXJyYXkubGVuZ3RoIC8gQVRUUklCVVRFUyk7XG4gICAgfTtcbiAgICByZXR1cm4gRWRnZUFycm93SGVhZFByb2dyYW07XG59KGVkZ2VfMS5BYnN0cmFjdEVkZ2VQcm9ncmFtKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFZGdlQXJyb3dIZWFkUHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBlZGdlXzEgPSByZXF1aXJlKFwiLi9jb21tb24vZWRnZVwiKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzXCIpO1xudmFyIGVkZ2VfY2xhbXBlZF92ZXJ0X2dsc2xfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhZGVycy9lZGdlLmNsYW1wZWQudmVydC5nbHNsLmpzXCIpKTtcbnZhciBlZGdlX2ZyYWdfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2VkZ2UuZnJhZy5nbHNsLmpzXCIpKTtcbnZhciBQT0lOVFMgPSA0LCBBVFRSSUJVVEVTID0gNiwgU1RSSURFID0gUE9JTlRTICogQVRUUklCVVRFUztcbnZhciBFZGdlQ2xhbXBlZFByb2dyYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVkZ2VDbGFtcGVkUHJvZ3JhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFZGdlQ2xhbXBlZFByb2dyYW0oZ2wpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ2wsIGVkZ2VfY2xhbXBlZF92ZXJ0X2dsc2xfMS5kZWZhdWx0LCBlZGdlX2ZyYWdfZ2xzbF8xLmRlZmF1bHQsIFBPSU5UUywgQVRUUklCVVRFUykgfHwgdGhpcztcbiAgICAgICAgLy8gSW5pdGlhbGl6aW5nIGluZGljZXMgYnVmZmVyXG4gICAgICAgIHZhciBpbmRpY2VzQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGlmIChpbmRpY2VzQnVmZmVyID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWRnZUNsYW1wZWRQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIHJlc29sdXRpb25Mb2NhdGlvblwiKTtcbiAgICAgICAgX3RoaXMuaW5kaWNlc0J1ZmZlciA9IGluZGljZXNCdWZmZXI7XG4gICAgICAgIC8vIExvY2F0aW9uczpcbiAgICAgICAgX3RoaXMucG9zaXRpb25Mb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcbiAgICAgICAgX3RoaXMuY29sb3JMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9jb2xvclwiKTtcbiAgICAgICAgX3RoaXMubm9ybWFsTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfbm9ybWFsXCIpO1xuICAgICAgICBfdGhpcy5yYWRpdXNMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9yYWRpdXNcIik7XG4gICAgICAgIC8vIFVuaWZvcm0gbG9jYXRpb25zXG4gICAgICAgIHZhciBtYXRyaXhMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfbWF0cml4XCIpO1xuICAgICAgICBpZiAobWF0cml4TG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlQ2xhbXBlZFByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgbWF0cml4TG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLm1hdHJpeExvY2F0aW9uID0gbWF0cml4TG9jYXRpb247XG4gICAgICAgIHZhciBzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X3NxcnRab29tUmF0aW9cIik7XG4gICAgICAgIGlmIChzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlQ2xhbXBlZFByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgY2FtZXJhUmF0aW9Mb2NhdGlvblwiKTtcbiAgICAgICAgX3RoaXMuc3FydFpvb21SYXRpb0xvY2F0aW9uID0gc3FydFpvb21SYXRpb0xvY2F0aW9uO1xuICAgICAgICB2YXIgY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X2NvcnJlY3Rpb25SYXRpb1wiKTtcbiAgICAgICAgaWYgKGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWRnZUNsYW1wZWRQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIHZpZXdwb3J0UmF0aW9Mb2NhdGlvblwiKTtcbiAgICAgICAgX3RoaXMuY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPSBjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbjtcbiAgICAgICAgLy8gRW5hYmxpbmcgdGhlIE9FU19lbGVtZW50X2luZGV4X3VpbnQgZXh0ZW5zaW9uXG4gICAgICAgIC8vIE5PVEU6IG9uIG9sZGVyIEdQVXMsIHRoaXMgbWVhbnMgdGhhdCByZWFsbHkgbGFyZ2UgZ3JhcGhzIHdvbid0XG4gICAgICAgIC8vIGhhdmUgYWxsIHRoZWlyIGVkZ2VzIHJlbmRlcmVkLiBCdXQgaXQgc2VlbXMgdGhhdCB0aGVcbiAgICAgICAgLy8gYE9FU19lbGVtZW50X2luZGV4X3VpbnRgIGlzIHF1aXRlIGV2ZXJ5d2hlcmUgc28gd2UnbGwgaGFuZGxlXG4gICAgICAgIC8vIHRoZSBwb3RlbnRpYWwgaXNzdWUgaWYgaXQgcmVhbGx5IGFyaXNlcy5cbiAgICAgICAgLy8gTk9URTogd2hlbiB1c2luZyB3ZWJnbDIsIHRoZSBleHRlbnNpb24gaXMgZW5hYmxlZCBieSBkZWZhdWx0XG4gICAgICAgIF90aGlzLmNhblVzZTMyQml0c0luZGljZXMgPSAoMCwgdXRpbHNfMS5jYW5Vc2UzMkJpdHNJbmRpY2VzKShnbCk7XG4gICAgICAgIF90aGlzLkluZGljZXNBcnJheSA9IF90aGlzLmNhblVzZTMyQml0c0luZGljZXMgPyBVaW50MzJBcnJheSA6IFVpbnQxNkFycmF5O1xuICAgICAgICBfdGhpcy5pbmRpY2VzQXJyYXkgPSBuZXcgX3RoaXMuSW5kaWNlc0FycmF5KCk7XG4gICAgICAgIF90aGlzLmluZGljZXNUeXBlID0gX3RoaXMuY2FuVXNlMzJCaXRzSW5kaWNlcyA/IGdsLlVOU0lHTkVEX0lOVCA6IGdsLlVOU0lHTkVEX1NIT1JUO1xuICAgICAgICBfdGhpcy5iaW5kKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRWRnZUNsYW1wZWRQcm9ncmFtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGljZXNCdWZmZXIpO1xuICAgICAgICAvLyBCaW5kaW5nc1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLm5vcm1hbExvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5jb2xvckxvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5yYWRpdXNMb2NhdGlvbik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5wb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDApO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMubm9ybWFsTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgQVRUUklCVVRFUyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgOCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5jb2xvckxvY2F0aW9uLCA0LCBnbC5VTlNJR05FRF9CWVRFLCB0cnVlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAxNik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5yYWRpdXNMb2NhdGlvbiwgMSwgZ2wuRkxPQVQsIGZhbHNlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAyMCk7XG4gICAgfTtcbiAgICBFZGdlQ2xhbXBlZFByb2dyYW0ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoc291cmNlRGF0YSwgdGFyZ2V0RGF0YSwgZGF0YSwgaGlkZGVuLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKGhpZGRlbikge1xuICAgICAgICAgICAgZm9yICh2YXIgaV8xID0gb2Zmc2V0ICogU1RSSURFLCBsID0gaV8xICsgU1RSSURFOyBpXzEgPCBsOyBpXzErKylcbiAgICAgICAgICAgICAgICB0aGlzLmFycmF5W2lfMV0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlja25lc3MgPSBkYXRhLnNpemUgfHwgMSwgeDEgPSBzb3VyY2VEYXRhLngsIHkxID0gc291cmNlRGF0YS55LCB4MiA9IHRhcmdldERhdGEueCwgeTIgPSB0YXJnZXREYXRhLnksIHJhZGl1cyA9IHRhcmdldERhdGEuc2l6ZSB8fCAxLCBjb2xvciA9ICgwLCB1dGlsc18xLmZsb2F0Q29sb3IpKGRhdGEuY29sb3IpO1xuICAgICAgICAvLyBDb21wdXRpbmcgbm9ybWFsc1xuICAgICAgICB2YXIgZHggPSB4MiAtIHgxLCBkeSA9IHkyIC0geTE7XG4gICAgICAgIHZhciBsZW4gPSBkeCAqIGR4ICsgZHkgKiBkeSwgbjEgPSAwLCBuMiA9IDA7XG4gICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICAgICAgICAgIG4xID0gLWR5ICogbGVuICogdGhpY2tuZXNzO1xuICAgICAgICAgICAgbjIgPSBkeCAqIGxlbiAqIHRoaWNrbmVzcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaSA9IFBPSU5UUyAqIEFUVFJJQlVURVMgKiBvZmZzZXQ7XG4gICAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgICAgIC8vIEZpcnN0IHBvaW50XG4gICAgICAgIGFycmF5W2krK10gPSB4MTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkxO1xuICAgICAgICBhcnJheVtpKytdID0gbjE7XG4gICAgICAgIGFycmF5W2krK10gPSBuMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgLy8gRmlyc3QgcG9pbnQgZmxpcHBlZFxuICAgICAgICBhcnJheVtpKytdID0geDE7XG4gICAgICAgIGFycmF5W2krK10gPSB5MTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgLy8gU2Vjb25kIHBvaW50XG4gICAgICAgIGFycmF5W2krK10gPSB4MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkyO1xuICAgICAgICBhcnJheVtpKytdID0gbjE7XG4gICAgICAgIGFycmF5W2krK10gPSBuMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICBhcnJheVtpKytdID0gcmFkaXVzO1xuICAgICAgICAvLyBTZWNvbmQgcG9pbnQgZmxpcHBlZFxuICAgICAgICBhcnJheVtpKytdID0geDI7XG4gICAgICAgIGFycmF5W2krK10gPSB5MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICBhcnJheVtpXSA9IC1yYWRpdXM7XG4gICAgfTtcbiAgICBFZGdlQ2xhbXBlZFByb2dyYW0ucHJvdG90eXBlLmNvbXB1dGVJbmRpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbCA9IHRoaXMuYXJyYXkubGVuZ3RoIC8gQVRUUklCVVRFUztcbiAgICAgICAgdmFyIHNpemUgPSBsICsgbCAvIDI7XG4gICAgICAgIHZhciBpbmRpY2VzID0gbmV3IHRoaXMuSW5kaWNlc0FycmF5KHNpemUpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgYyA9IDA7IGkgPCBsOyBpICs9IDQpIHtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGk7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpICsgMTtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGkgKyAyO1xuICAgICAgICAgICAgaW5kaWNlc1tjKytdID0gaSArIDI7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpICsgMTtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGkgKyAzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kaWNlc0FycmF5ID0gaW5kaWNlcztcbiAgICB9O1xuICAgIEVkZ2VDbGFtcGVkUHJvZ3JhbS5wcm90b3R5cGUuYnVmZmVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5idWZmZXJEYXRhLmNhbGwodGhpcyk7XG4gICAgICAgIC8vIEluZGljZXMgZGF0YVxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGljZXNBcnJheSwgZ2wuU1RBVElDX0RSQVcpO1xuICAgIH07XG4gICAgRWRnZUNsYW1wZWRQcm9ncmFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc05vdGhpbmdUb1JlbmRlcigpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbTtcbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgLy8gQmluZGluZyB1bmlmb3Jtc1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMubWF0cml4TG9jYXRpb24sIGZhbHNlLCBwYXJhbXMubWF0cml4KTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuc3FydFpvb21SYXRpb0xvY2F0aW9uLCBNYXRoLnNxcnQocGFyYW1zLnJhdGlvKSk7XG4gICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLmNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uLCBwYXJhbXMuY29ycmVjdGlvblJhdGlvKTtcbiAgICAgICAgLy8gRHJhd2luZzpcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgdGhpcy5pbmRpY2VzQXJyYXkubGVuZ3RoLCB0aGlzLmluZGljZXNUeXBlLCAwKTtcbiAgICB9O1xuICAgIHJldHVybiBFZGdlQ2xhbXBlZFByb2dyYW07XG59KGVkZ2VfMS5BYnN0cmFjdEVkZ2VQcm9ncmFtKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFZGdlQ2xhbXBlZFByb2dyYW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFNpZ21hLmpzIFdlYkdMIFJlbmRlcmVyIEVkZ2UgUHJvZ3JhbVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIFByb2dyYW0gcmVuZGVyaW5nIGVkZ2VzIGFzIHRoaWNrIGxpbmVzIHVzaW5nIGZvdXIgcG9pbnRzIHRyYW5zbGF0ZWRcbiAqIG9ydGhvZ29uYWxseSBmcm9tIHRoZSBzb3VyY2UgJiB0YXJnZXQncyBjZW50ZXJzIGJ5IGhhbGYgdGhpY2tuZXNzLlxuICpcbiAqIFJlbmRlcmluZyB0d28gdHJpYW5nbGVzIGJ5IHVzaW5nIG9ubHkgZm91ciBwb2ludHMgaXMgbWFkZSBwb3NzaWJsZSB0aHJvdWdoXG4gKiB0aGUgdXNlIG9mIGluZGljZXMuXG4gKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGZhc3RlciB0aGFuIHRoZSA2IHBvaW50cyAvIDIgdHJpYW5nbGVzIGFwcHJvYWNoIGFuZFxuICogc2hvdWxkIGhhbmRsZSB0aGlja25lc3MgYmV0dGVyIHRoYW4gd2l0aCBnbC5MSU5FUy5cbiAqXG4gKiBUaGlzIHZlcnNpb24gb2YgdGhlIHNoYWRlciBiYWxhbmNlcyBnZW9tZXRyeSBjb21wdXRhdGlvbiBldmVubHkgYmV0d2VlblxuICogdGhlIENQVSAmIEdQVSAobm9ybWFscyBhcmUgY29tcHV0ZWQgb24gdGhlIENQVSBzaWRlKS5cbiAqIEBtb2R1bGVcbiAqL1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG52YXIgZWRnZV92ZXJ0X2dsc2xfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhZGVycy9lZGdlLnZlcnQuZ2xzbC5qc1wiKSk7XG52YXIgZWRnZV9mcmFnX2dsc2xfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhZGVycy9lZGdlLmZyYWcuZ2xzbC5qc1wiKSk7XG52YXIgZWRnZV8xID0gcmVxdWlyZShcIi4vY29tbW9uL2VkZ2VcIik7XG52YXIgUE9JTlRTID0gNCwgQVRUUklCVVRFUyA9IDUsIFNUUklERSA9IFBPSU5UUyAqIEFUVFJJQlVURVM7XG52YXIgRWRnZVByb2dyYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVkZ2VQcm9ncmFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVkZ2VQcm9ncmFtKGdsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGdsLCBlZGdlX3ZlcnRfZ2xzbF8xLmRlZmF1bHQsIGVkZ2VfZnJhZ19nbHNsXzEuZGVmYXVsdCwgUE9JTlRTLCBBVFRSSUJVVEVTKSB8fCB0aGlzO1xuICAgICAgICAvLyBJbml0aWFsaXppbmcgaW5kaWNlcyBidWZmZXJcbiAgICAgICAgdmFyIGluZGljZXNCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgaWYgKGluZGljZXNCdWZmZXIgPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlUHJvZ3JhbTogZXJyb3Igd2hpbGUgY3JlYXRpbmcgaW5kaWNlc0J1ZmZlclwiKTtcbiAgICAgICAgX3RoaXMuaW5kaWNlc0J1ZmZlciA9IGluZGljZXNCdWZmZXI7XG4gICAgICAgIC8vIExvY2F0aW9uc1xuICAgICAgICBfdGhpcy5wb3NpdGlvbkxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpO1xuICAgICAgICBfdGhpcy5jb2xvckxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX2NvbG9yXCIpO1xuICAgICAgICBfdGhpcy5ub3JtYWxMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9ub3JtYWxcIik7XG4gICAgICAgIHZhciBtYXRyaXhMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfbWF0cml4XCIpO1xuICAgICAgICBpZiAobWF0cml4TG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBtYXRyaXhMb2NhdGlvblwiKTtcbiAgICAgICAgX3RoaXMubWF0cml4TG9jYXRpb24gPSBtYXRyaXhMb2NhdGlvbjtcbiAgICAgICAgdmFyIGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9jb3JyZWN0aW9uUmF0aW9cIik7XG4gICAgICAgIGlmIChjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5jb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9IGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uO1xuICAgICAgICB2YXIgc3FydFpvb21SYXRpb0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9zcXJ0Wm9vbVJhdGlvXCIpO1xuICAgICAgICBpZiAoc3FydFpvb21SYXRpb0xvY2F0aW9uID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWRnZVByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgc3FydFpvb21SYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5zcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPSBzcXJ0Wm9vbVJhdGlvTG9jYXRpb247XG4gICAgICAgIC8vIEVuYWJsaW5nIHRoZSBPRVNfZWxlbWVudF9pbmRleF91aW50IGV4dGVuc2lvblxuICAgICAgICAvLyBOT1RFOiBvbiBvbGRlciBHUFVzLCB0aGlzIG1lYW5zIHRoYXQgcmVhbGx5IGxhcmdlIGdyYXBocyB3b24ndFxuICAgICAgICAvLyBoYXZlIGFsbCB0aGVpciBlZGdlcyByZW5kZXJlZC4gQnV0IGl0IHNlZW1zIHRoYXQgdGhlXG4gICAgICAgIC8vIGBPRVNfZWxlbWVudF9pbmRleF91aW50YCBpcyBxdWl0ZSBldmVyeXdoZXJlIHNvIHdlJ2xsIGhhbmRsZVxuICAgICAgICAvLyB0aGUgcG90ZW50aWFsIGlzc3VlIGlmIGl0IHJlYWxseSBhcmlzZXMuXG4gICAgICAgIC8vIE5PVEU6IHdoZW4gdXNpbmcgd2ViZ2wyLCB0aGUgZXh0ZW5zaW9uIGlzIGVuYWJsZWQgYnkgZGVmYXVsdFxuICAgICAgICBfdGhpcy5jYW5Vc2UzMkJpdHNJbmRpY2VzID0gKDAsIHV0aWxzXzEuY2FuVXNlMzJCaXRzSW5kaWNlcykoZ2wpO1xuICAgICAgICBfdGhpcy5JbmRpY2VzQXJyYXkgPSBfdGhpcy5jYW5Vc2UzMkJpdHNJbmRpY2VzID8gVWludDMyQXJyYXkgOiBVaW50MTZBcnJheTtcbiAgICAgICAgX3RoaXMuaW5kaWNlc0FycmF5ID0gbmV3IF90aGlzLkluZGljZXNBcnJheSgpO1xuICAgICAgICBfdGhpcy5pbmRpY2VzVHlwZSA9IF90aGlzLmNhblVzZTMyQml0c0luZGljZXMgPyBnbC5VTlNJR05FRF9JTlQgOiBnbC5VTlNJR05FRF9TSE9SVDtcbiAgICAgICAgX3RoaXMuYmluZCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEVkZ2VQcm9ncmFtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGljZXNCdWZmZXIpO1xuICAgICAgICAvLyBCaW5kaW5nc1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLm5vcm1hbExvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5jb2xvckxvY2F0aW9uKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgQVRUUklCVVRFUyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5ub3JtYWxMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCA4KTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmNvbG9yTG9jYXRpb24sIDQsIGdsLlVOU0lHTkVEX0JZVEUsIHRydWUsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDE2KTtcbiAgICB9O1xuICAgIEVkZ2VQcm9ncmFtLnByb3RvdHlwZS5jb21wdXRlSW5kaWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGwgPSB0aGlzLmFycmF5Lmxlbmd0aCAvIEFUVFJJQlVURVM7XG4gICAgICAgIHZhciBzaXplID0gbCArIGwgLyAyO1xuICAgICAgICB2YXIgaW5kaWNlcyA9IG5ldyB0aGlzLkluZGljZXNBcnJheShzaXplKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGMgPSAwOyBpIDwgbDsgaSArPSA0KSB7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpO1xuICAgICAgICAgICAgaW5kaWNlc1tjKytdID0gaSArIDE7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpICsgMjtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGkgKyAyO1xuICAgICAgICAgICAgaW5kaWNlc1tjKytdID0gaSArIDE7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpICsgMztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGljZXNBcnJheSA9IGluZGljZXM7XG4gICAgfTtcbiAgICBFZGdlUHJvZ3JhbS5wcm90b3R5cGUuYnVmZmVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5idWZmZXJEYXRhLmNhbGwodGhpcyk7XG4gICAgICAgIC8vIEluZGljZXMgZGF0YVxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGljZXNBcnJheSwgZ2wuU1RBVElDX0RSQVcpO1xuICAgIH07XG4gICAgRWRnZVByb2dyYW0ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoc291cmNlRGF0YSwgdGFyZ2V0RGF0YSwgZGF0YSwgaGlkZGVuLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKGhpZGRlbikge1xuICAgICAgICAgICAgZm9yICh2YXIgaV8xID0gb2Zmc2V0ICogU1RSSURFLCBsID0gaV8xICsgU1RSSURFOyBpXzEgPCBsOyBpXzErKylcbiAgICAgICAgICAgICAgICB0aGlzLmFycmF5W2lfMV0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlja25lc3MgPSBkYXRhLnNpemUgfHwgMSwgeDEgPSBzb3VyY2VEYXRhLngsIHkxID0gc291cmNlRGF0YS55LCB4MiA9IHRhcmdldERhdGEueCwgeTIgPSB0YXJnZXREYXRhLnksIGNvbG9yID0gKDAsIHV0aWxzXzEuZmxvYXRDb2xvcikoZGF0YS5jb2xvcik7XG4gICAgICAgIC8vIENvbXB1dGluZyBub3JtYWxzXG4gICAgICAgIHZhciBkeCA9IHgyIC0geDEsIGR5ID0geTIgLSB5MTtcbiAgICAgICAgdmFyIGxlbiA9IGR4ICogZHggKyBkeSAqIGR5LCBuMSA9IDAsIG4yID0gMDtcbiAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICAgICAgbjEgPSAtZHkgKiBsZW4gKiB0aGlja25lc3M7XG4gICAgICAgICAgICBuMiA9IGR4ICogbGVuICogdGhpY2tuZXNzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gUE9JTlRTICogQVRUUklCVVRFUyAqIG9mZnNldDtcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgICAgLy8gRmlyc3QgcG9pbnRcbiAgICAgICAgYXJyYXlbaSsrXSA9IHgxO1xuICAgICAgICBhcnJheVtpKytdID0geTE7XG4gICAgICAgIGFycmF5W2krK10gPSBuMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IG4yO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIC8vIEZpcnN0IHBvaW50IGZsaXBwZWRcbiAgICAgICAgYXJyYXlbaSsrXSA9IHgxO1xuICAgICAgICBhcnJheVtpKytdID0geTE7XG4gICAgICAgIGFycmF5W2krK10gPSAtbjE7XG4gICAgICAgIGFycmF5W2krK10gPSAtbjI7XG4gICAgICAgIGFycmF5W2krK10gPSBjb2xvcjtcbiAgICAgICAgLy8gU2Vjb25kIHBvaW50XG4gICAgICAgIGFycmF5W2krK10gPSB4MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkyO1xuICAgICAgICBhcnJheVtpKytdID0gbjE7XG4gICAgICAgIGFycmF5W2krK10gPSBuMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICAvLyBTZWNvbmQgcG9pbnQgZmxpcHBlZFxuICAgICAgICBhcnJheVtpKytdID0geDI7XG4gICAgICAgIGFycmF5W2krK10gPSB5MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMjtcbiAgICAgICAgYXJyYXlbaV0gPSBjb2xvcjtcbiAgICB9O1xuICAgIEVkZ2VQcm9ncmFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc05vdGhpbmdUb1JlbmRlcigpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbTtcbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdih0aGlzLm1hdHJpeExvY2F0aW9uLCBmYWxzZSwgcGFyYW1zLm1hdHJpeCk7XG4gICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLnNxcnRab29tUmF0aW9Mb2NhdGlvbiwgTWF0aC5zcXJ0KHBhcmFtcy5yYXRpbykpO1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5jb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiwgcGFyYW1zLmNvcnJlY3Rpb25SYXRpbyk7XG4gICAgICAgIC8vIERyYXdpbmc6XG4gICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHRoaXMuaW5kaWNlc0FycmF5Lmxlbmd0aCwgdGhpcy5pbmRpY2VzVHlwZSwgMCk7XG4gICAgfTtcbiAgICByZXR1cm4gRWRnZVByb2dyYW07XG59KGVkZ2VfMS5BYnN0cmFjdEVkZ2VQcm9ncmFtKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFZGdlUHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzXCIpO1xudmFyIG5vZGVfZmFzdF92ZXJ0X2dsc2xfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhZGVycy9ub2RlLmZhc3QudmVydC5nbHNsLmpzXCIpKTtcbnZhciBub2RlX2Zhc3RfZnJhZ19nbHNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3NoYWRlcnMvbm9kZS5mYXN0LmZyYWcuZ2xzbC5qc1wiKSk7XG52YXIgbm9kZV8xID0gcmVxdWlyZShcIi4vY29tbW9uL25vZGVcIik7XG52YXIgUE9JTlRTID0gMSwgQVRUUklCVVRFUyA9IDQ7XG52YXIgTm9kZUZhc3RQcm9ncmFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOb2RlRmFzdFByb2dyYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTm9kZUZhc3RQcm9ncmFtKGdsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGdsLCBub2RlX2Zhc3RfdmVydF9nbHNsXzEuZGVmYXVsdCwgbm9kZV9mYXN0X2ZyYWdfZ2xzbF8xLmRlZmF1bHQsIFBPSU5UUywgQVRUUklCVVRFUykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmluZCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE5vZGVGYXN0UHJvZ3JhbS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChkYXRhLCBoaWRkZW4sIG9mZnNldCkge1xuICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuICAgICAgICB2YXIgaSA9IG9mZnNldCAqIFBPSU5UUyAqIEFUVFJJQlVURVM7XG4gICAgICAgIGlmIChoaWRkZW4pIHtcbiAgICAgICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICAgICAgYXJyYXlbaSsrXSA9IDA7XG4gICAgICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2xvciA9ICgwLCB1dGlsc18xLmZsb2F0Q29sb3IpKGRhdGEuY29sb3IpO1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS54O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS55O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS5zaXplO1xuICAgICAgICBhcnJheVtpXSA9IGNvbG9yO1xuICAgIH07XG4gICAgTm9kZUZhc3RQcm9ncmFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc05vdGhpbmdUb1JlbmRlcigpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbTtcbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMucmF0aW9Mb2NhdGlvbiwgMSAvIE1hdGguc3FydChwYXJhbXMucmF0aW8pKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuc2NhbGVMb2NhdGlvbiwgcGFyYW1zLnNjYWxpbmdSYXRpbyk7XG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYodGhpcy5tYXRyaXhMb2NhdGlvbiwgZmFsc2UsIHBhcmFtcy5tYXRyaXgpO1xuICAgICAgICBnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgdGhpcy5hcnJheS5sZW5ndGggLyBBVFRSSUJVVEVTKTtcbiAgICB9O1xuICAgIHJldHVybiBOb2RlRmFzdFByb2dyYW07XG59KG5vZGVfMS5BYnN0cmFjdE5vZGVQcm9ncmFtKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBOb2RlRmFzdFByb2dyYW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlsc1wiKTtcbnZhciBub2RlX3ZlcnRfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL25vZGUudmVydC5nbHNsLmpzXCIpKTtcbnZhciBub2RlX2ZyYWdfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL25vZGUuZnJhZy5nbHNsLmpzXCIpKTtcbnZhciBwcm9ncmFtXzEgPSByZXF1aXJlKFwiLi9jb21tb24vcHJvZ3JhbVwiKTtcbnZhciBQT0lOVFMgPSAzO1xudmFyIEFUVFJJQlVURVMgPSA1O1xudmFyIEFOR0xFXzEgPSAwO1xudmFyIEFOR0xFXzIgPSAoMiAqIE1hdGguUEkpIC8gMztcbnZhciBBTkdMRV8zID0gKDQgKiBNYXRoLlBJKSAvIDM7XG52YXIgTm9kZVByb2dyYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE5vZGVQcm9ncmFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE5vZGVQcm9ncmFtKGdsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGdsLCBub2RlX3ZlcnRfZ2xzbF8xLmRlZmF1bHQsIG5vZGVfZnJhZ19nbHNsXzEuZGVmYXVsdCwgUE9JTlRTLCBBVFRSSUJVVEVTKSB8fCB0aGlzO1xuICAgICAgICAvLyBMb2NhdGlvbnNcbiAgICAgICAgX3RoaXMucG9zaXRpb25Mb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcbiAgICAgICAgX3RoaXMuc2l6ZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX3NpemVcIik7XG4gICAgICAgIF90aGlzLmNvbG9yTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfY29sb3JcIik7XG4gICAgICAgIF90aGlzLmFuZ2xlTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfYW5nbGVcIik7XG4gICAgICAgIC8vIFVuaWZvcm0gTG9jYXRpb25cbiAgICAgICAgdmFyIG1hdHJpeExvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9tYXRyaXhcIik7XG4gICAgICAgIGlmIChtYXRyaXhMb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFic3RyYWN0Tm9kZVByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgbWF0cml4TG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLm1hdHJpeExvY2F0aW9uID0gbWF0cml4TG9jYXRpb247XG4gICAgICAgIHZhciBzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X3NxcnRab29tUmF0aW9cIik7XG4gICAgICAgIGlmIChzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBzcXJ0Wm9vbVJhdGlvTG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLnNxcnRab29tUmF0aW9Mb2NhdGlvbiA9IHNxcnRab29tUmF0aW9Mb2NhdGlvbjtcbiAgICAgICAgdmFyIGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9jb3JyZWN0aW9uUmF0aW9cIik7XG4gICAgICAgIGlmIChjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vZGVQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5jb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9IGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uO1xuICAgICAgICBfdGhpcy5iaW5kKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTm9kZVByb2dyYW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMucG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuc2l6ZUxvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5jb2xvckxvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hbmdsZUxvY2F0aW9uKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgdGhpcy5hdHRyaWJ1dGVzICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAwKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnNpemVMb2NhdGlvbiwgMSwgZ2wuRkxPQVQsIGZhbHNlLCB0aGlzLmF0dHJpYnV0ZXMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDgpO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuY29sb3JMb2NhdGlvbiwgNCwgZ2wuVU5TSUdORURfQllURSwgdHJ1ZSwgdGhpcy5hdHRyaWJ1dGVzICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAxMik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hbmdsZUxvY2F0aW9uLCAxLCBnbC5GTE9BVCwgZmFsc2UsIHRoaXMuYXR0cmlidXRlcyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMTYpO1xuICAgIH07XG4gICAgTm9kZVByb2dyYW0ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoZGF0YSwgaGlkZGVuLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgICAgdmFyIGkgPSBvZmZzZXQgKiBQT0lOVFMgKiBBVFRSSUJVVEVTO1xuICAgICAgICBpZiAoaGlkZGVuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBsID0gaSArIFBPSU5UUyAqIEFUVFJJQlVURVM7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2xvciA9ICgwLCB1dGlsc18xLmZsb2F0Q29sb3IpKGRhdGEuY29sb3IpO1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS54O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS55O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS5zaXplO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSBBTkdMRV8xO1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS54O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS55O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS5zaXplO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSBBTkdMRV8yO1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS54O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS55O1xuICAgICAgICBhcnJheVtpKytdID0gZGF0YS5zaXplO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2ldID0gQU5HTEVfMztcbiAgICB9O1xuICAgIE5vZGVQcm9ncmFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc05vdGhpbmdUb1JlbmRlcigpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbTtcbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdih0aGlzLm1hdHJpeExvY2F0aW9uLCBmYWxzZSwgcGFyYW1zLm1hdHJpeCk7XG4gICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLnNxcnRab29tUmF0aW9Mb2NhdGlvbiwgTWF0aC5zcXJ0KHBhcmFtcy5yYXRpbykpO1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5jb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiwgcGFyYW1zLmNvcnJlY3Rpb25SYXRpbyk7XG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCB0aGlzLmFycmF5Lmxlbmd0aCAvIEFUVFJJQlVURVMpO1xuICAgIH07XG4gICAgcmV0dXJuIE5vZGVQcm9ncmFtO1xufShwcm9ncmFtXzEuQWJzdHJhY3RQcm9ncmFtKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBOb2RlUHJvZ3JhbTtcbiIsIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXtkOihvLHIpPT57Zm9yKHZhciB0IGluIHIpZS5vKHIsdCkmJiFlLm8obyx0KSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sdCx7ZW51bWVyYWJsZTohMCxnZXQ6clt0XX0pfSxvOihlLG8pPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSxyOmU9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfX0sbz17fTtlLnIobyksZS5kKG8se2RlZmF1bHQ6KCk9PnJ9KTtjb25zdCByPVwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxuXFxudm9pZCBtYWluKHZvaWQpIHtcXG4gIGdsX0ZyYWdDb2xvciA9IHZfY29sb3I7XFxufVxcblwiO21vZHVsZS5leHBvcnRzPW99KSgpOyIsIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBhPXtkOihlLHQpPT57Zm9yKHZhciBvIGluIHQpYS5vKHQsbykmJiFhLm8oZSxvKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbyx7ZW51bWVyYWJsZTohMCxnZXQ6dFtvXX0pfSxvOihhLGUpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxlKSxyOmE9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfX0sZT17fTthLnIoZSksYS5kKGUse2RlZmF1bHQ6KCk9PnR9KTtjb25zdCB0PVwiYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhX25vcm1hbDtcXG5hdHRyaWJ1dGUgZmxvYXQgYV9yYWRpdXM7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5hdHRyaWJ1dGUgdmVjMyBhX2JhcnljZW50cmljO1xcblxcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVfc3FydFpvb21SYXRpbztcXG51bmlmb3JtIGZsb2F0IHVfY29ycmVjdGlvblJhdGlvO1xcblxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcblxcbmNvbnN0IGZsb2F0IG1pblRoaWNrbmVzcyA9IDEuNztcXG5jb25zdCBmbG9hdCBiaWFzID0gMjU1LjAgLyAyNTQuMDtcXG5jb25zdCBmbG9hdCBhcnJvd0hlYWRXaWR0aExlbmd0aFJhdGlvID0gMC42NjtcXG5jb25zdCBmbG9hdCBhcnJvd0hlYWRMZW5ndGhUaGlja25lc3NSYXRpbyA9IDIuNTtcXG5cXG52b2lkIG1haW4oKSB7XFxuICBmbG9hdCBub3JtYWxMZW5ndGggPSBsZW5ndGgoYV9ub3JtYWwpO1xcbiAgdmVjMiB1bml0Tm9ybWFsID0gYV9ub3JtYWwgLyBub3JtYWxMZW5ndGg7XFxuXFxuICAvLyBUaGVzZSBmaXJzdCBjb21wdXRhdGlvbnMgYXJlIHRha2VuIGZyb20gZWRnZS52ZXJ0Lmdsc2wgYW5kXFxuICAvLyBlZGdlLmNsYW1wZWQudmVydC5nbHNsLiBQbGVhc2UgcmVhZCBpdCB0byBnZXQgYmV0dGVyIGNvbW1lbnRzIG9uIHdoYXQnc1xcbiAgLy8gaGFwcGVuaW5nOlxcbiAgZmxvYXQgcGl4ZWxzVGhpY2tuZXNzID0gbWF4KG5vcm1hbExlbmd0aCwgbWluVGhpY2tuZXNzICogdV9zcXJ0Wm9vbVJhdGlvKTtcXG4gIGZsb2F0IHdlYkdMVGhpY2tuZXNzID0gcGl4ZWxzVGhpY2tuZXNzICogdV9jb3JyZWN0aW9uUmF0aW87XFxuICBmbG9hdCBhZGFwdGVkV2ViR0xUaGlja25lc3MgPSB3ZWJHTFRoaWNrbmVzcyAqIHVfc3FydFpvb21SYXRpbztcXG4gIGZsb2F0IGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgPSBhX3JhZGl1cyAqIDIuMCAqIHVfY29ycmVjdGlvblJhdGlvICogdV9zcXJ0Wm9vbVJhdGlvO1xcbiAgZmxvYXQgYWRhcHRlZFdlYkdMQXJyb3dIZWFkTGVuZ3RoID0gYWRhcHRlZFdlYkdMVGhpY2tuZXNzICogMi4wICogYXJyb3dIZWFkTGVuZ3RoVGhpY2tuZXNzUmF0aW87XFxuICBmbG9hdCBhZGFwdGVkV2ViR0xBcnJvd0hlYWRIYWxmV2lkdGggPSBhZGFwdGVkV2ViR0xBcnJvd0hlYWRMZW5ndGggKiBhcnJvd0hlYWRXaWR0aExlbmd0aFJhdGlvIC8gMi4wO1xcblxcbiAgZmxvYXQgZGEgPSBhX2JhcnljZW50cmljLng7XFxuICBmbG9hdCBkYiA9IGFfYmFyeWNlbnRyaWMueTtcXG4gIGZsb2F0IGRjID0gYV9iYXJ5Y2VudHJpYy56O1xcblxcbiAgdmVjMiBkZWx0YSA9IHZlYzIoXFxuICAgICAgZGEgKiAoYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyAqIHVuaXROb3JtYWwueSlcXG4gICAgKyBkYiAqICgoYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyArIGFkYXB0ZWRXZWJHTEFycm93SGVhZExlbmd0aCkgKiB1bml0Tm9ybWFsLnkgKyBhZGFwdGVkV2ViR0xBcnJvd0hlYWRIYWxmV2lkdGggKiB1bml0Tm9ybWFsLngpXFxuICAgICsgZGMgKiAoKGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgKyBhZGFwdGVkV2ViR0xBcnJvd0hlYWRMZW5ndGgpICogdW5pdE5vcm1hbC55IC0gYWRhcHRlZFdlYkdMQXJyb3dIZWFkSGFsZldpZHRoICogdW5pdE5vcm1hbC54KSxcXG5cXG4gICAgICBkYSAqICgtYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyAqIHVuaXROb3JtYWwueClcXG4gICAgKyBkYiAqICgtKGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgKyBhZGFwdGVkV2ViR0xBcnJvd0hlYWRMZW5ndGgpICogdW5pdE5vcm1hbC54ICsgYWRhcHRlZFdlYkdMQXJyb3dIZWFkSGFsZldpZHRoICogdW5pdE5vcm1hbC55KVxcbiAgICArIGRjICogKC0oYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyArIGFkYXB0ZWRXZWJHTEFycm93SGVhZExlbmd0aCkgKiB1bml0Tm9ybWFsLnggLSBhZGFwdGVkV2ViR0xBcnJvd0hlYWRIYWxmV2lkdGggKiB1bml0Tm9ybWFsLnkpXFxuICApO1xcblxcbiAgdmVjMiBwb3NpdGlvbiA9ICh1X21hdHJpeCAqIHZlYzMoYV9wb3NpdGlvbiArIGRlbHRhLCAxKSkueHk7XFxuXFxuICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcblxcbiAgLy8gRXh0cmFjdCB0aGUgY29sb3I6XFxuICB2X2NvbG9yID0gYV9jb2xvcjtcXG4gIHZfY29sb3IuYSAqPSBiaWFzO1xcbn1cXG5cIjttb2R1bGUuZXhwb3J0cz1lfSkoKTsiLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17ZDoobyxuKT0+e2Zvcih2YXIgdCBpbiBuKWUubyhuLHQpJiYhZS5vKG8sdCkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLHQse2VudW1lcmFibGU6ITAsZ2V0Om5bdF19KX0sbzooZSxvKT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbykscjplPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX19LG89e307ZS5yKG8pLGUuZChvLHtkZWZhdWx0OigpPT5ufSk7Y29uc3Qgbj1cImF0dHJpYnV0ZSB2ZWM0IGFfY29sb3I7XFxuYXR0cmlidXRlIHZlYzIgYV9ub3JtYWw7XFxuYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjtcXG5hdHRyaWJ1dGUgZmxvYXQgYV9yYWRpdXM7XFxuXFxudW5pZm9ybSBtYXQzIHVfbWF0cml4O1xcbnVuaWZvcm0gZmxvYXQgdV9zcXJ0Wm9vbVJhdGlvO1xcbnVuaWZvcm0gZmxvYXQgdV9jb3JyZWN0aW9uUmF0aW87XFxuXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxudmFyeWluZyB2ZWMyIHZfbm9ybWFsO1xcbnZhcnlpbmcgZmxvYXQgdl90aGlja25lc3M7XFxuXFxuY29uc3QgZmxvYXQgbWluVGhpY2tuZXNzID0gMS43O1xcbmNvbnN0IGZsb2F0IGJpYXMgPSAyNTUuMCAvIDI1NC4wO1xcbmNvbnN0IGZsb2F0IGFycm93SGVhZExlbmd0aFRoaWNrbmVzc1JhdGlvID0gMi41O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gIGZsb2F0IG5vcm1hbExlbmd0aCA9IGxlbmd0aChhX25vcm1hbCk7XFxuICB2ZWMyIHVuaXROb3JtYWwgPSBhX25vcm1hbCAvIG5vcm1hbExlbmd0aDtcXG5cXG4gIC8vIFRoZXNlIGZpcnN0IGNvbXB1dGF0aW9ucyBhcmUgdGFrZW4gZnJvbSBlZGdlLnZlcnQuZ2xzbC4gUGxlYXNlIHJlYWQgaXQgdG9cXG4gIC8vIGdldCBiZXR0ZXIgY29tbWVudHMgb24gd2hhdCdzIGhhcHBlbmluZzpcXG4gIGZsb2F0IHBpeGVsc1RoaWNrbmVzcyA9IG1heChub3JtYWxMZW5ndGgsIG1pblRoaWNrbmVzcyAqIHVfc3FydFpvb21SYXRpbyk7XFxuICBmbG9hdCB3ZWJHTFRoaWNrbmVzcyA9IHBpeGVsc1RoaWNrbmVzcyAqIHVfY29ycmVjdGlvblJhdGlvO1xcbiAgZmxvYXQgYWRhcHRlZFdlYkdMVGhpY2tuZXNzID0gd2ViR0xUaGlja25lc3MgKiB1X3NxcnRab29tUmF0aW87XFxuXFxuICAvLyBIZXJlLCB3ZSBtb3ZlIHRoZSBwb2ludCB0byBsZWF2ZSBzcGFjZSBmb3IgdGhlIGFycm93IGhlYWQ6XFxuICBmbG9hdCBkaXJlY3Rpb24gPSBzaWduKGFfcmFkaXVzKTtcXG4gIGZsb2F0IGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgPSBkaXJlY3Rpb24gKiBhX3JhZGl1cyAqIDIuMCAqIHVfY29ycmVjdGlvblJhdGlvICogdV9zcXJ0Wm9vbVJhdGlvO1xcbiAgZmxvYXQgYWRhcHRlZFdlYkdMQXJyb3dIZWFkTGVuZ3RoID0gYWRhcHRlZFdlYkdMVGhpY2tuZXNzICogMi4wICogYXJyb3dIZWFkTGVuZ3RoVGhpY2tuZXNzUmF0aW87XFxuXFxuICB2ZWMyIGNvbXBlbnNhdGlvblZlY3RvciA9IHZlYzIoLWRpcmVjdGlvbiAqIHVuaXROb3JtYWwueSwgZGlyZWN0aW9uICogdW5pdE5vcm1hbC54KSAqIChhZGFwdGVkV2ViR0xOb2RlUmFkaXVzICsgYWRhcHRlZFdlYkdMQXJyb3dIZWFkTGVuZ3RoKTtcXG5cXG4gIC8vIEhlcmUgaXMgdGhlIHByb3BlciBwb3NpdGlvbiBvZiB0aGUgdmVydGV4XFxuICBnbF9Qb3NpdGlvbiA9IHZlYzQoKHVfbWF0cml4ICogdmVjMyhhX3Bvc2l0aW9uICsgdW5pdE5vcm1hbCAqIGFkYXB0ZWRXZWJHTFRoaWNrbmVzcyArIGNvbXBlbnNhdGlvblZlY3RvciwgMSkpLnh5LCAwLCAxKTtcXG5cXG4gIHZfdGhpY2tuZXNzID0gd2ViR0xUaGlja25lc3MgLyB1X3NxcnRab29tUmF0aW87XFxuXFxuICB2X25vcm1hbCA9IHVuaXROb3JtYWw7XFxuICB2X2NvbG9yID0gYV9jb2xvcjtcXG4gIHZfY29sb3IuYSAqPSBiaWFzO1xcbn1cXG5cIjttb2R1bGUuZXhwb3J0cz1vfSkoKTsiLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17ZDoobix0KT0+e2Zvcih2YXIgbyBpbiB0KWUubyh0LG8pJiYhZS5vKG4sbykmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLG8se2VudW1lcmFibGU6ITAsZ2V0OnRbb119KX0sbzooZSxuKT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikscjplPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX19LG49e307ZS5yKG4pLGUuZChuLHtkZWZhdWx0OigpPT50fSk7Y29uc3QgdD1cInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcbnZhcnlpbmcgdmVjMiB2X25vcm1hbDtcXG52YXJ5aW5nIGZsb2F0IHZfdGhpY2tuZXNzO1xcblxcbmNvbnN0IGZsb2F0IGZlYXRoZXIgPSAwLjAwMTtcXG5jb25zdCB2ZWM0IHRyYW5zcGFyZW50ID0gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xcblxcbnZvaWQgbWFpbih2b2lkKSB7XFxuICBmbG9hdCBkaXN0ID0gbGVuZ3RoKHZfbm9ybWFsKSAqIHZfdGhpY2tuZXNzO1xcblxcbiAgZmxvYXQgdCA9IHNtb290aHN0ZXAoXFxuICAgIHZfdGhpY2tuZXNzIC0gZmVhdGhlcixcXG4gICAgdl90aGlja25lc3MsXFxuICAgIGRpc3RcXG4gICk7XFxuXFxuICBnbF9GcmFnQ29sb3IgPSBtaXgodl9jb2xvciwgdHJhbnNwYXJlbnQsIHQpO1xcbn1cXG5cIjttb2R1bGUuZXhwb3J0cz1ufSkoKTsiLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17ZDoobixvKT0+e2Zvcih2YXIgdCBpbiBvKWUubyhvLHQpJiYhZS5vKG4sdCkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLHQse2VudW1lcmFibGU6ITAsZ2V0Om9bdF19KX0sbzooZSxuKT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikscjplPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX19LG49e307ZS5yKG4pLGUuZChuLHtkZWZhdWx0OigpPT5vfSk7Y29uc3Qgbz0nYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5hdHRyaWJ1dGUgdmVjMiBhX25vcm1hbDtcXG5hdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xcblxcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVfc3FydFpvb21SYXRpbztcXG51bmlmb3JtIGZsb2F0IHVfY29ycmVjdGlvblJhdGlvO1xcblxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcbnZhcnlpbmcgdmVjMiB2X25vcm1hbDtcXG52YXJ5aW5nIGZsb2F0IHZfdGhpY2tuZXNzO1xcblxcbmNvbnN0IGZsb2F0IG1pblRoaWNrbmVzcyA9IDEuNztcXG5jb25zdCBmbG9hdCBiaWFzID0gMjU1LjAgLyAyNTQuMDtcXG5cXG52b2lkIG1haW4oKSB7XFxuICBmbG9hdCBub3JtYWxMZW5ndGggPSBsZW5ndGgoYV9ub3JtYWwpO1xcbiAgdmVjMiB1bml0Tm9ybWFsID0gYV9ub3JtYWwgLyBub3JtYWxMZW5ndGg7XFxuXFxuICAvLyBXZSByZXF1aXJlIGVkZ2VzIHRvIGJlIGF0IGxlYXN0IGBtaW5UaGlja25lc3NgIHBpeGVscyB0aGljayAqb24gc2NyZWVuKlxcbiAgLy8gKHNvIHdlIG5lZWQgdG8gY29tcGVuc2F0ZSB0aGUgU1FSVCB6b29tIHJhdGlvKTpcXG4gIGZsb2F0IHBpeGVsc1RoaWNrbmVzcyA9IG1heChub3JtYWxMZW5ndGgsIG1pblRoaWNrbmVzcyAqIHVfc3FydFpvb21SYXRpbyk7XFxuXFxuICAvLyBUaGVuLCB3ZSBuZWVkIHRvIHJldHJpZXZlIHRoZSBub3JtYWxpemVkIHRoaWNrbmVzcyBvZiB0aGUgZWRnZSBpbiB0aGUgV2ViR0xcXG4gIC8vIHJlZmVyZW50aWFsIChpbiBhIChbMCwgMV0sIFswLCAxXSkgc3BhY2UpLCB1c2luZyBvdXIgXCJtYWdpY1wiIGNvcnJlY3Rpb25cXG4gIC8vIHJhdGlvOlxcbiAgZmxvYXQgd2ViR0xUaGlja25lc3MgPSBwaXhlbHNUaGlja25lc3MgKiB1X2NvcnJlY3Rpb25SYXRpbztcXG5cXG4gIC8vIEZpbmFsbHksIHdlIGFkYXB0IHRoZSBlZGdlIHRoaWNrbmVzcyB0byB0aGUgXCJTUVJUIHJ1bGVcIiBpbiBzaWdtYSAoc28gdGhhdFxcbiAgLy8gaXRlbXMgYXJlIG5vdCB0b28gYmlnIHdoZW4gem9vbWVkIGluLCBhbmQgbm90IHRvbyBzbWFsbCB3aGVuIHpvb21lZCBvdXQpLlxcbiAgLy8gVGhlIGV4YWN0IGNvbXB1dGF0aW9uIHNob3VsZCBiZSBgYWRhcHRlZCA9IHZhbHVlICogem9vbSAvIHNxcnQoem9vbSlgLCBidXRcXG4gIC8vIGl0XFwncyBzaW1wbGVyIGxpa2UgdGhpczpcXG4gIGZsb2F0IGFkYXB0ZWRXZWJHTFRoaWNrbmVzcyA9IHdlYkdMVGhpY2tuZXNzICogdV9zcXJ0Wm9vbVJhdGlvO1xcblxcbiAgLy8gSGVyZSBpcyB0aGUgcHJvcGVyIHBvc2l0aW9uIG9mIHRoZSB2ZXJ0ZXhcXG4gIGdsX1Bvc2l0aW9uID0gdmVjNCgodV9tYXRyaXggKiB2ZWMzKGFfcG9zaXRpb24gKyB1bml0Tm9ybWFsICogYWRhcHRlZFdlYkdMVGhpY2tuZXNzLCAxKSkueHksIDAsIDEpO1xcblxcbiAgLy8gRm9yIHRoZSBmcmFnbWVudCBzaGFkZXIgdGhvdWdoLCB3ZSBuZWVkIGEgdGhpY2tuZXNzIHRoYXQgdGFrZXMgdGhlIFwibWFnaWNcIlxcbiAgLy8gY29ycmVjdGlvbiByYXRpbyBpbnRvIGFjY291bnQgKGFzIGluIHdlYkdMVGhpY2tuZXNzKSwgYnV0IHNvIHRoYXQgdGhlXFxuICAvLyBhbnRpYWxpYXNpbmcgZWZmZWN0IGRvZXMgbm90IGRlcGVuZCBvbiB0aGUgem9vbSBsZXZlbC4gU28gaGVyZVxcJ3MgeWV0XFxuICAvLyBhbm90aGVyIHRoaWNrbmVzcyB2ZXJzaW9uOlxcbiAgdl90aGlja25lc3MgPSB3ZWJHTFRoaWNrbmVzcyAvIHVfc3FydFpvb21SYXRpbztcXG5cXG4gIHZfbm9ybWFsID0gdW5pdE5vcm1hbDtcXG4gIHZfY29sb3IgPSBhX2NvbG9yO1xcbiAgdl9jb2xvci5hICo9IGJpYXM7XFxufVxcbic7bW9kdWxlLmV4cG9ydHM9bn0pKCk7IiwiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9e2Q6KG4sbyk9Pntmb3IodmFyIHQgaW4gbyllLm8obyx0KSYmIWUubyhuLHQpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkobix0LHtlbnVtZXJhYmxlOiEwLGdldDpvW3RdfSl9LG86KGUsbik9Pk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pLHI6ZT0+e1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9fSxuPXt9O2UucihuKSxlLmQobix7ZGVmYXVsdDooKT0+b30pO2NvbnN0IG89XCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXG52YXJ5aW5nIGZsb2F0IHZfYm9yZGVyO1xcblxcbmNvbnN0IGZsb2F0IHJhZGl1cyA9IDAuNTtcXG5jb25zdCB2ZWM0IHRyYW5zcGFyZW50ID0gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xcblxcbnZvaWQgbWFpbih2b2lkKSB7XFxuICB2ZWMyIG0gPSBnbF9Qb2ludENvb3JkIC0gdmVjMigwLjUsIDAuNSk7XFxuICBmbG9hdCBkaXN0ID0gcmFkaXVzIC0gbGVuZ3RoKG0pO1xcblxcbiAgZmxvYXQgdCA9IDAuMDtcXG4gIGlmIChkaXN0ID4gdl9ib3JkZXIpXFxuICAgIHQgPSAxLjA7XFxuICBlbHNlIGlmIChkaXN0ID4gMC4wKVxcbiAgICB0ID0gZGlzdCAvIHZfYm9yZGVyO1xcblxcbiAgZ2xfRnJhZ0NvbG9yID0gbWl4KHRyYW5zcGFyZW50LCB2X2NvbG9yLCB0KTtcXG59XFxuXCI7bW9kdWxlLmV4cG9ydHM9bn0pKCk7IiwiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG89e2Q6KHQsZSk9Pntmb3IodmFyIG4gaW4gZSlvLm8oZSxuKSYmIW8ubyh0LG4pJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHtlbnVtZXJhYmxlOiEwLGdldDplW25dfSl9LG86KG8sdCk9Pk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLHQpLHI6bz0+e1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9fSx0PXt9O28ucih0KSxvLmQodCx7ZGVmYXVsdDooKT0+ZX0pO2NvbnN0IGU9XCJhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xcbmF0dHJpYnV0ZSBmbG9hdCBhX3NpemU7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5cXG51bmlmb3JtIGZsb2F0IHVfcmF0aW87XFxudW5pZm9ybSBmbG9hdCB1X3NjYWxlO1xcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXG52YXJ5aW5nIGZsb2F0IHZfYm9yZGVyO1xcblxcbmNvbnN0IGZsb2F0IGJpYXMgPSAyNTUuMCAvIDI1NC4wO1xcblxcbnZvaWQgbWFpbigpIHtcXG4gIGdsX1Bvc2l0aW9uID0gdmVjNChcXG4gICAgKHVfbWF0cml4ICogdmVjMyhhX3Bvc2l0aW9uLCAxKSkueHksXFxuICAgIDAsXFxuICAgIDFcXG4gICk7XFxuXFxuICAvLyBNdWx0aXBseSB0aGUgcG9pbnQgc2l6ZSB0d2ljZTpcXG4gIC8vICAtIHggU0NBTElOR19SQVRJTyB0byBjb3JyZWN0IHRoZSBjYW52YXMgc2NhbGluZ1xcbiAgLy8gIC0geCAyIHRvIGNvcnJlY3QgdGhlIGZvcm11bGFlXFxuICBnbF9Qb2ludFNpemUgPSBhX3NpemUgKiB1X3JhdGlvICogdV9zY2FsZSAqIDIuMDtcXG5cXG4gIHZfYm9yZGVyID0gKDEuMCAvIHVfcmF0aW8pICogKDAuNSAvIGFfc2l6ZSk7XFxuXFxuICAvLyBFeHRyYWN0IHRoZSBjb2xvcjpcXG4gIHZfY29sb3IgPSBhX2NvbG9yO1xcbiAgdl9jb2xvci5hICo9IGJpYXM7XFxufVxcblwiO21vZHVsZS5leHBvcnRzPXR9KSgpOyIsIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXtkOihuLHIpPT57Zm9yKHZhciB0IGluIHIpZS5vKHIsdCkmJiFlLm8obix0KSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sdCx7ZW51bWVyYWJsZTohMCxnZXQ6clt0XX0pfSxvOihlLG4pPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSxyOmU9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfX0sbj17fTtlLnIobiksZS5kKG4se2RlZmF1bHQ6KCk9PnJ9KTtjb25zdCByPVwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxudmFyeWluZyB2ZWMyIHZfZGlmZlZlY3RvcjtcXG52YXJ5aW5nIGZsb2F0IHZfcmFkaXVzO1xcbnZhcnlpbmcgZmxvYXQgdl9ib3JkZXI7XFxuXFxuY29uc3QgdmVjNCB0cmFuc3BhcmVudCA9IHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcXG5cXG52b2lkIG1haW4odm9pZCkge1xcbiAgZmxvYXQgZGlzdCA9IGxlbmd0aCh2X2RpZmZWZWN0b3IpIC0gdl9yYWRpdXM7XFxuXFxuICBmbG9hdCB0ID0gMC4wO1xcbiAgaWYgKGRpc3QgPiB2X2JvcmRlcilcXG4gICAgdCA9IDEuMDtcXG4gIGVsc2UgaWYgKGRpc3QgPiAwLjApXFxuICAgIHQgPSBkaXN0IC8gdl9ib3JkZXI7XFxuXFxuICBnbF9GcmFnQ29sb3IgPSBtaXgodl9jb2xvciwgdHJhbnNwYXJlbnQsIHQpO1xcbn1cXG5cIjttb2R1bGUuZXhwb3J0cz1ufSkoKTsiLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgbz17ZDoodCxuKT0+e2Zvcih2YXIgaSBpbiBuKW8ubyhuLGkpJiYhby5vKHQsaSkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkse2VudW1lcmFibGU6ITAsZ2V0Om5baV19KX0sbzoobyx0KT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sdCkscjpvPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkobyxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX19LHQ9e307by5yKHQpLG8uZCh0LHtkZWZhdWx0OigpPT5ufSk7Y29uc3Qgbj1cImF0dHJpYnV0ZSB2ZWMyIGFfcG9zaXRpb247XFxuYXR0cmlidXRlIGZsb2F0IGFfc2l6ZTtcXG5hdHRyaWJ1dGUgZmxvYXQgYV9hbmdsZTtcXG5hdHRyaWJ1dGUgdmVjNCBhX2NvbG9yO1xcblxcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVfc3FydFpvb21SYXRpbztcXG51bmlmb3JtIGZsb2F0IHVfY29ycmVjdGlvblJhdGlvO1xcblxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcbnZhcnlpbmcgdmVjMiB2X2RpZmZWZWN0b3I7XFxudmFyeWluZyBmbG9hdCB2X3JhZGl1cztcXG52YXJ5aW5nIGZsb2F0IHZfYm9yZGVyO1xcblxcbmNvbnN0IGZsb2F0IGJpYXMgPSAyNTUuMCAvIDI1NC4wO1xcbmNvbnN0IGZsb2F0IG1hcmdpblJhdGlvID0gMS4wNTtcXG5cXG52b2lkIG1haW4oKSB7XFxuICBmbG9hdCBzaXplID0gYV9zaXplICogdV9jb3JyZWN0aW9uUmF0aW8gKiB1X3NxcnRab29tUmF0aW8gKiA0LjA7XFxuICB2ZWMyIGRpZmZWZWN0b3IgPSBzaXplICogdmVjMihjb3MoYV9hbmdsZSksIHNpbihhX2FuZ2xlKSk7XFxuICB2ZWMyIHBvc2l0aW9uID0gYV9wb3NpdGlvbiArIGRpZmZWZWN0b3IgKiBtYXJnaW5SYXRpbztcXG4gIGdsX1Bvc2l0aW9uID0gdmVjNChcXG4gICAgKHVfbWF0cml4ICogdmVjMyhwb3NpdGlvbiwgMSkpLnh5LFxcbiAgICAwLFxcbiAgICAxXFxuICApO1xcblxcbiAgdl9ib3JkZXIgPSB1X2NvcnJlY3Rpb25SYXRpbyAqIHVfc3FydFpvb21SYXRpbyAqIHVfc3FydFpvb21SYXRpbztcXG4gIHZfZGlmZlZlY3RvciA9IGRpZmZWZWN0b3I7XFxuICB2X3JhZGl1cyA9IHNpemUgLyAyLjAgLyBtYXJnaW5SYXRpbztcXG5cXG4gIHZfY29sb3IgPSBhX2NvbG9yO1xcbiAgdl9jb2xvci5hICo9IGJpYXM7XFxufVxcblwiO21vZHVsZS5leHBvcnRzPXR9KSgpOyIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBTaWdtYS5qcyBTaGFkZXIgVXRpbHNcbiAqID09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBDb2RlIHVzZWQgdG8gbG9hZCBzaWdtYSdzIHNoYWRlcnMuXG4gKiBAbW9kdWxlXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZFByb2dyYW0gPSBleHBvcnRzLmxvYWRGcmFnbWVudFNoYWRlciA9IGV4cG9ydHMubG9hZFZlcnRleFNoYWRlciA9IHZvaWQgMDtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBsb2FkIGEgc2hhZGVyLlxuICovXG5mdW5jdGlvbiBsb2FkU2hhZGVyKHR5cGUsIGdsLCBzb3VyY2UpIHtcbiAgICB2YXIgZ2xUeXBlID0gdHlwZSA9PT0gXCJWRVJURVhcIiA/IGdsLlZFUlRFWF9TSEFERVIgOiBnbC5GUkFHTUVOVF9TSEFERVI7XG4gICAgLy8gQ3JlYXRpbmcgdGhlIHNoYWRlclxuICAgIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2xUeXBlKTtcbiAgICBpZiAoc2hhZGVyID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImxvYWRTaGFkZXI6IGVycm9yIHdoaWxlIGNyZWF0aW5nIHRoZSBzaGFkZXJcIik7XG4gICAgfVxuICAgIC8vIExvYWRpbmcgc291cmNlXG4gICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcbiAgICAvLyBDb21waWxpbmcgdGhlIHNoYWRlclxuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcbiAgICAvLyBSZXRyaWV2aW5nIGNvbXBpbGF0aW9uIHN0YXR1c1xuICAgIHZhciBzdWNjZXNzZnVsbHlDb21waWxlZCA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcbiAgICAvLyBUaHJvd2luZyBpZiBzb21ldGhpbmcgd2VudCBhd3J5XG4gICAgaWYgKCFzdWNjZXNzZnVsbHlDb21waWxlZCkge1xuICAgICAgICB2YXIgaW5mb0xvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImxvYWRTaGFkZXI6IGVycm9yIHdoaWxlIGNvbXBpbGluZyB0aGUgc2hhZGVyOlxcblwiLmNvbmNhdChpbmZvTG9nLCBcIlxcblwiKS5jb25jYXQoc291cmNlKSk7XG4gICAgfVxuICAgIHJldHVybiBzaGFkZXI7XG59XG5mdW5jdGlvbiBsb2FkVmVydGV4U2hhZGVyKGdsLCBzb3VyY2UpIHtcbiAgICByZXR1cm4gbG9hZFNoYWRlcihcIlZFUlRFWFwiLCBnbCwgc291cmNlKTtcbn1cbmV4cG9ydHMubG9hZFZlcnRleFNoYWRlciA9IGxvYWRWZXJ0ZXhTaGFkZXI7XG5mdW5jdGlvbiBsb2FkRnJhZ21lbnRTaGFkZXIoZ2wsIHNvdXJjZSkge1xuICAgIHJldHVybiBsb2FkU2hhZGVyKFwiRlJBR01FTlRcIiwgZ2wsIHNvdXJjZSk7XG59XG5leHBvcnRzLmxvYWRGcmFnbWVudFNoYWRlciA9IGxvYWRGcmFnbWVudFNoYWRlcjtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBsb2FkIGEgcHJvZ3JhbS5cbiAqL1xuZnVuY3Rpb24gbG9hZFByb2dyYW0oZ2wsIHNoYWRlcnMpIHtcbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICBpZiAocHJvZ3JhbSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJsb2FkUHJvZ3JhbTogZXJyb3Igd2hpbGUgY3JlYXRpbmcgdGhlIHByb2dyYW0uXCIpO1xuICAgIH1cbiAgICB2YXIgaSwgbDtcbiAgICAvLyBBdHRhY2hpbmcgdGhlIHNoYWRlcnNcbiAgICBmb3IgKGkgPSAwLCBsID0gc2hhZGVycy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBzaGFkZXJzW2ldKTtcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAvLyBDaGVja2luZyBzdGF0dXNcbiAgICB2YXIgc3VjY2Vzc2Z1bGx5TGlua2VkID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyk7XG4gICAgaWYgKCFzdWNjZXNzZnVsbHlMaW5rZWQpIHtcbiAgICAgICAgZ2wuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibG9hZFByb2dyYW06IGVycm9yIHdoaWxlIGxpbmtpbmcgdGhlIHByb2dyYW0uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvZ3JhbTtcbn1cbmV4cG9ydHMubG9hZFByb2dyYW0gPSBsb2FkUHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlU2V0dGluZ3MgPSBleHBvcnRzLnZhbGlkYXRlU2V0dGluZ3MgPSBleHBvcnRzLkRFRkFVTFRfRURHRV9QUk9HUkFNX0NMQVNTRVMgPSBleHBvcnRzLkRFRkFVTFRfTk9ERV9QUk9HUkFNX0NMQVNTRVMgPSBleHBvcnRzLkRFRkFVTFRfU0VUVElOR1MgPSB2b2lkIDA7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xudmFyIGxhYmVsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVuZGVyaW5nL2NhbnZhcy9sYWJlbFwiKSk7XG52YXIgaG92ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZW5kZXJpbmcvY2FudmFzL2hvdmVyXCIpKTtcbnZhciBlZGdlX2xhYmVsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVuZGVyaW5nL2NhbnZhcy9lZGdlLWxhYmVsXCIpKTtcbnZhciBub2RlX2Zhc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvbm9kZS5mYXN0XCIpKTtcbnZhciBlZGdlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL2VkZ2VcIikpO1xudmFyIGVkZ2VfYXJyb3dfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvZWRnZS5hcnJvd1wiKSk7XG5leHBvcnRzLkRFRkFVTFRfU0VUVElOR1MgPSB7XG4gICAgLy8gUGVyZm9ybWFuY2VcbiAgICBoaWRlRWRnZXNPbk1vdmU6IGZhbHNlLFxuICAgIGhpZGVMYWJlbHNPbk1vdmU6IGZhbHNlLFxuICAgIHJlbmRlckxhYmVsczogdHJ1ZSxcbiAgICByZW5kZXJFZGdlTGFiZWxzOiBmYWxzZSxcbiAgICBlbmFibGVFZGdlQ2xpY2tFdmVudHM6IGZhbHNlLFxuICAgIGVuYWJsZUVkZ2VXaGVlbEV2ZW50czogZmFsc2UsXG4gICAgZW5hYmxlRWRnZUhvdmVyRXZlbnRzOiBmYWxzZSxcbiAgICAvLyBDb21wb25lbnQgcmVuZGVyaW5nXG4gICAgZGVmYXVsdE5vZGVDb2xvcjogXCIjOTk5XCIsXG4gICAgZGVmYXVsdE5vZGVUeXBlOiBcImNpcmNsZVwiLFxuICAgIGRlZmF1bHRFZGdlQ29sb3I6IFwiI2NjY1wiLFxuICAgIGRlZmF1bHRFZGdlVHlwZTogXCJsaW5lXCIsXG4gICAgbGFiZWxGb250OiBcIkFyaWFsXCIsXG4gICAgbGFiZWxTaXplOiAxNCxcbiAgICBsYWJlbFdlaWdodDogXCJub3JtYWxcIixcbiAgICBsYWJlbENvbG9yOiB7IGNvbG9yOiBcIiMwMDBcIiB9LFxuICAgIGVkZ2VMYWJlbEZvbnQ6IFwiQXJpYWxcIixcbiAgICBlZGdlTGFiZWxTaXplOiAxNCxcbiAgICBlZGdlTGFiZWxXZWlnaHQ6IFwibm9ybWFsXCIsXG4gICAgZWRnZUxhYmVsQ29sb3I6IHsgYXR0cmlidXRlOiBcImNvbG9yXCIgfSxcbiAgICBzdGFnZVBhZGRpbmc6IDMwLFxuICAgIC8vIExhYmVsc1xuICAgIGxhYmVsRGVuc2l0eTogMSxcbiAgICBsYWJlbEdyaWRDZWxsU2l6ZTogMTAwLFxuICAgIGxhYmVsUmVuZGVyZWRTaXplVGhyZXNob2xkOiA2LFxuICAgIC8vIFJlZHVjZXJzXG4gICAgbm9kZVJlZHVjZXI6IG51bGwsXG4gICAgZWRnZVJlZHVjZXI6IG51bGwsXG4gICAgLy8gRmVhdHVyZXNcbiAgICB6SW5kZXg6IGZhbHNlLFxuICAgIG1pbkNhbWVyYVJhdGlvOiBudWxsLFxuICAgIG1heENhbWVyYVJhdGlvOiBudWxsLFxuICAgIC8vIFJlbmRlcmVyc1xuICAgIGxhYmVsUmVuZGVyZXI6IGxhYmVsXzEuZGVmYXVsdCxcbiAgICBob3ZlclJlbmRlcmVyOiBob3Zlcl8xLmRlZmF1bHQsXG4gICAgZWRnZUxhYmVsUmVuZGVyZXI6IGVkZ2VfbGFiZWxfMS5kZWZhdWx0LFxuICAgIC8vIExpZmVjeWNsZVxuICAgIGFsbG93SW52YWxpZENvbnRhaW5lcjogZmFsc2UsXG4gICAgLy8gUHJvZ3JhbSBjbGFzc2VzXG4gICAgbm9kZVByb2dyYW1DbGFzc2VzOiB7fSxcbiAgICBub2RlSG92ZXJQcm9ncmFtQ2xhc3Nlczoge30sXG4gICAgZWRnZVByb2dyYW1DbGFzc2VzOiB7fSxcbn07XG5leHBvcnRzLkRFRkFVTFRfTk9ERV9QUk9HUkFNX0NMQVNTRVMgPSB7XG4gICAgY2lyY2xlOiBub2RlX2Zhc3RfMS5kZWZhdWx0LFxufTtcbmV4cG9ydHMuREVGQVVMVF9FREdFX1BST0dSQU1fQ0xBU1NFUyA9IHtcbiAgICBhcnJvdzogZWRnZV9hcnJvd18xLmRlZmF1bHQsXG4gICAgbGluZTogZWRnZV8xLmRlZmF1bHQsXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MubGFiZWxEZW5zaXR5ICE9PSBcIm51bWJlclwiIHx8IHNldHRpbmdzLmxhYmVsRGVuc2l0eSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0dGluZ3M6IGludmFsaWQgYGxhYmVsRGVuc2l0eWAuIEV4cGVjdGluZyBhIHBvc2l0aXZlIG51bWJlci5cIik7XG4gICAgfVxuICAgIHZhciBtaW5DYW1lcmFSYXRpbyA9IHNldHRpbmdzLm1pbkNhbWVyYVJhdGlvLCBtYXhDYW1lcmFSYXRpbyA9IHNldHRpbmdzLm1heENhbWVyYVJhdGlvO1xuICAgIGlmICh0eXBlb2YgbWluQ2FtZXJhUmF0aW8gPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIG1heENhbWVyYVJhdGlvID09PSBcIm51bWJlclwiICYmIG1heENhbWVyYVJhdGlvIDwgbWluQ2FtZXJhUmF0aW8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0dGluZ3M6IGludmFsaWQgY2FtZXJhIHJhdGlvIGJvdW5kYXJpZXMuIEV4cGVjdGluZyBgbWF4Q2FtZXJhUmF0aW9gIHRvIGJlIGdyZWF0ZXIgdGhhbiBgbWluQ2FtZXJhUmF0aW9gLlwiKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlU2V0dGluZ3MgPSB2YWxpZGF0ZVNldHRpbmdzO1xuZnVuY3Rpb24gcmVzb2x2ZVNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgdmFyIHJlc29sdmVkU2V0dGluZ3MgPSAoMCwgdXRpbHNfMS5hc3NpZ24pKHt9LCBleHBvcnRzLkRFRkFVTFRfU0VUVElOR1MsIHNldHRpbmdzKTtcbiAgICByZXNvbHZlZFNldHRpbmdzLm5vZGVQcm9ncmFtQ2xhc3NlcyA9ICgwLCB1dGlsc18xLmFzc2lnbikoe30sIGV4cG9ydHMuREVGQVVMVF9OT0RFX1BST0dSQU1fQ0xBU1NFUywgcmVzb2x2ZWRTZXR0aW5ncy5ub2RlUHJvZ3JhbUNsYXNzZXMpO1xuICAgIHJlc29sdmVkU2V0dGluZ3MuZWRnZVByb2dyYW1DbGFzc2VzID0gKDAsIHV0aWxzXzEuYXNzaWduKSh7fSwgZXhwb3J0cy5ERUZBVUxUX0VER0VfUFJPR1JBTV9DTEFTU0VTLCByZXNvbHZlZFNldHRpbmdzLmVkZ2VQcm9ncmFtQ2xhc3Nlcyk7XG4gICAgcmV0dXJuIHJlc29sdmVkU2V0dGluZ3M7XG59XG5leHBvcnRzLnJlc29sdmVTZXR0aW5ncyA9IHJlc29sdmVTZXR0aW5ncztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXh0ZW5kXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIkB5b21ndWl0aGVyZWFsL2hlbHBlcnMvZXh0ZW5kXCIpKTtcbnZhciBjYW1lcmFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb3JlL2NhbWVyYVwiKSk7XG52YXIgbW91c2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb3JlL2NhcHRvcnMvbW91c2VcIikpO1xudmFyIHF1YWR0cmVlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29yZS9xdWFkdHJlZVwiKSk7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBsYWJlbHNfMSA9IHJlcXVpcmUoXCIuL2NvcmUvbGFiZWxzXCIpO1xudmFyIHNldHRpbmdzXzEgPSByZXF1aXJlKFwiLi9zZXR0aW5nc1wiKTtcbnZhciB0b3VjaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvcmUvY2FwdG9ycy90b3VjaFwiKSk7XG52YXIgbWF0cmljZXNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL21hdHJpY2VzXCIpO1xudmFyIGVkZ2VfY29sbGlzaW9uc18xID0gcmVxdWlyZShcIi4vdXRpbHMvZWRnZS1jb2xsaXNpb25zXCIpO1xuLyoqXG4gKiBDb25zdGFudHMuXG4gKi9cbnZhciBYX0xBQkVMX01BUkdJTiA9IDE1MDtcbnZhciBZX0xBQkVMX01BUkdJTiA9IDUwO1xuLyoqXG4gKiBJbXBvcnRhbnQgZnVuY3Rpb25zLlxuICovXG5mdW5jdGlvbiBhcHBseU5vZGVEZWZhdWx0cyhzZXR0aW5ncywga2V5LCBkYXRhKSB7XG4gICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KFwieFwiKSB8fCAhZGF0YS5oYXNPd25Qcm9wZXJ0eShcInlcIikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpZ21hOiBjb3VsZCBub3QgZmluZCBhIHZhbGlkIHBvc2l0aW9uICh4LCB5KSBmb3Igbm9kZSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiLiBBbGwgeW91ciBub2RlcyBtdXN0IGhhdmUgYSBudW1iZXIgXFxcInhcXFwiIGFuZCBcXFwieVxcXCIuIE1heWJlIHlvdXIgZm9yZ290IHRvIGFwcGx5IGEgbGF5b3V0IG9yIHlvdXIgXFxcIm5vZGVSZWR1Y2VyXFxcIiBpcyBub3QgcmV0dXJuaW5nIHRoZSBjb3JyZWN0IGRhdGE/XCIpKTtcbiAgICBpZiAoIWRhdGEuY29sb3IpXG4gICAgICAgIGRhdGEuY29sb3IgPSBzZXR0aW5ncy5kZWZhdWx0Tm9kZUNvbG9yO1xuICAgIGlmICghZGF0YS5sYWJlbCAmJiBkYXRhLmxhYmVsICE9PSBcIlwiKVxuICAgICAgICBkYXRhLmxhYmVsID0gbnVsbDtcbiAgICBpZiAoZGF0YS5sYWJlbCAhPT0gdW5kZWZpbmVkICYmIGRhdGEubGFiZWwgIT09IG51bGwpXG4gICAgICAgIGRhdGEubGFiZWwgPSBcIlwiICsgZGF0YS5sYWJlbDtcbiAgICBlbHNlXG4gICAgICAgIGRhdGEubGFiZWwgPSBudWxsO1xuICAgIGlmICghZGF0YS5zaXplKVxuICAgICAgICBkYXRhLnNpemUgPSAyO1xuICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShcImhpZGRlblwiKSlcbiAgICAgICAgZGF0YS5oaWRkZW4gPSBmYWxzZTtcbiAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoXCJoaWdobGlnaHRlZFwiKSlcbiAgICAgICAgZGF0YS5oaWdobGlnaHRlZCA9IGZhbHNlO1xuICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShcImZvcmNlTGFiZWxcIikpXG4gICAgICAgIGRhdGEuZm9yY2VMYWJlbCA9IGZhbHNlO1xuICAgIGlmICghZGF0YS50eXBlIHx8IGRhdGEudHlwZSA9PT0gXCJcIilcbiAgICAgICAgZGF0YS50eXBlID0gc2V0dGluZ3MuZGVmYXVsdE5vZGVUeXBlO1xuICAgIGlmICghZGF0YS56SW5kZXgpXG4gICAgICAgIGRhdGEuekluZGV4ID0gMDtcbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGFwcGx5RWRnZURlZmF1bHRzKHNldHRpbmdzLCBrZXksIGRhdGEpIHtcbiAgICBpZiAoIWRhdGEuY29sb3IpXG4gICAgICAgIGRhdGEuY29sb3IgPSBzZXR0aW5ncy5kZWZhdWx0RWRnZUNvbG9yO1xuICAgIGlmICghZGF0YS5sYWJlbClcbiAgICAgICAgZGF0YS5sYWJlbCA9IFwiXCI7XG4gICAgaWYgKCFkYXRhLnNpemUpXG4gICAgICAgIGRhdGEuc2l6ZSA9IDAuNTtcbiAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoXCJoaWRkZW5cIikpXG4gICAgICAgIGRhdGEuaGlkZGVuID0gZmFsc2U7XG4gICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KFwiZm9yY2VMYWJlbFwiKSlcbiAgICAgICAgZGF0YS5mb3JjZUxhYmVsID0gZmFsc2U7XG4gICAgaWYgKCFkYXRhLnR5cGUgfHwgZGF0YS50eXBlID09PSBcIlwiKVxuICAgICAgICBkYXRhLnR5cGUgPSBzZXR0aW5ncy5kZWZhdWx0RWRnZVR5cGU7XG4gICAgaWYgKCFkYXRhLnpJbmRleClcbiAgICAgICAgZGF0YS56SW5kZXggPSAwO1xuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBNYWluIGNsYXNzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtHcmFwaH0gICAgICAgZ3JhcGggICAgIC0gR3JhcGggdG8gcmVuZGVyLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIC0gRE9NIGNvbnRhaW5lciBpbiB3aGljaCB0byByZW5kZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gICAgICBzZXR0aW5ncyAgLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqL1xudmFyIFNpZ21hID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaWdtYSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTaWdtYShncmFwaCwgY29udGFpbmVyLCBzZXR0aW5ncykge1xuICAgICAgICBpZiAoc2V0dGluZ3MgPT09IHZvaWQgMCkgeyBzZXR0aW5ncyA9IHt9OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIF90aGlzLmNhbnZhc0NvbnRleHRzID0ge307XG4gICAgICAgIF90aGlzLndlYkdMQ29udGV4dHMgPSB7fTtcbiAgICAgICAgX3RoaXMuYWN0aXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIF90aGlzLnF1YWR0cmVlID0gbmV3IHF1YWR0cmVlXzEuZGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5sYWJlbEdyaWQgPSBuZXcgbGFiZWxzXzEuTGFiZWxHcmlkKCk7XG4gICAgICAgIF90aGlzLm5vZGVEYXRhQ2FjaGUgPSB7fTtcbiAgICAgICAgX3RoaXMuZWRnZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICBfdGhpcy5ub2Rlc1dpdGhGb3JjZWRMYWJlbHMgPSBbXTtcbiAgICAgICAgX3RoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzID0gW107XG4gICAgICAgIF90aGlzLm5vZGVFeHRlbnQgPSB7IHg6IFswLCAxXSwgeTogWzAsIDFdIH07XG4gICAgICAgIF90aGlzLm1hdHJpeCA9ICgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpO1xuICAgICAgICBfdGhpcy5pbnZNYXRyaXggPSAoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKTtcbiAgICAgICAgX3RoaXMuY29ycmVjdGlvblJhdGlvID0gMTtcbiAgICAgICAgX3RoaXMuY3VzdG9tQkJveCA9IG51bGw7XG4gICAgICAgIF90aGlzLm5vcm1hbGl6YXRpb25GdW5jdGlvbiA9ICgwLCB1dGlsc18xLmNyZWF0ZU5vcm1hbGl6YXRpb25GdW5jdGlvbikoe1xuICAgICAgICAgICAgeDogWzAsIDFdLFxuICAgICAgICAgICAgeTogWzAsIDFdLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQ2FjaGU6XG4gICAgICAgIF90aGlzLmNhbWVyYVNpemVSYXRpbyA9IDE7XG4gICAgICAgIC8vIFN0YXJ0aW5nIGRpbWVuc2lvbnMgYW5kIHBpeGVsIHJhdGlvXG4gICAgICAgIF90aGlzLndpZHRoID0gMDtcbiAgICAgICAgX3RoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgX3RoaXMucGl4ZWxSYXRpbyA9ICgwLCB1dGlsc18xLmdldFBpeGVsUmF0aW8pKCk7XG4gICAgICAgIC8vIFN0YXRlXG4gICAgICAgIF90aGlzLmRpc3BsYXllZExhYmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgX3RoaXMuaGlnaGxpZ2h0ZWROb2RlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgX3RoaXMuaG92ZXJlZE5vZGUgPSBudWxsO1xuICAgICAgICBfdGhpcy5ob3ZlcmVkRWRnZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgX3RoaXMucmVuZGVySGlnaGxpZ2h0ZWROb2Rlc0ZyYW1lID0gbnVsbDtcbiAgICAgICAgX3RoaXMubmVlZFRvUHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5uZWVkVG9Tb2Z0UHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5jaGVja0VkZ2VzRXZlbnRzRnJhbWUgPSBudWxsO1xuICAgICAgICAvLyBQcm9ncmFtc1xuICAgICAgICBfdGhpcy5ub2RlUHJvZ3JhbXMgPSB7fTtcbiAgICAgICAgX3RoaXMubm9kZUhvdmVyUHJvZ3JhbXMgPSB7fTtcbiAgICAgICAgX3RoaXMuZWRnZVByb2dyYW1zID0ge307XG4gICAgICAgIC8vIFJlc29sdmluZyBzZXR0aW5nc1xuICAgICAgICBfdGhpcy5zZXR0aW5ncyA9ICgwLCBzZXR0aW5nc18xLnJlc29sdmVTZXR0aW5ncykoc2V0dGluZ3MpO1xuICAgICAgICAvLyBWYWxpZGF0aW5nXG4gICAgICAgICgwLCBzZXR0aW5nc18xLnZhbGlkYXRlU2V0dGluZ3MpKF90aGlzLnNldHRpbmdzKTtcbiAgICAgICAgKDAsIHV0aWxzXzEudmFsaWRhdGVHcmFwaCkoZ3JhcGgpO1xuICAgICAgICBpZiAoIShjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogY29udGFpbmVyIHNob3VsZCBiZSBhbiBodG1sIGVsZW1lbnQuXCIpO1xuICAgICAgICAvLyBQcm9wZXJ0aWVzXG4gICAgICAgIF90aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgLy8gSW5pdGlhbGl6aW5nIGNvbnRleHRzXG4gICAgICAgIF90aGlzLmNyZWF0ZVdlYkdMQ29udGV4dChcImVkZ2VzXCIsIHsgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiB0cnVlIH0pO1xuICAgICAgICBfdGhpcy5jcmVhdGVDYW52YXNDb250ZXh0KFwiZWRnZUxhYmVsc1wiKTtcbiAgICAgICAgX3RoaXMuY3JlYXRlV2ViR0xDb250ZXh0KFwibm9kZXNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZUNhbnZhc0NvbnRleHQoXCJsYWJlbHNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZUNhbnZhc0NvbnRleHQoXCJob3ZlcnNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZVdlYkdMQ29udGV4dChcImhvdmVyTm9kZXNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZUNhbnZhc0NvbnRleHQoXCJtb3VzZVwiKTtcbiAgICAgICAgLy8gQmxlbmRpbmdcbiAgICAgICAgZm9yICh2YXIga2V5IGluIF90aGlzLndlYkdMQ29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBnbCA9IF90aGlzLndlYkdMQ29udGV4dHNba2V5XTtcbiAgICAgICAgICAgIGdsLmJsZW5kRnVuYyhnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMb2FkaW5nIHByb2dyYW1zXG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gX3RoaXMuc2V0dGluZ3Mubm9kZVByb2dyYW1DbGFzc2VzKSB7XG4gICAgICAgICAgICB2YXIgTm9kZVByb2dyYW1DbGFzcyA9IF90aGlzLnNldHRpbmdzLm5vZGVQcm9ncmFtQ2xhc3Nlc1t0eXBlXTtcbiAgICAgICAgICAgIF90aGlzLm5vZGVQcm9ncmFtc1t0eXBlXSA9IG5ldyBOb2RlUHJvZ3JhbUNsYXNzKF90aGlzLndlYkdMQ29udGV4dHMubm9kZXMsIF90aGlzKTtcbiAgICAgICAgICAgIHZhciBOb2RlSG92ZXJQcm9ncmFtID0gTm9kZVByb2dyYW1DbGFzcztcbiAgICAgICAgICAgIGlmICh0eXBlIGluIF90aGlzLnNldHRpbmdzLm5vZGVIb3ZlclByb2dyYW1DbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgTm9kZUhvdmVyUHJvZ3JhbSA9IF90aGlzLnNldHRpbmdzLm5vZGVIb3ZlclByb2dyYW1DbGFzc2VzW3R5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMubm9kZUhvdmVyUHJvZ3JhbXNbdHlwZV0gPSBuZXcgTm9kZUhvdmVyUHJvZ3JhbShfdGhpcy53ZWJHTENvbnRleHRzLmhvdmVyTm9kZXMsIF90aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciB0eXBlIGluIF90aGlzLnNldHRpbmdzLmVkZ2VQcm9ncmFtQ2xhc3Nlcykge1xuICAgICAgICAgICAgdmFyIEVkZ2VQcm9ncmFtQ2xhc3MgPSBfdGhpcy5zZXR0aW5ncy5lZGdlUHJvZ3JhbUNsYXNzZXNbdHlwZV07XG4gICAgICAgICAgICBfdGhpcy5lZGdlUHJvZ3JhbXNbdHlwZV0gPSBuZXcgRWRnZVByb2dyYW1DbGFzcyhfdGhpcy53ZWJHTENvbnRleHRzLmVkZ2VzLCBfdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbCByZXNpemVcbiAgICAgICAgX3RoaXMucmVzaXplKCk7XG4gICAgICAgIC8vIEluaXRpYWxpemluZyB0aGUgY2FtZXJhXG4gICAgICAgIF90aGlzLmNhbWVyYSA9IG5ldyBjYW1lcmFfMS5kZWZhdWx0KCk7XG4gICAgICAgIC8vIEJpbmRpbmcgY2FtZXJhIGV2ZW50c1xuICAgICAgICBfdGhpcy5iaW5kQ2FtZXJhSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6aW5nIGNhcHRvcnNcbiAgICAgICAgX3RoaXMubW91c2VDYXB0b3IgPSBuZXcgbW91c2VfMS5kZWZhdWx0KF90aGlzLmVsZW1lbnRzLm1vdXNlLCBfdGhpcyk7XG4gICAgICAgIF90aGlzLnRvdWNoQ2FwdG9yID0gbmV3IHRvdWNoXzEuZGVmYXVsdChfdGhpcy5lbGVtZW50cy5tb3VzZSwgX3RoaXMpO1xuICAgICAgICAvLyBCaW5kaW5nIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIF90aGlzLmJpbmRFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgIC8vIEJpbmRpbmcgZ3JhcGggaGFuZGxlcnNcbiAgICAgICAgX3RoaXMuYmluZEdyYXBoSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gVHJpZ2dlciBldmVudHVhbCBzZXR0aW5ncy1yZWxhdGVkIHRoaW5nc1xuICAgICAgICBfdGhpcy5oYW5kbGVTZXR0aW5nc1VwZGF0ZSgpO1xuICAgICAgICAvLyBQcm9jZXNzaW5nIGRhdGEgZm9yIHRoZSBmaXJzdCB0aW1lICYgcmVuZGVyXG4gICAgICAgIF90aGlzLnByb2Nlc3MoKTtcbiAgICAgICAgX3RoaXMucmVuZGVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogSW50ZXJuYWwgbWV0aG9kcy5cbiAgICAgKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSBhIGNhbnZhcyBlbGVtZW50LlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gaWQgLSBDb250ZXh0J3MgaWQuXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgY2FudmFzID0gKDAsIHV0aWxzXzEuY3JlYXRlRWxlbWVudCkoXCJjYW52YXNcIiwge1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgY2xhc3M6IFwic2lnbWEtXCIuY29uY2F0KGlkKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaWRdID0gY2FudmFzO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgYSBjYW52YXMgY29udGV4dCBhbmQgYWRkIHRoZSByZWxldmFudFxuICAgICAqIERPTSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gaWQgLSBDb250ZXh0J3MgaWQuXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNyZWF0ZUNhbnZhc0NvbnRleHQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuY3JlYXRlQ2FudmFzKGlkKTtcbiAgICAgICAgdmFyIGNvbnRleHRPcHRpb25zID0ge1xuICAgICAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGFudGlhbGlhczogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dHNbaWRdID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCBjb250ZXh0T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgYSBjYW52YXMgY29udGV4dCBhbmQgYWRkIHRoZSByZWxldmFudFxuICAgICAqIERPTSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gIGlkICAgICAgLSBDb250ZXh0J3MgaWQuXG4gICAgICogQHBhcmFtICB7b2JqZWN0P30gb3B0aW9ucyAtICNnZXRDb250ZXh0IHBhcmFtcyB0byBvdmVycmlkZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNyZWF0ZVdlYkdMQ29udGV4dCA9IGZ1bmN0aW9uIChpZCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5jcmVhdGVDYW52YXMoaWQpO1xuICAgICAgICB2YXIgY29udGV4dE9wdGlvbnMgPSBfX2Fzc2lnbih7IHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogZmFsc2UsIGFudGlhbGlhczogZmFsc2UgfSwgKG9wdGlvbnMgfHwge30pKTtcbiAgICAgICAgdmFyIGNvbnRleHQ7XG4gICAgICAgIC8vIEZpcnN0IHdlIHRyeSB3ZWJnbDIgZm9yIGFuIGVhc3kgcGVyZm9ybWFuY2UgYm9vc3RcbiAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2wyXCIsIGNvbnRleHRPcHRpb25zKTtcbiAgICAgICAgLy8gRWxzZSB3ZSBmYWxsIGJhY2sgdG8gd2ViZ2xcbiAgICAgICAgaWYgKCFjb250ZXh0KVxuICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIiwgY29udGV4dE9wdGlvbnMpO1xuICAgICAgICAvLyBFZGdlLCBJIGFtIGxvb2tpbmcgcmlnaHQgYXQgeW91Li4uXG4gICAgICAgIGlmICghY29udGV4dClcbiAgICAgICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcImV4cGVyaW1lbnRhbC13ZWJnbFwiLCBjb250ZXh0T3B0aW9ucyk7XG4gICAgICAgIHRoaXMud2ViR0xDb250ZXh0c1tpZF0gPSBjb250ZXh0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBiaW5kaW5nIGNhbWVyYSBoYW5kbGVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5iaW5kQ2FtZXJhSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNhbWVyYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jYW1lcmEub24oXCJ1cGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNhbWVyYSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIHdoZXRoZXIgb3Igbm90IGEgbm9kZSBjb2xsaWRlcyB3aXRoIGEgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLm1vdXNlSXNPbk5vZGUgPSBmdW5jdGlvbiAoX2EsIF9iLCBzaXplKSB7XG4gICAgICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnk7XG4gICAgICAgIHZhciBub2RlWCA9IF9iLngsIG5vZGVZID0gX2IueTtcbiAgICAgICAgcmV0dXJuICh4ID4gbm9kZVggLSBzaXplICYmXG4gICAgICAgICAgICB4IDwgbm9kZVggKyBzaXplICYmXG4gICAgICAgICAgICB5ID4gbm9kZVkgLSBzaXplICYmXG4gICAgICAgICAgICB5IDwgbm9kZVkgKyBzaXplICYmXG4gICAgICAgICAgICBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIG5vZGVYLCAyKSArIE1hdGgucG93KHkgLSBub2RlWSwgMikpIDwgc2l6ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdGhhdCByZXR1cm5zIGFsbCBub2RlcyBpbiBxdWFkIGF0IGEgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldFF1YWROb2RlcyA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICB2YXIgbW91c2VHcmFwaFBvc2l0aW9uID0gdGhpcy52aWV3cG9ydFRvRnJhbWVkR3JhcGgocG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcy5xdWFkdHJlZS5wb2ludChtb3VzZUdyYXBoUG9zaXRpb24ueCwgMSAtIG1vdXNlR3JhcGhQb3NpdGlvbi55KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJldHVybnMgdGhlIGNsb3Nlc3Qgbm9kZSB0byBhIGdpdmVuIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXROb2RlQXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICB2YXIgeCA9IHBvc2l0aW9uLngsIHkgPSBwb3NpdGlvbi55O1xuICAgICAgICB2YXIgcXVhZE5vZGVzID0gdGhpcy5nZXRRdWFkTm9kZXMocG9zaXRpb24pO1xuICAgICAgICAvLyBXZSB3aWxsIGhvdmVyIHRoZSBub2RlIHdob3NlIGNlbnRlciBpcyBjbG9zZXN0IHRvIG1vdXNlXG4gICAgICAgIHZhciBtaW5EaXN0YW5jZSA9IEluZmluaXR5LCBub2RlQXRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcXVhZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBxdWFkTm9kZXNbaV07XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMubm9kZURhdGFDYWNoZVtub2RlXTtcbiAgICAgICAgICAgIHZhciBub2RlUG9zaXRpb24gPSB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChkYXRhKTtcbiAgICAgICAgICAgIHZhciBzaXplID0gdGhpcy5zY2FsZVNpemUoZGF0YS5zaXplKTtcbiAgICAgICAgICAgIGlmICghZGF0YS5oaWRkZW4gJiYgdGhpcy5tb3VzZUlzT25Ob2RlKHBvc2l0aW9uLCBub2RlUG9zaXRpb24sIHNpemUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KHggLSBub2RlUG9zaXRpb24ueCwgMikgKyBNYXRoLnBvdyh5IC0gbm9kZVBvc2l0aW9uLnksIDIpKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBzb3J0IGJ5IG1pbiBzaXplIGFsc28gZm9yIGNhc2VzIHdoZXJlIGNlbnRlciBpcyB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVBdFBvc2l0aW9uID0gbm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVBdFBvc2l0aW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIGJpbmRpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuYmluZEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIEhhbmRsaW5nIHdpbmRvdyByZXNpemVcbiAgICAgICAgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubmVlZFRvU29mdFByb2Nlc3MgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuX3NjaGVkdWxlUmVmcmVzaCgpO1xuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSZXNpemUpO1xuICAgICAgICAvLyBIYW5kbGluZyBtb3VzZSBtb3ZlXG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGJhc2VFdmVudCA9IHtcbiAgICAgICAgICAgICAgICBldmVudDogZSxcbiAgICAgICAgICAgICAgICBwcmV2ZW50U2lnbWFEZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudFNpZ21hRGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG5vZGVUb0hvdmVyID0gX3RoaXMuZ2V0Tm9kZUF0UG9zaXRpb24oZSk7XG4gICAgICAgICAgICBpZiAobm9kZVRvSG92ZXIgJiYgX3RoaXMuaG92ZXJlZE5vZGUgIT09IG5vZGVUb0hvdmVyICYmICFfdGhpcy5ub2RlRGF0YUNhY2hlW25vZGVUb0hvdmVyXS5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGluZyBwYXNzaW5nIGZyb20gb25lIG5vZGUgdG8gdGhlIG90aGVyIGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmhvdmVyZWROb2RlKVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KFwibGVhdmVOb2RlXCIsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRXZlbnQpLCB7IG5vZGU6IF90aGlzLmhvdmVyZWROb2RlIH0pKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5ob3ZlcmVkTm9kZSA9IG5vZGVUb0hvdmVyO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoXCJlbnRlck5vZGVcIiwgX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VFdmVudCksIHsgbm9kZTogbm9kZVRvSG92ZXIgfSkpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNjaGVkdWxlSGlnaGxpZ2h0ZWROb2Rlc1JlbmRlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBob3ZlcmVkIG5vZGUgaXMgc3RpbGwgaG92ZXJlZFxuICAgICAgICAgICAgaWYgKF90aGlzLmhvdmVyZWROb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5ub2RlRGF0YUNhY2hlW190aGlzLmhvdmVyZWROb2RlXTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gX3RoaXMuZnJhbWVkR3JhcGhUb1ZpZXdwb3J0KGRhdGEpO1xuICAgICAgICAgICAgICAgIHZhciBzaXplID0gX3RoaXMuc2NhbGVTaXplKGRhdGEuc2l6ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tb3VzZUlzT25Ob2RlKGUsIHBvcywgc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBfdGhpcy5ob3ZlcmVkTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaG92ZXJlZE5vZGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KFwibGVhdmVOb2RlXCIsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRXZlbnQpLCB7IG5vZGU6IG5vZGUgfSkpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2hlZHVsZUhpZ2hsaWdodGVkTm9kZXNSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5lbmFibGVFZGdlSG92ZXJFdmVudHMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jaGVja0VkZ2VIb3ZlckV2ZW50cyhiYXNlRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MuZW5hYmxlRWRnZUhvdmVyRXZlbnRzID09PSBcImRlYm91bmNlXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmNoZWNrRWRnZXNFdmVudHNGcmFtZSlcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lID0gKDAsIHV0aWxzXzEucmVxdWVzdEZyYW1lKShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jaGVja0VkZ2VIb3ZlckV2ZW50cyhiYXNlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEhhbmRsaW5nIGNsaWNrXG4gICAgICAgIHZhciBjcmVhdGVNb3VzZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnRTaWdtYURlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudFNpZ21hRGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGlzRmFrZVNpZ21hTW91c2VFdmVudCA9IGUub3JpZ2luYWwuaXNGYWtlU2lnbWFNb3VzZUV2ZW50O1xuICAgICAgICAgICAgICAgIHZhciBub2RlQXRQb3NpdGlvbiA9IGlzRmFrZVNpZ21hTW91c2VFdmVudCA/IF90aGlzLmdldE5vZGVBdFBvc2l0aW9uKGUpIDogX3RoaXMuaG92ZXJlZE5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVBdFBvc2l0aW9uKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcIlwiLmNvbmNhdChldmVudFR5cGUsIFwiTm9kZVwiKSwgX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VFdmVudCksIHsgbm9kZTogbm9kZUF0UG9zaXRpb24gfSkpO1xuICAgICAgICAgICAgICAgIGlmIChldmVudFR5cGUgPT09IFwid2hlZWxcIiA/IF90aGlzLnNldHRpbmdzLmVuYWJsZUVkZ2VXaGVlbEV2ZW50cyA6IF90aGlzLnNldHRpbmdzLmVuYWJsZUVkZ2VDbGlja0V2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWRnZSA9IF90aGlzLmdldEVkZ2VBdFBvaW50KGUueCwgZS55KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcIlwiLmNvbmNhdChldmVudFR5cGUsIFwiRWRnZVwiKSwgX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VFdmVudCksIHsgZWRnZTogZWRnZSB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KFwiXCIuY29uY2F0KGV2ZW50VHlwZSwgXCJTdGFnZVwiKSwgYmFzZUV2ZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZUNsaWNrID0gY3JlYXRlTW91c2VMaXN0ZW5lcihcImNsaWNrXCIpO1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSaWdodENsaWNrID0gY3JlYXRlTW91c2VMaXN0ZW5lcihcInJpZ2h0Q2xpY2tcIik7XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZURvdWJsZUNsaWNrID0gY3JlYXRlTW91c2VMaXN0ZW5lcihcImRvdWJsZUNsaWNrXCIpO1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVXaGVlbCA9IGNyZWF0ZU1vdXNlTGlzdGVuZXIoXCJ3aGVlbFwiKTtcbiAgICAgICAgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuaGFuZGxlRG93biA9IGNyZWF0ZU1vdXNlTGlzdGVuZXIoXCJkb3duXCIpO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLm9uKFwibW91c2Vtb3ZlXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZU1vdmUpO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLm9uKFwiY2xpY2tcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuaGFuZGxlQ2xpY2spO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLm9uKFwicmlnaHRDbGlja1wiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSaWdodENsaWNrKTtcbiAgICAgICAgdGhpcy5tb3VzZUNhcHRvci5vbihcImRvdWJsZUNsaWNrXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZURvdWJsZUNsaWNrKTtcbiAgICAgICAgdGhpcy5tb3VzZUNhcHRvci5vbihcIndoZWVsXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZVdoZWVsKTtcbiAgICAgICAgdGhpcy5tb3VzZUNhcHRvci5vbihcIm1vdXNlZG93blwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVEb3duKTtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyBEZWFsIHdpdGggVG91Y2ggY2FwdG9yIGV2ZW50c1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBiaW5kaW5nIGdyYXBoIGhhbmRsZXJzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuYmluZEdyYXBoSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBncmFwaCA9IHRoaXMuZ3JhcGg7XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubmVlZFRvUHJvY2VzcyA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5fc2NoZWR1bGVSZWZyZXNoKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLnNvZnRHcmFwaFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLm5lZWRUb1NvZnRQcm9jZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZHJvcE5vZGVHcmFwaFVwZGF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMubm9kZURhdGFDYWNoZVtlLmtleV07XG4gICAgICAgICAgICBpZiAoX3RoaXMuaG92ZXJlZE5vZGUgPT09IGUua2V5KVxuICAgICAgICAgICAgICAgIF90aGlzLmhvdmVyZWROb2RlID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5kcm9wRWRnZUdyYXBoVXBkYXRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5lZGdlRGF0YUNhY2hlW2Uua2V5XTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5ob3ZlcmVkRWRnZSA9PT0gZS5rZXkpXG4gICAgICAgICAgICAgICAgX3RoaXMuaG92ZXJlZEVkZ2UgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyRWRnZXNHcmFwaFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmVkZ2VEYXRhQ2FjaGUgPSB7fTtcbiAgICAgICAgICAgIF90aGlzLmhvdmVyZWRFZGdlID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5jbGVhckdyYXBoVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubm9kZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICAgICAgX3RoaXMuaG92ZXJlZE5vZGUgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyRWRnZXNHcmFwaFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBncmFwaC5vbihcIm5vZGVBZGRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwibm9kZURyb3BwZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZHJvcE5vZGVHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLnNvZnRHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwiZWFjaE5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwiZWRnZUFkZGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlZGdlRHJvcHBlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5kcm9wRWRnZUdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuc29mdEdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlYWNoRWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlZGdlc0NsZWFyZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuY2xlYXJFZGdlc0dyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJjbGVhcmVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyR3JhcGhVcGRhdGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHVuYmluZCBoYW5kbGVycyBmcm9tIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUudW5iaW5kR3JhcGhIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgZ3JhcGgucmVtb3ZlTGlzdGVuZXIoXCJub2RlQWRkZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZ3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcIm5vZGVEcm9wcGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmRyb3BOb2RlR3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5zb2Z0R3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcImVhY2hOb2RlQXR0cmlidXRlc1VwZGF0ZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZ3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcImVkZ2VBZGRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWRnZURyb3BwZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZHJvcEVkZ2VHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLnNvZnRHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWFjaEVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWRnZXNDbGVhcmVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyRWRnZXNHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiY2xlYXJlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5jbGVhckdyYXBoVXBkYXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBkZWFsaW5nIHdpdGggXCJsZWF2ZUVkZ2VcIiBhbmQgXCJlbnRlckVkZ2VcIiBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuY2hlY2tFZGdlSG92ZXJFdmVudHMgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICB2YXIgZWRnZVRvSG92ZXIgPSB0aGlzLmhvdmVyZWROb2RlID8gbnVsbCA6IHRoaXMuZ2V0RWRnZUF0UG9pbnQocGF5bG9hZC5ldmVudC54LCBwYXlsb2FkLmV2ZW50LnkpO1xuICAgICAgICBpZiAoZWRnZVRvSG92ZXIgIT09IHRoaXMuaG92ZXJlZEVkZ2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyZWRFZGdlKVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImxlYXZlRWRnZVwiLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcGF5bG9hZCksIHsgZWRnZTogdGhpcy5ob3ZlcmVkRWRnZSB9KSk7XG4gICAgICAgICAgICBpZiAoZWRnZVRvSG92ZXIpXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZW50ZXJFZGdlXCIsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwYXlsb2FkKSwgeyBlZGdlOiBlZGdlVG9Ib3ZlciB9KSk7XG4gICAgICAgICAgICB0aGlzLmhvdmVyZWRFZGdlID0gZWRnZVRvSG92ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgbG9va2luZyBmb3IgYW4gZWRnZSBjb2xsaWRpbmcgd2l0aCBhIGdpdmVuIHBvaW50IGF0ICh4LCB5KS4gUmV0dXJuc1xuICAgICAqIHRoZSBrZXkgb2YgdGhlIGVkZ2UgaWYgYW55LCBvciBudWxsIGVsc2UuXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldEVkZ2VBdFBvaW50ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYiA9IHRoaXMsIGVkZ2VEYXRhQ2FjaGUgPSBfYi5lZGdlRGF0YUNhY2hlLCBub2RlRGF0YUNhY2hlID0gX2Iubm9kZURhdGFDYWNoZTtcbiAgICAgICAgLy8gQ2hlY2sgZmlyc3QgdGhhdCBwaXhlbCBpcyBjb2xvcmVkOlxuICAgICAgICAvLyBOb3RlIHRoYXQgbW91c2UgcG9zaXRpb25zIG11c3QgYmUgY29ycmVjdGVkIGJ5IHBpeGVsIHJhdGlvIHRvIGNvcnJlY3RseVxuICAgICAgICAvLyBpbmRleCB0aGUgZHJhd2luZyBidWZmZXIuXG4gICAgICAgIGlmICghKDAsIGVkZ2VfY29sbGlzaW9uc18xLmlzUGl4ZWxDb2xvcmVkKSh0aGlzLndlYkdMQ29udGV4dHMuZWRnZXMsIHggKiB0aGlzLnBpeGVsUmF0aW8sIHkgKiB0aGlzLnBpeGVsUmF0aW8pKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIENoZWNrIGZvciBlYWNoIGVkZ2UgaWYgaXQgY29sbGlkZXMgd2l0aCB0aGUgcG9pbnQ6XG4gICAgICAgIHZhciBfYyA9IHRoaXMudmlld3BvcnRUb0dyYXBoKHsgeDogeCwgeTogeSB9KSwgZ3JhcGhYID0gX2MueCwgZ3JhcGhZID0gX2MueTtcbiAgICAgICAgLy8gVG8gdHJhbnNsYXRlIGVkZ2UgdGhpY2tuZXNzZXMgdG8gdGhlIGdyYXBoIHN5c3RlbSwgd2Ugb2JzZXJ2ZSBieSBob3cgbXVjaFxuICAgICAgICAvLyB0aGUgbGVuZ3RoIG9mIGEgbm9uLW51bGwgZWRnZSBpcyB0cmFuc2Zvcm1lZCB0byBiZXR3ZWVuIHRoZSBncmFwaCBzeXN0ZW1cbiAgICAgICAgLy8gYW5kIHRoZSB2aWV3cG9ydCBzeXN0ZW06XG4gICAgICAgIHZhciB0cmFuc2Zvcm1hdGlvblJhdGlvID0gMDtcbiAgICAgICAgdGhpcy5ncmFwaC5zb21lRWRnZShmdW5jdGlvbiAoa2V5LCBfLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIF9hLCBfYikge1xuICAgICAgICAgICAgdmFyIHhzID0gX2EueCwgeXMgPSBfYS55O1xuICAgICAgICAgICAgdmFyIHh0ID0gX2IueCwgeXQgPSBfYi55O1xuICAgICAgICAgICAgaWYgKGVkZ2VEYXRhQ2FjaGVba2V5XS5oaWRkZW4gfHwgbm9kZURhdGFDYWNoZVtzb3VyY2VJZF0uaGlkZGVuIHx8IG5vZGVEYXRhQ2FjaGVbdGFyZ2V0SWRdLmhpZGRlbilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoeHMgIT09IHh0IHx8IHlzICE9PSB5dCkge1xuICAgICAgICAgICAgICAgIHZhciBncmFwaExlbmd0aCA9IE1hdGguc3FydChNYXRoLnBvdyh4dCAtIHhzLCAyKSArIE1hdGgucG93KHl0IC0geXMsIDIpKTtcbiAgICAgICAgICAgICAgICB2YXIgX2MgPSBfdGhpcy5ncmFwaFRvVmlld3BvcnQoeyB4OiB4cywgeTogeXMgfSksIHZwX3hzID0gX2MueCwgdnBfeXMgPSBfYy55O1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IF90aGlzLmdyYXBoVG9WaWV3cG9ydCh7IHg6IHh0LCB5OiB5dCB9KSwgdnBfeHQgPSBfZC54LCB2cF95dCA9IF9kLnk7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdwb3J0TGVuZ3RoID0gTWF0aC5zcXJ0KE1hdGgucG93KHZwX3h0IC0gdnBfeHMsIDIpICsgTWF0aC5wb3codnBfeXQgLSB2cF95cywgMikpO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uUmF0aW8gPSBncmFwaExlbmd0aCAvIHZpZXdwb3J0TGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gSWYgbm8gbm9uLW51bGwgZWRnZSBoYXMgYmVlbiBmb3VuZCwgcmV0dXJuIG51bGw6XG4gICAgICAgIGlmICghdHJhbnNmb3JtYXRpb25SYXRpbylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAvLyBOb3cgd2UgY2FuIGxvb2sgZm9yIG1hdGNoaW5nIGVkZ2VzOlxuICAgICAgICB2YXIgZWRnZXMgPSB0aGlzLmdyYXBoLmZpbHRlckVkZ2VzKGZ1bmN0aW9uIChrZXksIGVkZ2VBdHRyaWJ1dGVzLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIHNvdXJjZVBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikge1xuICAgICAgICAgICAgaWYgKGVkZ2VEYXRhQ2FjaGVba2V5XS5oaWRkZW4gfHwgbm9kZURhdGFDYWNoZVtzb3VyY2VJZF0uaGlkZGVuIHx8IG5vZGVEYXRhQ2FjaGVbdGFyZ2V0SWRdLmhpZGRlbilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoKDAsIGVkZ2VfY29sbGlzaW9uc18xLmRvRWRnZUNvbGxpZGVXaXRoUG9pbnQpKGdyYXBoWCwgZ3JhcGhZLCBzb3VyY2VQb3NpdGlvbi54LCBzb3VyY2VQb3NpdGlvbi55LCB0YXJnZXRQb3NpdGlvbi54LCB0YXJnZXRQb3NpdGlvbi55LCBcbiAgICAgICAgICAgIC8vIEFkYXB0IHRoZSBlZGdlIHNpemUgdG8gdGhlIHpvb20gcmF0aW86XG4gICAgICAgICAgICAoZWRnZURhdGFDYWNoZVtrZXldLnNpemUgKiB0cmFuc2Zvcm1hdGlvblJhdGlvKSAvIF90aGlzLmNhbWVyYVNpemVSYXRpbykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlZGdlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gbm8gZWRnZXMgZm91bmRcbiAgICAgICAgLy8gaWYgbm9uZSBvZiB0aGUgZWRnZXMgaGF2ZSBhIHpJbmRleCwgc2VsZWN0ZWQgdGhlIG1vc3QgcmVjZW50bHkgY3JlYXRlZCBvbmUgdG8gbWF0Y2ggdGhlIHJlbmRlcmluZyBvcmRlclxuICAgICAgICB2YXIgc2VsZWN0ZWRFZGdlID0gZWRnZXNbZWRnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIC8vIG90aGVyd2lzZSBzZWxlY3QgZWRnZSB3aXRoIGhpZ2hlc3QgekluZGV4XG4gICAgICAgIHZhciBoaWdoZXN0WkluZGV4ID0gLUluZmluaXR5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgZWRnZXNfMSA9IF9fdmFsdWVzKGVkZ2VzKSwgZWRnZXNfMV8xID0gZWRnZXNfMS5uZXh0KCk7ICFlZGdlc18xXzEuZG9uZTsgZWRnZXNfMV8xID0gZWRnZXNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWRnZSA9IGVkZ2VzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgekluZGV4ID0gdGhpcy5ncmFwaC5nZXRFZGdlQXR0cmlidXRlKGVkZ2UsIFwiekluZGV4XCIpO1xuICAgICAgICAgICAgICAgIGlmICh6SW5kZXggPj0gaGlnaGVzdFpJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEVkZ2UgPSBlZGdlO1xuICAgICAgICAgICAgICAgICAgICBoaWdoZXN0WkluZGV4ID0gekluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGVkZ2VzXzFfMSAmJiAhZWRnZXNfMV8xLmRvbmUgJiYgKF9hID0gZWRnZXNfMS5yZXR1cm4pKSBfYS5jYWxsKGVkZ2VzXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RlZEVkZ2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBwcm9jZXNzIHRoZSB3aG9sZSBncmFwaCdzIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChrZWVwQXJyYXlzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChrZWVwQXJyYXlzID09PSB2b2lkIDApIHsga2VlcEFycmF5cyA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBncmFwaCA9IHRoaXMuZ3JhcGg7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3M7XG4gICAgICAgIHZhciBkaW1lbnNpb25zID0gdGhpcy5nZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHZhciBub2RlWkV4dGVudCA9IFtJbmZpbml0eSwgLUluZmluaXR5XTtcbiAgICAgICAgdmFyIGVkZ2VaRXh0ZW50ID0gW0luZmluaXR5LCAtSW5maW5pdHldO1xuICAgICAgICAvLyBDbGVhcmluZyB0aGUgcXVhZFxuICAgICAgICB0aGlzLnF1YWR0cmVlLmNsZWFyKCk7XG4gICAgICAgIC8vIFJlc2V0dGluZyB0aGUgbGFiZWwgZ3JpZFxuICAgICAgICAvLyBUT0RPOiBpdCdzIHByb2JhYmx5IGJldHRlciB0byBkbyB0aGlzIGV4cGxpY2l0bHkgb3Igb24gcmVzaXplcyBmb3IgbGF5b3V0IGFuZCBhbmltc1xuICAgICAgICB0aGlzLmxhYmVsR3JpZC5yZXNpemVBbmRDbGVhcihkaW1lbnNpb25zLCBzZXR0aW5ncy5sYWJlbEdyaWRDZWxsU2l6ZSk7XG4gICAgICAgIC8vIENsZWFyIHRoZSBoaWdobGlnaHRlZE5vZGVzXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2RlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gQ29tcHV0aW5nIGV4dGVudHNcbiAgICAgICAgdGhpcy5ub2RlRXh0ZW50ID0gKDAsIHV0aWxzXzEuZ3JhcGhFeHRlbnQpKGdyYXBoKTtcbiAgICAgICAgLy8gUmVzZXR0aW5nIGBmb3JjZUxhYmVsYCBpbmRpY2VzXG4gICAgICAgIHRoaXMubm9kZXNXaXRoRm9yY2VkTGFiZWxzID0gW107XG4gICAgICAgIHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzID0gW107XG4gICAgICAgIC8vIE5PVEU6IGl0IGlzIGltcG9ydGFudCB0byBjb21wdXRlIHRoaXMgbWF0cml4IGFmdGVyIGNvbXB1dGluZyB0aGUgbm9kZSdzIGV4dGVudFxuICAgICAgICAvLyBiZWNhdXNlICMuZ2V0R3JhcGhEaW1lbnNpb25zIHJlbGllcyBvbiBpdFxuICAgICAgICB2YXIgbnVsbENhbWVyYSA9IG5ldyBjYW1lcmFfMS5kZWZhdWx0KCk7XG4gICAgICAgIHZhciBudWxsQ2FtZXJhTWF0cml4ID0gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkobnVsbENhbWVyYS5nZXRTdGF0ZSgpLCB0aGlzLmdldERpbWVuc2lvbnMoKSwgdGhpcy5nZXRHcmFwaERpbWVuc2lvbnMoKSwgdGhpcy5nZXRTZXR0aW5nKFwic3RhZ2VQYWRkaW5nXCIpIHx8IDApO1xuICAgICAgICAvLyBSZXNjYWxpbmcgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24gPSAoMCwgdXRpbHNfMS5jcmVhdGVOb3JtYWxpemF0aW9uRnVuY3Rpb24pKHRoaXMuY3VzdG9tQkJveCB8fCB0aGlzLm5vZGVFeHRlbnQpO1xuICAgICAgICB2YXIgbm9kZXNQZXJQcm9ncmFtcyA9IHt9O1xuICAgICAgICB2YXIgbm9kZXMgPSBncmFwaC5ub2RlcygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIC8vIE5vZGUgZGlzcGxheSBkYXRhIHJlc29sdXRpb246XG4gICAgICAgICAgICAvLyAgIDEuIEZpcnN0IHdlIGdldCB0aGUgbm9kZSdzIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIC8vICAgMi4gV2Ugb3B0aW9uYWxseSByZWR1Y2UgdGhlbSB1c2luZyB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgYnkgdGhlIHVzZXJcbiAgICAgICAgICAgIC8vICAgICAgTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gbXVzdCByZXR1cm4gYSB0b3RhbCBvYmplY3QgYW5kIHdvbid0IGJlIG1lcmdlZFxuICAgICAgICAgICAgLy8gICAzLiBXZSBhcHBseSBvdXIgZGVmYXVsdHMsIHdoaWxlIHJ1bm5pbmcgc29tZSB2aXRhbCBjaGVja3NcbiAgICAgICAgICAgIC8vICAgNC4gV2UgYXBwbHkgdGhlIG5vcm1hbGl6YXRpb24gZnVuY3Rpb25cbiAgICAgICAgICAgIC8vIFdlIHNoYWxsb3cgY29weSBub2RlIGRhdGEgdG8gYXZvaWQgZGFuZ2Vyb3VzIGJlaGF2aW9ycyBmcm9tIHJlZHVjZXJzXG4gICAgICAgICAgICB2YXIgYXR0ciA9IE9iamVjdC5hc3NpZ24oe30sIGdyYXBoLmdldE5vZGVBdHRyaWJ1dGVzKG5vZGUpKTtcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5ub2RlUmVkdWNlcilcbiAgICAgICAgICAgICAgICBhdHRyID0gc2V0dGluZ3Mubm9kZVJlZHVjZXIobm9kZSwgYXR0cik7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGFwcGx5Tm9kZURlZmF1bHRzKHRoaXMuc2V0dGluZ3MsIG5vZGUsIGF0dHIpO1xuICAgICAgICAgICAgbm9kZXNQZXJQcm9ncmFtc1tkYXRhLnR5cGVdID0gKG5vZGVzUGVyUHJvZ3JhbXNbZGF0YS50eXBlXSB8fCAwKSArIDE7XG4gICAgICAgICAgICB0aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV0gPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24uYXBwbHlUbyhkYXRhKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmZvcmNlTGFiZWwpXG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlc1dpdGhGb3JjZWRMYWJlbHMucHVzaChub2RlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnpJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnpJbmRleCA8IG5vZGVaRXh0ZW50WzBdKVxuICAgICAgICAgICAgICAgICAgICBub2RlWkV4dGVudFswXSA9IGRhdGEuekluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnpJbmRleCA+IG5vZGVaRXh0ZW50WzFdKVxuICAgICAgICAgICAgICAgICAgICBub2RlWkV4dGVudFsxXSA9IGRhdGEuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5ub2RlUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5ub2RlUHJvZ3JhbXMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogY291bGQgbm90IGZpbmQgYSBzdWl0YWJsZSBwcm9ncmFtIGZvciBub2RlIHR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlLCBcIlxcXCIhXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgha2VlcEFycmF5cylcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVQcm9ncmFtc1t0eXBlXS5hbGxvY2F0ZShub2Rlc1BlclByb2dyYW1zW3R5cGVdIHx8IDApO1xuICAgICAgICAgICAgLy8gV2UgcmVzZXQgdGhhdCBjb3VudCBoZXJlLCBzbyB0aGF0IHdlIGNhbiByZXVzZSBpdCB3aGlsZSBjYWxsaW5nIHRoZSBQcm9ncmFtI3Byb2Nlc3MgbWV0aG9kczpcbiAgICAgICAgICAgIG5vZGVzUGVyUHJvZ3JhbXNbdHlwZV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsaW5nIG5vZGUgei1pbmRleFxuICAgICAgICAvLyBUT0RPOiB6LWluZGV4IG5lZWRzIHVzIHRvIGNvbXB1dGUgZGlzcGxheSBkYXRhIGJlZm9yZSBoYW5kXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnpJbmRleCAmJiBub2RlWkV4dGVudFswXSAhPT0gbm9kZVpFeHRlbnRbMV0pXG4gICAgICAgICAgICBub2RlcyA9ICgwLCB1dGlsc18xLnpJbmRleE9yZGVyaW5nKShub2RlWkV4dGVudCwgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIF90aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV0uekluZGV4OyB9LCBub2Rlcyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV07XG4gICAgICAgICAgICB0aGlzLnF1YWR0cmVlLmFkZChub2RlLCBkYXRhLngsIDEgLSBkYXRhLnksIGRhdGEuc2l6ZSAvIHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhLmxhYmVsID09PSBcInN0cmluZ1wiICYmICFkYXRhLmhpZGRlbilcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsR3JpZC5hZGQobm9kZSwgZGF0YS5zaXplLCB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChkYXRhLCB7IG1hdHJpeDogbnVsbENhbWVyYU1hdHJpeCB9KSk7XG4gICAgICAgICAgICB2YXIgbm9kZVByb2dyYW0gPSB0aGlzLm5vZGVQcm9ncmFtc1tkYXRhLnR5cGVdO1xuICAgICAgICAgICAgaWYgKCFub2RlUHJvZ3JhbSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogY291bGQgbm90IGZpbmQgYSBzdWl0YWJsZSBwcm9ncmFtIGZvciBub2RlIHR5cGUgXFxcIlwiLmNvbmNhdChkYXRhLnR5cGUsIFwiXFxcIiFcIikpO1xuICAgICAgICAgICAgbm9kZVByb2dyYW0ucHJvY2VzcyhkYXRhLCBkYXRhLmhpZGRlbiwgbm9kZXNQZXJQcm9ncmFtc1tkYXRhLnR5cGVdKyspO1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgbm9kZSBpbiB0aGUgaGlnaGxpZ2h0ZWQgc2V0IGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYgKGRhdGEuaGlnaGxpZ2h0ZWQgJiYgIWRhdGEuaGlkZGVuKVxuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYWJlbEdyaWQub3JnYW5pemUoKTtcbiAgICAgICAgdmFyIGVkZ2VzUGVyUHJvZ3JhbXMgPSB7fTtcbiAgICAgICAgdmFyIGVkZ2VzID0gZ3JhcGguZWRnZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlZGdlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlZGdlID0gZWRnZXNbaV07XG4gICAgICAgICAgICAvLyBFZGdlIGRpc3BsYXkgZGF0YSByZXNvbHV0aW9uOlxuICAgICAgICAgICAgLy8gICAxLiBGaXJzdCB3ZSBnZXQgdGhlIGVkZ2UncyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAvLyAgIDIuIFdlIG9wdGlvbmFsbHkgcmVkdWNlIHRoZW0gdXNpbmcgdGhlIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgICAgICAvLyAgICAgIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGEgdG90YWwgb2JqZWN0IGFuZCB3b24ndCBiZSBtZXJnZWRcbiAgICAgICAgICAgIC8vICAgMy4gV2UgYXBwbHkgb3VyIGRlZmF1bHRzLCB3aGlsZSBydW5uaW5nIHNvbWUgdml0YWwgY2hlY2tzXG4gICAgICAgICAgICAvLyBXZSBzaGFsbG93IGNvcHkgZWRnZSBkYXRhIHRvIGF2b2lkIGRhbmdlcm91cyBiZWhhdmlvcnMgZnJvbSByZWR1Y2Vyc1xuICAgICAgICAgICAgdmFyIGF0dHIgPSBPYmplY3QuYXNzaWduKHt9LCBncmFwaC5nZXRFZGdlQXR0cmlidXRlcyhlZGdlKSk7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuZWRnZVJlZHVjZXIpXG4gICAgICAgICAgICAgICAgYXR0ciA9IHNldHRpbmdzLmVkZ2VSZWR1Y2VyKGVkZ2UsIGF0dHIpO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBhcHBseUVkZ2VEZWZhdWx0cyh0aGlzLnNldHRpbmdzLCBlZGdlLCBhdHRyKTtcbiAgICAgICAgICAgIGVkZ2VzUGVyUHJvZ3JhbXNbZGF0YS50eXBlXSA9IChlZGdlc1BlclByb2dyYW1zW2RhdGEudHlwZV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgdGhpcy5lZGdlRGF0YUNhY2hlW2VkZ2VdID0gZGF0YTtcbiAgICAgICAgICAgIGlmIChkYXRhLmZvcmNlTGFiZWwgJiYgIWRhdGEuaGlkZGVuKVxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzLnB1c2goZWRnZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy56SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS56SW5kZXggPCBlZGdlWkV4dGVudFswXSlcbiAgICAgICAgICAgICAgICAgICAgZWRnZVpFeHRlbnRbMF0gPSBkYXRhLnpJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS56SW5kZXggPiBlZGdlWkV4dGVudFsxXSlcbiAgICAgICAgICAgICAgICAgICAgZWRnZVpFeHRlbnRbMV0gPSBkYXRhLnpJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMuZWRnZVByb2dyYW1zKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWRnZVByb2dyYW1zLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbWE6IGNvdWxkIG5vdCBmaW5kIGEgc3VpdGFibGUgcHJvZ3JhbSBmb3IgZWRnZSB0eXBlIFxcXCJcIi5jb25jYXQodHlwZSwgXCJcXFwiIVwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWtlZXBBcnJheXMpXG4gICAgICAgICAgICAgICAgdGhpcy5lZGdlUHJvZ3JhbXNbdHlwZV0uYWxsb2NhdGUoZWRnZXNQZXJQcm9ncmFtc1t0eXBlXSB8fCAwKTtcbiAgICAgICAgICAgIC8vIFdlIHJlc2V0IHRoYXQgY291bnQgaGVyZSwgc28gdGhhdCB3ZSBjYW4gcmV1c2UgaXQgd2hpbGUgY2FsbGluZyB0aGUgUHJvZ3JhbSNwcm9jZXNzIG1ldGhvZHM6XG4gICAgICAgICAgICBlZGdlc1BlclByb2dyYW1zW3R5cGVdID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGluZyBlZGdlIHotaW5kZXhcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuekluZGV4ICYmIGVkZ2VaRXh0ZW50WzBdICE9PSBlZGdlWkV4dGVudFsxXSlcbiAgICAgICAgICAgIGVkZ2VzID0gKDAsIHV0aWxzXzEuekluZGV4T3JkZXJpbmcpKGVkZ2VaRXh0ZW50LCBmdW5jdGlvbiAoZWRnZSkgeyByZXR1cm4gX3RoaXMuZWRnZURhdGFDYWNoZVtlZGdlXS56SW5kZXg7IH0sIGVkZ2VzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlZGdlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlZGdlID0gZWRnZXNbaV07XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZWRnZURhdGFDYWNoZVtlZGdlXTtcbiAgICAgICAgICAgIHZhciBleHRyZW1pdGllcyA9IGdyYXBoLmV4dHJlbWl0aWVzKGVkZ2UpLCBzb3VyY2VEYXRhID0gdGhpcy5ub2RlRGF0YUNhY2hlW2V4dHJlbWl0aWVzWzBdXSwgdGFyZ2V0RGF0YSA9IHRoaXMubm9kZURhdGFDYWNoZVtleHRyZW1pdGllc1sxXV07XG4gICAgICAgICAgICB2YXIgaGlkZGVuID0gZGF0YS5oaWRkZW4gfHwgc291cmNlRGF0YS5oaWRkZW4gfHwgdGFyZ2V0RGF0YS5oaWRkZW47XG4gICAgICAgICAgICB0aGlzLmVkZ2VQcm9ncmFtc1tkYXRhLnR5cGVdLnByb2Nlc3Moc291cmNlRGF0YSwgdGFyZ2V0RGF0YSwgZGF0YSwgaGlkZGVuLCBlZGdlc1BlclByb2dyYW1zW2RhdGEudHlwZV0rKyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgdHlwZSBpbiB0aGlzLmVkZ2VQcm9ncmFtcykge1xuICAgICAgICAgICAgdmFyIHByb2dyYW0gPSB0aGlzLmVkZ2VQcm9ncmFtc1t0eXBlXTtcbiAgICAgICAgICAgIGlmICgha2VlcEFycmF5cyAmJiB0eXBlb2YgcHJvZ3JhbS5jb21wdXRlSW5kaWNlcyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIHByb2dyYW0uY29tcHV0ZUluZGljZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGJhY2twb3J0cyBwb3RlbnRpYWwgc2V0dGluZ3MgdXBkYXRlcyB3aGVyZSBpdCdzIG5lZWRlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5oYW5kbGVTZXR0aW5nc1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEubWluUmF0aW8gPSB0aGlzLnNldHRpbmdzLm1pbkNhbWVyYVJhdGlvO1xuICAgICAgICB0aGlzLmNhbWVyYS5tYXhSYXRpbyA9IHRoaXMuc2V0dGluZ3MubWF4Q2FtZXJhUmF0aW87XG4gICAgICAgIHRoaXMuY2FtZXJhLnNldFN0YXRlKHRoaXMuY2FtZXJhLnZhbGlkYXRlU3RhdGUodGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlY2lkZXMgd2hldGhlciB0byByZXByb2Nlc3MgZ3JhcGggb3Igbm90LCBhbmQgdGhlbiByZW5kZXIgdGhlXG4gICAgICogZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuX3JlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERvIHdlIG5lZWQgdG8gcHJvY2VzcyBkYXRhP1xuICAgICAgICBpZiAodGhpcy5uZWVkVG9Qcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm5lZWRUb1NvZnRQcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3ModHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXR0aW5nIHN0YXRlXG4gICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5lZWRUb1NvZnRQcm9jZXNzID0gZmFsc2U7XG4gICAgICAgIC8vIFJlbmRlcmluZ1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHNjaGVkdWxlcyBhIGBfcmVmcmVzaGAgY2FsbCBpZiBub25lIGhhcyBiZWVuIHNjaGVkdWxlZCB5ZXQuIEl0XG4gICAgICogd2lsbCB0aGVuIGJlIHByb2Nlc3NlZCBuZXh0IGF2YWlsYWJsZSBmcmFtZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5fc2NoZWR1bGVSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMucmVuZGVyRnJhbWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRnJhbWUgPSAoMCwgdXRpbHNfMS5yZXF1ZXN0RnJhbWUpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVuZGVyIGxhYmVscy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5yZW5kZXJMYWJlbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5yZW5kZXJMYWJlbHMpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdmFyIGNhbWVyYVN0YXRlID0gdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKTtcbiAgICAgICAgLy8gU2VsZWN0aW5nIGxhYmVscyB0byBkcmF3XG4gICAgICAgIHZhciBsYWJlbHNUb0Rpc3BsYXkgPSB0aGlzLmxhYmVsR3JpZC5nZXRMYWJlbHNUb0Rpc3BsYXkoY2FtZXJhU3RhdGUucmF0aW8sIHRoaXMuc2V0dGluZ3MubGFiZWxEZW5zaXR5KTtcbiAgICAgICAgKDAsIGV4dGVuZF8xLmRlZmF1bHQpKGxhYmVsc1RvRGlzcGxheSwgdGhpcy5ub2Rlc1dpdGhGb3JjZWRMYWJlbHMpO1xuICAgICAgICB0aGlzLmRpc3BsYXllZExhYmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gRHJhd2luZyBsYWJlbHNcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNhbnZhc0NvbnRleHRzLmxhYmVscztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsYWJlbHNUb0Rpc3BsYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGxhYmVsc1RvRGlzcGxheVtpXTtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5ub2RlRGF0YUNhY2hlW25vZGVdO1xuICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgd2FzIGFscmVhZHkgZHJhd24gKGxpa2UgaWYgaXQgaXMgZWxpZ2libGUgQU5EIGhhc1xuICAgICAgICAgICAgLy8gYGZvcmNlTGFiZWxgKSwgd2UgZG9uJ3Qgd2FudCB0byBkcmF3IGl0IGFnYWluXG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSBjYW4gZG8gYmV0dGVyIHByb2JhYmx5XG4gICAgICAgICAgICBpZiAodGhpcy5kaXNwbGF5ZWRMYWJlbHMuaGFzKG5vZGUpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgaXMgaGlkZGVuLCB3ZSBkb24ndCBuZWVkIHRvIGRpc3BsYXkgaXRzIGxhYmVsIG9idmlvdXNseVxuICAgICAgICAgICAgaWYgKGRhdGEuaGlkZGVuKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5mcmFtZWRHcmFwaFRvVmlld3BvcnQoZGF0YSksIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICAgICAgICAgIC8vIE5PVEU6IHdlIGNhbiBjYWNoZSB0aGUgbGFiZWxzIHdlIG5lZWQgdG8gcmVuZGVyIHVudGlsIHRoZSBjYW1lcmEncyByYXRpbyBjaGFuZ2VzXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuc2NhbGVTaXplKGRhdGEuc2l6ZSk7XG4gICAgICAgICAgICAvLyBJcyBub2RlIGJpZyBlbm91Z2g/XG4gICAgICAgICAgICBpZiAoIWRhdGEuZm9yY2VMYWJlbCAmJiBzaXplIDwgdGhpcy5zZXR0aW5ncy5sYWJlbFJlbmRlcmVkU2l6ZVRocmVzaG9sZClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIElzIG5vZGUgYWN0dWFsbHkgb24gc2NyZWVuICh3aXRoIHNvbWUgbWFyZ2luKVxuICAgICAgICAgICAgLy8gTk9URTogd2UgdXNlZCB0byByZWx5IG9uIHRoZSBxdWFkdHJlZSBmb3IgdGhpcywgYnV0IHRoZSBjb29yZGluYXRlc1xuICAgICAgICAgICAgLy8gY29udmVyc2lvbiBtYWtlIGl0IHVucmVsaWFibGUgYW5kIGF0IHRoYXQgcG9pbnQgd2UgYWxyZWFkeSBjb252ZXJ0ZWRcbiAgICAgICAgICAgIC8vIHRvIHZpZXdwb3J0IGNvb3JkaW5hdGVzIGFuZCBzaW5jZSB0aGUgbGFiZWwgZ3JpZCBhbHJlYWR5IGN1bGxzIHRoZVxuICAgICAgICAgICAgLy8gbnVtYmVyIG9mIHBvdGVudGlhbCBsYWJlbHMgdG8gZGlzcGxheSB0aGlzIGxvb2tzIGxpa2UgYSBnb29kXG4gICAgICAgICAgICAvLyBwZXJmb3JtYW5jZSBjb21wcm9taXNlLlxuICAgICAgICAgICAgLy8gTk9URTogbGFiZWxHcmlkLmdldExhYmVsc1RvRGlzcGxheSBjb3VsZCBwcm9iYWJseSBvcHRpbWl6ZSBieSBub3RcbiAgICAgICAgICAgIC8vIGNvbnNpZGVyaW5nIGNlbGxzIG9idmlvdXNseSBvdXRzaWRlIG9mIHRoZSByYW5nZSBvZiB0aGUgY3VycmVudFxuICAgICAgICAgICAgLy8gdmlldyByZWN0YW5nbGUuXG4gICAgICAgICAgICBpZiAoeCA8IC1YX0xBQkVMX01BUkdJTiB8fFxuICAgICAgICAgICAgICAgIHggPiB0aGlzLndpZHRoICsgWF9MQUJFTF9NQVJHSU4gfHxcbiAgICAgICAgICAgICAgICB5IDwgLVlfTEFCRUxfTUFSR0lOIHx8XG4gICAgICAgICAgICAgICAgeSA+IHRoaXMuaGVpZ2h0ICsgWV9MQUJFTF9NQVJHSU4pXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBCZWNhdXNlIGRpc3BsYXllZCBlZGdlIGxhYmVscyBkZXBlbmQgZGlyZWN0bHkgb24gYWN0dWFsbHkgcmVuZGVyZWQgbm9kZVxuICAgICAgICAgICAgLy8gbGFiZWxzLCB3ZSBuZWVkIHRvIG9ubHkgYWRkIHRvIHRoaXMuZGlzcGxheWVkTGFiZWxzIG5vZGVzIHdob3NlIGxhYmVsXG4gICAgICAgICAgICAvLyBpcyByZW5kZXJlZC5cbiAgICAgICAgICAgIC8vIFRoaXMgbWFrZXMgdGhpcy5kaXNwbGF5ZWRMYWJlbHMgZGVwZW5kIG9uIHZpZXdwb3J0LCB3aGljaCBtaWdodCBiZWNvbWVcbiAgICAgICAgICAgIC8vIGFuIGlzc3VlIG9uY2Ugd2Ugc3RhcnQgbWVtb2l6aW5nIGdldExhYmVsc1RvRGlzcGxheS5cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkTGFiZWxzLmFkZChub2RlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubGFiZWxSZW5kZXJlcihjb250ZXh0LCBfX2Fzc2lnbihfX2Fzc2lnbih7IGtleTogbm9kZSB9LCBkYXRhKSwgeyBzaXplOiBzaXplLCB4OiB4LCB5OiB5IH0pLCB0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJlbmRlciBlZGdlIGxhYmVscywgYmFzZWQgb24gd2hpY2ggbm9kZSBsYWJlbHMgd2VyZVxuICAgICAqIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnJlbmRlckVkZ2VMYWJlbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5yZW5kZXJFZGdlTGFiZWxzKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jYW52YXNDb250ZXh0cy5lZGdlTGFiZWxzO1xuICAgICAgICAvLyBDbGVhcmluZ1xuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHZhciBlZGdlTGFiZWxzVG9EaXNwbGF5ID0gKDAsIGxhYmVsc18xLmVkZ2VMYWJlbHNUb0Rpc3BsYXlGcm9tTm9kZXMpKHtcbiAgICAgICAgICAgIGdyYXBoOiB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgaG92ZXJlZE5vZGU6IHRoaXMuaG92ZXJlZE5vZGUsXG4gICAgICAgICAgICBkaXNwbGF5ZWROb2RlTGFiZWxzOiB0aGlzLmRpc3BsYXllZExhYmVscyxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkTm9kZXM6IHRoaXMuaGlnaGxpZ2h0ZWROb2RlcyxcbiAgICAgICAgfSkuY29uY2F0KHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzKTtcbiAgICAgICAgdmFyIGRpc3BsYXllZExhYmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlZGdlTGFiZWxzVG9EaXNwbGF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGVkZ2UgPSBlZGdlTGFiZWxzVG9EaXNwbGF5W2ldLCBleHRyZW1pdGllcyA9IHRoaXMuZ3JhcGguZXh0cmVtaXRpZXMoZWRnZSksIHNvdXJjZURhdGEgPSB0aGlzLm5vZGVEYXRhQ2FjaGVbZXh0cmVtaXRpZXNbMF1dLCB0YXJnZXREYXRhID0gdGhpcy5ub2RlRGF0YUNhY2hlW2V4dHJlbWl0aWVzWzFdXSwgZWRnZURhdGEgPSB0aGlzLmVkZ2VEYXRhQ2FjaGVbZWRnZV07XG4gICAgICAgICAgICAvLyBJZiB0aGUgZWRnZSB3YXMgYWxyZWFkeSBkcmF3biAobGlrZSBpZiBpdCBpcyBlbGlnaWJsZSBBTkQgaGFzXG4gICAgICAgICAgICAvLyBgZm9yY2VMYWJlbGApLCB3ZSBkb24ndCB3YW50IHRvIGRyYXcgaXQgYWdhaW5cbiAgICAgICAgICAgIGlmIChkaXNwbGF5ZWRMYWJlbHMuaGFzKGVkZ2UpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGVkZ2UgaXMgaGlkZGVuIHdlIGRvbid0IG5lZWQgdG8gZGlzcGxheSBpdHMgbGFiZWxcbiAgICAgICAgICAgIC8vIE5PVEU6IHRoZSB0ZXN0IG9uIHNvdXJjZURhdGEgJiB0YXJnZXREYXRhIGlzIHByb2JhYmx5IHBhcmFub2lkIGF0IHRoaXMgcG9pbnQ/XG4gICAgICAgICAgICBpZiAoZWRnZURhdGEuaGlkZGVuIHx8IHNvdXJjZURhdGEuaGlkZGVuIHx8IHRhcmdldERhdGEuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmVkZ2VMYWJlbFJlbmRlcmVyKGNvbnRleHQsIF9fYXNzaWduKF9fYXNzaWduKHsga2V5OiBlZGdlIH0sIGVkZ2VEYXRhKSwgeyBzaXplOiB0aGlzLnNjYWxlU2l6ZShlZGdlRGF0YS5zaXplKSB9KSwgX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oeyBrZXk6IGV4dHJlbWl0aWVzWzBdIH0sIHNvdXJjZURhdGEpLCB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChzb3VyY2VEYXRhKSksIHsgc2l6ZTogdGhpcy5zY2FsZVNpemUoc291cmNlRGF0YS5zaXplKSB9KSwgX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oeyBrZXk6IGV4dHJlbWl0aWVzWzFdIH0sIHRhcmdldERhdGEpLCB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydCh0YXJnZXREYXRhKSksIHsgc2l6ZTogdGhpcy5zY2FsZVNpemUodGFyZ2V0RGF0YS5zaXplKSB9KSwgdGhpcy5zZXR0aW5ncyk7XG4gICAgICAgICAgICBkaXNwbGF5ZWRMYWJlbHMuYWRkKGVkZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVuZGVyIHRoZSBoaWdobGlnaHRlZCBub2Rlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5yZW5kZXJIaWdobGlnaHRlZE5vZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY2FudmFzQ29udGV4dHMuaG92ZXJzO1xuICAgICAgICAvLyBDbGVhcmluZ1xuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIC8vIFJlbmRlcmluZ1xuICAgICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXMubm9kZURhdGFDYWNoZVtub2RlXTtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChkYXRhKSwgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICAgICAgdmFyIHNpemUgPSBfdGhpcy5zY2FsZVNpemUoZGF0YS5zaXplKTtcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmhvdmVyUmVuZGVyZXIoY29udGV4dCwgX19hc3NpZ24oX19hc3NpZ24oeyBrZXk6IG5vZGUgfSwgZGF0YSksIHsgc2l6ZTogc2l6ZSwgeDogeCwgeTogeSB9KSwgX3RoaXMuc2V0dGluZ3MpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgbm9kZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICBpZiAodGhpcy5ob3ZlcmVkTm9kZSAmJiAhdGhpcy5ub2RlRGF0YUNhY2hlW3RoaXMuaG92ZXJlZE5vZGVdLmhpZGRlbikge1xuICAgICAgICAgICAgbm9kZXNUb1JlbmRlci5wdXNoKHRoaXMuaG92ZXJlZE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAvLyBUaGUgaG92ZXJlZCBub2RlIGhhcyBhbHJlYWR5IGJlZW4gaGlnaGxpZ2h0ZWRcbiAgICAgICAgICAgIGlmIChub2RlICE9PSBfdGhpcy5ob3ZlcmVkTm9kZSlcbiAgICAgICAgICAgICAgICBub2Rlc1RvUmVuZGVyLnB1c2gobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBEcmF3IGxhYmVsczpcbiAgICAgICAgbm9kZXNUb1JlbmRlci5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiByZW5kZXIobm9kZSk7IH0pO1xuICAgICAgICAvLyBEcmF3IFdlYkdMIG5vZGVzIG9uIHRvcCBvZiB0aGUgbGFiZWxzOlxuICAgICAgICB2YXIgbm9kZXNQZXJQcm9ncmFtcyA9IHt9O1xuICAgICAgICAvLyAxLiBDb3VudCBub2RlcyBwZXIgdHlwZTpcbiAgICAgICAgbm9kZXNUb1JlbmRlci5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IF90aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV0udHlwZTtcbiAgICAgICAgICAgIG5vZGVzUGVyUHJvZ3JhbXNbdHlwZV0gPSAobm9kZXNQZXJQcm9ncmFtc1t0eXBlXSB8fCAwKSArIDE7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyAyLiBBbGxvY2F0ZSBmb3IgZWFjaCB0eXBlIGZvciB0aGUgcHJvcGVyIG51bWJlciBvZiBub2Rlc1xuICAgICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMubm9kZUhvdmVyUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZUhvdmVyUHJvZ3JhbXNbdHlwZV0uYWxsb2NhdGUobm9kZXNQZXJQcm9ncmFtc1t0eXBlXSB8fCAwKTtcbiAgICAgICAgICAgIC8vIEFsc28gcmVzZXQgY291bnQsIHRvIHVzZSB3aGVuIHJlbmRlcmluZzpcbiAgICAgICAgICAgIG5vZGVzUGVyUHJvZ3JhbXNbdHlwZV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuIFByb2Nlc3MgYWxsIG5vZGVzIHRvIHJlbmRlcjpcbiAgICAgICAgbm9kZXNUb1JlbmRlci5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV07XG4gICAgICAgICAgICBfdGhpcy5ub2RlSG92ZXJQcm9ncmFtc1tkYXRhLnR5cGVdLnByb2Nlc3MoZGF0YSwgZGF0YS5oaWRkZW4sIG5vZGVzUGVyUHJvZ3JhbXNbZGF0YS50eXBlXSsrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIDQuIENsZWFyIGhvdmVyZWQgbm9kZXMgbGF5ZXI6XG4gICAgICAgIHRoaXMud2ViR0xDb250ZXh0cy5ob3Zlck5vZGVzLmNsZWFyKHRoaXMud2ViR0xDb250ZXh0cy5ob3Zlck5vZGVzLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgICAgICAvLyA1LiBSZW5kZXI6XG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5ub2RlSG92ZXJQcm9ncmFtcykge1xuICAgICAgICAgICAgdmFyIHByb2dyYW0gPSB0aGlzLm5vZGVIb3ZlclByb2dyYW1zW3R5cGVdO1xuICAgICAgICAgICAgcHJvZ3JhbS5iaW5kKCk7XG4gICAgICAgICAgICBwcm9ncmFtLmJ1ZmZlckRhdGEoKTtcbiAgICAgICAgICAgIHByb2dyYW0ucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBtYXRyaXg6IHRoaXMubWF0cml4LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmF0aW86IHRoaXMuY2FtZXJhLnJhdGlvLFxuICAgICAgICAgICAgICAgIGNvcnJlY3Rpb25SYXRpbzogdGhpcy5jb3JyZWN0aW9uUmF0aW8gLyB0aGlzLmNhbWVyYS5yYXRpbyxcbiAgICAgICAgICAgICAgICBzY2FsaW5nUmF0aW86IHRoaXMucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBzY2hlZHVsZSBhIGhvdmVyIHJlbmRlci5cbiAgICAgKlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5zY2hlZHVsZUhpZ2hsaWdodGVkTm9kZXNSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSB8fCB0aGlzLnJlbmRlckZyYW1lKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSA9ICgwLCB1dGlsc18xLnJlcXVlc3RGcmFtZSkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUmVzZXR0aW5nIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJIaWdobGlnaHRlZE5vZGVzRnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgLy8gUmVuZGVyaW5nXG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJIaWdobGlnaHRlZE5vZGVzKCk7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJFZGdlTGFiZWxzKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVuZGVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0KFwiYmVmb3JlUmVuZGVyXCIpO1xuICAgICAgICB2YXIgZXhpdFJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmVtaXQoXCJhZnRlclJlbmRlclwiKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgYSByZW5kZXIgd2FzIHNjaGVkdWxlZCwgd2UgY2FuY2VsIGl0XG4gICAgICAgIGlmICh0aGlzLnJlbmRlckZyYW1lKSB7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5jYW5jZWxGcmFtZSkodGhpcy5yZW5kZXJGcmFtZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5uZWVkVG9Tb2Z0UHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpcnN0IHdlIG5lZWQgdG8gcmVzaXplXG4gICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIC8vIENsZWFyaW5nIHRoZSBjYW52YXNlc1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIC8vIFJlY29tcHV0aW5nIHVzZWZ1bCBjYW1lcmEtcmVsYXRlZCB2YWx1ZXM6XG4gICAgICAgIHRoaXMudXBkYXRlQ2FjaGVkVmFsdWVzKCk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbm8gbm9kZXMgd2UgY2FuIHN0b3AgcmlnaHQgdGhlcmVcbiAgICAgICAgaWYgKCF0aGlzLmdyYXBoLm9yZGVyKVxuICAgICAgICAgICAgcmV0dXJuIGV4aXRSZW5kZXIoKTtcbiAgICAgICAgLy8gVE9ETzogaW1wcm92ZSB0aGlzIGhldXJpc3RpYyBvciBtb3ZlIHRvIHRoZSBjYXB0b3IgaXRzZWxmP1xuICAgICAgICAvLyBUT0RPOiBkZWFsIHdpdGggdGhlIHRvdWNoIGNhcHRvciBoZXJlIGFzIHdlbGxcbiAgICAgICAgdmFyIG1vdXNlQ2FwdG9yID0gdGhpcy5tb3VzZUNhcHRvcjtcbiAgICAgICAgdmFyIG1vdmluZyA9IHRoaXMuY2FtZXJhLmlzQW5pbWF0ZWQoKSB8fFxuICAgICAgICAgICAgbW91c2VDYXB0b3IuaXNNb3ZpbmcgfHxcbiAgICAgICAgICAgIG1vdXNlQ2FwdG9yLmRyYWdnZWRFdmVudHMgfHxcbiAgICAgICAgICAgIG1vdXNlQ2FwdG9yLmN1cnJlbnRXaGVlbERpcmVjdGlvbjtcbiAgICAgICAgLy8gVGhlbiB3ZSBuZWVkIHRvIGV4dHJhY3QgYSBtYXRyaXggZnJvbSB0aGUgY2FtZXJhXG4gICAgICAgIHZhciBjYW1lcmFTdGF0ZSA9IHRoaXMuY2FtZXJhLmdldFN0YXRlKCk7XG4gICAgICAgIHZhciB2aWV3cG9ydERpbWVuc2lvbnMgPSB0aGlzLmdldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdmFyIGdyYXBoRGltZW5zaW9ucyA9IHRoaXMuZ2V0R3JhcGhEaW1lbnNpb25zKCk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5nZXRTZXR0aW5nKFwic3RhZ2VQYWRkaW5nXCIpIHx8IDA7XG4gICAgICAgIHRoaXMubWF0cml4ID0gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkoY2FtZXJhU3RhdGUsIHZpZXdwb3J0RGltZW5zaW9ucywgZ3JhcGhEaW1lbnNpb25zLCBwYWRkaW5nKTtcbiAgICAgICAgdGhpcy5pbnZNYXRyaXggPSAoMCwgdXRpbHNfMS5tYXRyaXhGcm9tQ2FtZXJhKShjYW1lcmFTdGF0ZSwgdmlld3BvcnREaW1lbnNpb25zLCBncmFwaERpbWVuc2lvbnMsIHBhZGRpbmcsIHRydWUpO1xuICAgICAgICB0aGlzLmNvcnJlY3Rpb25SYXRpbyA9ICgwLCB1dGlsc18xLmdldE1hdHJpeEltcGFjdCkodGhpcy5tYXRyaXgsIGNhbWVyYVN0YXRlLCB2aWV3cG9ydERpbWVuc2lvbnMpO1xuICAgICAgICAvLyBEcmF3aW5nIG5vZGVzXG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5ub2RlUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5ub2RlUHJvZ3JhbXNbdHlwZV07XG4gICAgICAgICAgICBwcm9ncmFtLmJpbmQoKTtcbiAgICAgICAgICAgIHByb2dyYW0uYnVmZmVyRGF0YSgpO1xuICAgICAgICAgICAgcHJvZ3JhbS5yZW5kZXIoe1xuICAgICAgICAgICAgICAgIG1hdHJpeDogdGhpcy5tYXRyaXgsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgICAgICByYXRpbzogY2FtZXJhU3RhdGUucmF0aW8sXG4gICAgICAgICAgICAgICAgY29ycmVjdGlvblJhdGlvOiB0aGlzLmNvcnJlY3Rpb25SYXRpbyAvIGNhbWVyYVN0YXRlLnJhdGlvLFxuICAgICAgICAgICAgICAgIHNjYWxpbmdSYXRpbzogdGhpcy5waXhlbFJhdGlvLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRHJhd2luZyBlZGdlc1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuaGlkZUVkZ2VzT25Nb3ZlIHx8ICFtb3ZpbmcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5lZGdlUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMuZWRnZVByb2dyYW1zW3R5cGVdO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZCgpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uYnVmZmVyRGF0YSgpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0ucmVuZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4OiB0aGlzLm1hdHJpeCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHJhdGlvOiBjYW1lcmFTdGF0ZS5yYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvblJhdGlvOiB0aGlzLmNvcnJlY3Rpb25SYXRpbyAvIGNhbWVyYVN0YXRlLnJhdGlvLFxuICAgICAgICAgICAgICAgICAgICBzY2FsaW5nUmF0aW86IHRoaXMucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBEbyBub3QgZGlzcGxheSBsYWJlbHMgb24gbW92ZSBwZXIgc2V0dGluZ1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWRlTGFiZWxzT25Nb3ZlICYmIG1vdmluZylcbiAgICAgICAgICAgIHJldHVybiBleGl0UmVuZGVyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyTGFiZWxzKCk7XG4gICAgICAgIHRoaXMucmVuZGVyRWRnZUxhYmVscygpO1xuICAgICAgICB0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXMoKTtcbiAgICAgICAgcmV0dXJuIGV4aXRSZW5kZXIoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEludGVybmFsIG1ldGhvZCB1c2VkIHRvIHVwZGF0ZSBleHBlbnNpdmUgYW5kIHRoZXJlZm9yZSBjYWNoZWQgdmFsdWVzXG4gICAgICogZWFjaCB0aW1lIHRoZSBjYW1lcmEgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUudXBkYXRlQ2FjaGVkVmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmF0aW8gPSB0aGlzLmNhbWVyYS5nZXRTdGF0ZSgpLnJhdGlvO1xuICAgICAgICB0aGlzLmNhbWVyYVNpemVSYXRpbyA9IE1hdGguc3FydChyYXRpbyk7XG4gICAgfTtcbiAgICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBQdWJsaWMgQVBJLlxuICAgICAqKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIHJlbmRlcmVyJ3MgY2FtZXJhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Q2FtZXJhfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbWVyYTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGNvbnRhaW5lciBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIHJlbmRlcmVyJ3MgZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHcmFwaH1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0R3JhcGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyYXBoO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gc2V0IHRoZSByZW5kZXJlcidzIGdyYXBoLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R3JhcGh9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnNldEdyYXBoID0gZnVuY3Rpb24gKGdyYXBoKSB7XG4gICAgICAgIGlmIChncmFwaCA9PT0gdGhpcy5ncmFwaClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gVW5iaW5kaW5nIGhhbmRsZXJzIG9uIHRoZSBjdXJyZW50IGdyYXBoXG4gICAgICAgIHRoaXMudW5iaW5kR3JhcGhIYW5kbGVycygpO1xuICAgICAgICAvLyBDbGVhcmluZyB0aGUgZ3JhcGggZGF0YSBjYWNoZXNcbiAgICAgICAgdGhpcy5ub2RlRGF0YUNhY2hlID0ge307XG4gICAgICAgIHRoaXMuZWRnZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICAvLyBDbGVhbmluZyByZW5kZXJlciBzdGF0ZSB0aWVkIHRvIHRoZSBjdXJyZW50IGdyYXBoXG4gICAgICAgIHRoaXMuZGlzcGxheWVkTGFiZWxzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2Rlcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmhvdmVyZWROb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5ob3ZlcmVkRWRnZSA9IG51bGw7XG4gICAgICAgIHRoaXMubm9kZXNXaXRoRm9yY2VkTGFiZWxzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrRWRnZXNFdmVudHNGcmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuY2FuY2VsRnJhbWUpKHRoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbnN0YWxsaW5nIG5ldyBncmFwaFxuICAgICAgICB0aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgICAgIC8vIEJpbmRpbmcgbmV3IGhhbmRsZXJzXG4gICAgICAgIHRoaXMuYmluZEdyYXBoSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gUmUtcmVuZGVyaW5nIG5vdyB0byBhdm9pZCBkaXNjcmVwYW5jaWVzIGZyb20gbm93IHRvIG5leHQgZnJhbWVcbiAgICAgICAgdGhpcy5wcm9jZXNzKCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgcmV0dXJuaW5nIHRoZSBtb3VzZSBjYXB0b3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtNb3VzZUNhcHRvcn1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0TW91c2VDYXB0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdXNlQ2FwdG9yO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHJldHVybmluZyB0aGUgdG91Y2ggY2FwdG9yLlxuICAgICAqXG4gICAgICogQHJldHVybiB7VG91Y2hDYXB0b3J9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldFRvdWNoQ2FwdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b3VjaENhcHRvcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGN1cnJlbnQgcmVuZGVyZXIncyBkaW1lbnNpb25zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7RGltZW5zaW9uc31cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMud2lkdGgsIGhlaWdodDogdGhpcy5oZWlnaHQgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGN1cnJlbnQgZ3JhcGgncyBkaW1lbnNpb25zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7RGltZW5zaW9uc31cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0R3JhcGhEaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXh0ZW50ID0gdGhpcy5jdXN0b21CQm94IHx8IHRoaXMubm9kZUV4dGVudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiBleHRlbnQueFsxXSAtIGV4dGVudC54WzBdIHx8IDEsXG4gICAgICAgICAgICBoZWlnaHQ6IGV4dGVudC55WzFdIC0gZXh0ZW50LnlbMF0gfHwgMSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGdldCBhbGwgdGhlIHNpZ21hIG5vZGUgYXR0cmlidXRlcy5cbiAgICAgKiBJdCdzIHVzZWZ1bGwgZm9yIGV4YW1wbGUgdG8gZ2V0IHRoZSBwb3NpdGlvbiBvZiBhIG5vZGVcbiAgICAgKiBhbmQgdG8gZ2V0IHZhbHVlcyB0aGF0IGFyZSBzZXQgYnkgdGhlIG5vZGVSZWR1Y2VyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGtleSAtIFRoZSBub2RlJ3Mga2V5LlxuICAgICAqIEByZXR1cm4ge05vZGVEaXNwbGF5RGF0YSB8IHVuZGVmaW5lZH0gQSBjb3B5IG9mIHRoZSBkZXNpcmVkIG5vZGUncyBhdHRyaWJ1dGUgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXROb2RlRGlzcGxheURhdGEgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlRGF0YUNhY2hlW2tleV07XG4gICAgICAgIHJldHVybiBub2RlID8gT2JqZWN0LmFzc2lnbih7fSwgbm9kZSkgOiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBnZXQgYWxsIHRoZSBzaWdtYSBlZGdlIGF0dHJpYnV0ZXMuXG4gICAgICogSXQncyB1c2VmdWxsIGZvciBleGFtcGxlIHRvIGdldCB2YWx1ZXMgdGhhdCBhcmUgc2V0IGJ5IHRoZSBlZGdlUmVkdWNlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IC0gVGhlIGVkZ2UncyBrZXkuXG4gICAgICogQHJldHVybiB7RWRnZURpc3BsYXlEYXRhIHwgdW5kZWZpbmVkfSBBIGNvcHkgb2YgdGhlIGRlc2lyZWQgZWRnZSdzIGF0dHJpYnV0ZSBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldEVkZ2VEaXNwbGF5RGF0YSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGVkZ2UgPSB0aGlzLmVkZ2VEYXRhQ2FjaGVba2V5XTtcbiAgICAgICAgcmV0dXJuIGVkZ2UgPyBPYmplY3QuYXNzaWduKHt9LCBlZGdlKSA6IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgYSBjb3B5IG9mIHRoZSBzZXR0aW5ncyBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2V0dGluZ3N9IEEgY29weSBvZiB0aGUgc2V0dGluZ3MgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0U2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgdGhpcy5zZXR0aW5ncyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgcmV0dXJuaW5nIHRoZSBjdXJyZW50IHZhbHVlIGZvciBhIGdpdmVuIHNldHRpbmcga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBrZXkgLSBUaGUgc2V0dGluZyBrZXkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm4ge2FueX0gVGhlIHZhbHVlIGF0dGFjaGVkIHRvIHRoaXMgc2V0dGluZyBrZXkgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRTZXR0aW5nID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1trZXldO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHNldHRpbmcgdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gc2V0dGluZyBrZXkuIE5vdGUgdGhhdCB0aGlzIHdpbGwgc2NoZWR1bGVcbiAgICAgKiBhIG5ldyByZW5kZXIgbmV4dCBmcmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IC0gVGhlIHNldHRpbmcga2V5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0gIHthbnl9ICAgIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuc2V0U2V0dGluZyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgICAgICAoMCwgc2V0dGluZ3NfMS52YWxpZGF0ZVNldHRpbmdzKSh0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTZXR0aW5nc1VwZGF0ZSgpO1xuICAgICAgICB0aGlzLm5lZWRUb1Byb2Nlc3MgPSB0cnVlOyAvLyBUT0RPOiBzb21lIGtleXMgbWF5IHdvcmsgd2l0aCBvbmx5IG5lZWRUb1NvZnRQcm9jZXNzIG9yIGV2ZW4gbm90aGluZ1xuICAgICAgICB0aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXBkYXRpbmcgdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gc2V0dGluZyBrZXkgdXNpbmcgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIHdpbGwgc2NoZWR1bGUgYSBuZXcgcmVuZGVyIG5leHQgZnJhbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAga2V5ICAgICAtIFRoZSBzZXR0aW5nIGtleSB0byBzZXQuXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IHVwZGF0ZXIgLSBUaGUgdXBkYXRlIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS51cGRhdGVTZXR0aW5nID0gZnVuY3Rpb24gKGtleSwgdXBkYXRlcikge1xuICAgICAgICB0aGlzLnNldHRpbmdzW2tleV0gPSB1cGRhdGVyKHRoaXMuc2V0dGluZ3Nba2V5XSk7XG4gICAgICAgICgwLCBzZXR0aW5nc18xLnZhbGlkYXRlU2V0dGluZ3MpKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLmhhbmRsZVNldHRpbmdzVXBkYXRlKCk7XG4gICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IHRydWU7IC8vIFRPRE86IHNvbWUga2V5cyBtYXkgd29yayB3aXRoIG9ubHkgbmVlZFRvU29mdFByb2Nlc3Mgb3IgZXZlbiBub3RoaW5nXG4gICAgICAgIHRoaXMuX3NjaGVkdWxlUmVmcmVzaCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJlc2l6ZSB0aGUgcmVuZGVyZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHRoaXMud2lkdGgsIHByZXZpb3VzSGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHRoaXMucGl4ZWxSYXRpbyA9ICgwLCB1dGlsc18xLmdldFBpeGVsUmF0aW8pKCk7XG4gICAgICAgIGlmICh0aGlzLndpZHRoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd0ludmFsaWRDb250YWluZXIpXG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IDE7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbWE6IENvbnRhaW5lciBoYXMgbm8gd2lkdGguIFlvdSBjYW4gc2V0IHRoZSBhbGxvd0ludmFsaWRDb250YWluZXIgc2V0dGluZyB0byB0cnVlIHRvIHN0b3Agc2VlaW5nIHRoaXMgZXJyb3IuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYWxsb3dJbnZhbGlkQ29udGFpbmVyKVxuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gMTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogQ29udGFpbmVyIGhhcyBubyBoZWlnaHQuIFlvdSBjYW4gc2V0IHRoZSBhbGxvd0ludmFsaWRDb250YWluZXIgc2V0dGluZyB0byB0cnVlIHRvIHN0b3Agc2VlaW5nIHRoaXMgZXJyb3IuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIG5vdGhpbmcgaGFzIGNoYW5nZWQsIHdlIGNhbiBzdG9wIHJpZ2h0IGhlcmVcbiAgICAgICAgaWYgKHByZXZpb3VzV2lkdGggPT09IHRoaXMud2lkdGggJiYgcHJldmlvdXNIZWlnaHQgPT09IHRoaXMuaGVpZ2h0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuZW1pdChcInJlc2l6ZVwiKTtcbiAgICAgICAgLy8gU2l6aW5nIGRvbSBlbGVtZW50c1xuICAgICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmVsZW1lbnRzKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaWRdO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpemluZyBjYW52YXMgY29udGV4dHNcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy5jYW52YXNDb250ZXh0cykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpZF0uc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgdGhpcy53aWR0aCAqIHRoaXMucGl4ZWxSYXRpbyArIFwicHhcIik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2lkXS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgdGhpcy5oZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW8gKyBcInB4XCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMucGl4ZWxSYXRpbyAhPT0gMSlcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHRzW2lkXS5zY2FsZSh0aGlzLnBpeGVsUmF0aW8sIHRoaXMucGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2l6aW5nIFdlYkdMIGNvbnRleHRzXG4gICAgICAgIGZvciAodmFyIGlkIGluIHRoaXMud2ViR0xDb250ZXh0cykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpZF0uc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgdGhpcy53aWR0aCAqIHRoaXMucGl4ZWxSYXRpbyArIFwicHhcIik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2lkXS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgdGhpcy5oZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW8gKyBcInB4XCIpO1xuICAgICAgICAgICAgdGhpcy53ZWJHTENvbnRleHRzW2lkXS52aWV3cG9ydCgwLCAwLCB0aGlzLndpZHRoICogdGhpcy5waXhlbFJhdGlvLCB0aGlzLmhlaWdodCAqIHRoaXMucGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBjbGVhciBhbGwgdGhlIGNhbnZhc2VzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndlYkdMQ29udGV4dHMubm9kZXMuY2xlYXIodGhpcy53ZWJHTENvbnRleHRzLm5vZGVzLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgICAgICB0aGlzLndlYkdMQ29udGV4dHMuZWRnZXMuY2xlYXIodGhpcy53ZWJHTENvbnRleHRzLmVkZ2VzLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgICAgICB0aGlzLndlYkdMQ29udGV4dHMuaG92ZXJOb2Rlcy5jbGVhcih0aGlzLndlYkdMQ29udGV4dHMuaG92ZXJOb2Rlcy5DT0xPUl9CVUZGRVJfQklUKTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0cy5sYWJlbHMuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0cy5ob3ZlcnMuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0cy5lZGdlTGFiZWxzLmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVmcmVzaCBhbGwgY29tcHV0ZWQgZGF0YS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5lZWRUb1Byb2Nlc3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVmcmVzaCBhbGwgY29tcHV0ZWQgZGF0YSwgYXQgdGhlIG5leHQgYXZhaWxhYmxlIGZyYW1lLlxuICAgICAqIElmIHRoaXMgbWV0aG9kIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIHRoaXMgZnJhbWUsIHRoZW4gaXQgd2lsbCBvbmx5IHJlbmRlciBvbmNlIGF0IHRoZSBuZXh0IGF2YWlsYWJsZSBmcmFtZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5zY2hlZHVsZVJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlUmVmcmVzaCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvICh1bil6b29tLCB3aGlsZSBwcmVzZXJ2aW5nIHRoZSBwb3NpdGlvbiBvZiBhIHZpZXdwb3J0IHBvaW50LlxuICAgICAqIFVzZWQgZm9yIGluc3RhbmNlIHRvIHpvb20gXCJvbiB0aGUgbW91c2UgY3Vyc29yXCIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmlld3BvcnRUYXJnZXRcbiAgICAgKiBAcGFyYW0gbmV3UmF0aW9cbiAgICAgKiBAcmV0dXJuIHtDYW1lcmFTdGF0ZX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0Vmlld3BvcnRab29tZWRTdGF0ZSA9IGZ1bmN0aW9uICh2aWV3cG9ydFRhcmdldCwgbmV3UmF0aW8pIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSwgcmF0aW8gPSBfYS5yYXRpbywgYW5nbGUgPSBfYS5hbmdsZSwgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICAvLyBUT0RPOiBoYW5kbGUgbWF4IHpvb21cbiAgICAgICAgdmFyIHJhdGlvRGlmZiA9IG5ld1JhdGlvIC8gcmF0aW87XG4gICAgICAgIHZhciBjZW50ZXIgPSB7XG4gICAgICAgICAgICB4OiB0aGlzLndpZHRoIC8gMixcbiAgICAgICAgICAgIHk6IHRoaXMuaGVpZ2h0IC8gMixcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdyYXBoTW91c2VQb3NpdGlvbiA9IHRoaXMudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHZpZXdwb3J0VGFyZ2V0KTtcbiAgICAgICAgdmFyIGdyYXBoQ2VudGVyUG9zaXRpb24gPSB0aGlzLnZpZXdwb3J0VG9GcmFtZWRHcmFwaChjZW50ZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYW5nbGU6IGFuZ2xlLFxuICAgICAgICAgICAgeDogKGdyYXBoTW91c2VQb3NpdGlvbi54IC0gZ3JhcGhDZW50ZXJQb3NpdGlvbi54KSAqICgxIC0gcmF0aW9EaWZmKSArIHgsXG4gICAgICAgICAgICB5OiAoZ3JhcGhNb3VzZVBvc2l0aW9uLnkgLSBncmFwaENlbnRlclBvc2l0aW9uLnkpICogKDEgLSByYXRpb0RpZmYpICsgeSxcbiAgICAgICAgICAgIHJhdGlvOiBuZXdSYXRpbyxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGFic3RyYWN0IHJlY3RhbmdsZSBjb250YWluaW5nIHRoZSBncmFwaCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgY2FtZXJhJ3Mgc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIHZpZXcncyByZWN0YW5nbGUuXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnZpZXdSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRPRE86IHJlZHVjZSByZWxhdGl2ZSBtYXJnaW4/XG4gICAgICAgIHZhciBtYXJnaW5YID0gKDAgKiB0aGlzLndpZHRoKSAvIDgsIG1hcmdpblkgPSAoMCAqIHRoaXMuaGVpZ2h0KSAvIDg7XG4gICAgICAgIHZhciBwMSA9IHRoaXMudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHsgeDogMCAtIG1hcmdpblgsIHk6IDAgLSBtYXJnaW5ZIH0pLCBwMiA9IHRoaXMudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHsgeDogdGhpcy53aWR0aCArIG1hcmdpblgsIHk6IDAgLSBtYXJnaW5ZIH0pLCBoID0gdGhpcy52aWV3cG9ydFRvRnJhbWVkR3JhcGgoeyB4OiAwLCB5OiB0aGlzLmhlaWdodCArIG1hcmdpblkgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4MTogcDEueCxcbiAgICAgICAgICAgIHkxOiBwMS55LFxuICAgICAgICAgICAgeDI6IHAyLngsXG4gICAgICAgICAgICB5MjogcDIueSxcbiAgICAgICAgICAgIGhlaWdodDogcDIueSAtIGgueSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGNvb3JkaW5hdGVzIG9mIGEgcG9pbnQgZnJvbSB0aGUgZnJhbWVkIGdyYXBoIHN5c3RlbSB0byB0aGUgdmlld3BvcnQgc3lzdGVtLiBJdCBhbGxvd3NcbiAgICAgKiBvdmVycmlkaW5nIGFueXRoaW5nIHRoYXQgaXMgdXNlZCB0byBnZXQgdGhlIHRyYW5zbGF0aW9uIG1hdHJpeCwgb3IgZXZlbiB0aGUgbWF0cml4IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEJlIGNhcmVmdWwgaWYgb3ZlcnJpZGluZyBkaW1lbnNpb25zLCBwYWRkaW5nIG9yIGNhbWVyYVN0YXRlLCBhcyB0aGUgY29tcHV0YXRpb24gb2YgdGhlIG1hdHJpeCBpcyBub3QgdGhlIGxpZ2h0ZXN0XG4gICAgICogb2YgY29tcHV0YXRpb25zLlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5mcmFtZWRHcmFwaFRvVmlld3BvcnQgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIG92ZXJyaWRlKSB7XG4gICAgICAgIGlmIChvdmVycmlkZSA9PT0gdm9pZCAwKSB7IG92ZXJyaWRlID0ge307IH1cbiAgICAgICAgdmFyIHJlY29tcHV0ZU1hdHJpeCA9ICEhb3ZlcnJpZGUuY2FtZXJhU3RhdGUgfHwgISFvdmVycmlkZS52aWV3cG9ydERpbWVuc2lvbnMgfHwgISFvdmVycmlkZS5ncmFwaERpbWVuc2lvbnM7XG4gICAgICAgIHZhciBtYXRyaXggPSBvdmVycmlkZS5tYXRyaXhcbiAgICAgICAgICAgID8gb3ZlcnJpZGUubWF0cml4XG4gICAgICAgICAgICA6IHJlY29tcHV0ZU1hdHJpeFxuICAgICAgICAgICAgICAgID8gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkob3ZlcnJpZGUuY2FtZXJhU3RhdGUgfHwgdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSwgb3ZlcnJpZGUudmlld3BvcnREaW1lbnNpb25zIHx8IHRoaXMuZ2V0RGltZW5zaW9ucygpLCBvdmVycmlkZS5ncmFwaERpbWVuc2lvbnMgfHwgdGhpcy5nZXRHcmFwaERpbWVuc2lvbnMoKSwgb3ZlcnJpZGUucGFkZGluZyB8fCB0aGlzLmdldFNldHRpbmcoXCJzdGFnZVBhZGRpbmdcIikgfHwgMClcbiAgICAgICAgICAgICAgICA6IHRoaXMubWF0cml4O1xuICAgICAgICB2YXIgdmlld3BvcnRQb3MgPSAoMCwgbWF0cmljZXNfMS5tdWx0aXBseVZlYzIpKG1hdHJpeCwgY29vcmRpbmF0ZXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogKCgxICsgdmlld3BvcnRQb3MueCkgKiB0aGlzLndpZHRoKSAvIDIsXG4gICAgICAgICAgICB5OiAoKDEgLSB2aWV3cG9ydFBvcy55KSAqIHRoaXMuaGVpZ2h0KSAvIDIsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgcmV0dXJuaW5nIHRoZSBjb29yZGluYXRlcyBvZiBhIHBvaW50IGZyb20gdGhlIHZpZXdwb3J0IHN5c3RlbSB0byB0aGUgZnJhbWVkIGdyYXBoIHN5c3RlbS4gSXQgYWxsb3dzXG4gICAgICogb3ZlcnJpZGluZyBhbnl0aGluZyB0aGF0IGlzIHVzZWQgdG8gZ2V0IHRoZSB0cmFuc2xhdGlvbiBtYXRyaXgsIG9yIGV2ZW4gdGhlIG1hdHJpeCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBCZSBjYXJlZnVsIGlmIG92ZXJyaWRpbmcgZGltZW5zaW9ucywgcGFkZGluZyBvciBjYW1lcmFTdGF0ZSwgYXMgdGhlIGNvbXB1dGF0aW9uIG9mIHRoZSBtYXRyaXggaXMgbm90IHRoZSBsaWdodGVzdFxuICAgICAqIG9mIGNvbXB1dGF0aW9ucy5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUudmlld3BvcnRUb0ZyYW1lZEdyYXBoID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzLCBvdmVycmlkZSkge1xuICAgICAgICBpZiAob3ZlcnJpZGUgPT09IHZvaWQgMCkgeyBvdmVycmlkZSA9IHt9OyB9XG4gICAgICAgIHZhciByZWNvbXB1dGVNYXRyaXggPSAhIW92ZXJyaWRlLmNhbWVyYVN0YXRlIHx8ICEhb3ZlcnJpZGUudmlld3BvcnREaW1lbnNpb25zIHx8ICFvdmVycmlkZS5ncmFwaERpbWVuc2lvbnM7XG4gICAgICAgIHZhciBpbnZNYXRyaXggPSBvdmVycmlkZS5tYXRyaXhcbiAgICAgICAgICAgID8gb3ZlcnJpZGUubWF0cml4XG4gICAgICAgICAgICA6IHJlY29tcHV0ZU1hdHJpeFxuICAgICAgICAgICAgICAgID8gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkob3ZlcnJpZGUuY2FtZXJhU3RhdGUgfHwgdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSwgb3ZlcnJpZGUudmlld3BvcnREaW1lbnNpb25zIHx8IHRoaXMuZ2V0RGltZW5zaW9ucygpLCBvdmVycmlkZS5ncmFwaERpbWVuc2lvbnMgfHwgdGhpcy5nZXRHcmFwaERpbWVuc2lvbnMoKSwgb3ZlcnJpZGUucGFkZGluZyB8fCB0aGlzLmdldFNldHRpbmcoXCJzdGFnZVBhZGRpbmdcIikgfHwgMCwgdHJ1ZSlcbiAgICAgICAgICAgICAgICA6IHRoaXMuaW52TWF0cml4O1xuICAgICAgICB2YXIgcmVzID0gKDAsIG1hdHJpY2VzXzEubXVsdGlwbHlWZWMyKShpbnZNYXRyaXgsIHtcbiAgICAgICAgICAgIHg6IChjb29yZGluYXRlcy54IC8gdGhpcy53aWR0aCkgKiAyIC0gMSxcbiAgICAgICAgICAgIHk6IDEgLSAoY29vcmRpbmF0ZXMueSAvIHRoaXMuaGVpZ2h0KSAqIDIsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNOYU4ocmVzLngpKVxuICAgICAgICAgICAgcmVzLnggPSAwO1xuICAgICAgICBpZiAoaXNOYU4ocmVzLnkpKVxuICAgICAgICAgICAgcmVzLnkgPSAwO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gdHJhbnNsYXRlIGEgcG9pbnQncyBjb29yZGluYXRlcyBmcm9tIHRoZSB2aWV3cG9ydCBzeXN0ZW0gKHBpeGVsIGRpc3RhbmNlIGZyb20gdGhlIHRvcC1sZWZ0IG9mIHRoZVxuICAgICAqIHN0YWdlKSB0byB0aGUgZ3JhcGggc3lzdGVtICh0aGUgcmVmZXJlbmNlIHN5c3RlbSBvZiBkYXRhIGFzIHRoZXkgYXJlIGluIHRoZSBnaXZlbiBncmFwaCBpbnN0YW5jZSkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBhY2NlcHRzIGFuIG9wdGlvbmFsIGNhbWVyYSB3aGljaCBjYW4gYmUgdXNlZnVsIGlmIHlvdSBuZWVkIHRvIHRyYW5zbGF0ZSBjb29yZGluYXRlc1xuICAgICAqIGJhc2VkIG9uIGEgZGlmZmVyZW50IHZpZXcgdGhhbiB0aGUgb25lIGJlaW5nIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWQgb24gc2NyZWVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlc30gICAgICAgICAgICAgICAgICB2aWV3cG9ydFBvaW50XG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlQ29udmVyc2lvbk92ZXJyaWRlfSBvdmVycmlkZVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS52aWV3cG9ydFRvR3JhcGggPSBmdW5jdGlvbiAodmlld3BvcnRQb2ludCwgb3ZlcnJpZGUpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlID09PSB2b2lkIDApIHsgb3ZlcnJpZGUgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24uaW52ZXJzZSh0aGlzLnZpZXdwb3J0VG9GcmFtZWRHcmFwaCh2aWV3cG9ydFBvaW50LCBvdmVycmlkZSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gdHJhbnNsYXRlIGEgcG9pbnQncyBjb29yZGluYXRlcyBmcm9tIHRoZSBncmFwaCBzeXN0ZW0gKHRoZSByZWZlcmVuY2Ugc3lzdGVtIG9mIGRhdGEgYXMgdGhleSBhcmUgaW5cbiAgICAgKiB0aGUgZ2l2ZW4gZ3JhcGggaW5zdGFuY2UpIHRvIHRoZSB2aWV3cG9ydCBzeXN0ZW0gKHBpeGVsIGRpc3RhbmNlIGZyb20gdGhlIHRvcC1sZWZ0IG9mIHRoZSBzdGFnZSkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBhY2NlcHRzIGFuIG9wdGlvbmFsIGNhbWVyYSB3aGljaCBjYW4gYmUgdXNlZnVsIGlmIHlvdSBuZWVkIHRvIHRyYW5zbGF0ZSBjb29yZGluYXRlc1xuICAgICAqIGJhc2VkIG9uIGEgZGlmZmVyZW50IHZpZXcgdGhhbiB0aGUgb25lIGJlaW5nIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWQgb24gc2NyZWVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlc30gICAgICAgICAgICAgICAgICBncmFwaFBvaW50XG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlQ29udmVyc2lvbk92ZXJyaWRlfSBvdmVycmlkZVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5ncmFwaFRvVmlld3BvcnQgPSBmdW5jdGlvbiAoZ3JhcGhQb2ludCwgb3ZlcnJpZGUpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlID09PSB2b2lkIDApIHsgb3ZlcnJpZGUgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5mcmFtZWRHcmFwaFRvVmlld3BvcnQodGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24oZ3JhcGhQb2ludCksIG92ZXJyaWRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGdyYXBoJ3MgYm91bmRpbmcgYm94LlxuICAgICAqXG4gICAgICogQHJldHVybiB7eyB4OiBFeHRlbnQsIHk6IEV4dGVudCB9fVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRCQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZ3JhcGhFeHRlbnQpKHRoaXMuZ3JhcGgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHJldHVybmluZyB0aGUgZ3JhcGgncyBjdXN0b20gYm91bmRpbmcgYm94LCBpZiBhbnkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt7IHg6IEV4dGVudCwgeTogRXh0ZW50IH0gfCBudWxsfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDdXN0b21CQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21CQm94O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gb3ZlcnJpZGUgdGhlIGdyYXBoJ3MgYm91bmRpbmcgYm94IHdpdGggYSBjdXN0b20gb25lLiBHaXZlIGBudWxsYCBhcyB0aGUgYXJndW1lbnQgdG8gc3RvcCBvdmVycmlkaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnNldEN1c3RvbUJCb3ggPSBmdW5jdGlvbiAoY3VzdG9tQkJveCkge1xuICAgICAgICB0aGlzLmN1c3RvbUJCb3ggPSBjdXN0b21CQm94O1xuICAgICAgICB0aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBzaHV0IHRoZSBjb250YWluZXIgJiByZWxlYXNlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUua2lsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRW1pdHRpbmcgXCJraWxsXCIgZXZlbnRzIHNvIHRoYXQgcGx1Z2lucyBhbmQgc3VjaCBjYW4gY2xlYW51cFxuICAgICAgICB0aGlzLmVtaXQoXCJraWxsXCIpO1xuICAgICAgICAvLyBSZWxlYXNpbmcgZXZlbnRzXG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIC8vIFJlbGVhc2luZyBjYW1lcmEgaGFuZGxlcnNcbiAgICAgICAgdGhpcy5jYW1lcmEucmVtb3ZlTGlzdGVuZXIoXCJ1cGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNhbWVyYSk7XG4gICAgICAgIC8vIFJlbGVhc2luZyBET00gZXZlbnRzICYgY2FwdG9yc1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSZXNpemUpO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLmtpbGwoKTtcbiAgICAgICAgdGhpcy50b3VjaENhcHRvci5raWxsKCk7XG4gICAgICAgIC8vIFJlbGVhc2luZyBncmFwaCBoYW5kbGVyc1xuICAgICAgICB0aGlzLnVuYmluZEdyYXBoSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gUmVsZWFzaW5nIGNhY2hlICYgc3RhdGVcbiAgICAgICAgdGhpcy5xdWFkdHJlZSA9IG5ldyBxdWFkdHJlZV8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5ub2RlRGF0YUNhY2hlID0ge307XG4gICAgICAgIHRoaXMuZWRnZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLm5vZGVzV2l0aEZvcmNlZExhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLmVkZ2VzV2l0aEZvcmNlZExhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkTm9kZXMuY2xlYXIoKTtcbiAgICAgICAgLy8gQ2xlYXJpbmcgZnJhbWVzXG4gICAgICAgIGlmICh0aGlzLnJlbmRlckZyYW1lKSB7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5jYW5jZWxGcmFtZSkodGhpcy5yZW5kZXJGcmFtZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZW5kZXJIaWdobGlnaHRlZE5vZGVzRnJhbWUpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmNhbmNlbEZyYW1lKSh0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVzdHJveWluZyBjYW52YXNlc1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIHdoaWxlIChjb250YWluZXIuZmlyc3RDaGlsZClcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBzY2FsZSB0aGUgZ2l2ZW4gc2l6ZSBhY2NvcmRpbmcgdG8gdGhlIGNhbWVyYSdzIHJhdGlvLCBpLmUuXG4gICAgICogem9vbWluZyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge251bWJlcn0gc2l6ZSAtIFRoZSBzaXplIHRvIHNjYWxlIChub2RlIHNpemUsIGVkZ2UgdGhpY2tuZXNzIGV0Yy4pLlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gICAgICAtIFRoZSBzY2FsZWQgc2l6ZS5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuc2NhbGVTaXplID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHNpemUgLyB0aGlzLmNhbWVyYVNpemVSYXRpbztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJldHVybnMgdGhlIGNvbGxlY3Rpb24gb2YgYWxsIHVzZWQgY2FudmFzZXMuXG4gICAgICogQXQgdGhlIG1vbWVudCwgdGhlIGluc3RhbnRpYXRlZCBjYW52YXNlcyBhcmUgdGhlIGZvbGxvd2luZywgYW5kIGluIHRoZVxuICAgICAqIGZvbGxvd2luZyBvcmRlciBpbiB0aGUgRE9NOlxuICAgICAqIC0gYGVkZ2VzYFxuICAgICAqIC0gYG5vZGVzYFxuICAgICAqIC0gYGVkZ2VMYWJlbHNgXG4gICAgICogLSBgbGFiZWxzYFxuICAgICAqIC0gYGhvdmVyc2BcbiAgICAgKiAtIGBob3Zlck5vZGVzYFxuICAgICAqIC0gYG1vdXNlYFxuICAgICAqXG4gICAgICogQHJldHVybiB7UGxhaW5PYmplY3Q8SFRNTENhbnZhc0VsZW1lbnQ+fSAtIFRoZSBjb2xsZWN0aW9uIG9mIGNhbnZhc2VzLlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDYW52YXNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCB0aGlzLmVsZW1lbnRzKTtcbiAgICB9O1xuICAgIHJldHVybiBTaWdtYTtcbn0odHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU2lnbWE7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlR5cGVkRXZlbnRFbWl0dGVyID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBUeXBlc1xuICogPT09PT09PT09PT09PT09XG4gKlxuICogVmFyaW91cyB0eXBlIGRlY2xhcmF0aW9ucyB1c2VkIHRocm91Z2hvdXQgdGhlIGxpYnJhcnkuXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG52YXIgVHlwZWRFdmVudEVtaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFR5cGVkRXZlbnRFbWl0dGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFR5cGVkRXZlbnRFbWl0dGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yYXdFbWl0dGVyID0gX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFR5cGVkRXZlbnRFbWl0dGVyO1xufShldmVudHNfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSBUeXBlZEV2ZW50RW1pdHRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbmltYXRlTm9kZXMgPSBleHBvcnRzLkFOSU1BVEVfREVGQVVMVFMgPSB2b2lkIDA7XG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuL2luZGV4XCIpO1xudmFyIGVhc2luZ3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lYXNpbmdzXCIpKTtcbmV4cG9ydHMuQU5JTUFURV9ERUZBVUxUUyA9IHtcbiAgICBlYXNpbmc6IFwicXVhZHJhdGljSW5PdXRcIixcbiAgICBkdXJhdGlvbjogMTUwLFxufTtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBhbmltYXRlIHRoZSBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZU5vZGVzKGdyYXBoLCB0YXJnZXRzLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZXhwb3J0cy5BTklNQVRFX0RFRkFVTFRTLCBvcHRzKTtcbiAgICB2YXIgZWFzaW5nID0gdHlwZW9mIG9wdGlvbnMuZWFzaW5nID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmVhc2luZyA6IGVhc2luZ3NfMS5kZWZhdWx0W29wdGlvbnMuZWFzaW5nXTtcbiAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHZhciBzdGFydFBvc2l0aW9ucyA9IHt9O1xuICAgIGZvciAodmFyIG5vZGUgaW4gdGFyZ2V0cykge1xuICAgICAgICB2YXIgYXR0cnMgPSB0YXJnZXRzW25vZGVdO1xuICAgICAgICBzdGFydFBvc2l0aW9uc1tub2RlXSA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrIGluIGF0dHJzKVxuICAgICAgICAgICAgc3RhcnRQb3NpdGlvbnNbbm9kZV1ba10gPSBncmFwaC5nZXROb2RlQXR0cmlidXRlKG5vZGUsIGspO1xuICAgIH1cbiAgICB2YXIgZnJhbWUgPSBudWxsO1xuICAgIHZhciBzdGVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmcmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBwID0gKERhdGUubm93KCkgLSBzdGFydCkgLyBvcHRpb25zLmR1cmF0aW9uO1xuICAgICAgICBpZiAocCA+PSAxKSB7XG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaXMgZG9uZVxuICAgICAgICAgICAgZm9yICh2YXIgbm9kZSBpbiB0YXJnZXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJzID0gdGFyZ2V0c1tub2RlXTtcbiAgICAgICAgICAgICAgICAvLyBXZSB1c2UgZ2l2ZW4gdmFsdWVzIHRvIGF2b2lkIHByZWNpc2lvbiBpc3N1ZXMgYW5kIGZvciBjb252ZW5pZW5jZVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXR0cnMpXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoLnNldE5vZGVBdHRyaWJ1dGUobm9kZSwgaywgYXR0cnNba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcCA9IGVhc2luZyhwKTtcbiAgICAgICAgZm9yICh2YXIgbm9kZSBpbiB0YXJnZXRzKSB7XG4gICAgICAgICAgICB2YXIgYXR0cnMgPSB0YXJnZXRzW25vZGVdO1xuICAgICAgICAgICAgdmFyIHMgPSBzdGFydFBvc2l0aW9uc1tub2RlXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXR0cnMpXG4gICAgICAgICAgICAgICAgZ3JhcGguc2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBrLCBhdHRyc1trXSAqIHAgKyBzW2tdICogKDEgLSBwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWUgPSAoMCwgaW5kZXhfMS5yZXF1ZXN0RnJhbWUpKHN0ZXApO1xuICAgIH07XG4gICAgc3RlcCgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChmcmFtZSlcbiAgICAgICAgICAgICgwLCBpbmRleF8xLmNhbmNlbEZyYW1lKShmcmFtZSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuYW5pbWF0ZU5vZGVzID0gYW5pbWF0ZU5vZGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhUTUxfQ09MT1JTID0gdm9pZCAwO1xuZXhwb3J0cy5IVE1MX0NPTE9SUyA9IHtcbiAgICBibGFjazogXCIjMDAwMDAwXCIsXG4gICAgc2lsdmVyOiBcIiNDMEMwQzBcIixcbiAgICBncmF5OiBcIiM4MDgwODBcIixcbiAgICBncmV5OiBcIiM4MDgwODBcIixcbiAgICB3aGl0ZTogXCIjRkZGRkZGXCIsXG4gICAgbWFyb29uOiBcIiM4MDAwMDBcIixcbiAgICByZWQ6IFwiI0ZGMDAwMFwiLFxuICAgIHB1cnBsZTogXCIjODAwMDgwXCIsXG4gICAgZnVjaHNpYTogXCIjRkYwMEZGXCIsXG4gICAgZ3JlZW46IFwiIzAwODAwMFwiLFxuICAgIGxpbWU6IFwiIzAwRkYwMFwiLFxuICAgIG9saXZlOiBcIiM4MDgwMDBcIixcbiAgICB5ZWxsb3c6IFwiI0ZGRkYwMFwiLFxuICAgIG5hdnk6IFwiIzAwMDA4MFwiLFxuICAgIGJsdWU6IFwiIzAwMDBGRlwiLFxuICAgIHRlYWw6IFwiIzAwODA4MFwiLFxuICAgIGFxdWE6IFwiIzAwRkZGRlwiLFxuICAgIGRhcmtibHVlOiBcIiMwMDAwOEJcIixcbiAgICBtZWRpdW1ibHVlOiBcIiMwMDAwQ0RcIixcbiAgICBkYXJrZ3JlZW46IFwiIzAwNjQwMFwiLFxuICAgIGRhcmtjeWFuOiBcIiMwMDhCOEJcIixcbiAgICBkZWVwc2t5Ymx1ZTogXCIjMDBCRkZGXCIsXG4gICAgZGFya3R1cnF1b2lzZTogXCIjMDBDRUQxXCIsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46IFwiIzAwRkE5QVwiLFxuICAgIHNwcmluZ2dyZWVuOiBcIiMwMEZGN0ZcIixcbiAgICBjeWFuOiBcIiMwMEZGRkZcIixcbiAgICBtaWRuaWdodGJsdWU6IFwiIzE5MTk3MFwiLFxuICAgIGRvZGdlcmJsdWU6IFwiIzFFOTBGRlwiLFxuICAgIGxpZ2h0c2VhZ3JlZW46IFwiIzIwQjJBQVwiLFxuICAgIGZvcmVzdGdyZWVuOiBcIiMyMjhCMjJcIixcbiAgICBzZWFncmVlbjogXCIjMkU4QjU3XCIsXG4gICAgZGFya3NsYXRlZ3JheTogXCIjMkY0RjRGXCIsXG4gICAgZGFya3NsYXRlZ3JleTogXCIjMkY0RjRGXCIsXG4gICAgbGltZWdyZWVuOiBcIiMzMkNEMzJcIixcbiAgICBtZWRpdW1zZWFncmVlbjogXCIjM0NCMzcxXCIsXG4gICAgdHVycXVvaXNlOiBcIiM0MEUwRDBcIixcbiAgICByb3lhbGJsdWU6IFwiIzQxNjlFMVwiLFxuICAgIHN0ZWVsYmx1ZTogXCIjNDY4MkI0XCIsXG4gICAgZGFya3NsYXRlYmx1ZTogXCIjNDgzRDhCXCIsXG4gICAgbWVkaXVtdHVycXVvaXNlOiBcIiM0OEQxQ0NcIixcbiAgICBpbmRpZ286IFwiIzRCMDA4MlwiLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiBcIiM1NTZCMkZcIixcbiAgICBjYWRldGJsdWU6IFwiIzVGOUVBMFwiLFxuICAgIGNvcm5mbG93ZXJibHVlOiBcIiM2NDk1RURcIixcbiAgICByZWJlY2NhcHVycGxlOiBcIiM2NjMzOTlcIixcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiBcIiM2NkNEQUFcIixcbiAgICBkaW1ncmF5OiBcIiM2OTY5NjlcIixcbiAgICBkaW1ncmV5OiBcIiM2OTY5NjlcIixcbiAgICBzbGF0ZWJsdWU6IFwiIzZBNUFDRFwiLFxuICAgIG9saXZlZHJhYjogXCIjNkI4RTIzXCIsXG4gICAgc2xhdGVncmF5OiBcIiM3MDgwOTBcIixcbiAgICBzbGF0ZWdyZXk6IFwiIzcwODA5MFwiLFxuICAgIGxpZ2h0c2xhdGVncmF5OiBcIiM3Nzg4OTlcIixcbiAgICBsaWdodHNsYXRlZ3JleTogXCIjNzc4ODk5XCIsXG4gICAgbWVkaXVtc2xhdGVibHVlOiBcIiM3QjY4RUVcIixcbiAgICBsYXduZ3JlZW46IFwiIzdDRkMwMFwiLFxuICAgIGNoYXJ0cmV1c2U6IFwiIzdGRkYwMFwiLFxuICAgIGFxdWFtYXJpbmU6IFwiIzdGRkZENFwiLFxuICAgIHNreWJsdWU6IFwiIzg3Q0VFQlwiLFxuICAgIGxpZ2h0c2t5Ymx1ZTogXCIjODdDRUZBXCIsXG4gICAgYmx1ZXZpb2xldDogXCIjOEEyQkUyXCIsXG4gICAgZGFya3JlZDogXCIjOEIwMDAwXCIsXG4gICAgZGFya21hZ2VudGE6IFwiIzhCMDA4QlwiLFxuICAgIHNhZGRsZWJyb3duOiBcIiM4QjQ1MTNcIixcbiAgICBkYXJrc2VhZ3JlZW46IFwiIzhGQkM4RlwiLFxuICAgIGxpZ2h0Z3JlZW46IFwiIzkwRUU5MFwiLFxuICAgIG1lZGl1bXB1cnBsZTogXCIjOTM3MERCXCIsXG4gICAgZGFya3Zpb2xldDogXCIjOTQwMEQzXCIsXG4gICAgcGFsZWdyZWVuOiBcIiM5OEZCOThcIixcbiAgICBkYXJrb3JjaGlkOiBcIiM5OTMyQ0NcIixcbiAgICB5ZWxsb3dncmVlbjogXCIjOUFDRDMyXCIsXG4gICAgc2llbm5hOiBcIiNBMDUyMkRcIixcbiAgICBicm93bjogXCIjQTUyQTJBXCIsXG4gICAgZGFya2dyYXk6IFwiI0E5QTlBOVwiLFxuICAgIGRhcmtncmV5OiBcIiNBOUE5QTlcIixcbiAgICBsaWdodGJsdWU6IFwiI0FERDhFNlwiLFxuICAgIGdyZWVueWVsbG93OiBcIiNBREZGMkZcIixcbiAgICBwYWxldHVycXVvaXNlOiBcIiNBRkVFRUVcIixcbiAgICBsaWdodHN0ZWVsYmx1ZTogXCIjQjBDNERFXCIsXG4gICAgcG93ZGVyYmx1ZTogXCIjQjBFMEU2XCIsXG4gICAgZmlyZWJyaWNrOiBcIiNCMjIyMjJcIixcbiAgICBkYXJrZ29sZGVucm9kOiBcIiNCODg2MEJcIixcbiAgICBtZWRpdW1vcmNoaWQ6IFwiI0JBNTVEM1wiLFxuICAgIHJvc3licm93bjogXCIjQkM4RjhGXCIsXG4gICAgZGFya2toYWtpOiBcIiNCREI3NkJcIixcbiAgICBtZWRpdW12aW9sZXRyZWQ6IFwiI0M3MTU4NVwiLFxuICAgIGluZGlhbnJlZDogXCIjQ0Q1QzVDXCIsXG4gICAgcGVydTogXCIjQ0Q4NTNGXCIsXG4gICAgY2hvY29sYXRlOiBcIiNEMjY5MUVcIixcbiAgICB0YW46IFwiI0QyQjQ4Q1wiLFxuICAgIGxpZ2h0Z3JheTogXCIjRDNEM0QzXCIsXG4gICAgbGlnaHRncmV5OiBcIiNEM0QzRDNcIixcbiAgICB0aGlzdGxlOiBcIiNEOEJGRDhcIixcbiAgICBvcmNoaWQ6IFwiI0RBNzBENlwiLFxuICAgIGdvbGRlbnJvZDogXCIjREFBNTIwXCIsXG4gICAgcGFsZXZpb2xldHJlZDogXCIjREI3MDkzXCIsXG4gICAgY3JpbXNvbjogXCIjREMxNDNDXCIsXG4gICAgZ2FpbnNib3JvOiBcIiNEQ0RDRENcIixcbiAgICBwbHVtOiBcIiNEREEwRERcIixcbiAgICBidXJseXdvb2Q6IFwiI0RFQjg4N1wiLFxuICAgIGxpZ2h0Y3lhbjogXCIjRTBGRkZGXCIsXG4gICAgbGF2ZW5kZXI6IFwiI0U2RTZGQVwiLFxuICAgIGRhcmtzYWxtb246IFwiI0U5OTY3QVwiLFxuICAgIHZpb2xldDogXCIjRUU4MkVFXCIsXG4gICAgcGFsZWdvbGRlbnJvZDogXCIjRUVFOEFBXCIsXG4gICAgbGlnaHRjb3JhbDogXCIjRjA4MDgwXCIsXG4gICAga2hha2k6IFwiI0YwRTY4Q1wiLFxuICAgIGFsaWNlYmx1ZTogXCIjRjBGOEZGXCIsXG4gICAgaG9uZXlkZXc6IFwiI0YwRkZGMFwiLFxuICAgIGF6dXJlOiBcIiNGMEZGRkZcIixcbiAgICBzYW5keWJyb3duOiBcIiNGNEE0NjBcIixcbiAgICB3aGVhdDogXCIjRjVERUIzXCIsXG4gICAgYmVpZ2U6IFwiI0Y1RjVEQ1wiLFxuICAgIHdoaXRlc21va2U6IFwiI0Y1RjVGNVwiLFxuICAgIG1pbnRjcmVhbTogXCIjRjVGRkZBXCIsXG4gICAgZ2hvc3R3aGl0ZTogXCIjRjhGOEZGXCIsXG4gICAgc2FsbW9uOiBcIiNGQTgwNzJcIixcbiAgICBhbnRpcXVld2hpdGU6IFwiI0ZBRUJEN1wiLFxuICAgIGxpbmVuOiBcIiNGQUYwRTZcIixcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogXCIjRkFGQUQyXCIsXG4gICAgb2xkbGFjZTogXCIjRkRGNUU2XCIsXG4gICAgbWFnZW50YTogXCIjRkYwMEZGXCIsXG4gICAgZGVlcHBpbms6IFwiI0ZGMTQ5M1wiLFxuICAgIG9yYW5nZXJlZDogXCIjRkY0NTAwXCIsXG4gICAgdG9tYXRvOiBcIiNGRjYzNDdcIixcbiAgICBob3RwaW5rOiBcIiNGRjY5QjRcIixcbiAgICBjb3JhbDogXCIjRkY3RjUwXCIsXG4gICAgZGFya29yYW5nZTogXCIjRkY4QzAwXCIsXG4gICAgbGlnaHRzYWxtb246IFwiI0ZGQTA3QVwiLFxuICAgIG9yYW5nZTogXCIjRkZBNTAwXCIsXG4gICAgbGlnaHRwaW5rOiBcIiNGRkI2QzFcIixcbiAgICBwaW5rOiBcIiNGRkMwQ0JcIixcbiAgICBnb2xkOiBcIiNGRkQ3MDBcIixcbiAgICBwZWFjaHB1ZmY6IFwiI0ZGREFCOVwiLFxuICAgIG5hdmFqb3doaXRlOiBcIiNGRkRFQURcIixcbiAgICBtb2NjYXNpbjogXCIjRkZFNEI1XCIsXG4gICAgYmlzcXVlOiBcIiNGRkU0QzRcIixcbiAgICBtaXN0eXJvc2U6IFwiI0ZGRTRFMVwiLFxuICAgIGJsYW5jaGVkYWxtb25kOiBcIiNGRkVCQ0RcIixcbiAgICBwYXBheWF3aGlwOiBcIiNGRkVGRDVcIixcbiAgICBsYXZlbmRlcmJsdXNoOiBcIiNGRkYwRjVcIixcbiAgICBzZWFzaGVsbDogXCIjRkZGNUVFXCIsXG4gICAgY29ybnNpbGs6IFwiI0ZGRjhEQ1wiLFxuICAgIGxlbW9uY2hpZmZvbjogXCIjRkZGQUNEXCIsXG4gICAgZmxvcmFsd2hpdGU6IFwiI0ZGRkFGMFwiLFxuICAgIHNub3c6IFwiI0ZGRkFGQVwiLFxuICAgIGxpZ2h0eWVsbG93OiBcIiNGRkZGRTBcIixcbiAgICBpdm9yeTogXCIjRkZGRkYwXCIsXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmN1YmljSW5PdXQgPSBleHBvcnRzLmN1YmljT3V0ID0gZXhwb3J0cy5jdWJpY0luID0gZXhwb3J0cy5xdWFkcmF0aWNJbk91dCA9IGV4cG9ydHMucXVhZHJhdGljT3V0ID0gZXhwb3J0cy5xdWFkcmF0aWNJbiA9IGV4cG9ydHMubGluZWFyID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBFYXNpbmdzXG4gKiA9PT09PT09PT09PT09PT09PVxuICpcbiAqIEhhbmR5IGNvbGxlY3Rpb24gb2YgZWFzaW5nIGZ1bmN0aW9ucy5cbiAqIEBtb2R1bGVcbiAqL1xudmFyIGxpbmVhciA9IGZ1bmN0aW9uIChrKSB7IHJldHVybiBrOyB9O1xuZXhwb3J0cy5saW5lYXIgPSBsaW5lYXI7XG52YXIgcXVhZHJhdGljSW4gPSBmdW5jdGlvbiAoaykgeyByZXR1cm4gayAqIGs7IH07XG5leHBvcnRzLnF1YWRyYXRpY0luID0gcXVhZHJhdGljSW47XG52YXIgcXVhZHJhdGljT3V0ID0gZnVuY3Rpb24gKGspIHsgcmV0dXJuIGsgKiAoMiAtIGspOyB9O1xuZXhwb3J0cy5xdWFkcmF0aWNPdXQgPSBxdWFkcmF0aWNPdXQ7XG52YXIgcXVhZHJhdGljSW5PdXQgPSBmdW5jdGlvbiAoaykge1xuICAgIGlmICgoayAqPSAyKSA8IDEpXG4gICAgICAgIHJldHVybiAwLjUgKiBrICogaztcbiAgICByZXR1cm4gLTAuNSAqICgtLWsgKiAoayAtIDIpIC0gMSk7XG59O1xuZXhwb3J0cy5xdWFkcmF0aWNJbk91dCA9IHF1YWRyYXRpY0luT3V0O1xudmFyIGN1YmljSW4gPSBmdW5jdGlvbiAoaykgeyByZXR1cm4gayAqIGsgKiBrOyB9O1xuZXhwb3J0cy5jdWJpY0luID0gY3ViaWNJbjtcbnZhciBjdWJpY091dCA9IGZ1bmN0aW9uIChrKSB7IHJldHVybiAtLWsgKiBrICogayArIDE7IH07XG5leHBvcnRzLmN1YmljT3V0ID0gY3ViaWNPdXQ7XG52YXIgY3ViaWNJbk91dCA9IGZ1bmN0aW9uIChrKSB7XG4gICAgaWYgKChrICo9IDIpIDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqIGsgKiBrICogaztcbiAgICByZXR1cm4gMC41ICogKChrIC09IDIpICogayAqIGsgKyAyKTtcbn07XG5leHBvcnRzLmN1YmljSW5PdXQgPSBjdWJpY0luT3V0O1xudmFyIGVhc2luZ3MgPSB7XG4gICAgbGluZWFyOiBleHBvcnRzLmxpbmVhcixcbiAgICBxdWFkcmF0aWNJbjogZXhwb3J0cy5xdWFkcmF0aWNJbixcbiAgICBxdWFkcmF0aWNPdXQ6IGV4cG9ydHMucXVhZHJhdGljT3V0LFxuICAgIHF1YWRyYXRpY0luT3V0OiBleHBvcnRzLnF1YWRyYXRpY0luT3V0LFxuICAgIGN1YmljSW46IGV4cG9ydHMuY3ViaWNJbixcbiAgICBjdWJpY091dDogZXhwb3J0cy5jdWJpY091dCxcbiAgICBjdWJpY0luT3V0OiBleHBvcnRzLmN1YmljSW5PdXQsXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZWFzaW5ncztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kb0VkZ2VDb2xsaWRlV2l0aFBvaW50ID0gZXhwb3J0cy5pc1BpeGVsQ29sb3JlZCA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBoZWxwZXIgcmV0dXJucyB0cnVlIGlzIHRoZSBwaXhlbCBhdCAoeCx5KSBpbiB0aGUgZ2l2ZW4gV2ViR0wgY29udGV4dCBpc1xuICogY29sb3JlZCwgYW5kIGZhbHNlIGVsc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUGl4ZWxDb2xvcmVkKGdsLCB4LCB5KSB7XG4gICAgdmFyIHBpeGVscyA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGdsLnJlYWRQaXhlbHMoeCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCAtIHksIDEsIDEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHBpeGVscyk7XG4gICAgcmV0dXJuIHBpeGVsc1szXSA+IDA7XG59XG5leHBvcnRzLmlzUGl4ZWxDb2xvcmVkID0gaXNQaXhlbENvbG9yZWQ7XG4vKipcbiAqIFRoaXMgaGVscGVyIGNoZWNrcyB3aGV0aGVyIG9yIG5vdCBhIHBvaW50ICh4LCB5KSBjb2xsaWRlcyB3aXRoIGFuXG4gKiBlZGdlLCBjb25uZWN0aW5nIGEgc291cmNlICh4UywgeVMpIHRvIGEgdGFyZ2V0ICh4VCwgeVQpIHdpdGggYSB0aGlja25lc3MgaW5cbiAqIHBpeGVscy5cbiAqL1xuZnVuY3Rpb24gZG9FZGdlQ29sbGlkZVdpdGhQb2ludCh4LCB5LCB4UywgeVMsIHhULCB5VCwgdGhpY2tuZXNzKSB7XG4gICAgLy8gQ2hlY2sgZmlyc3QgaWYgcG9pbnQgaXMgb3V0IG9mIHRoZSByZWN0YW5nbGUgd2hpY2ggb3Bwb3NpdGUgY29ybmVycyBhcmUgdGhlXG4gICAgLy8gc291cmNlIGFuZCB0aGUgdGFyZ2V0LCByZWN0YW5nbGUgd2UgZXhwYW5kIGJ5IGB0aGlja25lc3NgIGluIGV2ZXJ5XG4gICAgLy8gZGlyZWN0aW9uczpcbiAgICBpZiAoeCA8IHhTIC0gdGhpY2tuZXNzICYmIHggPCB4VCAtIHRoaWNrbmVzcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh5IDwgeVMgLSB0aGlja25lc3MgJiYgeSA8IHlUIC0gdGhpY2tuZXNzKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHggPiB4UyArIHRoaWNrbmVzcyAmJiB4ID4geFQgKyB0aGlja25lc3MpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoeSA+IHlTICsgdGhpY2tuZXNzICYmIHkgPiB5VCArIHRoaWNrbmVzcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIENoZWNrIGFjdHVhbCBjb2xsaXNpb24gbm93OiBTaW5jZSB3ZSBub3cgdGhlIHBvaW50IGlzIGluIHRoaXMgYmlnIHJlY3RhbmdsZVxuICAgIC8vIHdlIFwianVzdFwiIG5lZWQgdG8gY2hlY2sgdGhhdCB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgcG9pbnQgYW5kIHRoZSBsaW5lXG4gICAgLy8gY29ubmVjdGluZyB0aGUgc291cmNlIGFuZCB0aGUgdGFyZ2V0IGlzIGxlc3MgdGhhbiBgdGhpY2tuZXNzYDpcbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaXN0YW5jZV9mcm9tX2FfcG9pbnRfdG9fYV9saW5lXG4gICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnMoKHhUIC0geFMpICogKHlTIC0geSkgLSAoeFMgLSB4KSAqICh5VCAtIHlTKSkgLyBNYXRoLnNxcnQoTWF0aC5wb3coeFQgLSB4UywgMikgKyBNYXRoLnBvdyh5VCAtIHlTLCAyKSk7XG4gICAgcmV0dXJuIGRpc3RhbmNlIDwgdGhpY2tuZXNzIC8gMjtcbn1cbmV4cG9ydHMuZG9FZGdlQ29sbGlkZVdpdGhQb2ludCA9IGRvRWRnZUNvbGxpZGVXaXRoUG9pbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVHcmFwaCA9IGV4cG9ydHMuY2FuVXNlMzJCaXRzSW5kaWNlcyA9IGV4cG9ydHMuZXh0cmFjdFBpeGVsID0gZXhwb3J0cy5nZXRNYXRyaXhJbXBhY3QgPSBleHBvcnRzLm1hdHJpeEZyb21DYW1lcmEgPSBleHBvcnRzLmdldENvcnJlY3Rpb25SYXRpbyA9IGV4cG9ydHMuZmxvYXRDb2xvciA9IGV4cG9ydHMuZmxvYXRBcnJheUNvbG9yID0gZXhwb3J0cy5wYXJzZUNvbG9yID0gZXhwb3J0cy56SW5kZXhPcmRlcmluZyA9IGV4cG9ydHMuY3JlYXRlTm9ybWFsaXphdGlvbkZ1bmN0aW9uID0gZXhwb3J0cy5ncmFwaEV4dGVudCA9IGV4cG9ydHMuZ2V0UGl4ZWxSYXRpbyA9IGV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGV4cG9ydHMuY2FuY2VsRnJhbWUgPSBleHBvcnRzLnJlcXVlc3RGcmFtZSA9IGV4cG9ydHMuYXNzaWduRGVlcCA9IGV4cG9ydHMuYXNzaWduID0gZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gdm9pZCAwO1xudmFyIGlzX2dyYXBoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImdyYXBob2xvZ3ktdXRpbHMvaXMtZ3JhcGhcIikpO1xudmFyIG1hdHJpY2VzXzEgPSByZXF1aXJlKFwiLi9tYXRyaWNlc1wiKTtcbnZhciBkYXRhXzEgPSByZXF1aXJlKFwiLi9kYXRhXCIpO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHBhcmFtICB7bWl4ZWR9ICAgdmFsdWUgLSBUYXJnZXQgdmFsdWUuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4vKipcbiAqIEhlbHBlciB0byB1c2UgT2JqZWN0LmFzc2lnbiB3aXRoIG1vcmUgdGhhbiB0d28gb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IHRhcmdldCAgICAgICAtIEZpcnN0IG9iamVjdC5cbiAqIEBwYXJhbSAge29iamVjdH0gWy4uLm9iamVjdHNdIC0gT2JqZWN0cyB0byBtZXJnZS5cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JqZWN0c1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIG8gPSBvYmplY3RzW2ldO1xuICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIG8pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG4vKipcbiAqIFZlcnkgc2ltcGxlIHJlY3Vyc2l2ZSBPYmplY3QuYXNzaWduLWxpa2UgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSB0YXJnZXQgICAgICAgLSBGaXJzdCBvYmplY3QuXG4gKiBAcGFyYW0gIHtvYmplY3R9IFsuLi5vYmplY3RzXSAtIE9iamVjdHMgdG8gbWVyZ2UuXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGFzc2lnbkRlZXAodGFyZ2V0KSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYmplY3RzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgbyA9IG9iamVjdHNbaV07XG4gICAgICAgIGlmICghbylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBmb3IgKHZhciBrIGluIG8pIHtcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG9ba10pKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tdID0gYXNzaWduRGVlcCh0YXJnZXRba10sIG9ba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tdID0gb1trXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0cy5hc3NpZ25EZWVwID0gYXNzaWduRGVlcDtcbi8qKlxuICogSnVzdCBzb21lIGRpcnR5IHRyaWNrIHRvIG1ha2UgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGFuZCBjYW5jZWxBbmltYXRpb25GcmFtZSBcIndvcmtcIiBpbiBOb2RlLmpzLCBmb3IgdW5pdCB0ZXN0czpcbiAqL1xuZXhwb3J0cy5yZXF1ZXN0RnJhbWUgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7IH1cbiAgICA6IGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7IH07XG5leHBvcnRzLmNhbmNlbEZyYW1lID0gdHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiAocmVxdWVzdElEKSB7IHJldHVybiBjYW5jZWxBbmltYXRpb25GcmFtZShyZXF1ZXN0SUQpOyB9XG4gICAgOiBmdW5jdGlvbiAocmVxdWVzdElEKSB7IHJldHVybiBjbGVhclRpbWVvdXQocmVxdWVzdElEKTsgfTtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgRE9NIGVsZW1lbnRzIGVhc2lseS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRhZyAgICAgICAgLSBUYWcgbmFtZSBvZiB0aGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcGFyYW0gIHtvYmplY3R9IHN0eWxlICAgICAgLSBTdHlsZXMgbWFwLlxuICogQHBhcmFtICB7b2JqZWN0fSBhdHRyaWJ1dGVzIC0gQXR0cmlidXRlcyBtYXAuXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIHN0eWxlLCBhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVba10gPSBzdHlsZVtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgICBmb3IgKHZhciBrIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGssIGF0dHJpYnV0ZXNba10pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xufVxuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudDtcbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBicm93c2VyJ3MgcGl4ZWwgcmF0aW8uXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRQaXhlbFJhdGlvKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LmRldmljZVBpeGVsUmF0aW8gIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICByZXR1cm4gMTtcbn1cbmV4cG9ydHMuZ2V0UGl4ZWxSYXRpbyA9IGdldFBpeGVsUmF0aW87XG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgZ3JhcGgncyBub2RlIGV4dGVudCBpbiB4ICYgeS5cbiAqXG4gKiBAcGFyYW0gIHtHcmFwaH1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ3JhcGhFeHRlbnQoZ3JhcGgpIHtcbiAgICBpZiAoIWdyYXBoLm9yZGVyKVxuICAgICAgICByZXR1cm4geyB4OiBbMCwgMV0sIHk6IFswLCAxXSB9O1xuICAgIHZhciB4TWluID0gSW5maW5pdHk7XG4gICAgdmFyIHhNYXggPSAtSW5maW5pdHk7XG4gICAgdmFyIHlNaW4gPSBJbmZpbml0eTtcbiAgICB2YXIgeU1heCA9IC1JbmZpbml0eTtcbiAgICBncmFwaC5mb3JFYWNoTm9kZShmdW5jdGlvbiAoXywgYXR0cikge1xuICAgICAgICB2YXIgeCA9IGF0dHIueCwgeSA9IGF0dHIueTtcbiAgICAgICAgaWYgKHggPCB4TWluKVxuICAgICAgICAgICAgeE1pbiA9IHg7XG4gICAgICAgIGlmICh4ID4geE1heClcbiAgICAgICAgICAgIHhNYXggPSB4O1xuICAgICAgICBpZiAoeSA8IHlNaW4pXG4gICAgICAgICAgICB5TWluID0geTtcbiAgICAgICAgaWYgKHkgPiB5TWF4KVxuICAgICAgICAgICAgeU1heCA9IHk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgeDogW3hNaW4sIHhNYXhdLCB5OiBbeU1pbiwgeU1heF0gfTtcbn1cbmV4cG9ydHMuZ3JhcGhFeHRlbnQgPSBncmFwaEV4dGVudDtcbmZ1bmN0aW9uIGNyZWF0ZU5vcm1hbGl6YXRpb25GdW5jdGlvbihleHRlbnQpIHtcbiAgICB2YXIgX2EgPSBfX3JlYWQoZXh0ZW50LngsIDIpLCBtaW5YID0gX2FbMF0sIG1heFggPSBfYVsxXSwgX2IgPSBfX3JlYWQoZXh0ZW50LnksIDIpLCBtaW5ZID0gX2JbMF0sIG1heFkgPSBfYlsxXTtcbiAgICB2YXIgcmF0aW8gPSBNYXRoLm1heChtYXhYIC0gbWluWCwgbWF4WSAtIG1pblkpLCBkWCA9IChtYXhYICsgbWluWCkgLyAyLCBkWSA9IChtYXhZICsgbWluWSkgLyAyO1xuICAgIGlmIChyYXRpbyA9PT0gMCB8fCBNYXRoLmFicyhyYXRpbykgPT09IEluZmluaXR5IHx8IGlzTmFOKHJhdGlvKSlcbiAgICAgICAgcmF0aW8gPSAxO1xuICAgIGlmIChpc05hTihkWCkpXG4gICAgICAgIGRYID0gMDtcbiAgICBpZiAoaXNOYU4oZFkpKVxuICAgICAgICBkWSA9IDA7XG4gICAgdmFyIGZuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IDAuNSArIChkYXRhLnggLSBkWCkgLyByYXRpbyxcbiAgICAgICAgICAgIHk6IDAuNSArIChkYXRhLnkgLSBkWSkgLyByYXRpbyxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8vIFRPRE86IHBvc3NpYmlsaXR5IHRvIGFwcGx5IHRoaXMgaW4gYmF0Y2ggb3ZlciBhcnJheSBvZiBpbmRpY2VzXG4gICAgZm4uYXBwbHlUbyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGRhdGEueCA9IDAuNSArIChkYXRhLnggLSBkWCkgLyByYXRpbztcbiAgICAgICAgZGF0YS55ID0gMC41ICsgKGRhdGEueSAtIGRZKSAvIHJhdGlvO1xuICAgIH07XG4gICAgZm4uaW52ZXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBkWCArIHJhdGlvICogKGRhdGEueCAtIDAuNSksXG4gICAgICAgICAgICB5OiBkWSArIHJhdGlvICogKGRhdGEueSAtIDAuNSksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBmbi5yYXRpbyA9IHJhdGlvO1xuICAgIHJldHVybiBmbjtcbn1cbmV4cG9ydHMuY3JlYXRlTm9ybWFsaXphdGlvbkZ1bmN0aW9uID0gY3JlYXRlTm9ybWFsaXphdGlvbkZ1bmN0aW9uO1xuLyoqXG4gKiBGdW5jdGlvbiBvcmRlcmluZyB0aGUgZ2l2ZW4gZWxlbWVudHMgaW4gcmV2ZXJzZSB6LW9yZGVyIHNvIHRoZXkgZHJhd25cbiAqIHRoZSBjb3JyZWN0IHdheS5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICAgZXh0ZW50ICAgLSBbbWluLCBtYXhdIHogdmFsdWVzLlxuICogQHBhcmFtICB7ZnVuY3Rpb259IGdldHRlciAgIC0gWiBhdHRyaWJ1dGUgZ2V0dGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtICB7YXJyYXl9ICAgIGVsZW1lbnRzIC0gVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcmV0dXJuIHthcnJheX0gLSBUaGUgc29ydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiB6SW5kZXhPcmRlcmluZyhleHRlbnQsIGdldHRlciwgZWxlbWVudHMpIHtcbiAgICAvLyBJZiBrIGlzID4gbiwgd2UnbGwgdXNlIGEgc3RhbmRhcmQgc29ydFxuICAgIHJldHVybiBlbGVtZW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHZhciB6QSA9IGdldHRlcihhKSB8fCAwLCB6QiA9IGdldHRlcihiKSB8fCAwO1xuICAgICAgICBpZiAoekEgPCB6QilcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgaWYgKHpBID4gekIpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgLy8gVE9ETzogY291bnRpbmcgc29ydCBvcHRpbWl6YXRpb25cbn1cbmV4cG9ydHMuekluZGV4T3JkZXJpbmcgPSB6SW5kZXhPcmRlcmluZztcbi8qKlxuICogV2ViR0wgdXRpbHNcbiAqID09PT09PT09PT09XG4gKi9cbi8qKlxuICogTWVtb2l6ZWQgZnVuY3Rpb24gcmV0dXJuaW5nIGEgZmxvYXQtZW5jb2RlZCBjb2xvciBmcm9tIHZhcmlvdXMgc3RyaW5nXG4gKiBmb3JtYXRzIGRlc2NyaWJpbmcgY29sb3JzLlxuICovXG52YXIgSU5UOCA9IG5ldyBJbnQ4QXJyYXkoNCk7XG52YXIgSU5UMzIgPSBuZXcgSW50MzJBcnJheShJTlQ4LmJ1ZmZlciwgMCwgMSk7XG52YXIgRkxPQVQzMiA9IG5ldyBGbG9hdDMyQXJyYXkoSU5UOC5idWZmZXIsIDAsIDEpO1xudmFyIFJHQkFfVEVTVF9SRUdFWCA9IC9eXFxzKnJnYmE/XFxzKlxcKC87XG52YXIgUkdCQV9FWFRSQUNUX1JFR0VYID0gL15cXHMqcmdiYT9cXHMqXFwoXFxzKihbMC05XSopXFxzKixcXHMqKFswLTldKilcXHMqLFxccyooWzAtOV0qKSg/OlxccyosXFxzKiguKik/KT9cXClcXHMqJC87XG5mdW5jdGlvbiBwYXJzZUNvbG9yKHZhbCkge1xuICAgIHZhciByID0gMDsgLy8gYnl0ZVxuICAgIHZhciBnID0gMDsgLy8gYnl0ZVxuICAgIHZhciBiID0gMDsgLy8gYnl0ZVxuICAgIHZhciBhID0gMTsgLy8gZmxvYXRcbiAgICAvLyBIYW5kbGluZyBoZXhhZGVjaW1hbCBub3RhdGlvblxuICAgIGlmICh2YWxbMF0gPT09IFwiI1wiKSB7XG4gICAgICAgIGlmICh2YWwubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICByID0gcGFyc2VJbnQodmFsLmNoYXJBdCgxKSArIHZhbC5jaGFyQXQoMSksIDE2KTtcbiAgICAgICAgICAgIGcgPSBwYXJzZUludCh2YWwuY2hhckF0KDIpICsgdmFsLmNoYXJBdCgyKSwgMTYpO1xuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbC5jaGFyQXQoMykgKyB2YWwuY2hhckF0KDMpLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByID0gcGFyc2VJbnQodmFsLmNoYXJBdCgxKSArIHZhbC5jaGFyQXQoMiksIDE2KTtcbiAgICAgICAgICAgIGcgPSBwYXJzZUludCh2YWwuY2hhckF0KDMpICsgdmFsLmNoYXJBdCg0KSwgMTYpO1xuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbC5jaGFyQXQoNSkgKyB2YWwuY2hhckF0KDYpLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbC5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgICAgIGEgPSBwYXJzZUludCh2YWwuY2hhckF0KDcpICsgdmFsLmNoYXJBdCg4KSwgMTYpIC8gMjU1O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsaW5nIHJnYiBub3RhdGlvblxuICAgIGVsc2UgaWYgKFJHQkFfVEVTVF9SRUdFWC50ZXN0KHZhbCkpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gdmFsLm1hdGNoKFJHQkFfRVhUUkFDVF9SRUdFWCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgciA9ICttYXRjaFsxXTtcbiAgICAgICAgICAgIGcgPSArbWF0Y2hbMl07XG4gICAgICAgICAgICBiID0gK21hdGNoWzNdO1xuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKVxuICAgICAgICAgICAgICAgIGEgPSArbWF0Y2hbNF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcjogciwgZzogZywgYjogYiwgYTogYSB9O1xufVxuZXhwb3J0cy5wYXJzZUNvbG9yID0gcGFyc2VDb2xvcjtcbnZhciBGTE9BVF9DT0xPUl9DQUNIRSA9IHt9O1xuZm9yICh2YXIgaHRtbENvbG9yIGluIGRhdGFfMS5IVE1MX0NPTE9SUykge1xuICAgIEZMT0FUX0NPTE9SX0NBQ0hFW2h0bWxDb2xvcl0gPSBmbG9hdENvbG9yKGRhdGFfMS5IVE1MX0NPTE9SU1todG1sQ29sb3JdKTtcbiAgICAvLyBSZXBsaWNhdGluZyBjYWNoZSBmb3IgaGV4IHZhbHVlcyBmb3IgZnJlZVxuICAgIEZMT0FUX0NPTE9SX0NBQ0hFW2RhdGFfMS5IVE1MX0NPTE9SU1todG1sQ29sb3JdXSA9IEZMT0FUX0NPTE9SX0NBQ0hFW2h0bWxDb2xvcl07XG59XG5mdW5jdGlvbiBmbG9hdEFycmF5Q29sb3IodmFsKSB7XG4gICAgdmFsID0gZGF0YV8xLkhUTUxfQ09MT1JTW3ZhbF0gfHwgdmFsO1xuICAgIC8vIE5PVEU6IHRoaXMgdmFyaWFudCBpcyBub3QgY2FjaGVkIGJlY2F1c2UgaXQgaXMgbW9zdGx5IHVzZWQgZm9yIHVuaWZvcm1zXG4gICAgdmFyIF9hID0gcGFyc2VDb2xvcih2YWwpLCByID0gX2EuciwgZyA9IF9hLmcsIGIgPSBfYS5iLCBhID0gX2EuYTtcbiAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbciAvIDI1NSwgZyAvIDI1NSwgYiAvIDI1NSwgYV0pO1xufVxuZXhwb3J0cy5mbG9hdEFycmF5Q29sb3IgPSBmbG9hdEFycmF5Q29sb3I7XG5mdW5jdGlvbiBmbG9hdENvbG9yKHZhbCkge1xuICAgIC8vIElmIHRoZSBjb2xvciBpcyBhbHJlYWR5IGNvbXB1dGVkLCB3ZSB5aWVsZCBpdFxuICAgIGlmICh0eXBlb2YgRkxPQVRfQ09MT1JfQ0FDSEVbdmFsXSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIEZMT0FUX0NPTE9SX0NBQ0hFW3ZhbF07XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlQ29sb3IodmFsKTtcbiAgICB2YXIgciA9IHBhcnNlZC5yLCBnID0gcGFyc2VkLmcsIGIgPSBwYXJzZWQuYjtcbiAgICB2YXIgYSA9IHBhcnNlZC5hO1xuICAgIGEgPSAoYSAqIDI1NSkgfCAwO1xuICAgIElOVDMyWzBdID0gKChhIDw8IDI0KSB8IChiIDw8IDE2KSB8IChnIDw8IDgpIHwgcikgJiAweGZlZmZmZmZmO1xuICAgIHZhciBjb2xvciA9IEZMT0FUMzJbMF07XG4gICAgRkxPQVRfQ09MT1JfQ0FDSEVbdmFsXSA9IGNvbG9yO1xuICAgIHJldHVybiBjb2xvcjtcbn1cbmV4cG9ydHMuZmxvYXRDb2xvciA9IGZsb2F0Q29sb3I7XG4vKipcbiAqIEluIHNpZ21hLCB0aGUgZ3JhcGggaXMgbm9ybWFsaXplZCBpbnRvIGEgWzAsIDFdLCBbMCwgMV0gc3F1YXJlLCBiZWZvcmUgYmVpbmcgZ2l2ZW4gdG8gdGhlIHZhcmlvdXMgcmVuZGVyZXJzLiBUaGlzXG4gKiBoZWxwcyBkZWFsaW5nIHdpdGggcXVhZHRyZWUgaW4gcGFydGljdWxhci5cbiAqIEJ1dCBhdCBzb21lIHBvaW50LCB3ZSBuZWVkIHRvIHJlc2NhbGUgaXQgc28gdGhhdCBpdCB0YWtlcyB0aGUgYmVzdCBwbGFjZSBpbiB0aGUgc2NyZWVuLCBpZS4gd2UgYWx3YXlzIHdhbnQgdG8gc2VlIHR3b1xuICogbm9kZXMgXCJ0b3VjaGluZ1wiIG9wcG9zaXRlIHNpZGVzIG9mIHRoZSBncmFwaCwgd2l0aCB0aGUgY2FtZXJhIGJlaW5nIGF0IGl0cyBkZWZhdWx0IHN0YXRlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyB0aGlzIHJhdGlvLlxuICovXG5mdW5jdGlvbiBnZXRDb3JyZWN0aW9uUmF0aW8odmlld3BvcnREaW1lbnNpb25zLCBncmFwaERpbWVuc2lvbnMpIHtcbiAgICB2YXIgdmlld3BvcnRSYXRpbyA9IHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQgLyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGg7XG4gICAgdmFyIGdyYXBoUmF0aW8gPSBncmFwaERpbWVuc2lvbnMuaGVpZ2h0IC8gZ3JhcGhEaW1lbnNpb25zLndpZHRoO1xuICAgIC8vIElmIHRoZSBzdGFnZSBhbmQgdGhlIGdyYXBocyBhcmUgaW4gZGlmZmVyZW50IGRpcmVjdGlvbnMgKHN1Y2ggYXMgdGhlIGdyYXBoIGJlaW5nIHdpZGVyIHRoYXQgdGFsbCB3aGlsZSB0aGUgc3RhZ2VcbiAgICAvLyBpcyB0YWxsZXIgdGhhbiB3aWRlKSwgd2UgY2FuIHN0b3AgaGVyZSB0byBoYXZlIGluZGVlZCBub2RlcyB0b3VjaGluZyBvcHBvc2l0ZSBzaWRlczpcbiAgICBpZiAoKHZpZXdwb3J0UmF0aW8gPCAxICYmIGdyYXBoUmF0aW8gPiAxKSB8fCAodmlld3BvcnRSYXRpbyA+IDEgJiYgZ3JhcGhSYXRpbyA8IDEpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyBFbHNlLCB3ZSBuZWVkIHRvIGZpdCB0aGUgZ3JhcGggaW5zaWRlIHRoZSBzdGFnZTpcbiAgICAvLyAxLiBJZiB0aGUgZ3JhcGggaXMgXCJzcXVhcmVyXCIgKGllLiB3aXRoIGEgcmF0aW8gY2xvc2VyIHRvIDEpLCB3ZSBuZWVkIHRvIG1ha2UgdGhlIGxhcmdlc3Qgc2lkZXMgdG91Y2g7XG4gICAgLy8gMi4gSWYgdGhlIHN0YWdlIGlzIFwic3F1YXJlclwiLCB3ZSBuZWVkIHRvIG1ha2UgdGhlIHNtYWxsZXN0IHNpZGVzIHRvdWNoLlxuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChncmFwaFJhdGlvLCAxIC8gZ3JhcGhSYXRpbyksIE1hdGgubWF4KDEgLyB2aWV3cG9ydFJhdGlvLCB2aWV3cG9ydFJhdGlvKSk7XG59XG5leHBvcnRzLmdldENvcnJlY3Rpb25SYXRpbyA9IGdldENvcnJlY3Rpb25SYXRpbztcbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIGEgbWF0cml4IGZyb20gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNhbWVyYS5cbiAqL1xuLy8gVE9ETzogaXQncyBwb3NzaWJsZSB0byBvcHRpbWl6ZSB0aGlzIGRyYXN0aWNhbGx5IVxuZnVuY3Rpb24gbWF0cml4RnJvbUNhbWVyYShzdGF0ZSwgdmlld3BvcnREaW1lbnNpb25zLCBncmFwaERpbWVuc2lvbnMsIHBhZGRpbmcsIGludmVyc2UpIHtcbiAgICB2YXIgYW5nbGUgPSBzdGF0ZS5hbmdsZSwgcmF0aW8gPSBzdGF0ZS5yYXRpbywgeCA9IHN0YXRlLngsIHkgPSBzdGF0ZS55O1xuICAgIHZhciB3aWR0aCA9IHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCwgaGVpZ2h0ID0gdmlld3BvcnREaW1lbnNpb25zLmhlaWdodDtcbiAgICB2YXIgbWF0cml4ID0gKDAsIG1hdHJpY2VzXzEuaWRlbnRpdHkpKCk7XG4gICAgdmFyIHNtYWxsZXN0RGltZW5zaW9uID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLSAyICogcGFkZGluZztcbiAgICB2YXIgY29ycmVjdGlvblJhdGlvID0gZ2V0Q29ycmVjdGlvblJhdGlvKHZpZXdwb3J0RGltZW5zaW9ucywgZ3JhcGhEaW1lbnNpb25zKTtcbiAgICBpZiAoIWludmVyc2UpIHtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEuc2NhbGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCAyICogKHNtYWxsZXN0RGltZW5zaW9uIC8gd2lkdGgpICogY29ycmVjdGlvblJhdGlvLCAyICogKHNtYWxsZXN0RGltZW5zaW9uIC8gaGVpZ2h0KSAqIGNvcnJlY3Rpb25SYXRpbykpO1xuICAgICAgICAoMCwgbWF0cmljZXNfMS5tdWx0aXBseSkobWF0cml4LCAoMCwgbWF0cmljZXNfMS5yb3RhdGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCAtYW5nbGUpKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEuc2NhbGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCAxIC8gcmF0aW8pKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEudHJhbnNsYXRlKSgoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKSwgLXgsIC15KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAoMCwgbWF0cmljZXNfMS5tdWx0aXBseSkobWF0cml4LCAoMCwgbWF0cmljZXNfMS50cmFuc2xhdGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCB4LCB5KSk7XG4gICAgICAgICgwLCBtYXRyaWNlc18xLm11bHRpcGx5KShtYXRyaXgsICgwLCBtYXRyaWNlc18xLnNjYWxlKSgoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKSwgcmF0aW8pKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEucm90YXRlKSgoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKSwgYW5nbGUpKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEuc2NhbGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCB3aWR0aCAvIHNtYWxsZXN0RGltZW5zaW9uIC8gMiAvIGNvcnJlY3Rpb25SYXRpbywgaGVpZ2h0IC8gc21hbGxlc3REaW1lbnNpb24gLyAyIC8gY29ycmVjdGlvblJhdGlvKSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRyaXg7XG59XG5leHBvcnRzLm1hdHJpeEZyb21DYW1lcmEgPSBtYXRyaXhGcm9tQ2FtZXJhO1xuLyoqXG4gKiBBbGwgdGhlc2UgdHJhbnNmb3JtYXRpb25zIHdlIGFwcGx5IG9uIHRoZSBtYXRyaXggdG8gZ2V0IGl0IHJlc2NhbGUgdGhlIGdyYXBoXG4gKiBhcyB3ZSB3YW50IG1ha2UgaXQgdmVyeSBoYXJkIHRvIGdldCBwaXhlbC1wZXJmZWN0IGRpc3RhbmNlcyBpbiBXZWJHTC4gVGhpc1xuICogZnVuY3Rpb24gcmV0dXJucyBhIGZhY3RvciB0aGF0IHByb3Blcmx5IGNhbmNlbHMgdGhlIG1hdHJpeCBlZmZlY3Qgb24gbGVuZ3Rocy5cbiAqXG4gKiBbamFjb215YWxdXG4gKiBUbyBiZSBmdWxseSBob25lc3QsIEkgY2FuJ3QgcmVhbGx5IGV4cGxhaW4gaGFwcGVucyBoZXJlLi4uIEkgbm90aWNlIHRoYXQgdGhlXG4gKiBmb2xsb3dpbmcgcmF0aW8gd29ya3MgKGllLiBpdCBjb3JyZWN0bHkgY29tcGVuc2F0ZXMgdGhlIG1hdHJpeCBpbXBhY3Qgb24gYWxsXG4gKiBjYW1lcmEgc3RhdGVzIEkgY291bGQgdHJ5KTpcbiAqID4gYFIgPSBzaXplKFYpIC8gc2l6ZShNICogVikgLyBXYFxuICogYXMgbG9uZyBhcyBgTSAqIFZgIGlzIGluIHRoZSBkaXJlY3Rpb24gb2YgVyAoaWUuIHBhcmFsbGVsIHRvIChPeCkpLiBJdCB3b3Jrc1xuICogYXMgd2VsbCB3aXRoIEggYW5kIGEgdmVjdG9yIHRoYXQgdHJhbnNmb3JtcyBpbnRvIHNvbWV0aGluZyBwYXJhbGxlbCB0byAoT3kpLlxuICpcbiAqIEFsc28sIG5vdGUgdGhhdCB3ZSB1c2UgYGFuZ2xlYCBhbmQgbm90IGAtYW5nbGVgICh0aGF0IHdvdWxkIHNlZW0gbG9naWNhbCxcbiAqIHNpbmNlIHdlIHdhbnQgdG8gYW50aWNpcGF0ZSB0aGUgcm90YXRpb24pLCBiZWNhdXNlIG9mIHRoZSBmYWN0IHRoYXQgaW4gV2ViR0wsXG4gKiB0aGUgaW1hZ2UgaXMgdmVydGljYWxseSBzd2FwcGVkLlxuICovXG5mdW5jdGlvbiBnZXRNYXRyaXhJbXBhY3QobWF0cml4LCBjYW1lcmFTdGF0ZSwgdmlld3BvcnREaW1lbnNpb25zKSB7XG4gICAgdmFyIF9hID0gKDAsIG1hdHJpY2VzXzEubXVsdGlwbHlWZWMyKShtYXRyaXgsIHsgeDogTWF0aC5jb3MoY2FtZXJhU3RhdGUuYW5nbGUpLCB5OiBNYXRoLnNpbihjYW1lcmFTdGF0ZS5hbmdsZSkgfSwgMCksIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICByZXR1cm4gMSAvIE1hdGguc3FydChNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpKSAvIHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aDtcbn1cbmV4cG9ydHMuZ2V0TWF0cml4SW1wYWN0ID0gZ2V0TWF0cml4SW1wYWN0O1xuLyoqXG4gKiBGdW5jdGlvbiBleHRyYWN0aW5nIHRoZSBjb2xvciBhdCB0aGUgZ2l2ZW4gcGl4ZWwuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RQaXhlbChnbCwgeCwgeSwgYXJyYXkpIHtcbiAgICB2YXIgZGF0YSA9IGFycmF5IHx8IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGdsLnJlYWRQaXhlbHMoeCwgeSwgMSwgMSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5leHBvcnRzLmV4dHJhY3RQaXhlbCA9IGV4dHJhY3RQaXhlbDtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBrbm93IHdoZXRoZXIgZ2l2ZW4gd2ViZ2wgY29udGV4dCBjYW4gdXNlIDMyIGJpdHMgaW5kaWNlcy5cbiAqL1xuZnVuY3Rpb24gY2FuVXNlMzJCaXRzSW5kaWNlcyhnbCkge1xuICAgIHZhciB3ZWJnbDIgPSB0eXBlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG4gICAgcmV0dXJuIHdlYmdsMiB8fCAhIWdsLmdldEV4dGVuc2lvbihcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIik7XG59XG5leHBvcnRzLmNhblVzZTMyQml0c0luZGljZXMgPSBjYW5Vc2UzMkJpdHNJbmRpY2VzO1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ3JhcGggdmFyaWFibGUgaXMgYSB2YWxpZCBncmFwaCwgYW5kIGlmIHNpZ21hIGNhbiByZW5kZXIgaXQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlR3JhcGgoZ3JhcGgpIHtcbiAgICAvLyBjaGVjayBpZiBpdCdzIGEgdmFsaWQgZ3JhcGhvbG9neSBpbnN0YW5jZVxuICAgIGlmICghKDAsIGlzX2dyYXBoXzEuZGVmYXVsdCkoZ3JhcGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogaW52YWxpZCBncmFwaCBpbnN0YW5jZS5cIik7XG4gICAgLy8gY2hlY2sgaWYgbm9kZXMgaGF2ZSB4L3kgYXR0cmlidXRlc1xuICAgIGdyYXBoLmZvckVhY2hOb2RlKGZ1bmN0aW9uIChrZXksIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoYXR0cmlidXRlcy54KSB8fCAhTnVtYmVyLmlzRmluaXRlKGF0dHJpYnV0ZXMueSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpZ21hOiBDb29yZGluYXRlcyBvZiBub2RlIFwiLmNvbmNhdChrZXksIFwiIGFyZSBpbnZhbGlkLiBBIG5vZGUgbXVzdCBoYXZlIGEgbnVtZXJpYyAneCcgYW5kICd5JyBhdHRyaWJ1dGUuXCIpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy52YWxpZGF0ZUdyYXBoID0gdmFsaWRhdGVHcmFwaDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tdWx0aXBseVZlYzIgPSBleHBvcnRzLm11bHRpcGx5ID0gZXhwb3J0cy50cmFuc2xhdGUgPSBleHBvcnRzLnJvdGF0ZSA9IGV4cG9ydHMuc2NhbGUgPSBleHBvcnRzLmlkZW50aXR5ID0gdm9pZCAwO1xuZnVuY3Rpb24gaWRlbnRpdHkoKSB7XG4gICAgcmV0dXJuIEZsb2F0MzJBcnJheS5vZigxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxKTtcbn1cbmV4cG9ydHMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbi8vIFRPRE86IG9wdGltaXplXG5mdW5jdGlvbiBzY2FsZShtLCB4LCB5KSB7XG4gICAgbVswXSA9IHg7XG4gICAgbVs0XSA9IHR5cGVvZiB5ID09PSBcIm51bWJlclwiID8geSA6IHg7XG4gICAgcmV0dXJuIG07XG59XG5leHBvcnRzLnNjYWxlID0gc2NhbGU7XG5mdW5jdGlvbiByb3RhdGUobSwgcikge1xuICAgIHZhciBzID0gTWF0aC5zaW4ociksIGMgPSBNYXRoLmNvcyhyKTtcbiAgICBtWzBdID0gYztcbiAgICBtWzFdID0gcztcbiAgICBtWzNdID0gLXM7XG4gICAgbVs0XSA9IGM7XG4gICAgcmV0dXJuIG07XG59XG5leHBvcnRzLnJvdGF0ZSA9IHJvdGF0ZTtcbmZ1bmN0aW9uIHRyYW5zbGF0ZShtLCB4LCB5KSB7XG4gICAgbVs2XSA9IHg7XG4gICAgbVs3XSA9IHk7XG4gICAgcmV0dXJuIG07XG59XG5leHBvcnRzLnRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbmZ1bmN0aW9uIG11bHRpcGx5KGEsIGIpIHtcbiAgICB2YXIgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXTtcbiAgICB2YXIgYTEwID0gYVszXSwgYTExID0gYVs0XSwgYTEyID0gYVs1XTtcbiAgICB2YXIgYTIwID0gYVs2XSwgYTIxID0gYVs3XSwgYTIyID0gYVs4XTtcbiAgICB2YXIgYjAwID0gYlswXSwgYjAxID0gYlsxXSwgYjAyID0gYlsyXTtcbiAgICB2YXIgYjEwID0gYlszXSwgYjExID0gYls0XSwgYjEyID0gYls1XTtcbiAgICB2YXIgYjIwID0gYls2XSwgYjIxID0gYls3XSwgYjIyID0gYls4XTtcbiAgICBhWzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICAgIGFbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gICAgYVsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcbiAgICBhWzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICAgIGFbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gICAgYVs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcbiAgICBhWzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICAgIGFbN10gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjE7XG4gICAgYVs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcbiAgICByZXR1cm4gYTtcbn1cbmV4cG9ydHMubXVsdGlwbHkgPSBtdWx0aXBseTtcbmZ1bmN0aW9uIG11bHRpcGx5VmVjMihhLCBiLCB6KSB7XG4gICAgaWYgKHogPT09IHZvaWQgMCkgeyB6ID0gMTsgfVxuICAgIHZhciBhMDAgPSBhWzBdO1xuICAgIHZhciBhMDEgPSBhWzFdO1xuICAgIHZhciBhMTAgPSBhWzNdO1xuICAgIHZhciBhMTEgPSBhWzRdO1xuICAgIHZhciBhMjAgPSBhWzZdO1xuICAgIHZhciBhMjEgPSBhWzddO1xuICAgIHZhciBiMCA9IGIueDtcbiAgICB2YXIgYjEgPSBiLnk7XG4gICAgcmV0dXJuIHsgeDogYjAgKiBhMDAgKyBiMSAqIGExMCArIGEyMCAqIHosIHk6IGIwICogYTAxICsgYjEgKiBhMTEgKyBhMjEgKiB6IH07XG59XG5leHBvcnRzLm11bHRpcGx5VmVjMiA9IG11bHRpcGx5VmVjMjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgY29uc3QgdHJhbnNmb3JtVXJsID0gKHVybDogc3RyaW5nLCB2YWx1ZXM/OiBBcnJheTxzdHJpbmc+ICkgPT4ge1xyXG4gICAgaWYodmFsdWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gYCR7d2luZG93Lm9yaWdpbn0ke3VybH0/ZnJvbT0ke3ZhbHVlc1swXX0mdG89JHt2YWx1ZXNbMV19YDtcclxuICAgIH1cclxuICAgIHJldHVybiBgJHt3aW5kb3cub3JpZ2lufSR7dXJsfWA7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzZW5kUmVxdWVzdCA9ICh7IHVybCwgb3B0aW9ucywgdmFsdWVzIH06IHsgdXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCwgdmFsdWVzPzogQXJyYXk8c3RyaW5nPiB9KSA9PlxyXG4gICAgZmV0Y2godHJhbnNmb3JtVXJsKHVybCwgdmFsdWVzKSwgb3B0aW9ucyk7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VuZFBvc3REYXRhID0gKHsgdXJsLCBkYXRhLCB2YWx1ZXMgfTogeyB1cmw6IHN0cmluZywgZGF0YTogb2JqZWN0LCB2YWx1ZXM6IEFycmF5PHN0cmluZz4gfSkgPT5cclxuICAgIHNlbmRSZXF1ZXN0KHtcclxuICAgICAgICB1cmwsXHJcbiAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmFsdWVzXHJcbiAgICB9KTtcclxuIiwiaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwic2lnbWEvc2V0dGluZ3NcIjtcclxuaW1wb3J0IE5vZGVQcm9ncmFtIGZyb20gXCJzaWdtYS9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvbm9kZVwiXHJcblxyXG5leHBvcnQgY29uc3Qgbm9kZUNvbG9yID0gXCIjMDAwMDAwXCI7XHJcbmV4cG9ydCBjb25zdCBlZGdlQ29sb3IgPSBcIiM4MDgwODBcIjtcclxuZXhwb3J0IGNvbnN0IGVkZ2VPbkhvdmVyQ29sb3IgPSBcImJsdWVcIjtcclxuZXhwb3J0IGNvbnN0IGVkZ2VPblJldmVyc2VDb2xvciA9IFwicmVkXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyZXJTZXR0aW5nczogUGFydGlhbDxTZXR0aW5ncz4gPSB7XHJcbiAgICBhbGxvd0ludmFsaWRDb250YWluZXI6IHRydWUsXHJcbiAgICBlbmFibGVFZGdlQ2xpY2tFdmVudHM6IHRydWUsXHJcbiAgICByZW5kZXJMYWJlbHM6IGZhbHNlLFxyXG4gICAgZW5hYmxlRWRnZUhvdmVyRXZlbnRzOiB0cnVlLFxyXG4gICAgbm9kZVByb2dyYW1DbGFzc2VzOiB7XHJcbiAgICAgICAgYmFzZTogTm9kZVByb2dyYW1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVkZ2VTZXR0aW5ncyA9IHtcclxuICAgIHR5cGU6IFwiYXJyb3dcIixcclxuICAgIHNpemU6IDIsXHJcbiAgICBjb2xvcjogZWRnZUNvbG9yLFxyXG59XHJcbiIsIi8vQHRzLW5vY2hlY2tcclxuaW1wb3J0IHsgRGlyZWN0ZWRHcmFwaCB9IGZyb20gXCJncmFwaG9sb2d5XCI7XHJcbmltcG9ydCBTaWdtYSBmcm9tIFwic2lnbWFcIjtcclxuaW1wb3J0IHsgc2VuZFJlcXVlc3QsIHNlbmRQb3N0RGF0YSB9IGZyb20gXCIuLi9hcGkvYXBpX2dyYXBoXCI7XHJcbmltcG9ydCB7IHJlbmRlcmVyU2V0dGluZ3MsIGVkZ2VTZXR0aW5ncywgbm9kZUNvbG9yLCBlZGdlQ29sb3IsIGVkZ2VPbkhvdmVyQ29sb3IgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBzdWJncmFwaCB9IGZyb20gXCJncmFwaG9sb2d5LW9wZXJhdG9yc1wiO1xyXG5pbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XHJcbmltcG9ydCB7IE5vZGVEaXNwbGF5RGF0YSB9IGZyb20gXCJzaWdtYS90eXBlc1wiO1xyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICAgIGhvdmVyZWROb2RlPzogc3RyaW5nO1xyXG4gICAgaG92ZXJlZE5laWdoYm9ycz86IFNldDxzdHJpbmc+O1xyXG4gICAgc2VsZWN0ZWROb2Rlcz86IFNldDxzdHJpbmc+O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNpZ21hR3JhcGhDcmVhdG9yIHtcclxuICAgIC8vaGVscGVycyBmb3IgZmlsdGVyaW5nXHJcbiAgICBzdGF0ZTogU3RhdGU7XHJcbiAgICBtYXhUcmFpbkxlbmd0aDogbnVtYmVyO1xyXG4gICAgc3ViR3JhcGhSb3V0ZUlkczogU2V0PG51bWJlcj47XHJcbiAgICBub2Rlc0ZvckdpdmVuVHJhaW5JZDogTWFwPG51bWJlciwgQXJyYXk8c3RyaW5nPj47XHJcbiAgICBub2Rlc0ZvckdpdmVuUm91dGVJZDogTWFwPG51bWJlciwgQXJyYXk8c3RyaW5nPj47XHJcbiAgICBlbmFibGVOb2RlSG92ZXI6IEJvb2xlYW47XHJcblxyXG4gICAgLy9ncmFwaFxyXG4gICAgc2lnbWFDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgZ3JhcGg6IERpcmVjdGVkR3JhcGg7XHJcbiAgICBzdWJHcmFwaDogRGlyZWN0ZWRHcmFwaDtcclxuICAgIHJlbmRlcmVyOiBTaWdtYTxEaXJlY3RlZEdyYXBoPjtcclxuXHJcbiAgICAvL2lucHV0IHZhcmlhYmxlc1xyXG4gICAgaW5wdXRUcmFpbklEO1xyXG4gICAgaW5wdXRSb3V0ZUlEO1xyXG4gICAgaW5wdXROZWlnaGJvcjtcclxuICAgIGlucHV0U2NhbGluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihyb290RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLnNpZ21hQ29udGFpbmVyID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcignI3NpZ21hLWNvbnRhaW5lcicpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgIHRoaXMubWF4VHJhaW5MZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlTm9kZUhvdmVyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xyXG4gICAgICAgIHRoaXMubm9kZXNGb3JHaXZlblRyYWluSWQgPSBuZXcgTWFwPG51bWJlciwgQXJyYXk8c3RyaW5nPj4oKTtcclxuICAgICAgICB0aGlzLnN1YkdyYXBoID0gbmV3IERpcmVjdGVkR3JhcGgoKTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gbmV3IERpcmVjdGVkR3JhcGgoKTtcclxuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHBvcHVsYXRlcyB0aGUgZGF0YSBmb3IgdGhpcy5ncmFwaCwgYnV0IGRvZXMgbm90IHlldCBkaXNwbGF5IGl0LlxyXG4gICAgICAgIHRoaXMuZ2V0SW5pdEdyYXBoKHRoaXMuZ3JhcGgpO1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgLy8gVGhlc2UgcmVuZGVyZXIgZXZlbnRzIGFsd2F5cyBvcGVyYXRlIG9uIHRoZSBwcmUtZmlsdGVyZWQgZ3JhcGguXHJcbiAgICAgICAgJChcIiNub2RlLWVuYWJsZVwiKS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuZW5hYmxlTm9kZUhvdmVyID0gJChcIiNub2RlLWVuYWJsZVwiKS5pcyhcIjpjaGVja2VkXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoXCIjcm91dGUtaW5wdXRcIikub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLnByb2Nlc3NSb3V0ZUlEKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJChcIiNTY2FsaW5nLWlucHV0XCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5kZXN0cm95U2lnbWFHcmFwaCgpO1xyXG4gICAgICAgICAgICBzZWxmLnN1YkdyYXBoUm91dGVJZHMgPSBuZXcgU2V0PG51bWJlcj4oKTtcclxuICAgICAgICAgICAgc2VsZi5pbnB1dFNjYWxpbmcgPSBwYXJzZUludCgkKFwiI1NjYWxpbmctaW5wdXRcIikudmFsKCkpO1xyXG4gICAgICAgICAgICBzZWxmLmNyZWF0ZVN1YkdyYXBoKCk7XHJcbiAgICAgICAgICAgIHNlbGYucHJvY2Vzc1JvdXRlSUQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBUaGVzZSBncmFwaCBldmVudHMgb3BlcmF0ZSBvbiB0aGUgZW50aXJlIGRhdGEgc2V0LCByYXRoZXIgdGhhbiBqdXN0IGEgcHJlLWZpbHRlcmVkIHN1YnNldC5cclxuICAgICAgICAkKFwiI3NlYXJjaFwiKS5vbihcImlucHV0XCIsIFwiI3NlYXJjaC1pbnB1dCwgI25laWdoYm9yLWlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5wcm9jZXNzSW5wdXQoKTtcclxuICAgICAgICAgICAgaWYgKHNlbGYudmFsaWRhdGVJbnB1dFRyYWluSWQoKSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jcmVhdGVTdWJHcmFwaCgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jcmVhdGVSb3V0ZVN1Z2dlc3Rpb25zKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIC8vIFRoaXMgZnVuY3Rpb24gYmVnaW5zIHRoZSBwcm9jZXNzIG9mIGhpZ2hsaWdodGluZyBub2RlcyB3aGVuIGEgUm91dGUgSUQgaXMgZW50ZXJlZCBpbnRvIHRoZSBVSS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwcm9jZXNzUm91dGVJRCgpIHtcclxuICAgICAgICB0aGlzLmlucHV0Um91dGVJRCA9ICQoXCIjcm91dGUtaW5wdXRcIikudmFsKCk7XHJcbiAgICAgICAgLy8gSWYgdGhlIHNlbGVjdGVkIHZhbHVlIGlzIG5vdCB0aGUgZGVmYXVsdCwgaGlnaGxpZ2h0IHRoZSBjb3JyZXNwb25kaW5nIG5vZGVzLlxyXG4gICAgICAgIGlmICh0aGlzLmlucHV0Um91dGVJRCAhPSBcIm51bGxcIikge1xyXG4gICAgICAgICAgICB0aGlzLmhpZ2hsaWdodFJvdXRlKHRoaXMuc3ViR3JhcGgsIHBhcnNlSW50KHRoaXMuaW5wdXRSb3V0ZUlEKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIHNlbGVjdGVkIHZhbHVlLCByZXNldCB0aGUgcmVuZGVyZXIgdG8gZGlzcGxheSBhbGwgbm9kZXMuXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHVzZXIgaW50ZXJhY3Rpb25zIHdpdGggdGhlIFVJIGJ5IHNldHRpbmcgaW1wb3J0YW50IGNsYXNzIHZhcmlhYmxlcywgXHJcbiAgICAgKiBhbmQgZW5hYmxlcy9kaXNhYmxlcyB0aGUgUm91dGUgSUQgd2luZG93IG9yIGRpc3BsYXlzIGFuIGVycm9yIG1lc3NhZ2Ugb24gdGhlIFRyYWluIElEIHdpbmRvdyBpZiB0aGUgaW5wdXQgaXMgaW5jb3JyZWN0LlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHByb2Nlc3NJbnB1dCgpIHtcclxuICAgICAgICAvLyBTaW5jZSB0aGUgYXZhaWxhYmxlIFJvdXRlIElEcyBkZXBlbmQgb24gVHJhaW4gSUQgYW5kIE5laWdoYm9yaG9vZCwgXHJcbiAgICAgICAgLy8gd2UgbmVlZCB0byBjbGVhciB0aGUgUm91dGUgSUQgZmllbGQgZXZlcnkgdGltZSBhbnkgIG9mIHRoZSBvdGhlciBmaWVsZHMgYXJlIGNoYW5nZWQuXHJcbiAgICAgICAgJChcIiNyb3V0ZS1pbnB1dFwiKS5lbXB0eSgpO1xyXG4gICAgICAgICQoXCIjcm91dGUtaW5wdXRcIikuYXBwZW5kKCc8b3B0aW9uIHZhbHVlPVwibnVsbFwiPi0tLSBTZWxlY3QgUm91dGVJRCAtLS08L29wdGlvbj4nKVxyXG5cclxuICAgICAgICAvLyBJZiB0aGUgdXNlciBlbnRlcnMgYSBub24tZW1wdHkgVHJhaW4gSUQsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBjbGFzcyBhdHRyaWJ1dGVzLlxyXG4gICAgICAgIGlmICgkKFwiI3NlYXJjaC1pbnB1dFwiKS52YWwoKSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lTaWdtYUdyYXBoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5zdWJHcmFwaFJvdXRlSWRzID0gbmV3IFNldDxudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4VHJhaW5MZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0VHJhaW5JRCA9IHBhcnNlSW50KCQoXCIjc2VhcmNoLWlucHV0XCIpLnZhbCgpKTtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dE5laWdoYm9yID0gJChcIiNuZWlnaGJvci1pbnB1dFwiKS52YWwoKTtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dFNjYWxpbmcgPSBwYXJzZUludCgkKFwiI1NjYWxpbmctaW5wdXRcIikudmFsKCkpO1xyXG4gICAgICAgICAgICAkKFwiI291dHB1dFwiKS5odG1sKHRoaXMuaW5wdXROZWlnaGJvcik7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB0aGUgZ2l2ZW4gVHJhaW4gSUQgaXMgdmFsaWQsIHdlIGRpc3BsYXkgdGhlIFJvdXRlIElEIHdpbmRvdy5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVJbnB1dFRyYWluSWQoKSkge1xyXG4gICAgICAgICAgICAgICAgJChcIiNyb3V0ZS1yb3dcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNzZWFyY2gtaW5wdXRcIikucmVtb3ZlQ2xhc3MoXCJoYXMtZXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3dhcm5pbmdcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgaGlkZSB0aGUgUm91dGUgSUQgd2luZG93IGFuZCBkaXNwbGF5IGFuIGVycm9yIG9uIHRoZSBUcmFpbiBJRCB3aW5kb3cuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJChcIiNyb3V0ZS1yb3dcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNzZWFyY2gtaW5wdXRcIikuYWRkQ2xhc3MoXCJoYXMtZXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3dhcm5pbmdcIikuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHRoZSBUcmFpbiBJRCB3aW5kb3cgaXMgZW1wdHksIHdlIGhpZGUgUm91dGVJRCBhbmQgcmVtb3ZlIHRoZSBlcnJvciBNZXNzYWdlLlxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAkKFwiI3JvdXRlLXJvd1wiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoXCIjc2VhcmNoLWlucHV0XCIpLnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yXCIpO1xyXG4gICAgICAgICAgICAkKFwiI3dhcm5pbmdcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0VHJhaW5JRCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHVzZXIgaW5wdXQgZXhpc3RzIGluIHRoZSBvcmlnaW5hbCBHcmFwaCBkYXRhLCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHZhbGlkYXRlSW5wdXRUcmFpbklkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzRm9yR2l2ZW5UcmFpbklkLmhhcyh0aGlzLmlucHV0VHJhaW5JRCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm5zIGEgc2V0IHdpdGggYWxsIHJlbGV2YW50IFRyYWluIElEcyBmb3IgdGhlIHN1YkdyYXBoLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFJlbGV2YW50VHJhaW5JZHMoKTogU2V0PG51bWJlcj4ge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgU2V0PG51bWJlcj4oKTtcclxuICAgICAgICByZXN1bHQuYWRkKHRoaXMuaW5wdXRUcmFpbklEKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5wdXROZWlnaGJvcjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBTZXQoWy4uLnJlc3VsdCwgLi4udGhpcy5nZXROZWlnaGJvclRyYWluSWRzKHJlc3VsdCldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZvciBlYWNoIHZhbHVlIGluIFRyYWluIElEcywgd2UgcmV0cmlldmUgdGhlIGFycmF5IGZyb20gdGhlIGhhc2htYXAsIGl0ZXJhdGUgb3ZlciBlYWNoIG5vZGUsIGFuZCBhZGQgdGhlIFRyYWluIElEIG9mIGVhY2ggbmVpZ2hib3IgdG8gdGhlIHJlc3VsdC5cclxuICAgICAqIEBwYXJhbSB0cmFpbklEc1xyXG4gICAgICogQHJldHVybnMgYSBzZXQgb2YgdHJhaW5JZHMsIHdoaWNoIGFyZSBhIG5laWdoYm9yIG9mIGEgdHJhaW4gZm9yIGV2ZXJ5IHRyYWluSWQgaW4gdHJhaW5JZHNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXROZWlnaGJvclRyYWluSWRzKHRyYWluSURzOiBTZXQ8bnVtYmVyPik6IFNldDxudW1iZXI+IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFNldDxudW1iZXI+KCk7XHJcbiAgICAgICAgdHJhaW5JRHMuZm9yRWFjaCh0cmFpbklkID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ub2Rlc0ZvckdpdmVuVHJhaW5JZC5nZXQodHJhaW5JZCkhLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoLmZvckVhY2hOZWlnaGJvcihub2RlLCBuZWlnaGJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcInRcIikgIT0gdGhpcy5ncmFwaC5nZXROb2RlQXR0cmlidXRlKG5laWdoYm9yLCBcInRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZCh0aGlzLmdyYXBoLmdldE5vZGVBdHRyaWJ1dGUobmVpZ2hib3IsIFwidFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXZSBpdGVyYXRlIG92ZXIgZWFjaCBUcmFpbiBJRCwgcmV0cmlldmUgdGhlIG5vZGVzIGZyb20gdGhlIGhhc2htYXAsIFxyXG4gICAgICogc2V0IHRoZSBtYXhpbXVtIHRyYWluIGxlbmd0aCwgc3ViZ3JhcGggUm91dGUgSURzLCBhbmQgdGhlIGhhc2htYXAgZm9yIHRoZSBSb3V0ZSBJRHMgZm9yIHRoZSBzdWJncmFwaC5cclxuICAgICAqIEBwYXJhbSByZWxldmFudFRyYWluSWRzIFRoZSBzZXQgb2YgYWxsIFRyYWluIElEcyB0aGF0IG5lZWQgdG8gYmUgZGlzcGxheWVkLlxyXG4gICAgICogQHJldHVybnMgVGhlIHNldCBvZiBhbGwgcmVsZXZhbnQgbm9kZXMgZm9yIHRoZSBnaXZlbiBpbnB1dCBvZiBUcmFpbiBJRCBhbmQgbmVpZ2hib3Job29kIGRlZ3JlZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRSZWxldmFudE5vZGVzKHJlbGV2YW50VHJhaW5JZHM6IFNldDxudW1iZXI+KTogU2V0PHN0cmluZz4ge1xyXG4gICAgICAgIGxldCBhbGxOb2RlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgICAgIHJlbGV2YW50VHJhaW5JZHMuZm9yRWFjaCh0cmFpbklkID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZXNPZkN1cnJlbnRUcmFpbklkID0gdGhpcy5ub2Rlc0ZvckdpdmVuVHJhaW5JZC5nZXQodHJhaW5JZCk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4VHJhaW5MZW5ndGggPSB0aGlzLm1heFRyYWluTGVuZ3RoIDwgbm9kZXNPZkN1cnJlbnRUcmFpbklkIS5sZW5ndGggPyBub2Rlc09mQ3VycmVudFRyYWluSWQhLmxlbmd0aCA6IHRoaXMubWF4VHJhaW5MZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBub2Rlc09mQ3VycmVudFRyYWluSWQhLmZvckVhY2goKG5vZGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlX2lkID0gdGhpcy5ncmFwaC5nZXROb2RlQXR0cmlidXRlKG5vZGUsIFwiclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW50aWFsaXplUm91dGVJbmZvKHJvdXRlX2lkLCBub2RlKTtcclxuICAgICAgICAgICAgICAgIGFsbE5vZGVzLmFkZChub2RlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFsbE5vZGVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBhZGRzIHRoZSBzcGVjaWZpZWQgUm91dGVJRCB0byB0aGUgc3ViR3JhcGhSb3V0ZUlkcyBjbGFzcyBhdHRyaWJ1dGUgYW5kIGFsc28gaW5jbHVkZXMgdGhlIGdpdmVuIG5vZGUgaW4gdGhlIG5vZGVzRm9yR2l2ZW5Sb3V0ZUlkIGhhc2htYXAuXHJcbiAgICAgKiBAcGFyYW0gcm91dGVfaWQgXHJcbiAgICAgKiBAcGFyYW0gbm9kZSBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpbnRpYWxpemVSb3V0ZUluZm8ocm91dGVfaWQsIG5vZGUpIHtcclxuICAgICAgICB0aGlzLnN1YkdyYXBoUm91dGVJZHMuYWRkKHJvdXRlX2lkKTtcclxuICAgICAgICB0aGlzLm5vZGVzRm9yR2l2ZW5Sb3V0ZUlkLmdldChyb3V0ZV9pZCkgPT09IHVuZGVmaW5lZCA/IHRoaXMubm9kZXNGb3JHaXZlblJvdXRlSWQuc2V0KHJvdXRlX2lkLCBbbm9kZV0pIDogdGhpcy5ub2Rlc0ZvckdpdmVuUm91dGVJZC5nZXQocm91dGVfaWQpIS5wdXNoKG5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgRHJvcGRvd24gTWVudSBmb3IgdGhlIFJvdXRlIElEcy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVSb3V0ZVN1Z2dlc3Rpb25zKCkge1xyXG4gICAgICAgIHRoaXMuc3ViR3JhcGhSb3V0ZUlkcy5mb3JFYWNoKChyb3V0ZSkgPT4ge1xyXG4gICAgICAgICAgICAkKFwiI3JvdXRlLWlucHV0XCIpLmFwcGVuZCgnPG9wdGlvbiB2YWx1ZT1cIicgKyByb3V0ZSArICdcIj4nICsgcm91dGUgKyAnPC9vcHRpb24+Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuZCBkaXNwbGF5cyB0aGUgc3ViR3JhcGguXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlU3ViR3JhcGgoKSB7XHJcbiAgICAgICAgbGV0IGFsbFRyYWluSWRzID0gdGhpcy5nZXRSZWxldmFudFRyYWluSWRzKCk7XHJcbiAgICAgICAgY29uc3QgbnVtYmVyT2ZUcmFpbnMgPSBhbGxUcmFpbklkcy5zaXplO1xyXG4gICAgICAgIGFsbFRyYWluSWRzID0gWy4uLmFsbFRyYWluSWRzXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcblxyXG4gICAgICAgIHRoaXMubm9kZXNGb3JHaXZlblJvdXRlSWQgPSBuZXcgTWFwPG51bWJlciwgQXJyYXk8c3RyaW5nPj4oKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuc3ViR3JhcGggPSBzdWJncmFwaCh0aGlzLmdyYXBoLCB0aGlzLmdldFJlbGV2YW50Tm9kZXMoYWxsVHJhaW5JZHMpKTtcclxuICAgICAgICB0aGlzLnN1YkdyYXBoUm91dGVJZHMgPSBbLi4udGhpcy5zdWJHcmFwaFJvdXRlSWRzXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0R3JhcGhBdHRyaWJ1dGVzKHRoaXMuc3ViR3JhcGgsIG51bWJlck9mVHJhaW5zLCB0aGlzLmlucHV0U2NhbGluZyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBTaWdtYSh0aGlzLnN1YkdyYXBoLCB0aGlzLnNpZ21hQ29udGFpbmVyLCByZW5kZXJlclNldHRpbmdzKTtcclxuICAgICAgICB0aGlzLmJpbmRSZW5kZXJlckV2ZW50cyh0aGlzLnN1YkdyYXBoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEdyYXBoQXR0cmlidXRlcyhncmFwaDogRGlyZWN0ZWRHcmFwaCwgbnVtYmVyT2ZUcmFpbnM6IG51bWJlciwgU2NhbGluZzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZXROb2RlQXR0cmlidXRlcyhncmFwaCwgbnVtYmVyT2ZUcmFpbnMsIFNjYWxpbmcpO1xyXG4gICAgICAgIHRoaXMuc2V0RWRnZUF0dHJpYnV0ZXMoZ3JhcGgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHggYW5kIHkgdmFsdWVzIGFyZSBzZXQgdG8gY3JlYXRlIGEgZ3JpZC1saWtlIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICogQHBhcmFtIGdyYXBoIFxyXG4gICAgICogQHBhcmFtIG51bWJlck9mVHJhaW5zIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldE5vZGVBdHRyaWJ1dGVzKGdyYXBoOiBEaXJlY3RlZEdyYXBoLCBudW1iZXJPZlRyYWluczogbnVtYmVyLCBTY2FsaW5nOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbGFzdFRyYWluSWQgPSBudWxsO1xyXG4gICAgICAgIGxldCByYXRpbyA9IHRoaXMubWF4VHJhaW5MZW5ndGggLyBudW1iZXJPZlRyYWlucztcclxuICAgICAgICBsZXQgeFBvc2l0aW9uID0gMDtcclxuICAgICAgICBsZXQgeVBvc2l0aW9uID0gLTE7XHJcblxyXG4gICAgICAgIGxldCB4U3BhY2luZyA9IDUwMDtcclxuICAgICAgICBsZXQgeVNwYWNpbmcgPSA1MDA7XHJcblxyXG4gICAgICAgIGdyYXBoLmZvckVhY2hOb2RlKChub2RlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUcmFpbklkID0gZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcInRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsTmFtZSA9IFwiVHJhaW46XCIgKyBjdXJyZW50VHJhaW5JZCArIFwiIFJvdXRlOlwiICsgZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcInJcIik7XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGxhc3RUcmFpbklkICE9IGN1cnJlbnRUcmFpbklkKSB7XHJcbiAgICAgICAgICAgICAgICB4UG9zaXRpb24gPSAwO1xyXG4gICAgICAgICAgICAgICAgeVBvc2l0aW9uKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB4UG9zaXRpb24rKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0VHJhaW5JZCA9IGN1cnJlbnRUcmFpbklkO1xyXG4gICAgICAgICAgICBncmFwaC5zZXROb2RlQXR0cmlidXRlKG5vZGUsIFwieFwiLCB4UG9zaXRpb24gKiB4U3BhY2luZyAqIChTY2FsaW5nIC8gMTApKVxyXG4gICAgICAgICAgICAgICAgLnNldE5vZGVBdHRyaWJ1dGUobm9kZSwgXCJ5XCIsIHlQb3NpdGlvbiAqIHlTcGFjaW5nICogcmF0aW8pXHJcbiAgICAgICAgICAgICAgICAuc2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcImxhYmVsXCIsIGxhYmVsTmFtZSlcclxuICAgICAgICAgICAgICAgIC5zZXROb2RlQXR0cmlidXRlKG5vZGUsIFwiY29sb3JcIiwgbm9kZUNvbG9yKVxyXG4gICAgICAgICAgICAgICAgLnNldE5vZGVBdHRyaWJ1dGUobm9kZSwgXCJzaXplXCIsIDIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcInR5cGVcIiwgXCJiYXNlXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0RWRnZUF0dHJpYnV0ZXMoZ3JhcGg6IERpcmVjdGVkR3JhcGgpIHtcclxuICAgICAgICBncmFwaC5mb3JFYWNoRWRnZSgoZWRnZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmVkZ2VBdHRyaWJ1dGVzKGdyYXBoLCBlZGdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHJldHVybnMgIHRydWUgaWYgdGhlIHNvdXJjZSBhbmQgdGFyZ2V0IG5vZGVzIGhhdmUgZGlmZmVyZW50IHJvdXRlIElEcywgYW5kIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc1JvdXRlRWRnZShncmFwaDogRGlyZWN0ZWRHcmFwaCwgZWRnZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGdyYXBoLnNvdXJjZShlZGdlKTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBncmFwaC50YXJnZXQoZWRnZSk7XHJcbiAgICAgICAgY29uc3Qgc291cmNlVHJhaW5JZCA9IGdyYXBoLmdldE5vZGVBdHRyaWJ1dGUoc291cmNlLCBcInRcIik7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0VHJhaW5JZCA9IGdyYXBoLmdldE5vZGVBdHRyaWJ1dGUodGFyZ2V0LCBcInRcIik7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZVRyYWluSWQgIT09IHRhcmdldFRyYWluSWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBlZGdlQXR0cmlidXRlcyhncmFwaDogRGlyZWN0ZWRHcmFwaCwgZWRnZSkge1xyXG4gICAgICAgIGdyYXBoLm1lcmdlRWRnZUF0dHJpYnV0ZXMoZWRnZSwgZWRnZVNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8tLS0tIHJlbmRlcmVyIG1ldGhvZHMgLS0tLVxyXG5cclxuICAgIHByaXZhdGUgYmluZFJlbmRlcmVyRXZlbnRzKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSB7XHJcbiAgICAgICAgdGhpcy5pbnZlcnRFZGdlKGdyYXBoKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodEhvdmVyZWRFZGdlKGdyYXBoKTtcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodEhvdmVyZWROb2RlKGdyYXBoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVzaXplU2lnbWFHcmFwaCgpIHtcclxuICAgICAgICBpZiAodGhpcy5yZW5kZXJlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJncmFwaCBkb2Vzbid0IGV4aXN0IVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc3Ryb3lTaWdtYUdyYXBoKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmtpbGwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRIb3ZlcmVkTm9kZShncmFwaDogRGlyZWN0ZWRHcmFwaCwgbm9kZT86IHN0cmluZykge1xyXG4gICAgICAgIGlmIChub2RlICYmIHRoaXMuZW5hYmxlTm9kZUhvdmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuaG92ZXJlZE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmhvdmVyZWROZWlnaGJvcnMgPSBuZXcgU2V0KGdyYXBoLm5laWdoYm9ycyhub2RlKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ob3ZlcmVkTm9kZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ob3ZlcmVkTmVpZ2hib3JzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyUmVkdWNlcihncmFwaDogRGlyZWN0ZWRHcmFwaCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXJOb2RlUmVkdWNlcihncmFwaCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlckVkZ2VSZWR1Y2VyKGdyYXBoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlbmRlcnMgdGhlIG5vZGVzIHdoaWNoIGFyZSBub3Qgb2YgaW50ZXJlc3QgYXMgd2hpdGUgYW5kIGRvZXNudCBkaXNwbGF5IHRoZSBsYWJlbCB0aHVzIFwicmVkdWNpbmdcIiByZW5kZXJlZCBub2Rlc1xyXG4gICAgICogYXMgd2VsbCBhcyByZXNldHRpbmcgaXQsIGlmIG5lZWRlZFxyXG4gICAgICogQHBhcmFtIGdyYXBoIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyTm9kZVJlZHVjZXIoZ3JhcGg6IERpcmVjdGVkR3JhcGgsIHJvdXRlSWQ/KSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTZXR0aW5nKFwibm9kZVJlZHVjZXJcIiwgKG5vZGUsIGF0dHJpYnV0ZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZURhdGE6IFBhcnRpYWw8Tm9kZURpc3BsYXlEYXRhPiA9IHsgLi4uYXR0cmlidXRlcyB9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5ob3ZlcmVkTmVpZ2hib3JzICYmICF0aGlzLnN0YXRlLmhvdmVyZWROZWlnaGJvcnMuaGFzKG5vZGUpICYmIHRoaXMuc3RhdGUuaG92ZXJlZE5vZGUgIT09IG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIG5vZGVEYXRhLmxhYmVsID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIG5vZGVEYXRhLmNvbG9yID0gXCIjZjZmNmY2XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZXZlcnkgbm9kZSB3aGljaCBpcyBub3QgaW4gc2VsZWN0ZWQgbm90IG9yIGhhcyBubyBuZWlnaGJvciBpbiBzZWxlY3RlZCBpcyByZW5kZXJlZCB3aGl0ZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGVzICYmICEodGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGVzLmhhcyhub2RlKSAmJiB0aGlzLnN0YXRlRWRnZVZhbGlkYXRpb24oZ3JhcGgsIG5vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZURhdGEubGFiZWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgbm9kZURhdGEuY29sb3IgPSBcIiNmNmY2ZjZcIjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlcyAmJiB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZXMuaGFzKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlRGF0YS5oaWdobGlnaHRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVEYXRhO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNoZWNrcyBoYXMgYSBuZWlnaGJvciBpbiB0aGlzLnNlbGVjdGVkTm9kZXNcclxuICAgICAqIEBwYXJhbSBncmFwaCBcclxuICAgICAqIEBwYXJhbSBub2RlIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRlRWRnZVZhbGlkYXRpb24oZ3JhcGg6IERpcmVjdGVkR3JhcGgsIG5vZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZXM/LmZvckVhY2goc2VsZWN0ZWROb2RlID0+IHtcclxuICAgICAgICAgICAgaWYgKGdyYXBoLmFyZU5laWdoYm9ycyhub2RlLCBzZWxlY3RlZE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAvL2lmIHdlIGZvdW5kIGEgbmVpZ2hib3IsIHdlIGRvbnQgbmVlZCB0byBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogIFxyXG4gICAgKi9cclxuICAgIHByaXZhdGUgcmVuZGVyZXJFZGdlUmVkdWNlcihncmFwaDogRGlyZWN0ZWRHcmFwaCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2V0dGluZyhcImVkZ2VSZWR1Y2VyXCIsIChlZGdlLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkZ2VEYXRhOiBQYXJ0aWFsPEVkZ2VEaXNwbGF5RGF0YT4gPSB7IC4uLmRhdGEgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmhvdmVyZWROb2RlICYmICFncmFwaC5oYXNFeHRyZW1pdHkoZWRnZSwgdGhpcy5zdGF0ZS5ob3ZlcmVkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIGVkZ2VEYXRhLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZXMgJiYgKCF0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZXMuaGFzKGdyYXBoLnNvdXJjZShlZGdlKSkgfHwgIXRoaXMuc3RhdGUuc2VsZWN0ZWROb2Rlcy5oYXMoZ3JhcGgudGFyZ2V0KGVkZ2UpKSkpIHtcclxuICAgICAgICAgICAgICAgIGVkZ2VEYXRhLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBlZGdlRGF0YTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWdobGlnaHRzIHRoZSBub2RlcyB3aXRoIHRoZSByb3V0ZSBJRCBlbnRlcmVkIGJ5IHRoZSB1c2VyLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodFJvdXRlKGdyYXBoOiBEaXJlY3RlZEdyYXBoLCByb3V0ZUlkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZXMgPSBuZXcgU2V0KHRoaXMubm9kZXNGb3JHaXZlblJvdXRlSWQuZ2V0KHJvdXRlSWQpKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyTm9kZVJlZHVjZXIoZ3JhcGgsIHJvdXRlSWQpOyBcclxuICAgICAgICB0aGlzLnJlbmRlcmVyRWRnZVJlZHVjZXIoZ3JhcGgpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVmcmVzaCgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodEhvdmVyZWROb2RlKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5vbihcImVudGVyTm9kZVwiLCAoeyBub2RlIH0pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ob3ZlcmVkTm9kZUFjdGlvbnMoZ3JhcGgsIG5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIub24oXCJsZWF2ZU5vZGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhvdmVyZWROb2RlQWN0aW9ucyhncmFwaCwgdW5kZWZpbmVkKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaG92ZXJlZE5vZGVBY3Rpb25zKGdyYXBoOiBEaXJlY3RlZEdyYXBoLCBub2RlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zZXRIb3ZlcmVkTm9kZShncmFwaCwgbm9kZSk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlclJlZHVjZXIoZ3JhcGgpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVmcmVzaCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodEhvdmVyZWRFZGdlKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5vbihcImVudGVyRWRnZVwiLCAoeyBlZGdlIH0pID0+IHtcclxuICAgICAgICAgICAgZ3JhcGguc2V0RWRnZUF0dHJpYnV0ZShlZGdlLCBcImNvbG9yXCIsIGVkZ2VPbkhvdmVyQ29sb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIub24oXCJsZWF2ZUVkZ2VcIiwgKHsgZWRnZSB9KSA9PiB7XHJcbiAgICAgICAgICAgIGdyYXBoLnNldEVkZ2VBdHRyaWJ1dGUoZWRnZSwgXCJjb2xvclwiLCBlZGdlQ29sb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbnZlcnRFZGdlKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5vbihcImNsaWNrRWRnZVwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSb3V0ZUVkZ2UoZ3JhcGgsIGV2ZW50LmVkZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlZGdlSW5mb3JtYXRpb246IEFycmF5PHN0cmluZz4gPSBbZ3JhcGguc291cmNlKGV2ZW50LmVkZ2UpLCBncmFwaC50YXJnZXQoZXZlbnQuZWRnZSldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRVcGRhdGVkR3JhcGgoZWRnZUluZm9ybWF0aW9uLCBncmFwaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlZnJlc2goKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy0tLS0gZGF0YSBoYW5kbGluZyAtLS0tXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1ZXN0cyBhIHJhbmRvbWx5IGdlbmVyYXRlZCBncmFwaCBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0SW5pdEdyYXBoKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSB7XHJcbiAgICAgICAgc2VuZFJlcXVlc3QoeyB1cmw6ICcvYXBpL29yZGVyaW5nX2dyYXBoLycgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihqc29uID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5zYWZlSW1wb3J0KGpzb24sIGdyYXBoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmVxdWVzdHMgdGhlIHVwZGF0ZWQgZ3JhcGggYWZ0ZXIgcmV2ZXJzaW5nIGFuIGVkZ2VcclxuICAgICAqIEBwYXJhbSBlZGdlSW5mb3JtYXRpb24gc291cmNlIGFuZCB0YXJnZXQgb2YgdGhlIGVkZ2Ugd2hpY2ggc2hvdWxkIGJlIHJldmVyc2VkXHJcbiAgICAgKiBAcGFyYW0gZ3JhcGggXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0VXBkYXRlZEdyYXBoKGVkZ2VJbmZvcm1hdGlvbjogQXJyYXk8c3RyaW5nPiwgZ3JhcGg6IERpcmVjdGVkR3JhcGgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5leHBvcnRHcmFwaEFzSnNvbihncmFwaCk7XHJcbiAgICAgICAgc2VuZFBvc3REYXRhKHsgdXJsOiAnL2FwaS9vcmRlcmluZ19ncmFwaC9pbnZlcnQnLCBkYXRhOiBkYXRhLCB2YWx1ZXM6IGVkZ2VJbmZvcm1hdGlvbiB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKGpzb24gPT5cclxuICAgICAgICAgICAgICAgIHRoaXMudW5zYWZlSW1wb3J0KGpzb24sIGdyYXBoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBzYW1lIGZvcm1hdCB3aGljaCB0aGUgdW5zYWZlSW1wb3J0IG1ldGhvZCB1c2VzIGFzIGFuIGlucHV0XHJcbiAgICAgKiBAcGFyYW0gZ3JhcGggXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZXhwb3J0R3JhcGhBc0pzb24oZ3JhcGg6IERpcmVjdGVkR3JhcGgpIHtcclxuICAgICAgICBjb25zdCBub2RlcyA9IG5ldyBBcnJheShncmFwaC5fbm9kZXMuc2l6ZSk7XHJcblxyXG4gICAgICAgIGxldCBpID0gMDtcclxuXHJcbiAgICAgICAgZ3JhcGguZm9yRWFjaE5vZGUoKG5vZGUsIGF0dHIpID0+IHtcclxuICAgICAgICAgICAgbm9kZXNbaSsrXSA9IFtub2RlLCBhdHRyLnIsIGF0dHIudF07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVkZ2VzID0gbmV3IEFycmF5KGdyYXBoLl9lZGdlcy5zaXplKTtcclxuXHJcbiAgICAgICAgaSA9IDA7XHJcblxyXG4gICAgICAgIGdyYXBoLmZvckVhY2hFZGdlKChlZGdlKSA9PiB7XHJcbiAgICAgICAgICAgIGVkZ2VzW2krK10gPSBbZ3JhcGguc291cmNlKGVkZ2UpLCBncmFwaC50YXJnZXQoZWRnZSldO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwiYVwiOiB7fSxcclxuICAgICAgICAgICAgXCJuXCI6IG5vZGVzLFxyXG4gICAgICAgICAgICBcImVcIjogZWRnZXNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuc2FmZSBWZXJzaW9uIG9mIHRoZSBHcmFwaG9sb2d5IGltcG9ydCBGdW5jdGlvbiwgcmVtb3ZlZCBjaGVja3MgYW5kIHBlcnNvbmFsaXplZCBqc29uIHByb2Nlc3NpbmcgdG8gbWFrZSBpdCBmYXN0ZXJcclxuICAgICAqIEBwYXJhbSBkYXRhIGpzb24gZm9ybWF0OlxyXG4gICAgICoge1xyXG4gICAgICAgIC8vZ2VuZXJhbCBncmFwaCBhdHRyaWJ1dGVzXHJcbiAgICAgICAgXCJhXCI6IHt9LFxyXG4gICAgICAgIC8vIG5vZGVzIFxyXG4gICAgICAgIFwiblwiOiBbXHJcbiAgICAgICAgICAgIC8vIHN0cmluZzoga2V5IG9mIHRoZSBub2RlICBmaXJzdCBudW1iZXI6IHJvdXRlX2lkIG9mIHRoZSBub2RlICBzZWNvbmQgbnVtYmVyOiB0cmFpbl9pZCBvZiB0aGUgbm9kZVxyXG4gICAgICAgICAgICBbc3RyaW5nLCBudW1iZXIsIG51bWJlcl1cclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIGVkZ2VzXHJcbiAgICAgICAgXCJlXCI6IFtcclxuICAgICAgICAgICAgLy8gZmlyc3Qgc3RyaW5nOiBzb3VyY2UsIHNlY29uZDogdGFyZ2V0XHJcbiAgICAgICAgICAgIFtzdHJpbmcsIHN0cmluZ11cclxuICAgICAgICBdXHJcbiAgICAgICB9XHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBncmFwaCBlbXB0eSBncmFwaCB0byBmaWxsIHdpdGggZGF0YVxyXG4gICAgICogQHJldHVybnMgdGhlIGdyYXBoIHdpdGggdGhlIGltcG9ydGVkIGRhdGFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB1bnNhZmVJbXBvcnQoZGF0YSwgZ3JhcGg6IERpcmVjdGVkR3JhcGgpIHtcclxuICAgICAgICAvLyBJbXBvcnRpbmcgYSBzZXJpYWxpemVkIGdyYXBoICAgIFxyXG4gICAgICAgIGlmIChkYXRhLmEpIHtcclxuICAgICAgICAgICAgZ3JhcGgucmVwbGFjZUF0dHJpYnV0ZXMoZGF0YS5hKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpLCBsO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS5uKSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBkYXRhLm4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gZGF0YS5uW2ldWzFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGRhdGEubltpXVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICBncmFwaC5hZGROb2RlKGRhdGEubltpXVswXSwgeyByLCB0IH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gbWFwIGZvciBmYXN0ZXIgZmlsdGVyaW5nIGxhdGVyIG9uXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzRm9yR2l2ZW5UcmFpbklkLmdldCh0KSA9PT0gdW5kZWZpbmVkID8gdGhpcy5ub2Rlc0ZvckdpdmVuVHJhaW5JZC5zZXQodCwgW2RhdGEubltpXVswXV0pIDogdGhpcy5ub2Rlc0ZvckdpdmVuVHJhaW5JZC5nZXQodCkhLnB1c2goZGF0YS5uW2ldWzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEuZSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gZGF0YS5lLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZ3JhcGguYWRkRGlyZWN0ZWRFZGdlV2l0aEtleShpLCBkYXRhLmVbaV1bMF0sIGRhdGEuZVtpXVsxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdyYXBoO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJhcnJheSIsInZhbHVlcyIsImwyIiwibGVuZ3RoIiwibDEiLCJpIiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsImFwcGx5IiwidGFyZ2V0IiwicmVjZWl2ZXIiLCJhcmdzIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJjYWxsIiwib3duS2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJOdW1iZXJJc05hTiIsIk51bWJlciIsImlzTmFOIiwidmFsdWUiLCJFdmVudEVtaXR0ZXIiLCJpbml0IiwidGhpcyIsIm9uY2UiLCJlbWl0dGVyIiwibmFtZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsImVyciIsInJlbW92ZUxpc3RlbmVyIiwicmVzb2x2ZXIiLCJzbGljZSIsImFyZ3VtZW50cyIsImV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lciIsImhhbmRsZXIiLCJmbGFncyIsIm9uIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwidW5kZWZpbmVkIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJUeXBlRXJyb3IiLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9hZGRMaXN0ZW5lciIsInR5cGUiLCJwcmVwZW5kIiwibSIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsImNyZWF0ZSIsIm5ld0xpc3RlbmVyIiwiZW1pdCIsInVuc2hpZnQiLCJwdXNoIiwid2FybmVkIiwidyIsIkVycm9yIiwiU3RyaW5nIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJiaW5kIiwiX2xpc3RlbmVycyIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJhcnIiLCJyZXQiLCJBcnJheSIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwibiIsImNvcHkiLCJhZGRFdmVudExpc3RlbmVyIiwid3JhcExpc3RlbmVyIiwiYXJnIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsIlJhbmdlRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwibWVzc2FnZSIsImNvbnRleHQiLCJsZW4iLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0IiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInBvcCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleSIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiaXNHcmFwaCIsImNvcHlOb2RlIiwiY29weUVkZ2UiLCJHIiwiSCIsIm11bHRpIiwibnVsbENvcHkiLCJtZXJnZUF0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVzIiwibGFiZWxzRyIsImxhYmVsc0giLCJmb3JFYWNoTm9kZSIsImF0dHIiLCJmb3JFYWNoRWRnZSIsInNvdXJjZSIsIl9zIiwiX3QiLCJ1bmRpcmVjdGVkIiwic3ViZ3JhcGgiLCJncmFwaCIsInJldmVyc2VkIiwiZW1wdHlDb3B5IiwiZm9yRWFjaFVuZGlyZWN0ZWRFZGdlIiwiZm9yRWFjaERpcmVjdGVkRWRnZSIsIm5vZGVzIiwiUyIsImZpbHRlck5vZGUiLCJpc0FycmF5IiwiU2V0Iiwic2l6ZSIsImhhcyIsIm9sZCIsImZvckVhY2giLCJub2RlIiwiYWRkIiwib3JkZXIiLCJoYXNOb2RlIiwiZ2V0Tm9kZUF0dHJpYnV0ZXMiLCJzb3VyY2VBdHRyIiwidGFyZ2V0QXR0ciIsIm9wdGlvbnMiLCJtZXJnZUVkZ2UiLCJkaXJlY3RlZEdyYXBoIiwiZWRnZSIsIl8iLCJleGlzdGluZ091dEVkZ2UiLCJleGlzdGluZ0luRWRnZSIsInJlcGxhY2VFZGdlQXR0cmlidXRlcyIsImdldEVkZ2VBdHRyaWJ1dGVzIiwibXVsdGlHcmFwaCIsInNpbXBsZUdyYXBoIiwiX3NhIiwiX3RhIiwiZXhpc3RpbmdFZGdlIiwidW5kaXJlY3RlZEVkZ2UiLCJkaXJlY3RlZEVkZ2UiLCJ1bmRpcmVjdGVkR3JhcGgiLCJpbXBvcnQiLCJhdHRyaWJ1dGVzIiwiYXNzaWduIiwiYWRkVW5kaXJlY3RlZEVkZ2UiLCJhZGRVbmRpcmVjdGVkRWRnZVdpdGhLZXkiLCJhZGREaXJlY3RlZEVkZ2UiLCJhZGREaXJlY3RlZEVkZ2VXaXRoS2V5IiwiYWRkTm9kZSIsImRyb3BOb2RlIiwidCIsImUiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwibyIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiYSIsIk1hcCIsInRvU3RyaW5nIiwiaW5kZXhPZiIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiYyIsIlJlZmVyZW5jZUVycm9yIiwidSIsImQiLCJfbm9kZXMiLCJvdXQiLCJzIiwiaCIsInAiLCJmIiwibCIsImciLCJ5IiwidiIsImIiLCJVIiwiayIsIngiLCJFIiwiQSIsIkwiLCJEIiwiTiIsIm5leHQiLCJvZiIsImRvbmUiLCJlbXB0eSIsImZyb21TZXF1ZW5jZSIsImlzIiwiTyIsImoiLCJBUlJBWV9CVUZGRVJfU1VQUE9SVCIsIkFycmF5QnVmZmVyIiwiU1lNQk9MX1NVUFBPUlQiLCJDIiwiTSIsInoiLCJXIiwiUCIsImlzVmlldyIsIksiLCJUIiwiQiIsImNhcHR1cmVTdGFja1RyYWNlIiwiRiIsIkkiLCJZIiwiY2xlYXIiLCJxIiwiSiIsIlYiLCJfZWRnZXMiLCJpbkRlZ3JlZSIsIm91dERlZ3JlZSIsInVuZGlyZWN0ZWREZWdyZWUiLCJ1bmRpcmVjdGVkTG9vcHMiLCJkaXJlY3RlZExvb3BzIiwiaW4iLCJhdHRhY2giLCJhdHRhY2hNdWx0aSIsInByZXZpb3VzIiwiZGV0YWNoIiwiZGV0YWNoTXVsdGkiLCJRIiwiYXR0YWNoZXIiLCJoYXNPd25Qcm9wZXJ0eSIsImRhdGEiLCJYIiwiWiIsIiQiLCJ0dCIsImV0IiwiZGlyZWN0aW9uIiwibnQiLCJydCIsIml0Iiwic291cmNlQXR0cmlidXRlcyIsInRhcmdldEF0dHJpYnV0ZXMiLCJvdCIsImF0IiwiY3QiLCJkdCIsImh0IiwibHQiLCJ3dCIsInZ0IiwiYnQiLCJtdCIsIndyYXAiLCJrdCIsIm5laWdoYm9yIiwieHQiLCJFdCIsIkF0IiwiTHQiLCJTdCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIkR0IiwiVXQiLCJOdCIsImFsbG93U2VsZkxvb3BzIiwiT3QiLCJOb2RlRGF0YUNsYXNzIiwianQiLCJfZWRnZUtleUdlbmVyYXRvciIsIl91bmRpcmVjdGVkU2VsZkxvb3BDb3VudCIsIl9kaXJlY3RlZFNlbGZMb29wQ291bnQiLCJfdW5kaXJlY3RlZFNpemUiLCJfZGlyZWN0ZWRTaXplIiwiQ3QiLCJNdCIsImRlbGV0ZSIsInp0IiwiX29wdGlvbnMiLCJfcmVzZXRJbnN0YW5jZUNvdW50ZXJzIiwiaGFzRGlyZWN0ZWRFZGdlIiwiaGFzVW5kaXJlY3RlZEVkZ2UiLCJoYXNFZGdlIiwiYXJlRGlyZWN0ZWROZWlnaGJvcnMiLCJhcmVPdXROZWlnaGJvcnMiLCJhcmVJbk5laWdoYm9ycyIsImFyZVVuZGlyZWN0ZWROZWlnaGJvcnMiLCJhcmVOZWlnaGJvcnMiLCJhcmVJbmJvdW5kTmVpZ2hib3JzIiwiYXJlT3V0Ym91bmROZWlnaGJvcnMiLCJkaXJlY3RlZERlZ3JlZSIsImluYm91bmREZWdyZWUiLCJvdXRib3VuZERlZ3JlZSIsImRlZ3JlZSIsImluRGVncmVlV2l0aG91dFNlbGZMb29wcyIsIm91dERlZ3JlZVdpdGhvdXRTZWxmTG9vcHMiLCJkaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHMiLCJ1bmRpcmVjdGVkRGVncmVlV2l0aG91dFNlbGZMb29wcyIsImluYm91bmREZWdyZWVXaXRob3V0U2VsZkxvb3BzIiwib3V0Ym91bmREZWdyZWVXaXRob3V0U2VsZkxvb3BzIiwiZGVncmVlV2l0aG91dFNlbGZMb29wcyIsImV4dHJlbWl0aWVzIiwib3Bwb3NpdGUiLCJoYXNFeHRyZW1pdHkiLCJpc1VuZGlyZWN0ZWQiLCJpc0RpcmVjdGVkIiwiaXNTZWxmTG9vcCIsIm1lcmdlTm9kZSIsInVwZGF0ZU5vZGUiLCJkcm9wRWRnZSIsImRyb3BEaXJlY3RlZEVkZ2UiLCJkcm9wVW5kaXJlY3RlZEVkZ2UiLCJjbGVhckVkZ2VzIiwiZ2V0QXR0cmlidXRlIiwiX2F0dHJpYnV0ZXMiLCJoYXNBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ1cGRhdGVBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZXBsYWNlQXR0cmlidXRlcyIsInVwZGF0ZUF0dHJpYnV0ZXMiLCJ1cGRhdGVFYWNoTm9kZUF0dHJpYnV0ZXMiLCJoaW50cyIsInVwZGF0ZUVhY2hFZGdlQXR0cmlidXRlcyIsImZvckVhY2hBZGphY2VuY3lFbnRyeSIsImZvckVhY2hBZGphY2VuY3lFbnRyeVdpdGhPcnBoYW5zIiwiZm9yRWFjaEFzc3ltZXRyaWNBZGphY2VuY3lFbnRyeSIsImZvckVhY2hBc3N5bWV0cmljQWRqYWNlbmN5RW50cnlXaXRoT3JwaGFucyIsImZyb20iLCJmaW5kTm9kZSIsIm1hcE5vZGVzIiwic29tZU5vZGUiLCJldmVyeU5vZGUiLCJmaWx0ZXJOb2RlcyIsInJlZHVjZU5vZGVzIiwibm9kZUVudHJpZXMiLCJleHBvcnQiLCJlZGdlcyIsIm1lcmdlVW5kaXJlY3RlZEVkZ2VXaXRoS2V5IiwibWVyZ2VEaXJlY3RlZEVkZ2VXaXRoS2V5IiwibWVyZ2VVbmRpcmVjdGVkRWRnZSIsIm1lcmdlRGlyZWN0ZWRFZGdlIiwidG9KU09OIiwiaW5zcGVjdCIsInN0YXJ0c1dpdGgiLCJmb3IiLCJnZW5lcmF0ZUtleSIsInVuZGlyZWN0ZWRTaXplIiwiZGlyZWN0ZWRTaXplIiwidXQiLCJwdCIsImd0IiwidG9VcHBlckNhc2UiLCJzdCIsImZ0IiwieXQiLCJHdCIsIld0IiwiUHQiLCJSdCIsIkt0IiwiVHQiLCJCdCIsIkdyYXBoIiwiRGlyZWN0ZWRHcmFwaCIsIlVuZGlyZWN0ZWRHcmFwaCIsIk11bHRpR3JhcGgiLCJNdWx0aURpcmVjdGVkR3JhcGgiLCJNdWx0aVVuZGlyZWN0ZWRHcmFwaCIsIkludmFsaWRBcmd1bWVudHNHcmFwaEVycm9yIiwiTm90Rm91bmRHcmFwaEVycm9yIiwiVXNhZ2VHcmFwaEVycm9yIiwiZ2xvYmFsIiwiZG9jdW1lbnQiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImdldFByb3RvIiwiZmxhdCIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXRlbSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInZhbCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiZm4iLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiZXhwYW5kbyIsInJlcGxhY2UiLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJndWlkIiwic3BsaXQiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicHVzaE5hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJsZWFkaW5nQ29tYmluYXRvciIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImF0dGFjaEV2ZW50IiwiY3NzSGFzIiwicXVlcnlTZWxlY3RvciIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiZWxlbWVudHMiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIm9iamVjdCIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsIm1pZ2h0VGhyb3ciLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJkZWZlciIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsImRpdiIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJvcHRpb24iLCJ3cmFwTWFwIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJvcHRncm91cCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJzYWZlQWN0aXZlRWxlbWVudCIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsIm9yaWdpbmFsRXZlbnQiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiZm9jdXMiLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiYXBwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJyY3VzdG9tUHJvcCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwicmJveFN0eWxlIiwicnRyaW1DU1MiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImlzQ3VzdG9tUHJvcCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIm9mZnNldEhlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImFkZENsYXNzIiwiY2xhc3NOYW1lcyIsImN1clZhbHVlIiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsInBhcnNlckVycm9yRWxlbSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJ0cmltIiwiX2pRdWVyeSIsIl8kIiwibm9Db25mbGljdCIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJfXyIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJhbmltYXRlXzEiLCJlYXNpbmdzXzEiLCJ1dGlsc18xIiwidHlwZXNfMSIsIkRFRkFVTFRfWk9PTUlOR19SQVRJTyIsIkNhbWVyYSIsIl9zdXBlciIsIl90aGlzIiwiYW5nbGUiLCJyYXRpbyIsIm1pblJhdGlvIiwibWF4UmF0aW8iLCJuZXh0RnJhbWUiLCJwcmV2aW91c1N0YXRlIiwiZW5hYmxlZCIsImdldFN0YXRlIiwic2V0U3RhdGUiLCJlbmFibGUiLCJoYXNTdGF0ZSIsImdldFByZXZpb3VzU3RhdGUiLCJnZXRCb3VuZGVkUmF0aW8iLCJtaW4iLCJ2YWxpZGF0ZVN0YXRlIiwidmFsaWRhdGVkU3RhdGUiLCJpc0FuaW1hdGVkIiwidmFsaWRTdGF0ZSIsInVwZGF0ZVN0YXRlIiwidXBkYXRlciIsIkFOSU1BVEVfREVGQVVMVFMiLCJkZWZhdWx0IiwiaW5pdGlhbFN0YXRlIiwiYW5pbWF0aW9uQ2FsbGJhY2siLCJjb2VmZmljaWVudCIsIm5ld1N0YXRlIiwicmVxdWVzdEZyYW1lIiwiY2FuY2VsRnJhbWUiLCJhbmltYXRlZFpvb20iLCJmYWN0b3JPck9wdGlvbnMiLCJmYWN0b3IiLCJhbmltYXRlZFVuem9vbSIsImFuaW1hdGVkUmVzZXQiLCJUeXBlZEV2ZW50RW1pdHRlciIsIl9fYXNzaWduIiwiZ2V0V2hlZWxEZWx0YSIsImdldFRvdWNoQ29vcmRzIiwiZ2V0VG91Y2hlc0FycmF5IiwiZ2V0V2hlZWxDb29yZHMiLCJnZXRNb3VzZUNvb3JkcyIsImdldFBvc2l0aW9uIiwiZG9tIiwiYmJveCIsInJlcyIsInNpZ21hRGVmYXVsdFByZXZlbnRlZCIsInByZXZlbnRTaWdtYURlZmF1bHQiLCJNQVhfVE9VQ0hFUyIsImRlbHRhWSIsInRvdWNoIiwiQ2FwdG9yIiwicmVuZGVyZXIiLCJfX2NyZWF0ZUJpbmRpbmciLCJrMiIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsIl9faW1wb3J0U3RhciIsImNhcHRvcl8xIiwiTW91c2VDYXB0b3IiLCJkcmFnZ2VkRXZlbnRzIiwiZG93blN0YXJ0VGltZSIsImxhc3RNb3VzZVgiLCJsYXN0TW91c2VZIiwiaXNNb3VzZURvd24iLCJpc01vdmluZyIsIm1vdmluZ1RpbWVvdXQiLCJzdGFydENhbWVyYVN0YXRlIiwiY2xpY2tzIiwiZG91YmxlQ2xpY2tUaW1lb3V0IiwiY3VycmVudFdoZWVsRGlyZWN0aW9uIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVSaWdodENsaWNrIiwiaGFuZGxlRG93biIsImhhbmRsZVVwIiwiaGFuZGxlTW92ZSIsImhhbmRsZVdoZWVsIiwiaGFuZGxlT3V0Iiwia2lsbCIsImhhbmRsZURvdWJsZUNsaWNrIiwibW91c2VDb29yZHMiLCJjYW1lcmEiLCJnZXRDYW1lcmEiLCJuZXdSYXRpbyIsImdldFZpZXdwb3J0Wm9vbWVkU3RhdGUiLCJfYSIsImNhbWVyYVN0YXRlIiwicHJldmlvdXNDYW1lcmFTdGF0ZSIsInJlZnJlc2giLCJlWCIsImVZIiwibGFzdE1vdXNlIiwidmlld3BvcnRUb0ZyYW1lZEdyYXBoIiwibW91c2UiLCJ3aGVlbENvb3JkcyIsInJhdGlvRGlmZiIsIndoZWVsRGlyZWN0aW9uIiwibGFzdFdoZWVsVHJpZ2dlclRpbWUiLCJNT1VTRV9aT09NX0RVUkFUSU9OIiwiX19yZWFkIiwiYXIiLCJUb3VjaENhcHRvciIsImhhc01vdmVkIiwidG91Y2hNb2RlIiwic3RhcnRUb3VjaGVzUG9zaXRpb25zIiwiaGFuZGxlU3RhcnQiLCJoYW5kbGVMZWF2ZSIsImdldERpbWVuc2lvbnMiLCJkaXNwYXRjaFJlbGF0ZWRNb3VzZUV2ZW50IiwibW91c2VQb3NpdGlvbiIsIm1vdXNlRXZlbnQiLCJNb3VzZUV2ZW50IiwiaXNGYWtlU2lnbWFNb3VzZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxhc3RUb3VjaGVzIiwibGFzdFRvdWNoZXNQb3NpdGlvbnMiLCJfYiIsIngwIiwieTAiLCJfYyIsIngxIiwieTEiLCJzdGFydFRvdWNoZXNBbmdsZSIsImF0YW4yIiwic3RhcnRUb3VjaGVzRGlzdGFuY2UiLCJzcXJ0IiwicG93IiwidG91Y2hlc1Bvc2l0aW9ucyIsInNvbWUiLCJzdGFydFBvc2l0aW9uIiwieFN0YXJ0IiwieVN0YXJ0IiwibmV3Q2FtZXJhU3RhdGUiLCJfZCIsIl9lIiwiYW5nbGVEaWZmIiwiaHlwb3QiLCJkaW1lbnNpb25zIiwidG91Y2hHcmFwaFBvc2l0aW9uIiwic21hbGxlc3REaW1lbnNpb24iLCJkeCIsInNpbiIsImVkZ2VMYWJlbHNUb0Rpc3BsYXlGcm9tTm9kZXMiLCJMYWJlbEdyaWQiLCJMYWJlbENhbmRpZGF0ZSIsImNlbGxTaXplIiwiY29sdW1ucyIsInJvd3MiLCJjZWxscyIsInJlc2l6ZUFuZENsZWFyIiwiZ2V0SW5kZXgiLCJ4SW5kZXgiLCJjYW5kaWRhdGUiLCJjZWxsIiwib3JnYW5pemUiLCJnZXRMYWJlbHNUb0Rpc3BsYXkiLCJkZW5zaXR5IiwiY2VsbEFyZWEiLCJzY2FsZWREZW5zaXR5IiwibGFiZWxzVG9EaXNwbGF5UGVyQ2VsbCIsImxhYmVscyIsImhvdmVyZWROb2RlIiwiaGlnaGxpZ2h0ZWROb2RlcyIsImRpc3BsYXllZE5vZGVMYWJlbHMiLCJ3b3J0aHlFZGdlcyIsInJlY3RhbmdsZUNvbGxpZGVzV2l0aFF1YWQiLCJzcXVhcmVDb2xsaWRlc1dpdGhRdWFkIiwiZ2V0Q2lyY3Vtc2NyaWJlZEFsaWduZWRSZWN0YW5nbGUiLCJpc1JlY3RhbmdsZUFsaWduZWQiLCJleHRlbmRfMSIsIlRPUF9MRUZUIiwiVE9QX1JJR0hUIiwiQk9UVE9NX0xFRlQiLCJCT1RUT01fUklHSFQiLCJoYXNXYXJuZWRUb29NdWNoT3V0c2lkZSIsIngyIiwieTIiLCJoZWlnaHRWZWN0b3IiLCJ0bCIsImJsIiwiYnIiLCJ4TCIsInhSIiwieVQiLCJxeCIsInF5IiwicXciLCJxaCIsInBvaW50SXNJblF1YWQiLCJRdWFkVHJlZSIsImNvbnRhaW5lcnMiLCJPVVRTSURFX0JMT0NLIiwibGFzdFJlY3RhbmdsZSIsIkZsb2F0MzJBcnJheSIsImJvdW5kYXJpZXMiLCJyZXNpemUiLCJtYXhMZXZlbCIsImxldmVsIiwiYmxvY2siLCJ0b3BMZWZ0QmxvY2siLCJ0b3BSaWdodEJsb2NrIiwiYm90dG9tTGVmdEJsb2NrIiwiYm90dG9tUmlnaHRCbG9jayIsImNvbGxpZGluZ1dpdGhUb3BMZWZ0IiwiY29sbGlkaW5nV2l0aFRvcFJpZ2h0IiwiY29sbGlkaW5nV2l0aEJvdHRvbUxlZnQiLCJjb2xsaWRpbmdXaXRoQm90dG9tUmlnaHQiLCJjb2xsaXNpb25zIiwicmVkdWNlIiwiYWNjIiwiaW5zZXJ0Tm9kZSIsImh3IiwiaGgiLCJidWlsZFF1YWRyYW50cyIsInBvaW50IiwicmVjdGFuZ2xlIiwibHIiLCJjb2xsZWN0ZWROb2RlcyIsImdldE5vZGVzSW5BeGlzQWxpZ25lZFJlY3RhbmdsZUFyZWEiLCJhYnMiLCJTaWdtYSIsInNpZ21hXzEiLCJjYW1lcmFfMSIsInF1YWR0cmVlXzEiLCJtb3VzZV8xIiwiZWRnZURhdGEiLCJzb3VyY2VEYXRhIiwidGFyZ2V0RGF0YSIsImVkZ2VMYWJlbFNpemUiLCJmb250IiwiZWRnZUxhYmVsRm9udCIsIndlaWdodCIsImVkZ2VMYWJlbFdlaWdodCIsImNvbG9yIiwiZWRnZUxhYmVsQ29sb3IiLCJhdHRyaWJ1dGUiLCJsYWJlbCIsImZpbGxTdHlsZSIsImN4IiwiY3kiLCJzU2l6ZSIsInRTaXplIiwic3giLCJzeSIsInR4IiwidHkiLCJkeSIsInRleHRMZW5ndGgiLCJtZWFzdXJlVGV4dCIsImFjb3MiLCJhc2luIiwic2F2ZSIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsImZpbGxUZXh0IiwicmVzdG9yZSIsImxhYmVsXzEiLCJsYWJlbFNpemUiLCJsYWJlbEZvbnQiLCJsYWJlbFdlaWdodCIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwic2hhZG93Qmx1ciIsInNoYWRvd0NvbG9yIiwidGV4dFdpZHRoIiwiYm94V2lkdGgiLCJib3hIZWlnaHQiLCJyYWRpdXMiLCJhbmdsZVJhZGlhbiIsInhEZWx0YUNvb3JkIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwiYXJjIiwiY2xvc2VQYXRoIiwiZmlsbCIsImxhYmVsQ29sb3IiLCJjcmVhdGVFZGdlQ29tcG91bmRQcm9ncmFtIiwiQWJzdHJhY3RFZGdlUHJvZ3JhbSIsImdsIiwidmVydGV4U2hhZGVyU291cmNlIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJwb2ludHMiLCJBYnN0cmFjdFByb2dyYW0iLCJwcm9ncmFtQ2xhc3NlcyIsIkVkZ2VDb21wb3VuZFByb2dyYW0iLCJwcm9ncmFtcyIsIlByb2dyYW1DbGFzcyIsImJ1ZmZlckRhdGEiLCJwcm9ncmFtIiwiYWxsb2NhdGUiLCJjYXBhY2l0eSIsImNvbXB1dGVJbmRpY2VzIiwicmVuZGVyIiwiY3JlYXRlTm9kZUNvbXBvdW5kUHJvZ3JhbSIsIkFic3RyYWN0Tm9kZVByb2dyYW0iLCJwb3NpdGlvbkxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJzaXplTG9jYXRpb24iLCJjb2xvckxvY2F0aW9uIiwibWF0cml4TG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJyYXRpb0xvY2F0aW9uIiwic2NhbGVMb2NhdGlvbiIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsIkZMT0FUIiwiQllURVNfUEVSX0VMRU1FTlQiLCJVTlNJR05FRF9CWVRFIiwiTm9kZUNvbXBvdW5kUHJvZ3JhbSIsImJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJ2ZXJ0ZXhTaGFkZXIiLCJsb2FkVmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJsb2FkRnJhZ21lbnRTaGFkZXIiLCJsb2FkUHJvZ3JhbSIsIkRZTkFNSUNfRFJBVyIsImhhc05vdGhpbmdUb1JlbmRlciIsImVkZ2VfMSIsImVkZ2VfYXJyb3dIZWFkXzEiLCJlZGdlX2NsYW1wZWRfMSIsIkVkZ2VBcnJvd1Byb2dyYW0iLCJlZGdlX2Fycm93SGVhZF92ZXJ0X2dsc2xfMSIsImVkZ2VfYXJyb3dIZWFkX2ZyYWdfZ2xzbF8xIiwiRWRnZUFycm93SGVhZFByb2dyYW0iLCJub3JtYWxMb2NhdGlvbiIsInJhZGl1c0xvY2F0aW9uIiwiYmFyeWNlbnRyaWNMb2NhdGlvbiIsInNxcnRab29tUmF0aW9Mb2NhdGlvbiIsImNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uIiwiaV8xIiwiUE9JTlRTIiwidGhpY2tuZXNzIiwiZmxvYXRDb2xvciIsIm4xIiwibjIiLCJ1c2VQcm9ncmFtIiwidW5pZm9ybU1hdHJpeDNmdiIsIm1hdHJpeCIsInVuaWZvcm0xZiIsImNvcnJlY3Rpb25SYXRpbyIsImRyYXdBcnJheXMiLCJUUklBTkdMRVMiLCJlZGdlX2NsYW1wZWRfdmVydF9nbHNsXzEiLCJlZGdlX2ZyYWdfZ2xzbF8xIiwiRWRnZUNsYW1wZWRQcm9ncmFtIiwiaW5kaWNlc0J1ZmZlciIsImNhblVzZTMyQml0c0luZGljZXMiLCJJbmRpY2VzQXJyYXkiLCJVaW50MzJBcnJheSIsIlVpbnQxNkFycmF5IiwiaW5kaWNlc0FycmF5IiwiaW5kaWNlc1R5cGUiLCJVTlNJR05FRF9JTlQiLCJVTlNJR05FRF9TSE9SVCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiaW5kaWNlcyIsIlNUQVRJQ19EUkFXIiwiZHJhd0VsZW1lbnRzIiwiZWRnZV92ZXJ0X2dsc2xfMSIsIkVkZ2VQcm9ncmFtIiwibm9kZV9mYXN0X3ZlcnRfZ2xzbF8xIiwibm9kZV9mYXN0X2ZyYWdfZ2xzbF8xIiwiTm9kZUZhc3RQcm9ncmFtIiwic2NhbGluZ1JhdGlvIiwibm9kZV92ZXJ0X2dsc2xfMSIsIm5vZGVfZnJhZ19nbHNsXzEiLCJwcm9ncmFtXzEiLCJBTkdMRV8yIiwiQU5HTEVfMyIsIk5vZGVQcm9ncmFtIiwiYW5nbGVMb2NhdGlvbiIsInRvU3RyaW5nVGFnIiwibG9hZFNoYWRlciIsImdsVHlwZSIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJpbmZvTG9nIiwiZ2V0U2hhZGVySW5mb0xvZyIsImRlbGV0ZVNoYWRlciIsInNoYWRlcnMiLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJkZWxldGVQcm9ncmFtIiwicmVzb2x2ZVNldHRpbmdzIiwidmFsaWRhdGVTZXR0aW5ncyIsIkRFRkFVTFRfRURHRV9QUk9HUkFNX0NMQVNTRVMiLCJERUZBVUxUX05PREVfUFJPR1JBTV9DTEFTU0VTIiwiREVGQVVMVF9TRVRUSU5HUyIsImhvdmVyXzEiLCJlZGdlX2xhYmVsXzEiLCJub2RlX2Zhc3RfMSIsImVkZ2VfYXJyb3dfMSIsImhpZGVFZGdlc09uTW92ZSIsImhpZGVMYWJlbHNPbk1vdmUiLCJyZW5kZXJMYWJlbHMiLCJyZW5kZXJFZGdlTGFiZWxzIiwiZW5hYmxlRWRnZUNsaWNrRXZlbnRzIiwiZW5hYmxlRWRnZVdoZWVsRXZlbnRzIiwiZW5hYmxlRWRnZUhvdmVyRXZlbnRzIiwiZGVmYXVsdE5vZGVDb2xvciIsImRlZmF1bHROb2RlVHlwZSIsImRlZmF1bHRFZGdlQ29sb3IiLCJkZWZhdWx0RWRnZVR5cGUiLCJzdGFnZVBhZGRpbmciLCJsYWJlbERlbnNpdHkiLCJsYWJlbEdyaWRDZWxsU2l6ZSIsImxhYmVsUmVuZGVyZWRTaXplVGhyZXNob2xkIiwibm9kZVJlZHVjZXIiLCJlZGdlUmVkdWNlciIsInpJbmRleCIsIm1pbkNhbWVyYVJhdGlvIiwibWF4Q2FtZXJhUmF0aW8iLCJsYWJlbFJlbmRlcmVyIiwiaG92ZXJSZW5kZXJlciIsImVkZ2VMYWJlbFJlbmRlcmVyIiwiYWxsb3dJbnZhbGlkQ29udGFpbmVyIiwibm9kZVByb2dyYW1DbGFzc2VzIiwibm9kZUhvdmVyUHJvZ3JhbUNsYXNzZXMiLCJlZGdlUHJvZ3JhbUNsYXNzZXMiLCJjaXJjbGUiLCJhcnJvdyIsImxpbmUiLCJyZXNvbHZlZFNldHRpbmdzIiwiX192YWx1ZXMiLCJsYWJlbHNfMSIsInNldHRpbmdzXzEiLCJ0b3VjaF8xIiwibWF0cmljZXNfMSIsImVkZ2VfY29sbGlzaW9uc18xIiwiYXBwbHlOb2RlRGVmYXVsdHMiLCJoaWdobGlnaHRlZCIsImZvcmNlTGFiZWwiLCJhcHBseUVkZ2VEZWZhdWx0cyIsImNhbnZhc0NvbnRleHRzIiwid2ViR0xDb250ZXh0cyIsImFjdGl2ZUxpc3RlbmVycyIsInF1YWR0cmVlIiwibGFiZWxHcmlkIiwibm9kZURhdGFDYWNoZSIsImVkZ2VEYXRhQ2FjaGUiLCJub2Rlc1dpdGhGb3JjZWRMYWJlbHMiLCJlZGdlc1dpdGhGb3JjZWRMYWJlbHMiLCJub2RlRXh0ZW50IiwiaWRlbnRpdHkiLCJpbnZNYXRyaXgiLCJjdXN0b21CQm94Iiwibm9ybWFsaXphdGlvbkZ1bmN0aW9uIiwiY3JlYXRlTm9ybWFsaXphdGlvbkZ1bmN0aW9uIiwiY2FtZXJhU2l6ZVJhdGlvIiwicGl4ZWxSYXRpbyIsImdldFBpeGVsUmF0aW8iLCJkaXNwbGF5ZWRMYWJlbHMiLCJob3ZlcmVkRWRnZSIsInJlbmRlckZyYW1lIiwicmVuZGVySGlnaGxpZ2h0ZWROb2Rlc0ZyYW1lIiwibmVlZFRvUHJvY2VzcyIsIm5lZWRUb1NvZnRQcm9jZXNzIiwiY2hlY2tFZGdlc0V2ZW50c0ZyYW1lIiwibm9kZVByb2dyYW1zIiwibm9kZUhvdmVyUHJvZ3JhbXMiLCJlZGdlUHJvZ3JhbXMiLCJ2YWxpZGF0ZUdyYXBoIiwiSFRNTEVsZW1lbnQiLCJjcmVhdGVXZWJHTENvbnRleHQiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJjcmVhdGVDYW52YXNDb250ZXh0IiwiYmxlbmRGdW5jIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIkJMRU5EIiwiTm9kZVByb2dyYW1DbGFzcyIsIk5vZGVIb3ZlclByb2dyYW0iLCJob3Zlck5vZGVzIiwiRWRnZVByb2dyYW1DbGFzcyIsImJpbmRDYW1lcmFIYW5kbGVycyIsIm1vdXNlQ2FwdG9yIiwidG91Y2hDYXB0b3IiLCJiaW5kRXZlbnRIYW5kbGVycyIsImJpbmRHcmFwaEhhbmRsZXJzIiwiaGFuZGxlU2V0dGluZ3NVcGRhdGUiLCJjcmVhdGVDYW52YXMiLCJjYW52YXMiLCJjbGFzcyIsImdldENvbnRleHQiLCJhbnRpYWxpYXMiLCJjb250ZXh0T3B0aW9ucyIsIl9zY2hlZHVsZVJlZnJlc2giLCJtb3VzZUlzT25Ob2RlIiwibm9kZVgiLCJub2RlWSIsImdldFF1YWROb2RlcyIsIm1vdXNlR3JhcGhQb3NpdGlvbiIsImdldE5vZGVBdFBvc2l0aW9uIiwicXVhZE5vZGVzIiwibWluRGlzdGFuY2UiLCJJbmZpbml0eSIsIm5vZGVBdFBvc2l0aW9uIiwibm9kZVBvc2l0aW9uIiwiZnJhbWVkR3JhcGhUb1ZpZXdwb3J0Iiwic2NhbGVTaXplIiwiZGlzdGFuY2UiLCJoYW5kbGVSZXNpemUiLCJiYXNlRXZlbnQiLCJub2RlVG9Ib3ZlciIsInNjaGVkdWxlSGlnaGxpZ2h0ZWROb2Rlc1JlbmRlciIsImNoZWNrRWRnZUhvdmVyRXZlbnRzIiwiY3JlYXRlTW91c2VMaXN0ZW5lciIsImV2ZW50VHlwZSIsImdldEVkZ2VBdFBvaW50IiwiZ3JhcGhVcGRhdGUiLCJzb2Z0R3JhcGhVcGRhdGUiLCJkcm9wTm9kZUdyYXBoVXBkYXRlIiwiZHJvcEVkZ2VHcmFwaFVwZGF0ZSIsImNsZWFyRWRnZXNHcmFwaFVwZGF0ZSIsImNsZWFyR3JhcGhVcGRhdGUiLCJ1bmJpbmRHcmFwaEhhbmRsZXJzIiwicGF5bG9hZCIsImVkZ2VUb0hvdmVyIiwiZV8xIiwiaXNQaXhlbENvbG9yZWQiLCJ2aWV3cG9ydFRvR3JhcGgiLCJncmFwaFgiLCJncmFwaFkiLCJ0cmFuc2Zvcm1hdGlvblJhdGlvIiwic29tZUVkZ2UiLCJzb3VyY2VJZCIsInRhcmdldElkIiwieHMiLCJ5cyIsImdyYXBoTGVuZ3RoIiwiZ3JhcGhUb1ZpZXdwb3J0IiwidnBfeHMiLCJ2cF95cyIsInZwX3h0IiwidnBfeXQiLCJ2aWV3cG9ydExlbmd0aCIsImZpbHRlckVkZ2VzIiwiZWRnZUF0dHJpYnV0ZXMiLCJzb3VyY2VQb3NpdGlvbiIsInRhcmdldFBvc2l0aW9uIiwiZG9FZGdlQ29sbGlkZVdpdGhQb2ludCIsInNlbGVjdGVkRWRnZSIsImhpZ2hlc3RaSW5kZXgiLCJlZGdlc18xIiwiZWRnZXNfMV8xIiwiZ2V0RWRnZUF0dHJpYnV0ZSIsImVfMV8xIiwicmV0dXJuIiwia2VlcEFycmF5cyIsIm5vZGVaRXh0ZW50IiwiZWRnZVpFeHRlbnQiLCJncmFwaEV4dGVudCIsIm51bGxDYW1lcmEiLCJudWxsQ2FtZXJhTWF0cml4IiwibWF0cml4RnJvbUNhbWVyYSIsImdldEdyYXBoRGltZW5zaW9ucyIsImdldFNldHRpbmciLCJub2Rlc1BlclByb2dyYW1zIiwiYXBwbHlUbyIsInpJbmRleE9yZGVyaW5nIiwibm9kZVByb2dyYW0iLCJlZGdlc1BlclByb2dyYW1zIiwiX3JlZnJlc2giLCJsYWJlbHNUb0Rpc3BsYXkiLCJlZGdlTGFiZWxzIiwiY2xlYXJSZWN0IiwiZWRnZUxhYmVsc1RvRGlzcGxheSIsInJlbmRlckhpZ2hsaWdodGVkTm9kZXMiLCJob3ZlcnMiLCJub2Rlc1RvUmVuZGVyIiwiQ09MT1JfQlVGRkVSX0JJVCIsImV4aXRSZW5kZXIiLCJ1cGRhdGVDYWNoZWRWYWx1ZXMiLCJtb3ZpbmciLCJ2aWV3cG9ydERpbWVuc2lvbnMiLCJncmFwaERpbWVuc2lvbnMiLCJnZXRNYXRyaXhJbXBhY3QiLCJnZXRDb250YWluZXIiLCJnZXRHcmFwaCIsInNldEdyYXBoIiwiZ2V0TW91c2VDYXB0b3IiLCJnZXRUb3VjaENhcHRvciIsImV4dGVudCIsImdldE5vZGVEaXNwbGF5RGF0YSIsImdldEVkZ2VEaXNwbGF5RGF0YSIsImdldFNldHRpbmdzIiwic2V0U2V0dGluZyIsInVwZGF0ZVNldHRpbmciLCJwcmV2aW91c1dpZHRoIiwicHJldmlvdXNIZWlnaHQiLCJlbGVtZW50Iiwidmlld3BvcnQiLCJzY2hlZHVsZVJlZnJlc2giLCJ2aWV3cG9ydFRhcmdldCIsImNlbnRlciIsImdyYXBoTW91c2VQb3NpdGlvbiIsImdyYXBoQ2VudGVyUG9zaXRpb24iLCJ2aWV3UmVjdGFuZ2xlIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwMSIsInAyIiwiY29vcmRpbmF0ZXMiLCJvdmVycmlkZSIsInJlY29tcHV0ZU1hdHJpeCIsInZpZXdwb3J0UG9zIiwibXVsdGlwbHlWZWMyIiwidmlld3BvcnRQb2ludCIsImludmVyc2UiLCJncmFwaFBvaW50IiwiZ2V0QkJveCIsImdldEN1c3RvbUJCb3giLCJzZXRDdXN0b21CQm94IiwiZ2V0Q2FudmFzZXMiLCJyYXdFbWl0dGVyIiwiYW5pbWF0ZU5vZGVzIiwiaW5kZXhfMSIsInN0YXJ0UG9zaXRpb25zIiwiZ2V0Tm9kZUF0dHJpYnV0ZSIsImZyYW1lIiwic2V0Tm9kZUF0dHJpYnV0ZSIsIkhUTUxfQ09MT1JTIiwiYmxhY2siLCJzaWx2ZXIiLCJncmF5IiwiZ3JleSIsIndoaXRlIiwibWFyb29uIiwicmVkIiwicHVycGxlIiwiZnVjaHNpYSIsImdyZWVuIiwibGltZSIsIm9saXZlIiwieWVsbG93IiwibmF2eSIsImJsdWUiLCJ0ZWFsIiwiYXF1YSIsImRhcmtibHVlIiwibWVkaXVtYmx1ZSIsImRhcmtncmVlbiIsImRhcmtjeWFuIiwiZGVlcHNreWJsdWUiLCJkYXJrdHVycXVvaXNlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJzcHJpbmdncmVlbiIsImN5YW4iLCJtaWRuaWdodGJsdWUiLCJkb2RnZXJibHVlIiwibGlnaHRzZWFncmVlbiIsImZvcmVzdGdyZWVuIiwic2VhZ3JlZW4iLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImxpbWVncmVlbiIsIm1lZGl1bXNlYWdyZWVuIiwidHVycXVvaXNlIiwicm95YWxibHVlIiwic3RlZWxibHVlIiwiZGFya3NsYXRlYmx1ZSIsIm1lZGl1bXR1cnF1b2lzZSIsImluZGlnbyIsImRhcmtvbGl2ZWdyZWVuIiwiY2FkZXRibHVlIiwiY29ybmZsb3dlcmJsdWUiLCJyZWJlY2NhcHVycGxlIiwibWVkaXVtYXF1YW1hcmluZSIsImRpbWdyYXkiLCJkaW1ncmV5Iiwic2xhdGVibHVlIiwib2xpdmVkcmFiIiwic2xhdGVncmF5Iiwic2xhdGVncmV5IiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsIm1lZGl1bXNsYXRlYmx1ZSIsImxhd25ncmVlbiIsImNoYXJ0cmV1c2UiLCJhcXVhbWFyaW5lIiwic2t5Ymx1ZSIsImxpZ2h0c2t5Ymx1ZSIsImJsdWV2aW9sZXQiLCJkYXJrcmVkIiwiZGFya21hZ2VudGEiLCJzYWRkbGVicm93biIsImRhcmtzZWFncmVlbiIsImxpZ2h0Z3JlZW4iLCJtZWRpdW1wdXJwbGUiLCJkYXJrdmlvbGV0IiwicGFsZWdyZWVuIiwiZGFya29yY2hpZCIsInllbGxvd2dyZWVuIiwic2llbm5hIiwiYnJvd24iLCJkYXJrZ3JheSIsImRhcmtncmV5IiwibGlnaHRibHVlIiwiZ3JlZW55ZWxsb3ciLCJwYWxldHVycXVvaXNlIiwibGlnaHRzdGVlbGJsdWUiLCJwb3dkZXJibHVlIiwiZmlyZWJyaWNrIiwiZGFya2dvbGRlbnJvZCIsIm1lZGl1bW9yY2hpZCIsInJvc3licm93biIsImRhcmtraGFraSIsIm1lZGl1bXZpb2xldHJlZCIsImluZGlhbnJlZCIsInBlcnUiLCJjaG9jb2xhdGUiLCJ0YW4iLCJsaWdodGdyYXkiLCJsaWdodGdyZXkiLCJ0aGlzdGxlIiwib3JjaGlkIiwiZ29sZGVucm9kIiwicGFsZXZpb2xldHJlZCIsImNyaW1zb24iLCJnYWluc2Jvcm8iLCJwbHVtIiwiYnVybHl3b29kIiwibGlnaHRjeWFuIiwibGF2ZW5kZXIiLCJkYXJrc2FsbW9uIiwidmlvbGV0IiwicGFsZWdvbGRlbnJvZCIsImxpZ2h0Y29yYWwiLCJraGFraSIsImFsaWNlYmx1ZSIsImhvbmV5ZGV3IiwiYXp1cmUiLCJzYW5keWJyb3duIiwid2hlYXQiLCJiZWlnZSIsIndoaXRlc21va2UiLCJtaW50Y3JlYW0iLCJnaG9zdHdoaXRlIiwic2FsbW9uIiwiYW50aXF1ZXdoaXRlIiwibGluZW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsIm9sZGxhY2UiLCJtYWdlbnRhIiwiZGVlcHBpbmsiLCJvcmFuZ2VyZWQiLCJ0b21hdG8iLCJob3RwaW5rIiwiY29yYWwiLCJkYXJrb3JhbmdlIiwibGlnaHRzYWxtb24iLCJvcmFuZ2UiLCJsaWdodHBpbmsiLCJwaW5rIiwiZ29sZCIsInBlYWNocHVmZiIsIm5hdmFqb3doaXRlIiwibW9jY2FzaW4iLCJiaXNxdWUiLCJtaXN0eXJvc2UiLCJibGFuY2hlZGFsbW9uZCIsInBhcGF5YXdoaXAiLCJsYXZlbmRlcmJsdXNoIiwic2Vhc2hlbGwiLCJjb3Juc2lsayIsImxlbW9uY2hpZmZvbiIsImZsb3JhbHdoaXRlIiwic25vdyIsImxpZ2h0eWVsbG93IiwiaXZvcnkiLCJjdWJpY0luT3V0IiwiY3ViaWNPdXQiLCJjdWJpY0luIiwicXVhZHJhdGljSW5PdXQiLCJxdWFkcmF0aWNPdXQiLCJxdWFkcmF0aWNJbiIsImVhc2luZ3MiLCJwaXhlbHMiLCJVaW50OEFycmF5IiwicmVhZFBpeGVscyIsImRyYXdpbmdCdWZmZXJIZWlnaHQiLCJSR0JBIiwieFMiLCJ5UyIsInhUIiwiZXh0cmFjdFBpeGVsIiwiZ2V0Q29ycmVjdGlvblJhdGlvIiwiZmxvYXRBcnJheUNvbG9yIiwicGFyc2VDb2xvciIsImFzc2lnbkRlZXAiLCJpc19ncmFwaF8xIiwiZGF0YV8xIiwib2JqZWN0cyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdElEIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwiZFgiLCJkWSIsInpBIiwiekIiLCJJTlQ4IiwiSW50OEFycmF5IiwiSU5UMzIiLCJJbnQzMkFycmF5IiwiRkxPQVQzMiIsIlJHQkFfVEVTVF9SRUdFWCIsIlJHQkFfRVhUUkFDVF9SRUdFWCIsImNoYXJBdCIsIkZMT0FUX0NPTE9SX0NBQ0hFIiwiaHRtbENvbG9yIiwidmlld3BvcnRSYXRpbyIsImdyYXBoUmF0aW8iLCJtdWx0aXBseSIsIldlYkdMMlJlbmRlcmluZ0NvbnRleHQiLCJnZXRFeHRlbnNpb24iLCJhMDAiLCJhMDEiLCJhMDIiLCJhMTAiLCJhMTEiLCJhMTIiLCJhMjAiLCJhMjEiLCJhMjIiLCJiMDAiLCJiMDEiLCJiMDIiLCJiMTAiLCJiMTEiLCJiMTIiLCJiMjAiLCJiMjEiLCJiMjIiLCJiMCIsImIxIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJzZW5kUmVxdWVzdCIsImZldGNoIiwib3JpZ2luIiwidHJhbnNmb3JtVXJsIiwiZWRnZUNvbG9yIiwicmVuZGVyZXJTZXR0aW5ncyIsImVkZ2VTZXR0aW5ncyIsIlNpZ21hR3JhcGhDcmVhdG9yIiwicm9vdEVsZW1lbnQiLCJzaWdtYUNvbnRhaW5lciIsIm1heFRyYWluTGVuZ3RoIiwiZW5hYmxlTm9kZUhvdmVyIiwibm9kZXNGb3JHaXZlblRyYWluSWQiLCJzdWJHcmFwaCIsImdldEluaXRHcmFwaCIsInByb2Nlc3NSb3V0ZUlEIiwiZGVzdHJveVNpZ21hR3JhcGgiLCJzdWJHcmFwaFJvdXRlSWRzIiwiaW5wdXRTY2FsaW5nIiwiY3JlYXRlU3ViR3JhcGgiLCJwcm9jZXNzSW5wdXQiLCJ2YWxpZGF0ZUlucHV0VHJhaW5JZCIsImNyZWF0ZVJvdXRlU3VnZ2VzdGlvbnMiLCJpbnB1dFJvdXRlSUQiLCJoaWdobGlnaHRSb3V0ZSIsInNlbGVjdGVkTm9kZXMiLCJpbnB1dFRyYWluSUQiLCJpbnB1dE5laWdoYm9yIiwiZ2V0UmVsZXZhbnRUcmFpbklkcyIsImdldE5laWdoYm9yVHJhaW5JZHMiLCJ0cmFpbklEcyIsInRyYWluSWQiLCJmb3JFYWNoTmVpZ2hib3IiLCJnZXRSZWxldmFudE5vZGVzIiwicmVsZXZhbnRUcmFpbklkcyIsImFsbE5vZGVzIiwibm9kZXNPZkN1cnJlbnRUcmFpbklkIiwicm91dGVfaWQiLCJpbnRpYWxpemVSb3V0ZUluZm8iLCJub2Rlc0ZvckdpdmVuUm91dGVJZCIsInJvdXRlIiwiYWxsVHJhaW5JZHMiLCJudW1iZXJPZlRyYWlucyIsInNldEdyYXBoQXR0cmlidXRlcyIsImJpbmRSZW5kZXJlckV2ZW50cyIsIlNjYWxpbmciLCJzZXROb2RlQXR0cmlidXRlcyIsInNldEVkZ2VBdHRyaWJ1dGVzIiwibGFzdFRyYWluSWQiLCJ4UG9zaXRpb24iLCJ5UG9zaXRpb24iLCJjdXJyZW50VHJhaW5JZCIsImxhYmVsTmFtZSIsImlzUm91dGVFZGdlIiwibWVyZ2VFZGdlQXR0cmlidXRlcyIsImludmVydEVkZ2UiLCJoaWdobGlnaHRIb3ZlcmVkRWRnZSIsImhpZ2hsaWdodEhvdmVyZWROb2RlIiwicmVzaXplU2lnbWFHcmFwaCIsImxvZyIsInNldEhvdmVyZWROb2RlIiwiaG92ZXJlZE5laWdoYm9ycyIsIm5laWdoYm9ycyIsInJlbmRlcmVyUmVkdWNlciIsInJlbmRlcmVyTm9kZVJlZHVjZXIiLCJyZW5kZXJlckVkZ2VSZWR1Y2VyIiwicm91dGVJZCIsIm5vZGVEYXRhIiwic3RhdGVFZGdlVmFsaWRhdGlvbiIsInNlbGVjdGVkTm9kZSIsImhvdmVyZWROb2RlQWN0aW9ucyIsInNldEVkZ2VBdHRyaWJ1dGUiLCJlZGdlSW5mb3JtYXRpb24iLCJnZXRVcGRhdGVkR3JhcGgiLCJ1bnNhZmVJbXBvcnQiLCJzdHJpbmdpZnkiLCJzZW5kUG9zdERhdGEiLCJleHBvcnRHcmFwaEFzSnNvbiJdLCJzb3VyY2VSb290IjoiIn0=