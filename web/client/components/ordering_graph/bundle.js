/*! For license information please see bundle.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.webpackSigmaGraph=e():t.webpackSigmaGraph=e()}(self,(()=>(()=>{var t={3796:t=>{t.exports=function(t,e){var r=e.length;if(0!==r){var n=t.length;t.length+=r;for(var i=0;i<r;i++)t[n+i]=e[i]}}},7187:t=>{"use strict";var e,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};e=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var i=Number.isNaN||function(t){return t!=t};function o(){o.init.call(this)}t.exports=o,t.exports.once=function(t,e){return new Promise((function(r,n){function i(r){t.removeListener(e,o),n(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",i),r([].slice.call(arguments))}g(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&g(t,"error",e,{once:!0})}(t,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function u(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function c(t,e,r,n){var i,o,a,c;if(s(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),a=o[e]),void 0===a)a=o[e]=r,++t._eventsCount;else if("function"==typeof a?a=o[e]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=u(t))>0&&a.length>i&&!a.warned){a.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=t,h.type=e,h.count=a.length,c=h,console&&console.warn&&console.warn(c)}return t}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function l(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):p(i,i.length)}function f(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}function g(t,e,r,n){if("function"==typeof t.on)n.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function i(o){n.once&&t.removeEventListener(e,i),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(t){if("number"!=typeof t||t<0||i(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");a=t}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||i(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var i="error"===t,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=o[t];if(void 0===u)return!1;if("function"==typeof u)n(u,this,e);else{var c=u.length,h=p(u,c);for(r=0;r<c;++r)n(h[r],this,e)}return!0},o.prototype.addListener=function(t,e){return c(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return c(this,t,e,!0)},o.prototype.once=function(t,e){return s(e),this.on(t,d(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){return s(e),this.prependListener(t,d(this,t,e)),this},o.prototype.removeListener=function(t,e){var r,n,i,o,a;if(s(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,a||e)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},o.prototype.listeners=function(t){return l(this,t,!0)},o.prototype.rawListeners=function(t){return l(this,t,!1)},o.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):f.call(t,e)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},3630:(t,e,r)=>{var n=r(6186),i=r(3212).B,o=r(4325).De;t.exports=function(t,e){if(!n(t)||!n(e))throw new Error("graphology-operators/disjoint-union: invalid graph.");if(t.multi!==e.multi)throw new Error("graphology-operators/disjoint-union: both graph should be simple or multi.");var r=t.nullCopy();r.mergeAttributes(t.getAttributes());var a={},s={},u=0;return t.forEachNode((function(t,e){a[t]=u,i(r,u,e),u++})),e.forEachNode((function(t,e){s[t]=u,i(r,u,e),u++})),u=0,t.forEachEdge((function(t,e,n,i,s,c,h){o(r,h,u++,a[n],a[i],i,e)})),e.forEachEdge((function(t,e,n,i,a,c,h){o(r,h,u++,s[n],s[i],i,e)})),r}},1687:(t,e,r)=>{r(3630),r(7842),e.subgraph=r(4783),r(9441),r(3417),r(7183),r(4375),r(2012),r(7697)},7842:(t,e,r)=>{var n=r(6186),i=r(4325).De;t.exports=function(t){if(!n(t))throw new Error("graphology-operators/reverse: invalid graph.");var e=t.emptyCopy();return t.forEachUndirectedEdge((function(t,r,n,o){i(e,!0,t,n,o,r)})),t.forEachDirectedEdge((function(t,r,n,o){i(e,!1,t,o,n,r)})),e}},4783:(t,e,r)=>{var n=r(6186),i=r(3212).B,o=r(4325).De;t.exports=function(t,e){if(!n(t))throw new Error("graphology-operators/subgraph: invalid graph instance.");var r=t.nullCopy(),a=e;if(Array.isArray(e)){if(0===e.length)return r;e=new Set(e)}if(e instanceof Set){if(0===e.size)return r;a=function(t){return e.has(t)};var s=e;e=new Set,s.forEach((function(t){e.add(""+t)}))}if("function"!=typeof a)throw new Error("graphology-operators/subgraph: invalid nodes. Expecting an array or a set or a filtering function.");if("function"==typeof e){if(t.forEachNode((function(t,e){a(t,e)&&i(r,t,e)})),0===r.order)return r}else e.forEach((function(e){if(!t.hasNode(e))throw new Error('graphology-operators/subgraph: the "'+e+'" node was not found in the graph.');i(r,e,t.getNodeAttributes(e))}));return t.forEachEdge((function(t,e,n,i,s,u,c){a(n,s)&&(i===n||a(i,u))&&o(r,c,t,n,i,e)})),r}},9441:(t,e,r)=>{var n=r(6186),i=r(4325).De;t.exports=function(t,e){if(!n(t))throw new Error("graphology-operators/to-directed: expecting a valid graphology instance.");"function"==typeof e&&(e={mergeEdge:e});var r="function"==typeof(e=e||{}).mergeEdge?e.mergeEdge:null;if("directed"===t.type)return t.copy();var o=t.emptyCopy({type:"directed"});return t.forEachDirectedEdge((function(t,e,r,n){i(o,!1,t,r,n,e)})),t.forEachUndirectedEdge((function(e,n,a,s){var u=!t.multi&&"mixed"===t.type&&o.edge(a,s),c=!t.multi&&"mixed"===t.type&&o.edge(s,a);u?o.replaceEdgeAttributes(u,r(o.getEdgeAttributes(u),n)):i(o,!1,null,a,s,n),a!==s&&(c?o.replaceEdgeAttributes(c,r(o.getEdgeAttributes(c),n)):i(o,!1,null,s,a,n))})),o}},3417:(t,e,r)=>{var n=r(6186);t.exports=function(t){if(!n(t))throw new Error("graphology-operators/to-mixed: expecting a valid graphology instance.");return t.copy({type:"mixed"})}},7183:(t,e,r)=>{var n=r(6186);t.exports=function(t){if(!n(t))throw new Error("graphology-operators/to-multi: expecting a valid graphology instance.");return t.copy({multi:!0})}},4375:(t,e,r)=>{var n=r(6186),i=r(4325).De;t.exports=function(t,e){if(!n(t))throw new Error("graphology-operators/to-simple: expecting a valid graphology instance.");"function"==typeof e&&(e={mergeEdge:e});var r="function"==typeof(e=e||{}).mergeEdge?e.mergeEdge:null;if(!t.multi)return t.copy();var o=t.emptyCopy({multi:!1});return t.forEachEdge((function(t,e,n,a,s,u,c){var h=c?o.undirectedEdge(n,a):o.directedEdge(n,a);h?r&&o.replaceEdgeAttributes(h,r(o.getEdgeAttributes(h),e)):i(o,c,t,n,a,e)})),o}},2012:(t,e,r)=>{var n=r(6186),i=r(4325).De;t.exports=function(t,e){if(!n(t))throw new Error("graphology-operators/to-undirected: expecting a valid graphology instance.");"function"==typeof e&&(e={mergeEdge:e});var r="function"==typeof(e=e||{}).mergeEdge?e.mergeEdge:null;if("undirected"===t.type)return t.copy();var o=t.emptyCopy({type:"undirected"});return t.forEachUndirectedEdge((function(t,e,r,n){i(o,!0,t,r,n,e)})),t.forEachDirectedEdge((function(e,n,a,s){if(!t.multi){var u=o.edge(a,s);if(u)return void(r&&o.replaceEdgeAttributes(u,r(o.getEdgeAttributes(u),n)))}i(o,!0,null,a,s,n)})),o}},7697:(t,e,r)=>{var n=r(6186);t.exports=function(t,e){if(!n(t)||!n(e))throw new Error("graphology-operators/union: invalid graph.");if(t.multi!==e.multi)throw new Error("graphology-operators/union: both graph should be simple or multi.");var r=t.copy();return r.import(e,!0),r}},4325:(t,e)=>{e.De=function(t,e,r,n,i,o){return o=Object.assign({},o),e?null==r?t.addUndirectedEdge(n,i,o):t.addUndirectedEdgeWithKey(r,n,i,o):null==r?t.addDirectedEdge(n,i,o):t.addDirectedEdgeWithKey(r,n,i,o)}},3212:(t,e)=>{e.B=function(t,e,r){return r=Object.assign({},r),t.addNode(e,r)}},6186:t=>{t.exports=function(t){return null!==t&&"object"==typeof t&&"function"==typeof t.addUndirectedEdgeWithKey&&"function"==typeof t.dropNode&&"boolean"==typeof t.multi}},2698:function(t){t.exports=function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,n(t,e)}function r(t){return r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},r(t)}function n(t,e){return n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},n(t,e)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function o(t,e,r){return o=i()?Reflect.construct.bind():function(t,e,r){var i=[null];i.push.apply(i,e);var o=new(Function.bind.apply(t,i));return r&&n(o,r.prototype),o},o.apply(null,arguments)}function a(t){var e="function"==typeof Map?new Map:void 0;return a=function(t){if(null===t||(i=t,-1===Function.toString.call(i).indexOf("[native code]")))return t;var i;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,a)}function a(){return o(t,arguments,r(this).constructor)}return a.prototype=Object.create(t.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),n(a,t)},a(t)}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var u=function(){for(var t=arguments[0],e=1,r=arguments.length;e<r;e++)if(arguments[e])for(var n in arguments[e])t[n]=arguments[e][n];return t};function c(t,e,r,n){var i=t._nodes.get(e),o=null;return i?o="mixed"===n?i.out&&i.out[r]||i.undirected&&i.undirected[r]:"directed"===n?i.out&&i.out[r]:i.undirected&&i.undirected[r]:o}function h(e){return"object"===t(e)&&null!==e&&e.constructor===Object}function d(t){var e;for(e in t)return!1;return!0}function l(t,e,r){Object.defineProperty(t,e,{enumerable:!1,configurable:!1,writable:!0,value:r})}function f(t,e,r){var n={enumerable:!0,configurable:!0};"function"==typeof r?n.get=r:(n.value=r,n.writable=!1),Object.defineProperty(t,e,n)}function p(t){return!(!h(t)||t.attributes&&!Array.isArray(t.attributes))}"function"==typeof Object.assign&&(u=Object.assign);var g,v={exports:{}},y="object"==typeof Reflect?Reflect:null,m=y&&"function"==typeof y.apply?y.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};g=y&&"function"==typeof y.ownKeys?y.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var b=Number.isNaN||function(t){return t!=t};function _(){_.init.call(this)}v.exports=_,v.exports.once=function(t,e){return new Promise((function(r,n){function i(r){t.removeListener(e,o),n(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",i),r([].slice.call(arguments))}F(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&F(t,"error",e,{once:!0})}(t,i)}))},_.EventEmitter=_,_.prototype._events=void 0,_.prototype._eventsCount=0,_.prototype._maxListeners=void 0;var w=10;function x(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function E(t){return void 0===t._maxListeners?_.defaultMaxListeners:t._maxListeners}function L(t,e,r,n){var i,o,a,s;if(x(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),a=o[e]),void 0===a)a=o[e]=r,++t._eventsCount;else if("function"==typeof a?a=o[e]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=E(t))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return t}function A(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function S(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=A.bind(n);return i.listener=r,n.wrapFn=i,i}function C(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):G(i,i.length)}function k(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function G(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}function F(t,e,r,n){if("function"==typeof t.on)n.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function i(o){n.once&&t.removeEventListener(e,i),r(o)}))}}function O(t){if("function"!=typeof t)throw new Error("obliterator/iterator: expecting a function!");this.next=t}Object.defineProperty(_,"defaultMaxListeners",{enumerable:!0,get:function(){return w},set:function(t){if("number"!=typeof t||t<0||b(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");w=t}}),_.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},_.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||b(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},_.prototype.getMaxListeners=function(){return E(this)},_.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var s=i[t];if(void 0===s)return!1;if("function"==typeof s)m(s,this,e);else{var u=s.length,c=G(s,u);for(r=0;r<u;++r)m(c[r],this,e)}return!0},_.prototype.addListener=function(t,e){return L(this,t,e,!1)},_.prototype.on=_.prototype.addListener,_.prototype.prependListener=function(t,e){return L(this,t,e,!0)},_.prototype.once=function(t,e){return x(e),this.on(t,S(this,t,e)),this},_.prototype.prependOnceListener=function(t,e){return x(e),this.prependListener(t,S(this,t,e)),this},_.prototype.removeListener=function(t,e){var r,n,i,o,a;if(x(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,a||e)}return this},_.prototype.off=_.prototype.removeListener,_.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},_.prototype.listeners=function(t){return C(this,t,!0)},_.prototype.rawListeners=function(t){return C(this,t,!1)},_.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):k.call(t,e)},_.prototype.listenerCount=k,_.prototype.eventNames=function(){return this._eventsCount>0?g(this._events):[]},"undefined"!=typeof Symbol&&(O.prototype[Symbol.iterator]=function(){return this}),O.of=function(){var t=arguments,e=t.length,r=0;return new O((function(){return r>=e?{done:!0}:{done:!1,value:t[r++]}}))},O.empty=function(){return new O((function(){return{done:!0}}))},O.fromSequence=function(t){var e=0,r=t.length;return new O((function(){return e>=r?{done:!0}:{done:!1,value:t[e++]}}))},O.is=function(t){return t instanceof O||"object"==typeof t&&null!==t&&"function"==typeof t.next};var T=O,P={};P.ARRAY_BUFFER_SUPPORT="undefined"!=typeof ArrayBuffer,P.SYMBOL_SUPPORT="undefined"!=typeof Symbol;var D=T,R=P,M=R.ARRAY_BUFFER_SUPPORT,N=R.SYMBOL_SUPPORT,j=function(t){var e=function(t){return"string"==typeof t||Array.isArray(t)||M&&ArrayBuffer.isView(t)?D.fromSequence(t):"object"!=typeof t||null===t?null:N&&"function"==typeof t[Symbol.iterator]?t[Symbol.iterator]():"function"==typeof t.next?t:null}(t);if(!e)throw new Error("obliterator: target is not iterable nor a valid iterator.");return e},z=j,U=function(t,e){for(var r,n=arguments.length>1?e:1/0,i=n!==1/0?new Array(n):[],o=0,a=z(t);;){if(o===n)return i;if((r=a.next()).done)return o!==e&&(i.length=o),i;i[o++]=r.value}},I=function(t){function r(e){var r;return(r=t.call(this)||this).name="GraphError",r.message=e,r}return e(r,t),r}(a(Error)),B=function(t){function r(e){var n;return(n=t.call(this,e)||this).name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(n),r.prototype.constructor),n}return e(r,t),r}(I),W=function(t){function r(e){var n;return(n=t.call(this,e)||this).name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(n),r.prototype.constructor),n}return e(r,t),r}(I),q=function(t){function r(e){var n;return(n=t.call(this,e)||this).name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(n),r.prototype.constructor),n}return e(r,t),r}(I);function H(t,e){this.key=t,this.attributes=e,this.clear()}function V(t,e){this.key=t,this.attributes=e,this.clear()}function Y(t,e){this.key=t,this.attributes=e,this.clear()}function Z(t,e,r,n,i){this.key=e,this.attributes=i,this.undirected=t,this.source=r,this.target=n}function K(t,e,r,n,i,o,a){var s,u,c,h;if(n=""+n,0===r){if(!(s=t._nodes.get(n)))throw new W("Graph.".concat(e,': could not find the "').concat(n,'" node in the graph.'));c=i,h=o}else if(3===r){if(i=""+i,!(u=t._edges.get(i)))throw new W("Graph.".concat(e,': could not find the "').concat(i,'" edge in the graph.'));var d=u.source.key,l=u.target.key;if(n===d)s=u.target;else{if(n!==l)throw new W("Graph.".concat(e,': the "').concat(n,'" node is not attached to the "').concat(i,'" edge (').concat(d,", ").concat(l,")."));s=u.source}c=o,h=a}else{if(!(u=t._edges.get(n)))throw new W("Graph.".concat(e,': could not find the "').concat(n,'" edge in the graph.'));s=1===r?u.source:u.target,c=i,h=o}return[s,c,h]}H.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}},V.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}},Y.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}},Z.prototype.attach=function(){var t="out",e="in";this.undirected&&(t=e="undirected");var r=this.source.key,n=this.target.key;this.source[t][n]=this,this.undirected&&r===n||(this.target[e][r]=this)},Z.prototype.attachMulti=function(){var t="out",e="in",r=this.source.key,n=this.target.key;this.undirected&&(t=e="undirected");var i=this.source[t],o=i[n];if(void 0===o)return i[n]=this,void(this.undirected&&r===n||(this.target[e][r]=this));o.previous=this,this.next=o,i[n]=this,this.target[e][r]=this},Z.prototype.detach=function(){var t=this.source.key,e=this.target.key,r="out",n="in";this.undirected&&(r=n="undirected"),delete this.source[r][e],delete this.target[n][t]},Z.prototype.detachMulti=function(){var t=this.source.key,e=this.target.key,r="out",n="in";this.undirected&&(r=n="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[r][e],delete this.target[n][t]):(this.next.previous=void 0,this.source[r][e]=this.next,this.target[n][t]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};var $=[{name:function(t){return"get".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o=K(this,e,r,t,n,i),a=o[0],s=o[1];return a.attributes[s]}}},{name:function(t){return"get".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n){return K(this,e,r,t,n)[0].attributes}}},{name:function(t){return"has".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o=K(this,e,r,t,n,i),a=o[0],s=o[1];return a.attributes.hasOwnProperty(s)}}},{name:function(t){return"set".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i,o){var a=K(this,e,r,t,n,i,o),s=a[0],u=a[1],c=a[2];return s.attributes[u]=c,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(t){return"update".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i,o){var a=K(this,e,r,t,n,i,o),s=a[0],u=a[1],c=a[2];if("function"!=typeof c)throw new B("Graph.".concat(e,": updater should be a function."));var h=s.attributes,d=c(h[u]);return h[u]=d,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(t){return"remove".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o=K(this,e,r,t,n,i),a=o[0],s=o[1];return delete a.attributes[s],this.emit("nodeAttributesUpdated",{key:a.key,type:"remove",attributes:a.attributes,name:s}),this}}},{name:function(t){return"replace".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o=K(this,e,r,t,n,i),a=o[0],s=o[1];if(!h(s))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return a.attributes=s,this.emit("nodeAttributesUpdated",{key:a.key,type:"replace",attributes:a.attributes}),this}}},{name:function(t){return"merge".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o=K(this,e,r,t,n,i),a=o[0],s=o[1];if(!h(s))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return u(a.attributes,s),this.emit("nodeAttributesUpdated",{key:a.key,type:"merge",attributes:a.attributes,data:s}),this}}},{name:function(t){return"update".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o=K(this,e,r,t,n,i),a=o[0],s=o[1];if("function"!=typeof s)throw new B("Graph.".concat(e,": provided updater is not a function."));return a.attributes=s(a.attributes),this.emit("nodeAttributesUpdated",{key:a.key,type:"update",attributes:a.attributes}),this}}}],X=[{name:function(t){return"get".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,a=""+n;if(n=arguments[2],!(i=c(this,o,a,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return i.attributes[n]}}},{name:function(t){return"get".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t){var n;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>1){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+t,o=""+arguments[1];if(!(n=c(this,i,o,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(i,'" - "').concat(o,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(n=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return n.attributes}}},{name:function(t){return"has".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,a=""+n;if(n=arguments[2],!(i=c(this,o,a,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return i.attributes.hasOwnProperty(n)}}},{name:function(t){return"set".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+t,s=""+n;if(n=arguments[2],i=arguments[3],!(o=c(this,a,s,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(o=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return o.attributes[n]=i,this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:n}),this}}},{name:function(t){return"update".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n,i){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+t,s=""+n;if(n=arguments[2],i=arguments[3],!(o=c(this,a,s,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(o=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof i)throw new B("Graph.".concat(e,": updater should be a function."));return o.attributes[n]=i(o.attributes[n]),this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:n}),this}}},{name:function(t){return"remove".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,a=""+n;if(n=arguments[2],!(i=c(this,o,a,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return delete i.attributes[n],this.emit("edgeAttributesUpdated",{key:i.key,type:"remove",attributes:i.attributes,name:n}),this}}},{name:function(t){return"replace".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,a=""+n;if(n=arguments[2],!(i=c(this,o,a,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if(!h(n))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return i.attributes=n,this.emit("edgeAttributesUpdated",{key:i.key,type:"replace",attributes:i.attributes}),this}}},{name:function(t){return"merge".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,a=""+n;if(n=arguments[2],!(i=c(this,o,a,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if(!h(n))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return u(i.attributes,n),this.emit("edgeAttributesUpdated",{key:i.key,type:"merge",attributes:i.attributes,data:n}),this}}},{name:function(t){return"update".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,a=""+n;if(n=arguments[2],!(i=c(this,o,a,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof n)throw new B("Graph.".concat(e,": provided updater is not a function."));return i.attributes=n(i.attributes),this.emit("edgeAttributesUpdated",{key:i.key,type:"update",attributes:i.attributes}),this}}}],Q=T,J=j,tt=function(){var t=arguments,e=null,r=-1;return new Q((function(){for(var n=null;;){if(null===e){if(++r>=t.length)return{done:!0};e=J(t[r])}if(!0!==(n=e.next()).done)break;e=null}return n}))},et=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function rt(t,e,r,n){var i=!1;for(var o in e)if(o!==n){var a=e[o];if(i=r(a.key,a.attributes,a.source.key,a.target.key,a.source.attributes,a.target.attributes,a.undirected),t&&i)return a.key}}function nt(t,e,r,n){var i,o,a,s=!1;for(var u in e)if(u!==n){i=e[u];do{if(o=i.source,a=i.target,s=r(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected),t&&s)return i.key;i=i.next}while(void 0!==i)}}function it(t,e){var r,n=Object.keys(t),i=n.length,o=0;return new T((function(){do{if(r)r=r.next;else{if(o>=i)return{done:!0};var a=n[o++];if(a===e){r=void 0;continue}r=t[a]}}while(!r);return{done:!1,value:{edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected}}}))}function ot(t,e,r,n){var i=e[r];if(i){var o=i.source,a=i.target;return n(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected)&&t?i.key:void 0}}function at(t,e,r,n){var i=e[r];if(i){var o=!1;do{if(o=n(i.key,i.attributes,i.source.key,i.target.key,i.source.attributes,i.target.attributes,i.undirected),t&&o)return i.key;i=i.next}while(void 0!==i)}}function st(t,e){var r=t[e];return void 0!==r.next?new T((function(){if(!r)return{done:!0};var t={edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected};return r=r.next,{done:!1,value:t}})):T.of({edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected})}function ut(t,e){if(0===t.size)return[];if("mixed"===e||e===t.type)return"function"==typeof Array.from?Array.from(t._edges.keys()):U(t._edges.keys(),t._edges.size);for(var r,n,i="undirected"===e?t.undirectedSize:t.directedSize,o=new Array(i),a="undirected"===e,s=t._edges.values(),u=0;!0!==(r=s.next()).done;)(n=r.value).undirected===a&&(o[u++]=n.key);return o}function ct(t,e,r,n){if(0!==e.size)for(var i,o,a="mixed"!==r&&r!==e.type,s="undirected"===r,u=!1,c=e._edges.values();!0!==(i=c.next()).done;)if(o=i.value,!a||o.undirected===s){var h=o,d=h.key,l=h.attributes,f=h.source,p=h.target;if(u=n(d,l,f.key,p.key,f.attributes,p.attributes,o.undirected),t&&u)return d}}function ht(t,e){if(0===t.size)return T.empty();var r="mixed"!==e&&e!==t.type,n="undirected"===e,i=t._edges.values();return new T((function(){for(var t,e;;){if((t=i.next()).done)return t;if(e=t.value,!r||e.undirected===n)break}return{value:{edge:e.key,attributes:e.attributes,source:e.source.key,target:e.target.key,sourceAttributes:e.source.attributes,targetAttributes:e.target.attributes,undirected:e.undirected},done:!1}}))}function dt(t,e,r,n,i,o){var a,s=e?nt:rt;if("undirected"!==r){if("out"!==n&&(a=s(t,i.in,o),t&&a))return a;if("in"!==n&&(a=s(t,i.out,o,n?void 0:i.key),t&&a))return a}if("directed"!==r&&(a=s(t,i.undirected,o),t&&a))return a}function lt(t,e,r,n){var i=[];return dt(!1,t,e,r,n,(function(t){i.push(t)})),i}function ft(t,e,r){var n=T.empty();return"undirected"!==t&&("out"!==e&&void 0!==r.in&&(n=tt(n,it(r.in))),"in"!==e&&void 0!==r.out&&(n=tt(n,it(r.out,e?void 0:r.key)))),"directed"!==t&&void 0!==r.undirected&&(n=tt(n,it(r.undirected))),n}function pt(t,e,r,n,i,o,a){var s,u=r?at:ot;if("undirected"!==e){if(void 0!==i.in&&"out"!==n&&(s=u(t,i.in,o,a),t&&s))return s;if(void 0!==i.out&&"in"!==n&&(n||i.key!==o)&&(s=u(t,i.out,o,a),t&&s))return s}if("directed"!==e&&void 0!==i.undirected&&(s=u(t,i.undirected,o,a),t&&s))return s}function gt(t,e,r,n,i){var o=[];return pt(!1,t,e,r,n,i,(function(t){o.push(t)})),o}function vt(t,e,r,n){var i=T.empty();return"undirected"!==t&&(void 0!==r.in&&"out"!==e&&n in r.in&&(i=tt(i,st(r.in,n))),void 0!==r.out&&"in"!==e&&n in r.out&&(e||r.key!==n)&&(i=tt(i,st(r.out,n)))),"directed"!==t&&void 0!==r.undirected&&n in r.undirected&&(i=tt(i,st(r.undirected,n))),i}var yt=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function mt(){this.A=null,this.B=null}function bt(t,e,r,n,i){for(var o in n){var a=n[o],s=a.source,u=a.target,c=s===r?u:s;if(!e||!e.has(c.key)){var h=i(c.key,c.attributes);if(t&&h)return c.key}}}function _t(t,e,r,n,i){if("mixed"!==e){if("undirected"===e)return bt(t,null,n,n.undirected,i);if("string"==typeof r)return bt(t,null,n,n[r],i)}var o,a=new mt;if("undirected"!==e){if("out"!==r){if(o=bt(t,null,n,n.in,i),t&&o)return o;a.wrap(n.in)}if("in"!==r){if(o=bt(t,a,n,n.out,i),t&&o)return o;a.wrap(n.out)}}if("directed"!==e&&(o=bt(t,a,n,n.undirected,i),t&&o))return o}function wt(t,e,r){var n=Object.keys(r),i=n.length,o=0;return new T((function(){var a=null;do{if(o>=i)return t&&t.wrap(r),{done:!0};var s=r[n[o++]],u=s.source,c=s.target;a=u===e?c:u,t&&t.has(a.key)&&(a=null)}while(null===a);return{done:!1,value:{neighbor:a.key,attributes:a.attributes}}}))}function xt(t,e,r,n,i){for(var o,a,s,u,c,h,d,l=n._nodes.values(),f=n.type;!0!==(o=l.next()).done;){var p=!1;if(a=o.value,"undirected"!==f)for(s in u=a.out){c=u[s];do{if(h=c.target,p=!0,d=i(a.key,h.key,a.attributes,h.attributes,c.key,c.attributes,c.undirected),t&&d)return c;c=c.next}while(c)}if("directed"!==f)for(s in u=a.undirected)if(!(e&&a.key>s)){c=u[s];do{if((h=c.target).key!==s&&(h=c.source),p=!0,d=i(a.key,h.key,a.attributes,h.attributes,c.key,c.attributes,c.undirected),t&&d)return c;c=c.next}while(c)}if(r&&!p&&(d=i(a.key,null,a.attributes,null,null,null,null),t&&d))return null}}function Et(t){if(!h(t))throw new B('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in t))throw new B("Graph.import: serialized node is missing its key.");if("attributes"in t&&(!h(t.attributes)||null===t.attributes))throw new B("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function Lt(t){if(!h(t))throw new B('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in t))throw new B("Graph.import: serialized edge is missing its source.");if(!("target"in t))throw new B("Graph.import: serialized edge is missing its target.");if("attributes"in t&&(!h(t.attributes)||null===t.attributes))throw new B("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in t&&"boolean"!=typeof t.undirected)throw new B("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}mt.prototype.wrap=function(t){null===this.A?this.A=t:null===this.B&&(this.B=t)},mt.prototype.has=function(t){return null!==this.A&&t in this.A||null!==this.B&&t in this.B};var At,St=(At=255&Math.floor(256*Math.random()),function(){return At++}),Ct=new Set(["directed","undirected","mixed"]),kt=new Set(["domain","_events","_eventsCount","_maxListeners"]),Gt={allowSelfLoops:!0,multi:!1,type:"mixed"};function Ft(t,e,r){var n=new t.NodeDataClass(e,r);return t._nodes.set(e,n),t.emit("nodeAdded",{key:e,attributes:r}),n}function Ot(t,e,r,n,i,o,a,s){if(!n&&"undirected"===t.type)throw new q("Graph.".concat(e,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(n&&"directed"===t.type)throw new q("Graph.".concat(e,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s&&!h(s))throw new B("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));if(o=""+o,a=""+a,s=s||{},!t.allowSelfLoops&&o===a)throw new q("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var u=t._nodes.get(o),c=t._nodes.get(a);if(!u)throw new W("Graph.".concat(e,': source node "').concat(o,'" not found.'));if(!c)throw new W("Graph.".concat(e,': target node "').concat(a,'" not found.'));var d={key:null,undirected:n,source:o,target:a,attributes:s};if(r)i=t._edgeKeyGenerator();else if(i=""+i,t._edges.has(i))throw new q("Graph.".concat(e,': the "').concat(i,'" edge already exists in the graph.'));if(!t.multi&&(n?void 0!==u.undirected[a]:void 0!==u.out[a]))throw new q("Graph.".concat(e,': an edge linking "').concat(o,'" to "').concat(a,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));var l=new Z(n,i,u,c,s);t._edges.set(i,l);var f=o===a;return n?(u.undirectedDegree++,c.undirectedDegree++,f&&(u.undirectedLoops++,t._undirectedSelfLoopCount++)):(u.outDegree++,c.inDegree++,f&&(u.directedLoops++,t._directedSelfLoopCount++)),t.multi?l.attachMulti():l.attach(),n?t._undirectedSize++:t._directedSize++,d.key=i,t.emit("edgeAdded",d),i}function Tt(t,e,r,n,i,o,a,s,c){if(!n&&"undirected"===t.type)throw new q("Graph.".concat(e,": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));if(n&&"directed"===t.type)throw new q("Graph.".concat(e,": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));if(s)if(c){if("function"!=typeof s)throw new B("Graph.".concat(e,': invalid updater function. Expecting a function but got "').concat(s,'"'))}else if(!h(s))throw new B("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));var d;if(o=""+o,a=""+a,c&&(d=s,s=void 0),!t.allowSelfLoops&&o===a)throw new q("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var l,f,p=t._nodes.get(o),g=t._nodes.get(a);if(!r&&(l=t._edges.get(i))){if(!(l.source.key===o&&l.target.key===a||n&&l.source.key===a&&l.target.key===o))throw new q("Graph.".concat(e,': inconsistency detected when attempting to merge the "').concat(i,'" edge with "').concat(o,'" source & "').concat(a,'" target vs. ("').concat(l.source.key,'", "').concat(l.target.key,'").'));f=l}if(f||t.multi||!p||(f=n?p.undirected[a]:p.out[a]),f){var v=[f.key,!1,!1,!1];if(c?!d:!s)return v;if(c){var y=f.attributes;f.attributes=d(y),t.emit("edgeAttributesUpdated",{type:"replace",key:f.key,attributes:f.attributes})}else u(f.attributes,s),t.emit("edgeAttributesUpdated",{type:"merge",key:f.key,attributes:f.attributes,data:s});return v}s=s||{},c&&d&&(s=d(s));var m={key:null,undirected:n,source:o,target:a,attributes:s};if(r)i=t._edgeKeyGenerator();else if(i=""+i,t._edges.has(i))throw new q("Graph.".concat(e,': the "').concat(i,'" edge already exists in the graph.'));var b=!1,_=!1;p||(p=Ft(t,o,{}),b=!0,o===a&&(g=p,_=!0)),g||(g=Ft(t,a,{}),_=!0),l=new Z(n,i,p,g,s),t._edges.set(i,l);var w=o===a;return n?(p.undirectedDegree++,g.undirectedDegree++,w&&(p.undirectedLoops++,t._undirectedSelfLoopCount++)):(p.outDegree++,g.inDegree++,w&&(p.directedLoops++,t._directedSelfLoopCount++)),t.multi?l.attachMulti():l.attach(),n?t._undirectedSize++:t._directedSize++,m.key=i,t.emit("edgeAdded",m),[i,!0,b,_]}function Pt(t,e){t._edges.delete(e.key);var r=e.source,n=e.target,i=e.attributes,o=e.undirected,a=r===n;o?(r.undirectedDegree--,n.undirectedDegree--,a&&(r.undirectedLoops--,t._undirectedSelfLoopCount--)):(r.outDegree--,n.inDegree--,a&&(r.directedLoops--,t._directedSelfLoopCount--)),t.multi?e.detachMulti():e.detach(),o?t._undirectedSize--:t._directedSize--,t.emit("edgeDropped",{key:e.key,attributes:i,source:r.key,target:n.key,undirected:o})}var Dt=function(r){function n(t){var e;if(e=r.call(this)||this,"boolean"!=typeof(t=u({},Gt,t)).multi)throw new B("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(t.multi,'".'));if(!Ct.has(t.type))throw new B('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(t.type,'".'));if("boolean"!=typeof t.allowSelfLoops)throw new B("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(t.allowSelfLoops,'".'));var n="mixed"===t.type?H:"directed"===t.type?V:Y;l(s(e),"NodeDataClass",n);var i="geid_"+St()+"_",o=0;return l(s(e),"_attributes",{}),l(s(e),"_nodes",new Map),l(s(e),"_edges",new Map),l(s(e),"_directedSize",0),l(s(e),"_undirectedSize",0),l(s(e),"_directedSelfLoopCount",0),l(s(e),"_undirectedSelfLoopCount",0),l(s(e),"_edgeKeyGenerator",(function(){var t;do{t=i+o++}while(e._edges.has(t));return t})),l(s(e),"_options",t),kt.forEach((function(t){return l(s(e),t,e[t])})),f(s(e),"order",(function(){return e._nodes.size})),f(s(e),"size",(function(){return e._edges.size})),f(s(e),"directedSize",(function(){return e._directedSize})),f(s(e),"undirectedSize",(function(){return e._undirectedSize})),f(s(e),"selfLoopCount",(function(){return e._directedSelfLoopCount+e._undirectedSelfLoopCount})),f(s(e),"directedSelfLoopCount",(function(){return e._directedSelfLoopCount})),f(s(e),"undirectedSelfLoopCount",(function(){return e._undirectedSelfLoopCount})),f(s(e),"multi",e._options.multi),f(s(e),"type",e._options.type),f(s(e),"allowSelfLoops",e._options.allowSelfLoops),f(s(e),"implementation",(function(){return"graphology"})),e}e(n,r);var i=n.prototype;return i._resetInstanceCounters=function(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0},i.hasNode=function(t){return this._nodes.has(""+t)},i.hasDirectedEdge=function(t,e){if("undirected"===this.type)return!1;if(1===arguments.length){var r=""+t,n=this._edges.get(r);return!!n&&!n.undirected}if(2===arguments.length){t=""+t,e=""+e;var i=this._nodes.get(t);return!!i&&i.out.hasOwnProperty(e)}throw new B("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasUndirectedEdge=function(t,e){if("directed"===this.type)return!1;if(1===arguments.length){var r=""+t,n=this._edges.get(r);return!!n&&n.undirected}if(2===arguments.length){t=""+t,e=""+e;var i=this._nodes.get(t);return!!i&&i.undirected.hasOwnProperty(e)}throw new B("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasEdge=function(t,e){if(1===arguments.length){var r=""+t;return this._edges.has(r)}if(2===arguments.length){t=""+t,e=""+e;var n=this._nodes.get(t);return!!n&&(void 0!==n.out&&n.out.hasOwnProperty(e)||void 0!==n.undirected&&n.undirected.hasOwnProperty(e))}throw new B("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.directedEdge=function(t,e){if("undirected"!==this.type){if(t=""+t,e=""+e,this.multi)throw new q("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var r=this._nodes.get(t);if(!r)throw new W('Graph.directedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.directedEdge: could not find the "'.concat(e,'" target node in the graph.'));var n=r.out&&r.out[e]||void 0;return n?n.key:void 0}},i.undirectedEdge=function(t,e){if("directed"!==this.type){if(t=""+t,e=""+e,this.multi)throw new q("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var r=this._nodes.get(t);if(!r)throw new W('Graph.undirectedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.undirectedEdge: could not find the "'.concat(e,'" target node in the graph.'));var n=r.undirected&&r.undirected[e]||void 0;return n?n.key:void 0}},i.edge=function(t,e){if(this.multi)throw new q("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.edge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.edge: could not find the "'.concat(e,'" target node in the graph.'));var n=r.out&&r.out[e]||r.undirected&&r.undirected[e]||void 0;if(n)return n.key},i.areDirectedNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areDirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)},i.areOutNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areOutNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out},i.areInNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areInNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in},i.areUndirectedNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areUndirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"directed"!==this.type&&e in r.undirected},i.areNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)||"directed"!==this.type&&e in r.undirected},i.areInboundNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areInboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in||"directed"!==this.type&&e in r.undirected},i.areOutboundNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areOutboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out||"directed"!==this.type&&e in r.undirected},i.inDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree},i.outDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.outDegree},i.directedDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.directedDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree+e.outDegree},i.undirectedDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.undirectedDegree: could not find the "'.concat(t,'" node in the graph.'));return"directed"===this.type?0:e.undirectedDegree},i.inboundDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inboundDegree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.inDegree),r},i.outboundDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outboundDegree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.outDegree),r},i.degree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.degree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.inDegree+e.outDegree),r},i.inDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree-e.directedLoops},i.outDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.outDegree-e.directedLoops},i.directedDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree+e.outDegree-2*e.directedLoops},i.undirectedDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"directed"===this.type?0:e.undirectedDegree-2*e.undirectedLoops},i.inboundDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,n=0;return"directed"!==this.type&&(r+=e.undirectedDegree,n+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.inDegree,n+=e.directedLoops),r-n},i.outboundDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,n=0;return"directed"!==this.type&&(r+=e.undirectedDegree,n+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.outDegree,n+=e.directedLoops),r-n},i.degreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.degreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,n=0;return"directed"!==this.type&&(r+=e.undirectedDegree,n+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.inDegree+e.outDegree,n+=2*e.directedLoops),r-n},i.source=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.source: could not find the "'.concat(t,'" edge in the graph.'));return e.source.key},i.target=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.target: could not find the "'.concat(t,'" edge in the graph.'));return e.target.key},i.extremities=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.extremities: could not find the "'.concat(t,'" edge in the graph.'));return[e.source.key,e.target.key]},i.opposite=function(t,e){t=""+t,e=""+e;var r=this._edges.get(e);if(!r)throw new W('Graph.opposite: could not find the "'.concat(e,'" edge in the graph.'));var n=r.source.key,i=r.target.key;if(t===n)return i;if(t===i)return n;throw new W('Graph.opposite: the "'.concat(t,'" node is not attached to the "').concat(e,'" edge (').concat(n,", ").concat(i,")."))},i.hasExtremity=function(t,e){t=""+t,e=""+e;var r=this._edges.get(t);if(!r)throw new W('Graph.hasExtremity: could not find the "'.concat(t,'" edge in the graph.'));return r.source.key===e||r.target.key===e},i.isUndirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isUndirected: could not find the "'.concat(t,'" edge in the graph.'));return e.undirected},i.isDirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isDirected: could not find the "'.concat(t,'" edge in the graph.'));return!e.undirected},i.isSelfLoop=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isSelfLoop: could not find the "'.concat(t,'" edge in the graph.'));return e.source===e.target},i.addNode=function(t,e){var r=function(t,e,r){if(r&&!h(r))throw new B('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(r,'"'));if(e=""+e,r=r||{},t._nodes.has(e))throw new q('Graph.addNode: the "'.concat(e,'" node already exist in the graph.'));var n=new t.NodeDataClass(e,r);return t._nodes.set(e,n),t.emit("nodeAdded",{key:e,attributes:r}),n}(this,t,e);return r.key},i.mergeNode=function(t,e){if(e&&!h(e))throw new B('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(e,'"'));t=""+t,e=e||{};var r=this._nodes.get(t);return r?(e&&(u(r.attributes,e),this.emit("nodeAttributesUpdated",{type:"merge",key:t,attributes:r.attributes,data:e})),[t,!1]):(r=new this.NodeDataClass(t,e),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:e}),[t,!0])},i.updateNode=function(t,e){if(e&&"function"!=typeof e)throw new B('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(e,'"'));t=""+t;var r=this._nodes.get(t);if(r){if(e){var n=r.attributes;r.attributes=e(n),this.emit("nodeAttributesUpdated",{type:"replace",key:t,attributes:r.attributes})}return[t,!1]}var i=e?e({}):{};return r=new this.NodeDataClass(t,i),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:i}),[t,!0]},i.dropNode=function(t){t=""+t;var e,r=this._nodes.get(t);if(!r)throw new W('Graph.dropNode: could not find the "'.concat(t,'" node in the graph.'));if("undirected"!==this.type){for(var n in r.out){e=r.out[n];do{Pt(this,e),e=e.next}while(e)}for(var i in r.in){e=r.in[i];do{Pt(this,e),e=e.next}while(e)}}if("directed"!==this.type)for(var o in r.undirected){e=r.undirected[o];do{Pt(this,e),e=e.next}while(e)}this._nodes.delete(t),this.emit("nodeDropped",{key:t,attributes:r.attributes})},i.dropEdge=function(t){var e;if(arguments.length>1){var r=""+arguments[0],n=""+arguments[1];if(!(e=c(this,r,n,this.type)))throw new W('Graph.dropEdge: could not find the "'.concat(r,'" -> "').concat(n,'" edge in the graph.'))}else if(t=""+t,!(e=this._edges.get(t)))throw new W('Graph.dropEdge: could not find the "'.concat(t,'" edge in the graph.'));return Pt(this,e),this},i.dropDirectedEdge=function(t,e){if(arguments.length<2)throw new q("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=c(this,t=""+t,e=""+e,"directed");if(!r)throw new W('Graph.dropDirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return Pt(this,r),this},i.dropUndirectedEdge=function(t,e){if(arguments.length<2)throw new q("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=c(this,t,e,"undirected");if(!r)throw new W('Graph.dropUndirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return Pt(this,r),this},i.clear=function(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")},i.clearEdges=function(){for(var t,e=this._nodes.values();!0!==(t=e.next()).done;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")},i.getAttribute=function(t){return this._attributes[t]},i.getAttributes=function(){return this._attributes},i.hasAttribute=function(t){return this._attributes.hasOwnProperty(t)},i.setAttribute=function(t,e){return this._attributes[t]=e,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},i.updateAttribute=function(t,e){if("function"!=typeof e)throw new B("Graph.updateAttribute: updater should be a function.");var r=this._attributes[t];return this._attributes[t]=e(r),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},i.removeAttribute=function(t){return delete this._attributes[t],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:t}),this},i.replaceAttributes=function(t){if(!h(t))throw new B("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=t,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},i.mergeAttributes=function(t){if(!h(t))throw new B("Graph.mergeAttributes: provided attributes are not a plain object.");return u(this._attributes,t),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:t}),this},i.updateAttributes=function(t){if("function"!=typeof t)throw new B("Graph.updateAttributes: provided updater is not a function.");return this._attributes=t(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this},i.updateEachNodeAttributes=function(t,e){if("function"!=typeof t)throw new B("Graph.updateEachNodeAttributes: expecting an updater function.");if(e&&!p(e))throw new B("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n,i=this._nodes.values();!0!==(r=i.next()).done;)(n=r.value).attributes=t(n.key,n.attributes);this.emit("eachNodeAttributesUpdated",{hints:e||null})},i.updateEachEdgeAttributes=function(t,e){if("function"!=typeof t)throw new B("Graph.updateEachEdgeAttributes: expecting an updater function.");if(e&&!p(e))throw new B("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n,i,o,a=this._edges.values();!0!==(r=a.next()).done;)i=(n=r.value).source,o=n.target,n.attributes=t(n.key,n.attributes,i.key,o.key,i.attributes,o.attributes,n.undirected);this.emit("eachEdgeAttributesUpdated",{hints:e||null})},i.forEachAdjacencyEntry=function(t){if("function"!=typeof t)throw new B("Graph.forEachAdjacencyEntry: expecting a callback.");xt(!1,!1,!1,this,t)},i.forEachAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new B("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");xt(!1,!1,!0,this,t)},i.forEachAssymetricAdjacencyEntry=function(t){if("function"!=typeof t)throw new B("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");xt(!1,!0,!1,this,t)},i.forEachAssymetricAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new B("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");xt(!1,!0,!0,this,t)},i.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):U(this._nodes.keys(),this._nodes.size)},i.forEachNode=function(t){if("function"!=typeof t)throw new B("Graph.forEachNode: expecting a callback.");for(var e,r,n=this._nodes.values();!0!==(e=n.next()).done;)t((r=e.value).key,r.attributes)},i.findNode=function(t){if("function"!=typeof t)throw new B("Graph.findNode: expecting a callback.");for(var e,r,n=this._nodes.values();!0!==(e=n.next()).done;)if(t((r=e.value).key,r.attributes))return r.key},i.mapNodes=function(t){if("function"!=typeof t)throw new B("Graph.mapNode: expecting a callback.");for(var e,r,n=this._nodes.values(),i=new Array(this.order),o=0;!0!==(e=n.next()).done;)r=e.value,i[o++]=t(r.key,r.attributes);return i},i.someNode=function(t){if("function"!=typeof t)throw new B("Graph.someNode: expecting a callback.");for(var e,r,n=this._nodes.values();!0!==(e=n.next()).done;)if(t((r=e.value).key,r.attributes))return!0;return!1},i.everyNode=function(t){if("function"!=typeof t)throw new B("Graph.everyNode: expecting a callback.");for(var e,r,n=this._nodes.values();!0!==(e=n.next()).done;)if(!t((r=e.value).key,r.attributes))return!1;return!0},i.filterNodes=function(t){if("function"!=typeof t)throw new B("Graph.filterNodes: expecting a callback.");for(var e,r,n=this._nodes.values(),i=[];!0!==(e=n.next()).done;)t((r=e.value).key,r.attributes)&&i.push(r.key);return i},i.reduceNodes=function(t,e){if("function"!=typeof t)throw new B("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new B("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");for(var r,n,i=e,o=this._nodes.values();!0!==(r=o.next()).done;)i=t(i,(n=r.value).key,n.attributes);return i},i.nodeEntries=function(){var t=this._nodes.values();return new T((function(){var e=t.next();if(e.done)return e;var r=e.value;return{value:{node:r.key,attributes:r.attributes},done:!1}}))},i.export=function(){var t=this,e=new Array(this._nodes.size),r=0;this._nodes.forEach((function(t,n){e[r++]=function(t,e){var r={key:t};return d(e.attributes)||(r.attributes=u({},e.attributes)),r}(n,t)}));var n=new Array(this._edges.size);return r=0,this._edges.forEach((function(e,i){n[r++]=function(t,e,r){var n={key:e,source:r.source.key,target:r.target.key};return d(r.attributes)||(n.attributes=u({},r.attributes)),"mixed"===t&&r.undirected&&(n.undirected=!0),n}(t.type,i,e)})),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:e,edges:n}},i.import=function(t){var e,r,i,o,a,s=this,u=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t instanceof n)return t.forEachNode((function(t,e){u?s.mergeNode(t,e):s.addNode(t,e)})),t.forEachEdge((function(t,e,r,n,i,o,a){u?a?s.mergeUndirectedEdgeWithKey(t,r,n,e):s.mergeDirectedEdgeWithKey(t,r,n,e):a?s.addUndirectedEdgeWithKey(t,r,n,e):s.addDirectedEdgeWithKey(t,r,n,e)})),this;if(!h(t))throw new B("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(t.attributes){if(!h(t.attributes))throw new B("Graph.import: invalid attributes. Expecting a plain object.");u?this.mergeAttributes(t.attributes):this.replaceAttributes(t.attributes)}if(t.nodes){if(i=t.nodes,!Array.isArray(i))throw new B("Graph.import: invalid nodes. Expecting an array.");for(e=0,r=i.length;e<r;e++){Et(o=i[e]);var c=o,d=c.key,l=c.attributes;u?this.mergeNode(d,l):this.addNode(d,l)}}if(t.edges){var f=!1;if("undirected"===this.type&&(f=!0),i=t.edges,!Array.isArray(i))throw new B("Graph.import: invalid edges. Expecting an array.");for(e=0,r=i.length;e<r;e++){Lt(a=i[e]);var p=a,g=p.source,v=p.target,y=p.attributes,m=p.undirected,b=void 0===m?f:m;"key"in a?(u?b?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:b?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,a.key,g,v,y):(u?b?this.mergeUndirectedEdge:this.mergeDirectedEdge:b?this.addUndirectedEdge:this.addDirectedEdge).call(this,g,v,y)}}return this},i.nullCopy=function(t){var e=new n(u({},this._options,t));return e.replaceAttributes(u({},this.getAttributes())),e},i.emptyCopy=function(t){var e=this.nullCopy(t);return this._nodes.forEach((function(t,r){var n=u({},t.attributes);t=new e.NodeDataClass(r,n),e._nodes.set(r,t)})),e},i.copy=function(t){if("string"==typeof(t=t||{}).type&&t.type!==this.type&&"mixed"!==t.type)throw new q('Graph.copy: cannot create an incompatible copy from "'.concat(this.type,'" type to "').concat(t.type,'" because this would mean losing information about the current graph.'));if("boolean"==typeof t.multi&&t.multi!==this.multi&&!0!==t.multi)throw new q("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof t.allowSelfLoops&&t.allowSelfLoops!==this.allowSelfLoops&&!0!==t.allowSelfLoops)throw new q("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");for(var e,r,n=this.emptyCopy(t),i=this._edges.values();!0!==(e=i.next()).done;)Ot(n,"copy",!1,(r=e.value).undirected,r.key,r.source.key,r.target.key,u({},r.attributes));return n},i.toJSON=function(){return this.export()},i.toString=function(){return"[object Graph]"},i.inspect=function(){var e=this,r={};this._nodes.forEach((function(t,e){r[e]=t.attributes}));var n={},i={};this._edges.forEach((function(t,r){var o,a=t.undirected?"--":"->",s="",u=t.source.key,c=t.target.key;t.undirected&&u>c&&(o=u,u=c,c=o);var h="(".concat(u,")").concat(a,"(").concat(c,")");r.startsWith("geid_")?e.multi&&(void 0===i[h]?i[h]=0:i[h]++,s+="".concat(i[h],". ")):s+="[".concat(r,"]: "),n[s+=h]=t.attributes}));var o={};for(var a in this)this.hasOwnProperty(a)&&!kt.has(a)&&"function"!=typeof this[a]&&"symbol"!==t(a)&&(o[a]=this[a]);return o.attributes=this._attributes,o.nodes=r,o.edges=n,l(o,"constructor",this.constructor),o},n}(v.exports.EventEmitter);"undefined"!=typeof Symbol&&(Dt.prototype[Symbol.for("nodejs.util.inspect.custom")]=Dt.prototype.inspect),[{name:function(t){return"".concat(t,"Edge")},generateKey:!0},{name:function(t){return"".concat(t,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(t){return"".concat(t,"EdgeWithKey")}},{name:function(t){return"".concat(t,"DirectedEdgeWithKey")},type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdgeWithKey")},type:"undirected"}].forEach((function(t){["add","merge","update"].forEach((function(e){var r=t.name(e),n="add"===e?Ot:Tt;t.generateKey?Dt.prototype[r]=function(i,o,a){return n(this,r,!0,"undirected"===(t.type||this.type),null,i,o,a,"update"===e)}:Dt.prototype[r]=function(i,o,a,s){return n(this,r,!1,"undirected"===(t.type||this.type),i,o,a,s,"update"===e)}}))})),function(t){$.forEach((function(e){var r=e.name,n=e.attacher;n(t,r("Node"),0),n(t,r("Source"),1),n(t,r("Target"),2),n(t,r("Opposite"),3)}))}(Dt),function(t){X.forEach((function(e){var r=e.name,n=e.attacher;n(t,r("Edge"),"mixed"),n(t,r("DirectedEdge"),"directed"),n(t,r("UndirectedEdge"),"undirected")}))}(Dt),function(t){et.forEach((function(e){!function(t,e){var r=e.name,n=e.type,i=e.direction;t.prototype[r]=function(t,e){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return[];if(!arguments.length)return ut(this,n);if(1===arguments.length){t=""+t;var o=this._nodes.get(t);if(void 0===o)throw new W("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return lt(this.multi,"mixed"===n?this.type:n,i,o)}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);if(!a)throw new W("Graph.".concat(r,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(r,':  could not find the "').concat(e,'" target node in the graph.'));return gt(n,this.multi,i,a,e)}throw new B("Graph.".concat(r,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e),function(t,e){var r=e.name,n=e.type,i=e.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e,r){if("mixed"===n||"mixed"===this.type||n===this.type){if(1===arguments.length)return ct(!1,this,n,r=t);if(2===arguments.length){t=""+t,r=e;var a=this._nodes.get(t);if(void 0===a)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return dt(!1,this.multi,"mixed"===n?this.type:n,i,a,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return pt(!1,n,this.multi,i,s,e,r)}throw new B("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}};var a="map"+r[0].toUpperCase()+r.slice(1);t.prototype[a]=function(){var t,e=Array.prototype.slice.call(arguments),r=e.pop();if(0===e.length){var i=0;"directed"!==n&&(i+=this.undirectedSize),"undirected"!==n&&(i+=this.directedSize),t=new Array(i);var a=0;e.push((function(e,n,i,o,s,u,c){t[a++]=r(e,n,i,o,s,u,c)}))}else t=[],e.push((function(e,n,i,o,a,s,u){t.push(r(e,n,i,o,a,s,u))}));return this[o].apply(this,e),t};var s="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[s]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop(),r=[];return t.push((function(t,n,i,o,a,s,u){e(t,n,i,o,a,s,u)&&r.push(t)})),this[o].apply(this,t),r};var u="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[u]=function(){var t,e,r=Array.prototype.slice.call(arguments);if(r.length<2||r.length>4)throw new B("Graph.".concat(u,": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(r.length,")."));if("function"==typeof r[r.length-1]&&"function"!=typeof r[r.length-2])throw new B("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));2===r.length?(t=r[0],e=r[1],r=[]):3===r.length?(t=r[1],e=r[2],r=[r[0]]):4===r.length&&(t=r[2],e=r[3],r=[r[0],r[1]]);var n=e;return r.push((function(e,r,i,o,a,s,u){n=t(n,e,r,i,o,a,s,u)})),this[o].apply(this,r),n}}(t,e),function(t,e){var r=e.name,n=e.type,i=e.direction,o="find"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e,r){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return!1;if(1===arguments.length)return ct(!0,this,n,r=t);if(2===arguments.length){t=""+t,r=e;var a=this._nodes.get(t);if(void 0===a)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return dt(!0,this.multi,"mixed"===n?this.type:n,i,a,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return pt(!0,n,this.multi,i,s,e,r)}throw new B("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))};var a="some"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[a]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop();return t.push((function(t,r,n,i,o,a,s){return e(t,r,n,i,o,a,s)})),!!this[o].apply(this,t)};var s="every"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[s]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop();return t.push((function(t,r,n,i,o,a,s){return!e(t,r,n,i,o,a,s)})),!this[o].apply(this,t)}}(t,e),function(t,e){var r=e.name,n=e.type,i=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t,e){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return T.empty();if(!arguments.length)return ht(this,n);if(1===arguments.length){t=""+t;var r=this._nodes.get(t);if(!r)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return ft(n,i,r)}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);if(!a)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return vt(n,i,a,e)}throw new B("Graph.".concat(o,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e)}))}(Dt),function(t){yt.forEach((function(e){(function(t,e){var r=e.name,n=e.type,i=e.direction;t.prototype[r]=function(t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return[];t=""+t;var e=this._nodes.get(t);if(void 0===e)throw new W("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return function(t,e,r){if("mixed"!==t){if("undirected"===t)return Object.keys(r.undirected);if("string"==typeof e)return Object.keys(r[e])}var n=[];return _t(!1,t,e,r,(function(t){n.push(t)})),n}("mixed"===n?this.type:n,i,e)}})(t,e),function(t,e){var r=e.name,n=e.type,i=e.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e){if("mixed"===n||"mixed"===this.type||n===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));_t(!1,"mixed"===n?this.type:n,i,r,e)}};var a="map"+r[0].toUpperCase()+r.slice(1);t.prototype[a]=function(t,e){var r=[];return this[o](t,(function(t,n){r.push(e(t,n))})),r};var s="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[s]=function(t,e){var r=[];return this[o](t,(function(t,n){e(t,n)&&r.push(t)})),r};var u="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[u]=function(t,e,r){if(arguments.length<3)throw new B("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));var n=r;return this[o](t,(function(t,r){n=e(n,t,r)})),n}}(t,e),function(t,e){var r=e.name,n=e.type,i=e.direction,o=r[0].toUpperCase()+r.slice(1,-1),a="find"+o;t.prototype[a]=function(t,e){if("mixed"===n||"mixed"===this.type||n===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new W("Graph.".concat(a,': could not find the "').concat(t,'" node in the graph.'));return _t(!0,"mixed"===n?this.type:n,i,r,e)}};var s="some"+o;t.prototype[s]=function(t,e){return!!this[a](t,e)};var u="every"+o;t.prototype[u]=function(t,e){return!this[a](t,(function(t,r){return!e(t,r)}))}}(t,e),function(t,e){var r=e.name,n=e.type,i=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return T.empty();t=""+t;var e=this._nodes.get(t);if(void 0===e)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return function(t,e,r){if("mixed"!==t){if("undirected"===t)return wt(null,r,r.undirected);if("string"==typeof e)return wt(null,r,r[e])}var n=T.empty(),i=new mt;return"undirected"!==t&&("out"!==e&&(n=tt(n,wt(i,r,r.in))),"in"!==e&&(n=tt(n,wt(i,r,r.out)))),"directed"!==t&&(n=tt(n,wt(i,r,r.undirected))),n}("mixed"===n?this.type:n,i,e)}}(t,e)}))}(Dt);var Rt=function(t){function r(e){var r=u({type:"directed"},e);if("multi"in r&&!1!==r.multi)throw new B("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==r.type)throw new B('DirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Dt),Mt=function(t){function r(e){var r=u({type:"undirected"},e);if("multi"in r&&!1!==r.multi)throw new B("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==r.type)throw new B('UndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Dt),Nt=function(t){function r(e){var r=u({multi:!0},e);if("multi"in r&&!0!==r.multi)throw new B("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return t.call(this,r)||this}return e(r,t),r}(Dt),jt=function(t){function r(e){var r=u({type:"directed",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new B("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==r.type)throw new B('MultiDirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Dt),zt=function(t){function r(e){var r=u({type:"undirected",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new B("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==r.type)throw new B('MultiUndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Dt);function Ut(t){t.from=function(e,r){var n=u({},e.options,r),i=new t(n);return i.import(e),i}}return Ut(Dt),Ut(Rt),Ut(Mt),Ut(Nt),Ut(jt),Ut(zt),Dt.Graph=Dt,Dt.DirectedGraph=Rt,Dt.UndirectedGraph=Mt,Dt.MultiGraph=Nt,Dt.MultiDirectedGraph=jt,Dt.MultiUndirectedGraph=zt,Dt.InvalidArgumentsGraphError=B,Dt.NotFoundGraphError=W,Dt.UsageGraphError=q,Dt}()},6486:function(t,e,r){var n;t=r.nmd(t),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",u=32,c=128,h=1/0,d=9007199254740991,l=NaN,f=4294967295,p=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",u],["partialRight",64],["rearg",256]],g="[object Arguments]",v="[object Array]",y="[object Boolean]",m="[object Date]",b="[object Error]",_="[object Function]",w="[object GeneratorFunction]",x="[object Map]",E="[object Number]",L="[object Object]",A="[object Promise]",S="[object RegExp]",C="[object Set]",k="[object String]",G="[object Symbol]",F="[object WeakMap]",O="[object ArrayBuffer]",T="[object DataView]",P="[object Float32Array]",D="[object Float64Array]",R="[object Int8Array]",M="[object Int16Array]",N="[object Int32Array]",j="[object Uint8Array]",z="[object Uint8ClampedArray]",U="[object Uint16Array]",I="[object Uint32Array]",B=/\b__p \+= '';/g,W=/\b(__p \+=) '' \+/g,q=/(__e\(.*?\)|\b__t\)) \+\n'';/g,H=/&(?:amp|lt|gt|quot|#39);/g,V=/[&<>"']/g,Y=RegExp(H.source),Z=RegExp(V.source),K=/<%-([\s\S]+?)%>/g,$=/<%([\s\S]+?)%>/g,X=/<%=([\s\S]+?)%>/g,Q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,J=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,rt=RegExp(et.source),nt=/^\s+/,it=/\s/,ot=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,st=/,? & /,ut=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ct=/[()=,{}\[\]\/\s]/,ht=/\\(\\)?/g,dt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,lt=/\w*$/,ft=/^[-+]0x[0-9a-f]+$/i,pt=/^0b[01]+$/i,gt=/^\[object .+?Constructor\]$/,vt=/^0o[0-7]+$/i,yt=/^(?:0|[1-9]\d*)$/,mt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,bt=/($^)/,_t=/['\n\r\u2028\u2029\\]/g,wt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",xt="a-z\\xdf-\\xf6\\xf8-\\xff",Et="A-Z\\xc0-\\xd6\\xd8-\\xde",Lt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",At="["+Lt+"]",St="["+wt+"]",Ct="\\d+",kt="["+xt+"]",Gt="[^\\ud800-\\udfff"+Lt+Ct+"\\u2700-\\u27bf"+xt+Et+"]",Ft="\\ud83c[\\udffb-\\udfff]",Ot="[^\\ud800-\\udfff]",Tt="(?:\\ud83c[\\udde6-\\uddff]){2}",Pt="[\\ud800-\\udbff][\\udc00-\\udfff]",Dt="["+Et+"]",Rt="(?:"+kt+"|"+Gt+")",Mt="(?:"+Dt+"|"+Gt+")",Nt="(?:['’](?:d|ll|m|re|s|t|ve))?",jt="(?:['’](?:D|LL|M|RE|S|T|VE))?",zt="(?:"+St+"|"+Ft+")?",Ut="[\\ufe0e\\ufe0f]?",It=Ut+zt+"(?:\\u200d(?:"+[Ot,Tt,Pt].join("|")+")"+Ut+zt+")*",Bt="(?:"+["[\\u2700-\\u27bf]",Tt,Pt].join("|")+")"+It,Wt="(?:"+[Ot+St+"?",St,Tt,Pt,"[\\ud800-\\udfff]"].join("|")+")",qt=RegExp("['’]","g"),Ht=RegExp(St,"g"),Vt=RegExp(Ft+"(?="+Ft+")|"+Wt+It,"g"),Yt=RegExp([Dt+"?"+kt+"+"+Nt+"(?="+[At,Dt,"$"].join("|")+")",Mt+"+"+jt+"(?="+[At,Dt+Rt,"$"].join("|")+")",Dt+"?"+Rt+"+"+Nt,Dt+"+"+jt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Ct,Bt].join("|"),"g"),Zt=RegExp("[\\u200d\\ud800-\\udfff"+wt+"\\ufe0e\\ufe0f]"),Kt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,$t=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Xt=-1,Qt={};Qt[P]=Qt[D]=Qt[R]=Qt[M]=Qt[N]=Qt[j]=Qt[z]=Qt[U]=Qt[I]=!0,Qt[g]=Qt[v]=Qt[O]=Qt[y]=Qt[T]=Qt[m]=Qt[b]=Qt[_]=Qt[x]=Qt[E]=Qt[L]=Qt[S]=Qt[C]=Qt[k]=Qt[F]=!1;var Jt={};Jt[g]=Jt[v]=Jt[O]=Jt[T]=Jt[y]=Jt[m]=Jt[P]=Jt[D]=Jt[R]=Jt[M]=Jt[N]=Jt[x]=Jt[E]=Jt[L]=Jt[S]=Jt[C]=Jt[k]=Jt[G]=Jt[j]=Jt[z]=Jt[U]=Jt[I]=!0,Jt[b]=Jt[_]=Jt[F]=!1;var te={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ee=parseFloat,re=parseInt,ne="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,ie="object"==typeof self&&self&&self.Object===Object&&self,oe=ne||ie||Function("return this")(),ae=e&&!e.nodeType&&e,se=ae&&t&&!t.nodeType&&t,ue=se&&se.exports===ae,ce=ue&&ne.process,he=function(){try{return se&&se.require&&se.require("util").types||ce&&ce.binding&&ce.binding("util")}catch(t){}}(),de=he&&he.isArrayBuffer,le=he&&he.isDate,fe=he&&he.isMap,pe=he&&he.isRegExp,ge=he&&he.isSet,ve=he&&he.isTypedArray;function ye(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}function me(t,e,r,n){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(n,a,r(a),t)}return n}function be(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}function _e(t,e){for(var r=null==t?0:t.length;r--&&!1!==e(t[r],r,t););return t}function we(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(!e(t[r],r,t))return!1;return!0}function xe(t,e){for(var r=-1,n=null==t?0:t.length,i=0,o=[];++r<n;){var a=t[r];e(a,r,t)&&(o[i++]=a)}return o}function Ee(t,e){return!(null==t||!t.length)&&Pe(t,e,0)>-1}function Le(t,e,r){for(var n=-1,i=null==t?0:t.length;++n<i;)if(r(e,t[n]))return!0;return!1}function Ae(t,e){for(var r=-1,n=null==t?0:t.length,i=Array(n);++r<n;)i[r]=e(t[r],r,t);return i}function Se(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}function Ce(t,e,r,n){var i=-1,o=null==t?0:t.length;for(n&&o&&(r=t[++i]);++i<o;)r=e(r,t[i],i,t);return r}function ke(t,e,r,n){var i=null==t?0:t.length;for(n&&i&&(r=t[--i]);i--;)r=e(r,t[i],i,t);return r}function Ge(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}var Fe=Ne("length");function Oe(t,e,r){var n;return r(t,(function(t,r,i){if(e(t,r,i))return n=r,!1})),n}function Te(t,e,r,n){for(var i=t.length,o=r+(n?1:-1);n?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Pe(t,e,r){return e==e?function(t,e,r){for(var n=r-1,i=t.length;++n<i;)if(t[n]===e)return n;return-1}(t,e,r):Te(t,Re,r)}function De(t,e,r,n){for(var i=r-1,o=t.length;++i<o;)if(n(t[i],e))return i;return-1}function Re(t){return t!=t}function Me(t,e){var r=null==t?0:t.length;return r?Ue(t,e)/r:l}function Ne(t){return function(e){return null==e?i:e[t]}}function je(t){return function(e){return null==t?i:t[e]}}function ze(t,e,r,n,i){return i(t,(function(t,i,o){r=n?(n=!1,t):e(r,t,i,o)})),r}function Ue(t,e){for(var r,n=-1,o=t.length;++n<o;){var a=e(t[n]);a!==i&&(r=r===i?a:r+a)}return r}function Ie(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}function Be(t){return t?t.slice(0,ar(t)+1).replace(nt,""):t}function We(t){return function(e){return t(e)}}function qe(t,e){return Ae(e,(function(e){return t[e]}))}function He(t,e){return t.has(e)}function Ve(t,e){for(var r=-1,n=t.length;++r<n&&Pe(e,t[r],0)>-1;);return r}function Ye(t,e){for(var r=t.length;r--&&Pe(e,t[r],0)>-1;);return r}function Ze(t,e){for(var r=t.length,n=0;r--;)t[r]===e&&++n;return n}var Ke=je({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),$e=je({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Xe(t){return"\\"+te[t]}function Qe(t){return Zt.test(t)}function Je(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function tr(t,e){return function(r){return t(e(r))}}function er(t,e){for(var r=-1,n=t.length,i=0,o=[];++r<n;){var a=t[r];a!==e&&a!==s||(t[r]=s,o[i++]=r)}return o}function rr(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}function nr(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=[t,t]})),r}function ir(t){return Qe(t)?function(t){for(var e=Vt.lastIndex=0;Vt.test(t);)++e;return e}(t):Fe(t)}function or(t){return Qe(t)?function(t){return t.match(Vt)||[]}(t):function(t){return t.split("")}(t)}function ar(t){for(var e=t.length;e--&&it.test(t.charAt(e)););return e}var sr=je({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ur=function t(e){var r,n=(e=null==e?oe:ur.defaults(oe.Object(),e,ur.pick(oe,$t))).Array,it=e.Date,wt=e.Error,xt=e.Function,Et=e.Math,Lt=e.Object,At=e.RegExp,St=e.String,Ct=e.TypeError,kt=n.prototype,Gt=xt.prototype,Ft=Lt.prototype,Ot=e["__core-js_shared__"],Tt=Gt.toString,Pt=Ft.hasOwnProperty,Dt=0,Rt=(r=/[^.]+$/.exec(Ot&&Ot.keys&&Ot.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",Mt=Ft.toString,Nt=Tt.call(Lt),jt=oe._,zt=At("^"+Tt.call(Pt).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ut=ue?e.Buffer:i,It=e.Symbol,Bt=e.Uint8Array,Wt=Ut?Ut.allocUnsafe:i,Vt=tr(Lt.getPrototypeOf,Lt),Zt=Lt.create,te=Ft.propertyIsEnumerable,ne=kt.splice,ie=It?It.isConcatSpreadable:i,ae=It?It.iterator:i,se=It?It.toStringTag:i,ce=function(){try{var t=co(Lt,"defineProperty");return t({},"",{}),t}catch(t){}}(),he=e.clearTimeout!==oe.clearTimeout&&e.clearTimeout,Fe=it&&it.now!==oe.Date.now&&it.now,je=e.setTimeout!==oe.setTimeout&&e.setTimeout,cr=Et.ceil,hr=Et.floor,dr=Lt.getOwnPropertySymbols,lr=Ut?Ut.isBuffer:i,fr=e.isFinite,pr=kt.join,gr=tr(Lt.keys,Lt),vr=Et.max,yr=Et.min,mr=it.now,br=e.parseInt,_r=Et.random,wr=kt.reverse,xr=co(e,"DataView"),Er=co(e,"Map"),Lr=co(e,"Promise"),Ar=co(e,"Set"),Sr=co(e,"WeakMap"),Cr=co(Lt,"create"),kr=Sr&&new Sr,Gr={},Fr=zo(xr),Or=zo(Er),Tr=zo(Lr),Pr=zo(Ar),Dr=zo(Sr),Rr=It?It.prototype:i,Mr=Rr?Rr.valueOf:i,Nr=Rr?Rr.toString:i;function jr(t){if(rs(t)&&!Ha(t)&&!(t instanceof Br)){if(t instanceof Ir)return t;if(Pt.call(t,"__wrapped__"))return Uo(t)}return new Ir(t)}var zr=function(){function t(){}return function(e){if(!es(e))return{};if(Zt)return Zt(e);t.prototype=e;var r=new t;return t.prototype=i,r}}();function Ur(){}function Ir(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function Br(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=f,this.__views__=[]}function Wr(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function qr(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Hr(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Vr(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new Hr;++e<r;)this.add(t[e])}function Yr(t){var e=this.__data__=new qr(t);this.size=e.size}function Zr(t,e){var r=Ha(t),n=!r&&qa(t),i=!r&&!n&&Ka(t),o=!r&&!n&&!i&&hs(t),a=r||n||i||o,s=a?Ie(t.length,St):[],u=s.length;for(var c in t)!e&&!Pt.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||yo(c,u))||s.push(c);return s}function Kr(t){var e=t.length;return e?t[Vn(0,e-1)]:i}function $r(t,e){return Do(Ci(t),an(e,0,t.length))}function Xr(t){return Do(Ci(t))}function Qr(t,e,r){(r!==i&&!Ia(t[e],r)||r===i&&!(e in t))&&nn(t,e,r)}function Jr(t,e,r){var n=t[e];Pt.call(t,e)&&Ia(n,r)&&(r!==i||e in t)||nn(t,e,r)}function tn(t,e){for(var r=t.length;r--;)if(Ia(t[r][0],e))return r;return-1}function en(t,e,r,n){return dn(t,(function(t,i,o){e(n,t,r(t),o)})),n}function rn(t,e){return t&&ki(e,Ts(e),t)}function nn(t,e,r){"__proto__"==e&&ce?ce(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}function on(t,e){for(var r=-1,o=e.length,a=n(o),s=null==t;++r<o;)a[r]=s?i:Cs(t,e[r]);return a}function an(t,e,r){return t==t&&(r!==i&&(t=t<=r?t:r),e!==i&&(t=t>=e?t:e)),t}function sn(t,e,r,n,o,a){var s,u=1&e,c=2&e,h=4&e;if(r&&(s=o?r(t,n,o,a):r(t)),s!==i)return s;if(!es(t))return t;var d=Ha(t);if(d){if(s=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&Pt.call(t,"index")&&(r.index=t.index,r.input=t.input),r}(t),!u)return Ci(t,s)}else{var l=fo(t),f=l==_||l==w;if(Ka(t))return wi(t,u);if(l==L||l==g||f&&!o){if(s=c||f?{}:go(t),!u)return c?function(t,e){return ki(t,lo(t),e)}(t,function(t,e){return t&&ki(e,Ps(e),t)}(s,t)):function(t,e){return ki(t,ho(t),e)}(t,rn(s,t))}else{if(!Jt[l])return o?t:{};s=function(t,e,r){var n,i=t.constructor;switch(e){case O:return xi(t);case y:case m:return new i(+t);case T:return function(t,e){var r=e?xi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case P:case D:case R:case M:case N:case j:case z:case U:case I:return Ei(t,r);case x:return new i;case E:case k:return new i(t);case S:return function(t){var e=new t.constructor(t.source,lt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case C:return new i;case G:return n=t,Mr?Lt(Mr.call(n)):{}}}(t,l,u)}}a||(a=new Yr);var p=a.get(t);if(p)return p;a.set(t,s),ss(t)?t.forEach((function(n){s.add(sn(n,e,r,n,t,a))})):ns(t)&&t.forEach((function(n,i){s.set(i,sn(n,e,r,i,t,a))}));var v=d?i:(h?c?ro:eo:c?Ps:Ts)(t);return be(v||t,(function(n,i){v&&(n=t[i=n]),Jr(s,i,sn(n,e,r,i,t,a))})),s}function un(t,e,r){var n=r.length;if(null==t)return!n;for(t=Lt(t);n--;){var o=r[n],a=e[o],s=t[o];if(s===i&&!(o in t)||!a(s))return!1}return!0}function cn(t,e,r){if("function"!=typeof t)throw new Ct(o);return Fo((function(){t.apply(i,r)}),e)}function hn(t,e,r,n){var i=-1,o=Ee,a=!0,s=t.length,u=[],c=e.length;if(!s)return u;r&&(e=Ae(e,We(r))),n?(o=Le,a=!1):e.length>=200&&(o=He,a=!1,e=new Vr(e));t:for(;++i<s;){var h=t[i],d=null==r?h:r(h);if(h=n||0!==h?h:0,a&&d==d){for(var l=c;l--;)if(e[l]===d)continue t;u.push(h)}else o(e,d,n)||u.push(h)}return u}jr.templateSettings={escape:K,evaluate:$,interpolate:X,variable:"",imports:{_:jr}},jr.prototype=Ur.prototype,jr.prototype.constructor=jr,Ir.prototype=zr(Ur.prototype),Ir.prototype.constructor=Ir,Br.prototype=zr(Ur.prototype),Br.prototype.constructor=Br,Wr.prototype.clear=function(){this.__data__=Cr?Cr(null):{},this.size=0},Wr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Wr.prototype.get=function(t){var e=this.__data__;if(Cr){var r=e[t];return r===a?i:r}return Pt.call(e,t)?e[t]:i},Wr.prototype.has=function(t){var e=this.__data__;return Cr?e[t]!==i:Pt.call(e,t)},Wr.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=Cr&&e===i?a:e,this},qr.prototype.clear=function(){this.__data__=[],this.size=0},qr.prototype.delete=function(t){var e=this.__data__,r=tn(e,t);return!(r<0||(r==e.length-1?e.pop():ne.call(e,r,1),--this.size,0))},qr.prototype.get=function(t){var e=this.__data__,r=tn(e,t);return r<0?i:e[r][1]},qr.prototype.has=function(t){return tn(this.__data__,t)>-1},qr.prototype.set=function(t,e){var r=this.__data__,n=tn(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},Hr.prototype.clear=function(){this.size=0,this.__data__={hash:new Wr,map:new(Er||qr),string:new Wr}},Hr.prototype.delete=function(t){var e=so(this,t).delete(t);return this.size-=e?1:0,e},Hr.prototype.get=function(t){return so(this,t).get(t)},Hr.prototype.has=function(t){return so(this,t).has(t)},Hr.prototype.set=function(t,e){var r=so(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},Vr.prototype.add=Vr.prototype.push=function(t){return this.__data__.set(t,a),this},Vr.prototype.has=function(t){return this.__data__.has(t)},Yr.prototype.clear=function(){this.__data__=new qr,this.size=0},Yr.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},Yr.prototype.get=function(t){return this.__data__.get(t)},Yr.prototype.has=function(t){return this.__data__.has(t)},Yr.prototype.set=function(t,e){var r=this.__data__;if(r instanceof qr){var n=r.__data__;if(!Er||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new Hr(n)}return r.set(t,e),this.size=r.size,this};var dn=Oi(bn),ln=Oi(_n,!0);function fn(t,e){var r=!0;return dn(t,(function(t,n,i){return r=!!e(t,n,i)})),r}function pn(t,e,r){for(var n=-1,o=t.length;++n<o;){var a=t[n],s=e(a);if(null!=s&&(u===i?s==s&&!cs(s):r(s,u)))var u=s,c=a}return c}function gn(t,e){var r=[];return dn(t,(function(t,n,i){e(t,n,i)&&r.push(t)})),r}function vn(t,e,r,n,i){var o=-1,a=t.length;for(r||(r=vo),i||(i=[]);++o<a;){var s=t[o];e>0&&r(s)?e>1?vn(s,e-1,r,n,i):Se(i,s):n||(i[i.length]=s)}return i}var yn=Ti(),mn=Ti(!0);function bn(t,e){return t&&yn(t,e,Ts)}function _n(t,e){return t&&mn(t,e,Ts)}function wn(t,e){return xe(e,(function(e){return Qa(t[e])}))}function xn(t,e){for(var r=0,n=(e=yi(e,t)).length;null!=t&&r<n;)t=t[jo(e[r++])];return r&&r==n?t:i}function En(t,e,r){var n=e(t);return Ha(t)?n:Se(n,r(t))}function Ln(t){return null==t?t===i?"[object Undefined]":"[object Null]":se&&se in Lt(t)?function(t){var e=Pt.call(t,se),r=t[se];try{t[se]=i;var n=!0}catch(t){}var o=Mt.call(t);return n&&(e?t[se]=r:delete t[se]),o}(t):function(t){return Mt.call(t)}(t)}function An(t,e){return t>e}function Sn(t,e){return null!=t&&Pt.call(t,e)}function Cn(t,e){return null!=t&&e in Lt(t)}function kn(t,e,r){for(var o=r?Le:Ee,a=t[0].length,s=t.length,u=s,c=n(s),h=1/0,d=[];u--;){var l=t[u];u&&e&&(l=Ae(l,We(e))),h=yr(l.length,h),c[u]=!r&&(e||a>=120&&l.length>=120)?new Vr(u&&l):i}l=t[0];var f=-1,p=c[0];t:for(;++f<a&&d.length<h;){var g=l[f],v=e?e(g):g;if(g=r||0!==g?g:0,!(p?He(p,v):o(d,v,r))){for(u=s;--u;){var y=c[u];if(!(y?He(y,v):o(t[u],v,r)))continue t}p&&p.push(v),d.push(g)}}return d}function Gn(t,e,r){var n=null==(t=So(t,e=yi(e,t)))?t:t[jo(Xo(e))];return null==n?i:ye(n,t,r)}function Fn(t){return rs(t)&&Ln(t)==g}function On(t,e,r,n,o){return t===e||(null==t||null==e||!rs(t)&&!rs(e)?t!=t&&e!=e:function(t,e,r,n,o,a){var s=Ha(t),u=Ha(e),c=s?v:fo(t),h=u?v:fo(e),d=(c=c==g?L:c)==L,l=(h=h==g?L:h)==L,f=c==h;if(f&&Ka(t)){if(!Ka(e))return!1;s=!0,d=!1}if(f&&!d)return a||(a=new Yr),s||hs(t)?Ji(t,e,r,n,o,a):function(t,e,r,n,i,o,a){switch(r){case T:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case O:return!(t.byteLength!=e.byteLength||!o(new Bt(t),new Bt(e)));case y:case m:case E:return Ia(+t,+e);case b:return t.name==e.name&&t.message==e.message;case S:case k:return t==e+"";case x:var s=Je;case C:var u=1&n;if(s||(s=rr),t.size!=e.size&&!u)return!1;var c=a.get(t);if(c)return c==e;n|=2,a.set(t,e);var h=Ji(s(t),s(e),n,i,o,a);return a.delete(t),h;case G:if(Mr)return Mr.call(t)==Mr.call(e)}return!1}(t,e,c,r,n,o,a);if(!(1&r)){var p=d&&Pt.call(t,"__wrapped__"),_=l&&Pt.call(e,"__wrapped__");if(p||_){var w=p?t.value():t,A=_?e.value():e;return a||(a=new Yr),o(w,A,r,n,a)}}return!!f&&(a||(a=new Yr),function(t,e,r,n,o,a){var s=1&r,u=eo(t),c=u.length;if(c!=eo(e).length&&!s)return!1;for(var h=c;h--;){var d=u[h];if(!(s?d in e:Pt.call(e,d)))return!1}var l=a.get(t),f=a.get(e);if(l&&f)return l==e&&f==t;var p=!0;a.set(t,e),a.set(e,t);for(var g=s;++h<c;){var v=t[d=u[h]],y=e[d];if(n)var m=s?n(y,v,d,e,t,a):n(v,y,d,t,e,a);if(!(m===i?v===y||o(v,y,r,n,a):m)){p=!1;break}g||(g="constructor"==d)}if(p&&!g){var b=t.constructor,_=e.constructor;b==_||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof _&&_ instanceof _||(p=!1)}return a.delete(t),a.delete(e),p}(t,e,r,n,o,a))}(t,e,r,n,On,o))}function Tn(t,e,r,n){var o=r.length,a=o,s=!n;if(null==t)return!a;for(t=Lt(t);o--;){var u=r[o];if(s&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++o<a;){var c=(u=r[o])[0],h=t[c],d=u[1];if(s&&u[2]){if(h===i&&!(c in t))return!1}else{var l=new Yr;if(n)var f=n(h,d,c,t,e,l);if(!(f===i?On(d,h,3,n,l):f))return!1}}return!0}function Pn(t){return!(!es(t)||(e=t,Rt&&Rt in e))&&(Qa(t)?zt:gt).test(zo(t));var e}function Dn(t){return"function"==typeof t?t:null==t?iu:"object"==typeof t?Ha(t)?zn(t[0],t[1]):jn(t):fu(t)}function Rn(t){if(!xo(t))return gr(t);var e=[];for(var r in Lt(t))Pt.call(t,r)&&"constructor"!=r&&e.push(r);return e}function Mn(t,e){return t<e}function Nn(t,e){var r=-1,i=Ya(t)?n(t.length):[];return dn(t,(function(t,n,o){i[++r]=e(t,n,o)})),i}function jn(t){var e=uo(t);return 1==e.length&&e[0][2]?Lo(e[0][0],e[0][1]):function(r){return r===t||Tn(r,t,e)}}function zn(t,e){return bo(t)&&Eo(e)?Lo(jo(t),e):function(r){var n=Cs(r,t);return n===i&&n===e?ks(r,t):On(e,n,3)}}function Un(t,e,r,n,o){t!==e&&yn(e,(function(a,s){if(o||(o=new Yr),es(a))!function(t,e,r,n,o,a,s){var u=ko(t,r),c=ko(e,r),h=s.get(c);if(h)Qr(t,r,h);else{var d=a?a(u,c,r+"",t,e,s):i,l=d===i;if(l){var f=Ha(c),p=!f&&Ka(c),g=!f&&!p&&hs(c);d=c,f||p||g?Ha(u)?d=u:Za(u)?d=Ci(u):p?(l=!1,d=wi(c,!0)):g?(l=!1,d=Ei(c,!0)):d=[]:os(c)||qa(c)?(d=u,qa(u)?d=ms(u):es(u)&&!Qa(u)||(d=go(c))):l=!1}l&&(s.set(c,d),o(d,c,n,a,s),s.delete(c)),Qr(t,r,d)}}(t,e,s,r,Un,n,o);else{var u=n?n(ko(t,s),a,s+"",t,e,o):i;u===i&&(u=a),Qr(t,s,u)}}),Ps)}function In(t,e){var r=t.length;if(r)return yo(e+=e<0?r:0,r)?t[e]:i}function Bn(t,e,r){e=e.length?Ae(e,(function(t){return Ha(t)?function(e){return xn(e,1===t.length?t[0]:t)}:t})):[iu];var n=-1;e=Ae(e,We(ao()));var i=Nn(t,(function(t,r,i){var o=Ae(e,(function(e){return e(t)}));return{criteria:o,index:++n,value:t}}));return function(t,e){var n=t.length;for(t.sort((function(t,e){return function(t,e,r){for(var n=-1,i=t.criteria,o=e.criteria,a=i.length,s=r.length;++n<a;){var u=Li(i[n],o[n]);if(u)return n>=s?u:u*("desc"==r[n]?-1:1)}return t.index-e.index}(t,e,r)}));n--;)t[n]=t[n].value;return t}(i)}function Wn(t,e,r){for(var n=-1,i=e.length,o={};++n<i;){var a=e[n],s=xn(t,a);r(s,a)&&Xn(o,yi(a,t),s)}return o}function qn(t,e,r,n){var i=n?De:Pe,o=-1,a=e.length,s=t;for(t===e&&(e=Ci(e)),r&&(s=Ae(t,We(r)));++o<a;)for(var u=0,c=e[o],h=r?r(c):c;(u=i(s,h,u,n))>-1;)s!==t&&ne.call(s,u,1),ne.call(t,u,1);return t}function Hn(t,e){for(var r=t?e.length:0,n=r-1;r--;){var i=e[r];if(r==n||i!==o){var o=i;yo(i)?ne.call(t,i,1):ci(t,i)}}return t}function Vn(t,e){return t+hr(_r()*(e-t+1))}function Yn(t,e){var r="";if(!t||e<1||e>d)return r;do{e%2&&(r+=t),(e=hr(e/2))&&(t+=t)}while(e);return r}function Zn(t,e){return Oo(Ao(t,e,iu),t+"")}function Kn(t){return Kr(Is(t))}function $n(t,e){var r=Is(t);return Do(r,an(e,0,r.length))}function Xn(t,e,r,n){if(!es(t))return t;for(var o=-1,a=(e=yi(e,t)).length,s=a-1,u=t;null!=u&&++o<a;){var c=jo(e[o]),h=r;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(o!=s){var d=u[c];(h=n?n(d,c,u):i)===i&&(h=es(d)?d:yo(e[o+1])?[]:{})}Jr(u,c,h),u=u[c]}return t}var Qn=kr?function(t,e){return kr.set(t,e),t}:iu,Jn=ce?function(t,e){return ce(t,"toString",{configurable:!0,enumerable:!1,value:eu(e),writable:!0})}:iu;function ti(t){return Do(Is(t))}function ei(t,e,r){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(r=r>o?o:r)<0&&(r+=o),o=e>r?0:r-e>>>0,e>>>=0;for(var a=n(o);++i<o;)a[i]=t[i+e];return a}function ri(t,e){var r;return dn(t,(function(t,n,i){return!(r=e(t,n,i))})),!!r}function ni(t,e,r){var n=0,i=null==t?n:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;n<i;){var o=n+i>>>1,a=t[o];null!==a&&!cs(a)&&(r?a<=e:a<e)?n=o+1:i=o}return i}return ii(t,e,iu,r)}function ii(t,e,r,n){var o=0,a=null==t?0:t.length;if(0===a)return 0;for(var s=(e=r(e))!=e,u=null===e,c=cs(e),h=e===i;o<a;){var d=hr((o+a)/2),l=r(t[d]),f=l!==i,p=null===l,g=l==l,v=cs(l);if(s)var y=n||g;else y=h?g&&(n||f):u?g&&f&&(n||!p):c?g&&f&&!p&&(n||!v):!p&&!v&&(n?l<=e:l<e);y?o=d+1:a=d}return yr(a,4294967294)}function oi(t,e){for(var r=-1,n=t.length,i=0,o=[];++r<n;){var a=t[r],s=e?e(a):a;if(!r||!Ia(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function ai(t){return"number"==typeof t?t:cs(t)?l:+t}function si(t){if("string"==typeof t)return t;if(Ha(t))return Ae(t,si)+"";if(cs(t))return Nr?Nr.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ui(t,e,r){var n=-1,i=Ee,o=t.length,a=!0,s=[],u=s;if(r)a=!1,i=Le;else if(o>=200){var c=e?null:Yi(t);if(c)return rr(c);a=!1,i=He,u=new Vr}else u=e?[]:s;t:for(;++n<o;){var h=t[n],d=e?e(h):h;if(h=r||0!==h?h:0,a&&d==d){for(var l=u.length;l--;)if(u[l]===d)continue t;e&&u.push(d),s.push(h)}else i(u,d,r)||(u!==s&&u.push(d),s.push(h))}return s}function ci(t,e){return null==(t=So(t,e=yi(e,t)))||delete t[jo(Xo(e))]}function hi(t,e,r,n){return Xn(t,e,r(xn(t,e)),n)}function di(t,e,r,n){for(var i=t.length,o=n?i:-1;(n?o--:++o<i)&&e(t[o],o,t););return r?ei(t,n?0:o,n?o+1:i):ei(t,n?o+1:0,n?i:o)}function li(t,e){var r=t;return r instanceof Br&&(r=r.value()),Ce(e,(function(t,e){return e.func.apply(e.thisArg,Se([t],e.args))}),r)}function fi(t,e,r){var i=t.length;if(i<2)return i?ui(t[0]):[];for(var o=-1,a=n(i);++o<i;)for(var s=t[o],u=-1;++u<i;)u!=o&&(a[o]=hn(a[o]||s,t[u],e,r));return ui(vn(a,1),e,r)}function pi(t,e,r){for(var n=-1,o=t.length,a=e.length,s={};++n<o;){var u=n<a?e[n]:i;r(s,t[n],u)}return s}function gi(t){return Za(t)?t:[]}function vi(t){return"function"==typeof t?t:iu}function yi(t,e){return Ha(t)?t:bo(t,e)?[t]:No(bs(t))}var mi=Zn;function bi(t,e,r){var n=t.length;return r=r===i?n:r,!e&&r>=n?t:ei(t,e,r)}var _i=he||function(t){return oe.clearTimeout(t)};function wi(t,e){if(e)return t.slice();var r=t.length,n=Wt?Wt(r):new t.constructor(r);return t.copy(n),n}function xi(t){var e=new t.constructor(t.byteLength);return new Bt(e).set(new Bt(t)),e}function Ei(t,e){var r=e?xi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function Li(t,e){if(t!==e){var r=t!==i,n=null===t,o=t==t,a=cs(t),s=e!==i,u=null===e,c=e==e,h=cs(e);if(!u&&!h&&!a&&t>e||a&&s&&c&&!u&&!h||n&&s&&c||!r&&c||!o)return 1;if(!n&&!a&&!h&&t<e||h&&r&&o&&!n&&!a||u&&r&&o||!s&&o||!c)return-1}return 0}function Ai(t,e,r,i){for(var o=-1,a=t.length,s=r.length,u=-1,c=e.length,h=vr(a-s,0),d=n(c+h),l=!i;++u<c;)d[u]=e[u];for(;++o<s;)(l||o<a)&&(d[r[o]]=t[o]);for(;h--;)d[u++]=t[o++];return d}function Si(t,e,r,i){for(var o=-1,a=t.length,s=-1,u=r.length,c=-1,h=e.length,d=vr(a-u,0),l=n(d+h),f=!i;++o<d;)l[o]=t[o];for(var p=o;++c<h;)l[p+c]=e[c];for(;++s<u;)(f||o<a)&&(l[p+r[s]]=t[o++]);return l}function Ci(t,e){var r=-1,i=t.length;for(e||(e=n(i));++r<i;)e[r]=t[r];return e}function ki(t,e,r,n){var o=!r;r||(r={});for(var a=-1,s=e.length;++a<s;){var u=e[a],c=n?n(r[u],t[u],u,r,t):i;c===i&&(c=t[u]),o?nn(r,u,c):Jr(r,u,c)}return r}function Gi(t,e){return function(r,n){var i=Ha(r)?me:en,o=e?e():{};return i(r,t,ao(n,2),o)}}function Fi(t){return Zn((function(e,r){var n=-1,o=r.length,a=o>1?r[o-1]:i,s=o>2?r[2]:i;for(a=t.length>3&&"function"==typeof a?(o--,a):i,s&&mo(r[0],r[1],s)&&(a=o<3?i:a,o=1),e=Lt(e);++n<o;){var u=r[n];u&&t(e,u,n,a)}return e}))}function Oi(t,e){return function(r,n){if(null==r)return r;if(!Ya(r))return t(r,n);for(var i=r.length,o=e?i:-1,a=Lt(r);(e?o--:++o<i)&&!1!==n(a[o],o,a););return r}}function Ti(t){return function(e,r,n){for(var i=-1,o=Lt(e),a=n(e),s=a.length;s--;){var u=a[t?s:++i];if(!1===r(o[u],u,o))break}return e}}function Pi(t){return function(e){var r=Qe(e=bs(e))?or(e):i,n=r?r[0]:e.charAt(0),o=r?bi(r,1).join(""):e.slice(1);return n[t]()+o}}function Di(t){return function(e){return Ce(Qs(qs(e).replace(qt,"")),t,"")}}function Ri(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var r=zr(t.prototype),n=t.apply(r,e);return es(n)?n:r}}function Mi(t){return function(e,r,n){var o=Lt(e);if(!Ya(e)){var a=ao(r,3);e=Ts(e),r=function(t){return a(o[t],t,o)}}var s=t(e,r,n);return s>-1?o[a?e[s]:s]:i}}function Ni(t){return to((function(e){var r=e.length,n=r,a=Ir.prototype.thru;for(t&&e.reverse();n--;){var s=e[n];if("function"!=typeof s)throw new Ct(o);if(a&&!u&&"wrapper"==io(s))var u=new Ir([],!0)}for(n=u?n:r;++n<r;){var c=io(s=e[n]),h="wrapper"==c?no(s):i;u=h&&_o(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?u[io(h[0])].apply(u,h[3]):1==s.length&&_o(s)?u[c]():u.thru(s)}return function(){var t=arguments,n=t[0];if(u&&1==t.length&&Ha(n))return u.plant(n).value();for(var i=0,o=r?e[i].apply(this,t):n;++i<r;)o=e[i].call(this,o);return o}}))}function ji(t,e,r,o,a,s,u,h,d,l){var f=e&c,p=1&e,g=2&e,v=24&e,y=512&e,m=g?i:Ri(t);return function i(){for(var c=arguments.length,b=n(c),_=c;_--;)b[_]=arguments[_];if(v)var w=oo(i),x=Ze(b,w);if(o&&(b=Ai(b,o,a,v)),s&&(b=Si(b,s,u,v)),c-=x,v&&c<l){var E=er(b,w);return Hi(t,e,ji,i.placeholder,r,b,E,h,d,l-c)}var L=p?r:this,A=g?L[t]:t;return c=b.length,h?b=Co(b,h):y&&c>1&&b.reverse(),f&&d<c&&(b.length=d),this&&this!==oe&&this instanceof i&&(A=m||Ri(A)),A.apply(L,b)}}function zi(t,e){return function(r,n){return function(t,e,r,n){return bn(t,(function(t,i,o){e(n,r(t),i,o)})),n}(r,t,e(n),{})}}function Ui(t,e){return function(r,n){var o;if(r===i&&n===i)return e;if(r!==i&&(o=r),n!==i){if(o===i)return n;"string"==typeof r||"string"==typeof n?(r=si(r),n=si(n)):(r=ai(r),n=ai(n)),o=t(r,n)}return o}}function Ii(t){return to((function(e){return e=Ae(e,We(ao())),Zn((function(r){var n=this;return t(e,(function(t){return ye(t,n,r)}))}))}))}function Bi(t,e){var r=(e=e===i?" ":si(e)).length;if(r<2)return r?Yn(e,t):e;var n=Yn(e,cr(t/ir(e)));return Qe(e)?bi(or(n),0,t).join(""):n.slice(0,t)}function Wi(t){return function(e,r,o){return o&&"number"!=typeof o&&mo(e,r,o)&&(r=o=i),e=ps(e),r===i?(r=e,e=0):r=ps(r),function(t,e,r,i){for(var o=-1,a=vr(cr((e-t)/(r||1)),0),s=n(a);a--;)s[i?a:++o]=t,t+=r;return s}(e,r,o=o===i?e<r?1:-1:ps(o),t)}}function qi(t){return function(e,r){return"string"==typeof e&&"string"==typeof r||(e=ys(e),r=ys(r)),t(e,r)}}function Hi(t,e,r,n,o,a,s,c,h,d){var l=8&e;e|=l?u:64,4&(e&=~(l?64:u))||(e&=-4);var f=[t,e,o,l?a:i,l?s:i,l?i:a,l?i:s,c,h,d],p=r.apply(i,f);return _o(t)&&Go(p,f),p.placeholder=n,To(p,t,e)}function Vi(t){var e=Et[t];return function(t,r){if(t=ys(t),(r=null==r?0:yr(gs(r),292))&&fr(t)){var n=(bs(t)+"e").split("e");return+((n=(bs(e(n[0]+"e"+(+n[1]+r)))+"e").split("e"))[0]+"e"+(+n[1]-r))}return e(t)}}var Yi=Ar&&1/rr(new Ar([,-0]))[1]==h?function(t){return new Ar(t)}:cu;function Zi(t){return function(e){var r=fo(e);return r==x?Je(e):r==C?nr(e):function(t,e){return Ae(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ki(t,e,r,a,h,d,l,f){var p=2&e;if(!p&&"function"!=typeof t)throw new Ct(o);var g=a?a.length:0;if(g||(e&=-97,a=h=i),l=l===i?l:vr(gs(l),0),f=f===i?f:gs(f),g-=h?h.length:0,64&e){var v=a,y=h;a=h=i}var m=p?i:no(t),b=[t,e,r,a,h,v,y,d,l,f];if(m&&function(t,e){var r=t[1],n=e[1],i=r|n,o=i<131,a=n==c&&8==r||n==c&&256==r&&t[7].length<=e[8]||384==n&&e[7].length<=e[8]&&8==r;if(!o&&!a)return t;1&n&&(t[2]=e[2],i|=1&r?0:4);var u=e[3];if(u){var h=t[3];t[3]=h?Ai(h,u,e[4]):u,t[4]=h?er(t[3],s):e[4]}(u=e[5])&&(h=t[5],t[5]=h?Si(h,u,e[6]):u,t[6]=h?er(t[5],s):e[6]),(u=e[7])&&(t[7]=u),n&c&&(t[8]=null==t[8]?e[8]:yr(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(b,m),t=b[0],e=b[1],r=b[2],a=b[3],h=b[4],!(f=b[9]=b[9]===i?p?0:t.length:vr(b[9]-g,0))&&24&e&&(e&=-25),e&&1!=e)_=8==e||16==e?function(t,e,r){var o=Ri(t);return function a(){for(var s=arguments.length,u=n(s),c=s,h=oo(a);c--;)u[c]=arguments[c];var d=s<3&&u[0]!==h&&u[s-1]!==h?[]:er(u,h);return(s-=d.length)<r?Hi(t,e,ji,a.placeholder,i,u,d,i,i,r-s):ye(this&&this!==oe&&this instanceof a?o:t,this,u)}}(t,e,f):e!=u&&33!=e||h.length?ji.apply(i,b):function(t,e,r,i){var o=1&e,a=Ri(t);return function e(){for(var s=-1,u=arguments.length,c=-1,h=i.length,d=n(h+u),l=this&&this!==oe&&this instanceof e?a:t;++c<h;)d[c]=i[c];for(;u--;)d[c++]=arguments[++s];return ye(l,o?r:this,d)}}(t,e,r,a);else var _=function(t,e,r){var n=1&e,i=Ri(t);return function e(){return(this&&this!==oe&&this instanceof e?i:t).apply(n?r:this,arguments)}}(t,e,r);return To((m?Qn:Go)(_,b),t,e)}function $i(t,e,r,n){return t===i||Ia(t,Ft[r])&&!Pt.call(n,r)?e:t}function Xi(t,e,r,n,o,a){return es(t)&&es(e)&&(a.set(e,t),Un(t,e,i,Xi,a),a.delete(e)),t}function Qi(t){return os(t)?i:t}function Ji(t,e,r,n,o,a){var s=1&r,u=t.length,c=e.length;if(u!=c&&!(s&&c>u))return!1;var h=a.get(t),d=a.get(e);if(h&&d)return h==e&&d==t;var l=-1,f=!0,p=2&r?new Vr:i;for(a.set(t,e),a.set(e,t);++l<u;){var g=t[l],v=e[l];if(n)var y=s?n(v,g,l,e,t,a):n(g,v,l,t,e,a);if(y!==i){if(y)continue;f=!1;break}if(p){if(!Ge(e,(function(t,e){if(!He(p,e)&&(g===t||o(g,t,r,n,a)))return p.push(e)}))){f=!1;break}}else if(g!==v&&!o(g,v,r,n,a)){f=!1;break}}return a.delete(t),a.delete(e),f}function to(t){return Oo(Ao(t,i,Vo),t+"")}function eo(t){return En(t,Ts,ho)}function ro(t){return En(t,Ps,lo)}var no=kr?function(t){return kr.get(t)}:cu;function io(t){for(var e=t.name+"",r=Gr[e],n=Pt.call(Gr,e)?r.length:0;n--;){var i=r[n],o=i.func;if(null==o||o==t)return i.name}return e}function oo(t){return(Pt.call(jr,"placeholder")?jr:t).placeholder}function ao(){var t=jr.iteratee||ou;return t=t===ou?Dn:t,arguments.length?t(arguments[0],arguments[1]):t}function so(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function uo(t){for(var e=Ts(t),r=e.length;r--;){var n=e[r],i=t[n];e[r]=[n,i,Eo(i)]}return e}function co(t,e){var r=function(t,e){return null==t?i:t[e]}(t,e);return Pn(r)?r:i}var ho=dr?function(t){return null==t?[]:(t=Lt(t),xe(dr(t),(function(e){return te.call(t,e)})))}:vu,lo=dr?function(t){for(var e=[];t;)Se(e,ho(t)),t=Vt(t);return e}:vu,fo=Ln;function po(t,e,r){for(var n=-1,i=(e=yi(e,t)).length,o=!1;++n<i;){var a=jo(e[n]);if(!(o=null!=t&&r(t,a)))break;t=t[a]}return o||++n!=i?o:!!(i=null==t?0:t.length)&&ts(i)&&yo(a,i)&&(Ha(t)||qa(t))}function go(t){return"function"!=typeof t.constructor||xo(t)?{}:zr(Vt(t))}function vo(t){return Ha(t)||qa(t)||!!(ie&&t&&t[ie])}function yo(t,e){var r=typeof t;return!!(e=null==e?d:e)&&("number"==r||"symbol"!=r&&yt.test(t))&&t>-1&&t%1==0&&t<e}function mo(t,e,r){if(!es(r))return!1;var n=typeof e;return!!("number"==n?Ya(r)&&yo(e,r.length):"string"==n&&e in r)&&Ia(r[e],t)}function bo(t,e){if(Ha(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!cs(t))||J.test(t)||!Q.test(t)||null!=e&&t in Lt(e)}function _o(t){var e=io(t),r=jr[e];if("function"!=typeof r||!(e in Br.prototype))return!1;if(t===r)return!0;var n=no(r);return!!n&&t===n[0]}(xr&&fo(new xr(new ArrayBuffer(1)))!=T||Er&&fo(new Er)!=x||Lr&&fo(Lr.resolve())!=A||Ar&&fo(new Ar)!=C||Sr&&fo(new Sr)!=F)&&(fo=function(t){var e=Ln(t),r=e==L?t.constructor:i,n=r?zo(r):"";if(n)switch(n){case Fr:return T;case Or:return x;case Tr:return A;case Pr:return C;case Dr:return F}return e});var wo=Ot?Qa:yu;function xo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Ft)}function Eo(t){return t==t&&!es(t)}function Lo(t,e){return function(r){return null!=r&&r[t]===e&&(e!==i||t in Lt(r))}}function Ao(t,e,r){return e=vr(e===i?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=vr(i.length-e,0),s=n(a);++o<a;)s[o]=i[e+o];o=-1;for(var u=n(e+1);++o<e;)u[o]=i[o];return u[e]=r(s),ye(t,this,u)}}function So(t,e){return e.length<2?t:xn(t,ei(e,0,-1))}function Co(t,e){for(var r=t.length,n=yr(e.length,r),o=Ci(t);n--;){var a=e[n];t[n]=yo(a,r)?o[a]:i}return t}function ko(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Go=Po(Qn),Fo=je||function(t,e){return oe.setTimeout(t,e)},Oo=Po(Jn);function To(t,e,r){var n=e+"";return Oo(t,function(t,e){var r=e.length;if(!r)return t;var n=r-1;return e[n]=(r>1?"& ":"")+e[n],e=e.join(r>2?", ":" "),t.replace(ot,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return be(p,(function(r){var n="_."+r[0];e&r[1]&&!Ee(t,n)&&t.push(n)})),t.sort()}(function(t){var e=t.match(at);return e?e[1].split(st):[]}(n),r)))}function Po(t){var e=0,r=0;return function(){var n=mr(),o=16-(n-r);if(r=n,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(i,arguments)}}function Do(t,e){var r=-1,n=t.length,o=n-1;for(e=e===i?n:e;++r<e;){var a=Vn(r,o),s=t[a];t[a]=t[r],t[r]=s}return t.length=e,t}var Ro,Mo,No=(Ro=Ra((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,r,n,i){e.push(n?i.replace(ht,"$1"):r||t)})),e}),(function(t){return 500===Mo.size&&Mo.clear(),t})),Mo=Ro.cache,Ro);function jo(t){if("string"==typeof t||cs(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function zo(t){if(null!=t){try{return Tt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Uo(t){if(t instanceof Br)return t.clone();var e=new Ir(t.__wrapped__,t.__chain__);return e.__actions__=Ci(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Io=Zn((function(t,e){return Za(t)?hn(t,vn(e,1,Za,!0)):[]})),Bo=Zn((function(t,e){var r=Xo(e);return Za(r)&&(r=i),Za(t)?hn(t,vn(e,1,Za,!0),ao(r,2)):[]})),Wo=Zn((function(t,e){var r=Xo(e);return Za(r)&&(r=i),Za(t)?hn(t,vn(e,1,Za,!0),i,r):[]}));function qo(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:gs(r);return i<0&&(i=vr(n+i,0)),Te(t,ao(e,3),i)}function Ho(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var o=n-1;return r!==i&&(o=gs(r),o=r<0?vr(n+o,0):yr(o,n-1)),Te(t,ao(e,3),o,!0)}function Vo(t){return null!=t&&t.length?vn(t,1):[]}function Yo(t){return t&&t.length?t[0]:i}var Zo=Zn((function(t){var e=Ae(t,gi);return e.length&&e[0]===t[0]?kn(e):[]})),Ko=Zn((function(t){var e=Xo(t),r=Ae(t,gi);return e===Xo(r)?e=i:r.pop(),r.length&&r[0]===t[0]?kn(r,ao(e,2)):[]})),$o=Zn((function(t){var e=Xo(t),r=Ae(t,gi);return(e="function"==typeof e?e:i)&&r.pop(),r.length&&r[0]===t[0]?kn(r,i,e):[]}));function Xo(t){var e=null==t?0:t.length;return e?t[e-1]:i}var Qo=Zn(Jo);function Jo(t,e){return t&&t.length&&e&&e.length?qn(t,e):t}var ta=to((function(t,e){var r=null==t?0:t.length,n=on(t,e);return Hn(t,Ae(e,(function(t){return yo(t,r)?+t:t})).sort(Li)),n}));function ea(t){return null==t?t:wr.call(t)}var ra=Zn((function(t){return ui(vn(t,1,Za,!0))})),na=Zn((function(t){var e=Xo(t);return Za(e)&&(e=i),ui(vn(t,1,Za,!0),ao(e,2))})),ia=Zn((function(t){var e=Xo(t);return e="function"==typeof e?e:i,ui(vn(t,1,Za,!0),i,e)}));function oa(t){if(!t||!t.length)return[];var e=0;return t=xe(t,(function(t){if(Za(t))return e=vr(t.length,e),!0})),Ie(e,(function(e){return Ae(t,Ne(e))}))}function aa(t,e){if(!t||!t.length)return[];var r=oa(t);return null==e?r:Ae(r,(function(t){return ye(e,i,t)}))}var sa=Zn((function(t,e){return Za(t)?hn(t,e):[]})),ua=Zn((function(t){return fi(xe(t,Za))})),ca=Zn((function(t){var e=Xo(t);return Za(e)&&(e=i),fi(xe(t,Za),ao(e,2))})),ha=Zn((function(t){var e=Xo(t);return e="function"==typeof e?e:i,fi(xe(t,Za),i,e)})),da=Zn(oa),la=Zn((function(t){var e=t.length,r=e>1?t[e-1]:i;return r="function"==typeof r?(t.pop(),r):i,aa(t,r)}));function fa(t){var e=jr(t);return e.__chain__=!0,e}function pa(t,e){return e(t)}var ga=to((function(t){var e=t.length,r=e?t[0]:0,n=this.__wrapped__,o=function(e){return on(e,t)};return!(e>1||this.__actions__.length)&&n instanceof Br&&yo(r)?((n=n.slice(r,+r+(e?1:0))).__actions__.push({func:pa,args:[o],thisArg:i}),new Ir(n,this.__chain__).thru((function(t){return e&&!t.length&&t.push(i),t}))):this.thru(o)})),va=Gi((function(t,e,r){Pt.call(t,r)?++t[r]:nn(t,r,1)})),ya=Mi(qo),ma=Mi(Ho);function ba(t,e){return(Ha(t)?be:dn)(t,ao(e,3))}function _a(t,e){return(Ha(t)?_e:ln)(t,ao(e,3))}var wa=Gi((function(t,e,r){Pt.call(t,r)?t[r].push(e):nn(t,r,[e])})),xa=Zn((function(t,e,r){var i=-1,o="function"==typeof e,a=Ya(t)?n(t.length):[];return dn(t,(function(t){a[++i]=o?ye(e,t,r):Gn(t,e,r)})),a})),Ea=Gi((function(t,e,r){nn(t,r,e)}));function La(t,e){return(Ha(t)?Ae:Nn)(t,ao(e,3))}var Aa=Gi((function(t,e,r){t[r?0:1].push(e)}),(function(){return[[],[]]})),Sa=Zn((function(t,e){if(null==t)return[];var r=e.length;return r>1&&mo(t,e[0],e[1])?e=[]:r>2&&mo(e[0],e[1],e[2])&&(e=[e[0]]),Bn(t,vn(e,1),[])})),Ca=Fe||function(){return oe.Date.now()};function ka(t,e,r){return e=r?i:e,e=t&&null==e?t.length:e,Ki(t,c,i,i,i,i,e)}function Ga(t,e){var r;if("function"!=typeof e)throw new Ct(o);return t=gs(t),function(){return--t>0&&(r=e.apply(this,arguments)),t<=1&&(e=i),r}}var Fa=Zn((function(t,e,r){var n=1;if(r.length){var i=er(r,oo(Fa));n|=u}return Ki(t,n,e,r,i)})),Oa=Zn((function(t,e,r){var n=3;if(r.length){var i=er(r,oo(Oa));n|=u}return Ki(e,n,t,r,i)}));function Ta(t,e,r){var n,a,s,u,c,h,d=0,l=!1,f=!1,p=!0;if("function"!=typeof t)throw new Ct(o);function g(e){var r=n,o=a;return n=a=i,d=e,u=t.apply(o,r)}function v(t){return d=t,c=Fo(m,e),l?g(t):u}function y(t){var r=t-h;return h===i||r>=e||r<0||f&&t-d>=s}function m(){var t=Ca();if(y(t))return b(t);c=Fo(m,function(t){var r=e-(t-h);return f?yr(r,s-(t-d)):r}(t))}function b(t){return c=i,p&&n?g(t):(n=a=i,u)}function _(){var t=Ca(),r=y(t);if(n=arguments,a=this,h=t,r){if(c===i)return v(h);if(f)return _i(c),c=Fo(m,e),g(h)}return c===i&&(c=Fo(m,e)),u}return e=ys(e)||0,es(r)&&(l=!!r.leading,s=(f="maxWait"in r)?vr(ys(r.maxWait)||0,e):s,p="trailing"in r?!!r.trailing:p),_.cancel=function(){c!==i&&_i(c),d=0,n=h=a=c=i},_.flush=function(){return c===i?u:b(Ca())},_}var Pa=Zn((function(t,e){return cn(t,1,e)})),Da=Zn((function(t,e,r){return cn(t,ys(e)||0,r)}));function Ra(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Ct(o);var r=function(){var n=arguments,i=e?e.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var a=t.apply(this,n);return r.cache=o.set(i,a)||o,a};return r.cache=new(Ra.Cache||Hr),r}function Ma(t){if("function"!=typeof t)throw new Ct(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Ra.Cache=Hr;var Na=mi((function(t,e){var r=(e=1==e.length&&Ha(e[0])?Ae(e[0],We(ao())):Ae(vn(e,1),We(ao()))).length;return Zn((function(n){for(var i=-1,o=yr(n.length,r);++i<o;)n[i]=e[i].call(this,n[i]);return ye(t,this,n)}))})),ja=Zn((function(t,e){var r=er(e,oo(ja));return Ki(t,u,i,e,r)})),za=Zn((function(t,e){var r=er(e,oo(za));return Ki(t,64,i,e,r)})),Ua=to((function(t,e){return Ki(t,256,i,i,i,e)}));function Ia(t,e){return t===e||t!=t&&e!=e}var Ba=qi(An),Wa=qi((function(t,e){return t>=e})),qa=Fn(function(){return arguments}())?Fn:function(t){return rs(t)&&Pt.call(t,"callee")&&!te.call(t,"callee")},Ha=n.isArray,Va=de?We(de):function(t){return rs(t)&&Ln(t)==O};function Ya(t){return null!=t&&ts(t.length)&&!Qa(t)}function Za(t){return rs(t)&&Ya(t)}var Ka=lr||yu,$a=le?We(le):function(t){return rs(t)&&Ln(t)==m};function Xa(t){if(!rs(t))return!1;var e=Ln(t);return e==b||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!os(t)}function Qa(t){if(!es(t))return!1;var e=Ln(t);return e==_||e==w||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Ja(t){return"number"==typeof t&&t==gs(t)}function ts(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=d}function es(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function rs(t){return null!=t&&"object"==typeof t}var ns=fe?We(fe):function(t){return rs(t)&&fo(t)==x};function is(t){return"number"==typeof t||rs(t)&&Ln(t)==E}function os(t){if(!rs(t)||Ln(t)!=L)return!1;var e=Vt(t);if(null===e)return!0;var r=Pt.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&Tt.call(r)==Nt}var as=pe?We(pe):function(t){return rs(t)&&Ln(t)==S},ss=ge?We(ge):function(t){return rs(t)&&fo(t)==C};function us(t){return"string"==typeof t||!Ha(t)&&rs(t)&&Ln(t)==k}function cs(t){return"symbol"==typeof t||rs(t)&&Ln(t)==G}var hs=ve?We(ve):function(t){return rs(t)&&ts(t.length)&&!!Qt[Ln(t)]},ds=qi(Mn),ls=qi((function(t,e){return t<=e}));function fs(t){if(!t)return[];if(Ya(t))return us(t)?or(t):Ci(t);if(ae&&t[ae])return function(t){for(var e,r=[];!(e=t.next()).done;)r.push(e.value);return r}(t[ae]());var e=fo(t);return(e==x?Je:e==C?rr:Is)(t)}function ps(t){return t?(t=ys(t))===h||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function gs(t){var e=ps(t),r=e%1;return e==e?r?e-r:e:0}function vs(t){return t?an(gs(t),0,f):0}function ys(t){if("number"==typeof t)return t;if(cs(t))return l;if(es(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=es(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Be(t);var r=pt.test(t);return r||vt.test(t)?re(t.slice(2),r?2:8):ft.test(t)?l:+t}function ms(t){return ki(t,Ps(t))}function bs(t){return null==t?"":si(t)}var _s=Fi((function(t,e){if(xo(e)||Ya(e))ki(e,Ts(e),t);else for(var r in e)Pt.call(e,r)&&Jr(t,r,e[r])})),ws=Fi((function(t,e){ki(e,Ps(e),t)})),xs=Fi((function(t,e,r,n){ki(e,Ps(e),t,n)})),Es=Fi((function(t,e,r,n){ki(e,Ts(e),t,n)})),Ls=to(on),As=Zn((function(t,e){t=Lt(t);var r=-1,n=e.length,o=n>2?e[2]:i;for(o&&mo(e[0],e[1],o)&&(n=1);++r<n;)for(var a=e[r],s=Ps(a),u=-1,c=s.length;++u<c;){var h=s[u],d=t[h];(d===i||Ia(d,Ft[h])&&!Pt.call(t,h))&&(t[h]=a[h])}return t})),Ss=Zn((function(t){return t.push(i,Xi),ye(Rs,i,t)}));function Cs(t,e,r){var n=null==t?i:xn(t,e);return n===i?r:n}function ks(t,e){return null!=t&&po(t,e,Cn)}var Gs=zi((function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=Mt.call(e)),t[e]=r}),eu(iu)),Fs=zi((function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=Mt.call(e)),Pt.call(t,e)?t[e].push(r):t[e]=[r]}),ao),Os=Zn(Gn);function Ts(t){return Ya(t)?Zr(t):Rn(t)}function Ps(t){return Ya(t)?Zr(t,!0):function(t){if(!es(t))return function(t){var e=[];if(null!=t)for(var r in Lt(t))e.push(r);return e}(t);var e=xo(t),r=[];for(var n in t)("constructor"!=n||!e&&Pt.call(t,n))&&r.push(n);return r}(t)}var Ds=Fi((function(t,e,r){Un(t,e,r)})),Rs=Fi((function(t,e,r,n){Un(t,e,r,n)})),Ms=to((function(t,e){var r={};if(null==t)return r;var n=!1;e=Ae(e,(function(e){return e=yi(e,t),n||(n=e.length>1),e})),ki(t,ro(t),r),n&&(r=sn(r,7,Qi));for(var i=e.length;i--;)ci(r,e[i]);return r})),Ns=to((function(t,e){return null==t?{}:function(t,e){return Wn(t,e,(function(e,r){return ks(t,r)}))}(t,e)}));function js(t,e){if(null==t)return{};var r=Ae(ro(t),(function(t){return[t]}));return e=ao(e),Wn(t,r,(function(t,r){return e(t,r[0])}))}var zs=Zi(Ts),Us=Zi(Ps);function Is(t){return null==t?[]:qe(t,Ts(t))}var Bs=Di((function(t,e,r){return e=e.toLowerCase(),t+(r?Ws(e):e)}));function Ws(t){return Xs(bs(t).toLowerCase())}function qs(t){return(t=bs(t))&&t.replace(mt,Ke).replace(Ht,"")}var Hs=Di((function(t,e,r){return t+(r?"-":"")+e.toLowerCase()})),Vs=Di((function(t,e,r){return t+(r?" ":"")+e.toLowerCase()})),Ys=Pi("toLowerCase"),Zs=Di((function(t,e,r){return t+(r?"_":"")+e.toLowerCase()})),Ks=Di((function(t,e,r){return t+(r?" ":"")+Xs(e)})),$s=Di((function(t,e,r){return t+(r?" ":"")+e.toUpperCase()})),Xs=Pi("toUpperCase");function Qs(t,e,r){return t=bs(t),(e=r?i:e)===i?function(t){return Kt.test(t)}(t)?function(t){return t.match(Yt)||[]}(t):function(t){return t.match(ut)||[]}(t):t.match(e)||[]}var Js=Zn((function(t,e){try{return ye(t,i,e)}catch(t){return Xa(t)?t:new wt(t)}})),tu=to((function(t,e){return be(e,(function(e){e=jo(e),nn(t,e,Fa(t[e],t))})),t}));function eu(t){return function(){return t}}var ru=Ni(),nu=Ni(!0);function iu(t){return t}function ou(t){return Dn("function"==typeof t?t:sn(t,1))}var au=Zn((function(t,e){return function(r){return Gn(r,t,e)}})),su=Zn((function(t,e){return function(r){return Gn(t,r,e)}}));function uu(t,e,r){var n=Ts(e),i=wn(e,n);null!=r||es(e)&&(i.length||!n.length)||(r=e,e=t,t=this,i=wn(e,Ts(e)));var o=!(es(r)&&"chain"in r&&!r.chain),a=Qa(t);return be(i,(function(r){var n=e[r];t[r]=n,a&&(t.prototype[r]=function(){var e=this.__chain__;if(o||e){var r=t(this.__wrapped__),i=r.__actions__=Ci(this.__actions__);return i.push({func:n,args:arguments,thisArg:t}),r.__chain__=e,r}return n.apply(t,Se([this.value()],arguments))})})),t}function cu(){}var hu=Ii(Ae),du=Ii(we),lu=Ii(Ge);function fu(t){return bo(t)?Ne(jo(t)):function(t){return function(e){return xn(e,t)}}(t)}var pu=Wi(),gu=Wi(!0);function vu(){return[]}function yu(){return!1}var mu,bu=Ui((function(t,e){return t+e}),0),_u=Vi("ceil"),wu=Ui((function(t,e){return t/e}),1),xu=Vi("floor"),Eu=Ui((function(t,e){return t*e}),1),Lu=Vi("round"),Au=Ui((function(t,e){return t-e}),0);return jr.after=function(t,e){if("function"!=typeof e)throw new Ct(o);return t=gs(t),function(){if(--t<1)return e.apply(this,arguments)}},jr.ary=ka,jr.assign=_s,jr.assignIn=ws,jr.assignInWith=xs,jr.assignWith=Es,jr.at=Ls,jr.before=Ga,jr.bind=Fa,jr.bindAll=tu,jr.bindKey=Oa,jr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ha(t)?t:[t]},jr.chain=fa,jr.chunk=function(t,e,r){e=(r?mo(t,e,r):e===i)?1:vr(gs(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var a=0,s=0,u=n(cr(o/e));a<o;)u[s++]=ei(t,a,a+=e);return u},jr.compact=function(t){for(var e=-1,r=null==t?0:t.length,n=0,i=[];++e<r;){var o=t[e];o&&(i[n++]=o)}return i},jr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),r=arguments[0],i=t;i--;)e[i-1]=arguments[i];return Se(Ha(r)?Ci(r):[r],vn(e,1))},jr.cond=function(t){var e=null==t?0:t.length,r=ao();return t=e?Ae(t,(function(t){if("function"!=typeof t[1])throw new Ct(o);return[r(t[0]),t[1]]})):[],Zn((function(r){for(var n=-1;++n<e;){var i=t[n];if(ye(i[0],this,r))return ye(i[1],this,r)}}))},jr.conforms=function(t){return function(t){var e=Ts(t);return function(r){return un(r,t,e)}}(sn(t,1))},jr.constant=eu,jr.countBy=va,jr.create=function(t,e){var r=zr(t);return null==e?r:rn(r,e)},jr.curry=function t(e,r,n){var o=Ki(e,8,i,i,i,i,i,r=n?i:r);return o.placeholder=t.placeholder,o},jr.curryRight=function t(e,r,n){var o=Ki(e,16,i,i,i,i,i,r=n?i:r);return o.placeholder=t.placeholder,o},jr.debounce=Ta,jr.defaults=As,jr.defaultsDeep=Ss,jr.defer=Pa,jr.delay=Da,jr.difference=Io,jr.differenceBy=Bo,jr.differenceWith=Wo,jr.drop=function(t,e,r){var n=null==t?0:t.length;return n?ei(t,(e=r||e===i?1:gs(e))<0?0:e,n):[]},jr.dropRight=function(t,e,r){var n=null==t?0:t.length;return n?ei(t,0,(e=n-(e=r||e===i?1:gs(e)))<0?0:e):[]},jr.dropRightWhile=function(t,e){return t&&t.length?di(t,ao(e,3),!0,!0):[]},jr.dropWhile=function(t,e){return t&&t.length?di(t,ao(e,3),!0):[]},jr.fill=function(t,e,r,n){var o=null==t?0:t.length;return o?(r&&"number"!=typeof r&&mo(t,e,r)&&(r=0,n=o),function(t,e,r,n){var o=t.length;for((r=gs(r))<0&&(r=-r>o?0:o+r),(n=n===i||n>o?o:gs(n))<0&&(n+=o),n=r>n?0:vs(n);r<n;)t[r++]=e;return t}(t,e,r,n)):[]},jr.filter=function(t,e){return(Ha(t)?xe:gn)(t,ao(e,3))},jr.flatMap=function(t,e){return vn(La(t,e),1)},jr.flatMapDeep=function(t,e){return vn(La(t,e),h)},jr.flatMapDepth=function(t,e,r){return r=r===i?1:gs(r),vn(La(t,e),r)},jr.flatten=Vo,jr.flattenDeep=function(t){return null!=t&&t.length?vn(t,h):[]},jr.flattenDepth=function(t,e){return null!=t&&t.length?vn(t,e=e===i?1:gs(e)):[]},jr.flip=function(t){return Ki(t,512)},jr.flow=ru,jr.flowRight=nu,jr.fromPairs=function(t){for(var e=-1,r=null==t?0:t.length,n={};++e<r;){var i=t[e];n[i[0]]=i[1]}return n},jr.functions=function(t){return null==t?[]:wn(t,Ts(t))},jr.functionsIn=function(t){return null==t?[]:wn(t,Ps(t))},jr.groupBy=wa,jr.initial=function(t){return null!=t&&t.length?ei(t,0,-1):[]},jr.intersection=Zo,jr.intersectionBy=Ko,jr.intersectionWith=$o,jr.invert=Gs,jr.invertBy=Fs,jr.invokeMap=xa,jr.iteratee=ou,jr.keyBy=Ea,jr.keys=Ts,jr.keysIn=Ps,jr.map=La,jr.mapKeys=function(t,e){var r={};return e=ao(e,3),bn(t,(function(t,n,i){nn(r,e(t,n,i),t)})),r},jr.mapValues=function(t,e){var r={};return e=ao(e,3),bn(t,(function(t,n,i){nn(r,n,e(t,n,i))})),r},jr.matches=function(t){return jn(sn(t,1))},jr.matchesProperty=function(t,e){return zn(t,sn(e,1))},jr.memoize=Ra,jr.merge=Ds,jr.mergeWith=Rs,jr.method=au,jr.methodOf=su,jr.mixin=uu,jr.negate=Ma,jr.nthArg=function(t){return t=gs(t),Zn((function(e){return In(e,t)}))},jr.omit=Ms,jr.omitBy=function(t,e){return js(t,Ma(ao(e)))},jr.once=function(t){return Ga(2,t)},jr.orderBy=function(t,e,r,n){return null==t?[]:(Ha(e)||(e=null==e?[]:[e]),Ha(r=n?i:r)||(r=null==r?[]:[r]),Bn(t,e,r))},jr.over=hu,jr.overArgs=Na,jr.overEvery=du,jr.overSome=lu,jr.partial=ja,jr.partialRight=za,jr.partition=Aa,jr.pick=Ns,jr.pickBy=js,jr.property=fu,jr.propertyOf=function(t){return function(e){return null==t?i:xn(t,e)}},jr.pull=Qo,jr.pullAll=Jo,jr.pullAllBy=function(t,e,r){return t&&t.length&&e&&e.length?qn(t,e,ao(r,2)):t},jr.pullAllWith=function(t,e,r){return t&&t.length&&e&&e.length?qn(t,e,i,r):t},jr.pullAt=ta,jr.range=pu,jr.rangeRight=gu,jr.rearg=Ua,jr.reject=function(t,e){return(Ha(t)?xe:gn)(t,Ma(ao(e,3)))},jr.remove=function(t,e){var r=[];if(!t||!t.length)return r;var n=-1,i=[],o=t.length;for(e=ao(e,3);++n<o;){var a=t[n];e(a,n,t)&&(r.push(a),i.push(n))}return Hn(t,i),r},jr.rest=function(t,e){if("function"!=typeof t)throw new Ct(o);return Zn(t,e=e===i?e:gs(e))},jr.reverse=ea,jr.sampleSize=function(t,e,r){return e=(r?mo(t,e,r):e===i)?1:gs(e),(Ha(t)?$r:$n)(t,e)},jr.set=function(t,e,r){return null==t?t:Xn(t,e,r)},jr.setWith=function(t,e,r,n){return n="function"==typeof n?n:i,null==t?t:Xn(t,e,r,n)},jr.shuffle=function(t){return(Ha(t)?Xr:ti)(t)},jr.slice=function(t,e,r){var n=null==t?0:t.length;return n?(r&&"number"!=typeof r&&mo(t,e,r)?(e=0,r=n):(e=null==e?0:gs(e),r=r===i?n:gs(r)),ei(t,e,r)):[]},jr.sortBy=Sa,jr.sortedUniq=function(t){return t&&t.length?oi(t):[]},jr.sortedUniqBy=function(t,e){return t&&t.length?oi(t,ao(e,2)):[]},jr.split=function(t,e,r){return r&&"number"!=typeof r&&mo(t,e,r)&&(e=r=i),(r=r===i?f:r>>>0)?(t=bs(t))&&("string"==typeof e||null!=e&&!as(e))&&!(e=si(e))&&Qe(t)?bi(or(t),0,r):t.split(e,r):[]},jr.spread=function(t,e){if("function"!=typeof t)throw new Ct(o);return e=null==e?0:vr(gs(e),0),Zn((function(r){var n=r[e],i=bi(r,0,e);return n&&Se(i,n),ye(t,this,i)}))},jr.tail=function(t){var e=null==t?0:t.length;return e?ei(t,1,e):[]},jr.take=function(t,e,r){return t&&t.length?ei(t,0,(e=r||e===i?1:gs(e))<0?0:e):[]},jr.takeRight=function(t,e,r){var n=null==t?0:t.length;return n?ei(t,(e=n-(e=r||e===i?1:gs(e)))<0?0:e,n):[]},jr.takeRightWhile=function(t,e){return t&&t.length?di(t,ao(e,3),!1,!0):[]},jr.takeWhile=function(t,e){return t&&t.length?di(t,ao(e,3)):[]},jr.tap=function(t,e){return e(t),t},jr.throttle=function(t,e,r){var n=!0,i=!0;if("function"!=typeof t)throw new Ct(o);return es(r)&&(n="leading"in r?!!r.leading:n,i="trailing"in r?!!r.trailing:i),Ta(t,e,{leading:n,maxWait:e,trailing:i})},jr.thru=pa,jr.toArray=fs,jr.toPairs=zs,jr.toPairsIn=Us,jr.toPath=function(t){return Ha(t)?Ae(t,jo):cs(t)?[t]:Ci(No(bs(t)))},jr.toPlainObject=ms,jr.transform=function(t,e,r){var n=Ha(t),i=n||Ka(t)||hs(t);if(e=ao(e,4),null==r){var o=t&&t.constructor;r=i?n?new o:[]:es(t)&&Qa(o)?zr(Vt(t)):{}}return(i?be:bn)(t,(function(t,n,i){return e(r,t,n,i)})),r},jr.unary=function(t){return ka(t,1)},jr.union=ra,jr.unionBy=na,jr.unionWith=ia,jr.uniq=function(t){return t&&t.length?ui(t):[]},jr.uniqBy=function(t,e){return t&&t.length?ui(t,ao(e,2)):[]},jr.uniqWith=function(t,e){return e="function"==typeof e?e:i,t&&t.length?ui(t,i,e):[]},jr.unset=function(t,e){return null==t||ci(t,e)},jr.unzip=oa,jr.unzipWith=aa,jr.update=function(t,e,r){return null==t?t:hi(t,e,vi(r))},jr.updateWith=function(t,e,r,n){return n="function"==typeof n?n:i,null==t?t:hi(t,e,vi(r),n)},jr.values=Is,jr.valuesIn=function(t){return null==t?[]:qe(t,Ps(t))},jr.without=sa,jr.words=Qs,jr.wrap=function(t,e){return ja(vi(e),t)},jr.xor=ua,jr.xorBy=ca,jr.xorWith=ha,jr.zip=da,jr.zipObject=function(t,e){return pi(t||[],e||[],Jr)},jr.zipObjectDeep=function(t,e){return pi(t||[],e||[],Xn)},jr.zipWith=la,jr.entries=zs,jr.entriesIn=Us,jr.extend=ws,jr.extendWith=xs,uu(jr,jr),jr.add=bu,jr.attempt=Js,jr.camelCase=Bs,jr.capitalize=Ws,jr.ceil=_u,jr.clamp=function(t,e,r){return r===i&&(r=e,e=i),r!==i&&(r=(r=ys(r))==r?r:0),e!==i&&(e=(e=ys(e))==e?e:0),an(ys(t),e,r)},jr.clone=function(t){return sn(t,4)},jr.cloneDeep=function(t){return sn(t,5)},jr.cloneDeepWith=function(t,e){return sn(t,5,e="function"==typeof e?e:i)},jr.cloneWith=function(t,e){return sn(t,4,e="function"==typeof e?e:i)},jr.conformsTo=function(t,e){return null==e||un(t,e,Ts(e))},jr.deburr=qs,jr.defaultTo=function(t,e){return null==t||t!=t?e:t},jr.divide=wu,jr.endsWith=function(t,e,r){t=bs(t),e=si(e);var n=t.length,o=r=r===i?n:an(gs(r),0,n);return(r-=e.length)>=0&&t.slice(r,o)==e},jr.eq=Ia,jr.escape=function(t){return(t=bs(t))&&Z.test(t)?t.replace(V,$e):t},jr.escapeRegExp=function(t){return(t=bs(t))&&rt.test(t)?t.replace(et,"\\$&"):t},jr.every=function(t,e,r){var n=Ha(t)?we:fn;return r&&mo(t,e,r)&&(e=i),n(t,ao(e,3))},jr.find=ya,jr.findIndex=qo,jr.findKey=function(t,e){return Oe(t,ao(e,3),bn)},jr.findLast=ma,jr.findLastIndex=Ho,jr.findLastKey=function(t,e){return Oe(t,ao(e,3),_n)},jr.floor=xu,jr.forEach=ba,jr.forEachRight=_a,jr.forIn=function(t,e){return null==t?t:yn(t,ao(e,3),Ps)},jr.forInRight=function(t,e){return null==t?t:mn(t,ao(e,3),Ps)},jr.forOwn=function(t,e){return t&&bn(t,ao(e,3))},jr.forOwnRight=function(t,e){return t&&_n(t,ao(e,3))},jr.get=Cs,jr.gt=Ba,jr.gte=Wa,jr.has=function(t,e){return null!=t&&po(t,e,Sn)},jr.hasIn=ks,jr.head=Yo,jr.identity=iu,jr.includes=function(t,e,r,n){t=Ya(t)?t:Is(t),r=r&&!n?gs(r):0;var i=t.length;return r<0&&(r=vr(i+r,0)),us(t)?r<=i&&t.indexOf(e,r)>-1:!!i&&Pe(t,e,r)>-1},jr.indexOf=function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:gs(r);return i<0&&(i=vr(n+i,0)),Pe(t,e,i)},jr.inRange=function(t,e,r){return e=ps(e),r===i?(r=e,e=0):r=ps(r),function(t,e,r){return t>=yr(e,r)&&t<vr(e,r)}(t=ys(t),e,r)},jr.invoke=Os,jr.isArguments=qa,jr.isArray=Ha,jr.isArrayBuffer=Va,jr.isArrayLike=Ya,jr.isArrayLikeObject=Za,jr.isBoolean=function(t){return!0===t||!1===t||rs(t)&&Ln(t)==y},jr.isBuffer=Ka,jr.isDate=$a,jr.isElement=function(t){return rs(t)&&1===t.nodeType&&!os(t)},jr.isEmpty=function(t){if(null==t)return!0;if(Ya(t)&&(Ha(t)||"string"==typeof t||"function"==typeof t.splice||Ka(t)||hs(t)||qa(t)))return!t.length;var e=fo(t);if(e==x||e==C)return!t.size;if(xo(t))return!Rn(t).length;for(var r in t)if(Pt.call(t,r))return!1;return!0},jr.isEqual=function(t,e){return On(t,e)},jr.isEqualWith=function(t,e,r){var n=(r="function"==typeof r?r:i)?r(t,e):i;return n===i?On(t,e,i,r):!!n},jr.isError=Xa,jr.isFinite=function(t){return"number"==typeof t&&fr(t)},jr.isFunction=Qa,jr.isInteger=Ja,jr.isLength=ts,jr.isMap=ns,jr.isMatch=function(t,e){return t===e||Tn(t,e,uo(e))},jr.isMatchWith=function(t,e,r){return r="function"==typeof r?r:i,Tn(t,e,uo(e),r)},jr.isNaN=function(t){return is(t)&&t!=+t},jr.isNative=function(t){if(wo(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Pn(t)},jr.isNil=function(t){return null==t},jr.isNull=function(t){return null===t},jr.isNumber=is,jr.isObject=es,jr.isObjectLike=rs,jr.isPlainObject=os,jr.isRegExp=as,jr.isSafeInteger=function(t){return Ja(t)&&t>=-9007199254740991&&t<=d},jr.isSet=ss,jr.isString=us,jr.isSymbol=cs,jr.isTypedArray=hs,jr.isUndefined=function(t){return t===i},jr.isWeakMap=function(t){return rs(t)&&fo(t)==F},jr.isWeakSet=function(t){return rs(t)&&"[object WeakSet]"==Ln(t)},jr.join=function(t,e){return null==t?"":pr.call(t,e)},jr.kebabCase=Hs,jr.last=Xo,jr.lastIndexOf=function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var o=n;return r!==i&&(o=(o=gs(r))<0?vr(n+o,0):yr(o,n-1)),e==e?function(t,e,r){for(var n=r+1;n--;)if(t[n]===e)return n;return n}(t,e,o):Te(t,Re,o,!0)},jr.lowerCase=Vs,jr.lowerFirst=Ys,jr.lt=ds,jr.lte=ls,jr.max=function(t){return t&&t.length?pn(t,iu,An):i},jr.maxBy=function(t,e){return t&&t.length?pn(t,ao(e,2),An):i},jr.mean=function(t){return Me(t,iu)},jr.meanBy=function(t,e){return Me(t,ao(e,2))},jr.min=function(t){return t&&t.length?pn(t,iu,Mn):i},jr.minBy=function(t,e){return t&&t.length?pn(t,ao(e,2),Mn):i},jr.stubArray=vu,jr.stubFalse=yu,jr.stubObject=function(){return{}},jr.stubString=function(){return""},jr.stubTrue=function(){return!0},jr.multiply=Eu,jr.nth=function(t,e){return t&&t.length?In(t,gs(e)):i},jr.noConflict=function(){return oe._===this&&(oe._=jt),this},jr.noop=cu,jr.now=Ca,jr.pad=function(t,e,r){t=bs(t);var n=(e=gs(e))?ir(t):0;if(!e||n>=e)return t;var i=(e-n)/2;return Bi(hr(i),r)+t+Bi(cr(i),r)},jr.padEnd=function(t,e,r){t=bs(t);var n=(e=gs(e))?ir(t):0;return e&&n<e?t+Bi(e-n,r):t},jr.padStart=function(t,e,r){t=bs(t);var n=(e=gs(e))?ir(t):0;return e&&n<e?Bi(e-n,r)+t:t},jr.parseInt=function(t,e,r){return r||null==e?e=0:e&&(e=+e),br(bs(t).replace(nt,""),e||0)},jr.random=function(t,e,r){if(r&&"boolean"!=typeof r&&mo(t,e,r)&&(e=r=i),r===i&&("boolean"==typeof e?(r=e,e=i):"boolean"==typeof t&&(r=t,t=i)),t===i&&e===i?(t=0,e=1):(t=ps(t),e===i?(e=t,t=0):e=ps(e)),t>e){var n=t;t=e,e=n}if(r||t%1||e%1){var o=_r();return yr(t+o*(e-t+ee("1e-"+((o+"").length-1))),e)}return Vn(t,e)},jr.reduce=function(t,e,r){var n=Ha(t)?Ce:ze,i=arguments.length<3;return n(t,ao(e,4),r,i,dn)},jr.reduceRight=function(t,e,r){var n=Ha(t)?ke:ze,i=arguments.length<3;return n(t,ao(e,4),r,i,ln)},jr.repeat=function(t,e,r){return e=(r?mo(t,e,r):e===i)?1:gs(e),Yn(bs(t),e)},jr.replace=function(){var t=arguments,e=bs(t[0]);return t.length<3?e:e.replace(t[1],t[2])},jr.result=function(t,e,r){var n=-1,o=(e=yi(e,t)).length;for(o||(o=1,t=i);++n<o;){var a=null==t?i:t[jo(e[n])];a===i&&(n=o,a=r),t=Qa(a)?a.call(t):a}return t},jr.round=Lu,jr.runInContext=t,jr.sample=function(t){return(Ha(t)?Kr:Kn)(t)},jr.size=function(t){if(null==t)return 0;if(Ya(t))return us(t)?ir(t):t.length;var e=fo(t);return e==x||e==C?t.size:Rn(t).length},jr.snakeCase=Zs,jr.some=function(t,e,r){var n=Ha(t)?Ge:ri;return r&&mo(t,e,r)&&(e=i),n(t,ao(e,3))},jr.sortedIndex=function(t,e){return ni(t,e)},jr.sortedIndexBy=function(t,e,r){return ii(t,e,ao(r,2))},jr.sortedIndexOf=function(t,e){var r=null==t?0:t.length;if(r){var n=ni(t,e);if(n<r&&Ia(t[n],e))return n}return-1},jr.sortedLastIndex=function(t,e){return ni(t,e,!0)},jr.sortedLastIndexBy=function(t,e,r){return ii(t,e,ao(r,2),!0)},jr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var r=ni(t,e,!0)-1;if(Ia(t[r],e))return r}return-1},jr.startCase=Ks,jr.startsWith=function(t,e,r){return t=bs(t),r=null==r?0:an(gs(r),0,t.length),e=si(e),t.slice(r,r+e.length)==e},jr.subtract=Au,jr.sum=function(t){return t&&t.length?Ue(t,iu):0},jr.sumBy=function(t,e){return t&&t.length?Ue(t,ao(e,2)):0},jr.template=function(t,e,r){var n=jr.templateSettings;r&&mo(t,e,r)&&(e=i),t=bs(t),e=xs({},e,n,$i);var o,a,s=xs({},e.imports,n.imports,$i),u=Ts(s),c=qe(s,u),h=0,d=e.interpolate||bt,l="__p += '",f=At((e.escape||bt).source+"|"+d.source+"|"+(d===X?dt:bt).source+"|"+(e.evaluate||bt).source+"|$","g"),p="//# sourceURL="+(Pt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Xt+"]")+"\n";t.replace(f,(function(e,r,n,i,s,u){return n||(n=i),l+=t.slice(h,u).replace(_t,Xe),r&&(o=!0,l+="' +\n__e("+r+") +\n'"),s&&(a=!0,l+="';\n"+s+";\n__p += '"),n&&(l+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),h=u+e.length,e})),l+="';\n";var g=Pt.call(e,"variable")&&e.variable;if(g){if(ct.test(g))throw new wt("Invalid `variable` option passed into `_.template`")}else l="with (obj) {\n"+l+"\n}\n";l=(a?l.replace(B,""):l).replace(W,"$1").replace(q,"$1;"),l="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var v=Js((function(){return xt(u,p+"return "+l).apply(i,c)}));if(v.source=l,Xa(v))throw v;return v},jr.times=function(t,e){if((t=gs(t))<1||t>d)return[];var r=f,n=yr(t,f);e=ao(e),t-=f;for(var i=Ie(n,e);++r<t;)e(r);return i},jr.toFinite=ps,jr.toInteger=gs,jr.toLength=vs,jr.toLower=function(t){return bs(t).toLowerCase()},jr.toNumber=ys,jr.toSafeInteger=function(t){return t?an(gs(t),-9007199254740991,d):0===t?t:0},jr.toString=bs,jr.toUpper=function(t){return bs(t).toUpperCase()},jr.trim=function(t,e,r){if((t=bs(t))&&(r||e===i))return Be(t);if(!t||!(e=si(e)))return t;var n=or(t),o=or(e);return bi(n,Ve(n,o),Ye(n,o)+1).join("")},jr.trimEnd=function(t,e,r){if((t=bs(t))&&(r||e===i))return t.slice(0,ar(t)+1);if(!t||!(e=si(e)))return t;var n=or(t);return bi(n,0,Ye(n,or(e))+1).join("")},jr.trimStart=function(t,e,r){if((t=bs(t))&&(r||e===i))return t.replace(nt,"");if(!t||!(e=si(e)))return t;var n=or(t);return bi(n,Ve(n,or(e))).join("")},jr.truncate=function(t,e){var r=30,n="...";if(es(e)){var o="separator"in e?e.separator:o;r="length"in e?gs(e.length):r,n="omission"in e?si(e.omission):n}var a=(t=bs(t)).length;if(Qe(t)){var s=or(t);a=s.length}if(r>=a)return t;var u=r-ir(n);if(u<1)return n;var c=s?bi(s,0,u).join(""):t.slice(0,u);if(o===i)return c+n;if(s&&(u+=c.length-u),as(o)){if(t.slice(u).search(o)){var h,d=c;for(o.global||(o=At(o.source,bs(lt.exec(o))+"g")),o.lastIndex=0;h=o.exec(d);)var l=h.index;c=c.slice(0,l===i?u:l)}}else if(t.indexOf(si(o),u)!=u){var f=c.lastIndexOf(o);f>-1&&(c=c.slice(0,f))}return c+n},jr.unescape=function(t){return(t=bs(t))&&Y.test(t)?t.replace(H,sr):t},jr.uniqueId=function(t){var e=++Dt;return bs(t)+e},jr.upperCase=$s,jr.upperFirst=Xs,jr.each=ba,jr.eachRight=_a,jr.first=Yo,uu(jr,(mu={},bn(jr,(function(t,e){Pt.call(jr.prototype,e)||(mu[e]=t)})),mu),{chain:!1}),jr.VERSION="4.17.21",be(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){jr[t].placeholder=jr})),be(["drop","take"],(function(t,e){Br.prototype[t]=function(r){r=r===i?1:vr(gs(r),0);var n=this.__filtered__&&!e?new Br(this):this.clone();return n.__filtered__?n.__takeCount__=yr(r,n.__takeCount__):n.__views__.push({size:yr(r,f),type:t+(n.__dir__<0?"Right":"")}),n},Br.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),be(["filter","map","takeWhile"],(function(t,e){var r=e+1,n=1==r||3==r;Br.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:ao(t,3),type:r}),e.__filtered__=e.__filtered__||n,e}})),be(["head","last"],(function(t,e){var r="take"+(e?"Right":"");Br.prototype[t]=function(){return this[r](1).value()[0]}})),be(["initial","tail"],(function(t,e){var r="drop"+(e?"":"Right");Br.prototype[t]=function(){return this.__filtered__?new Br(this):this[r](1)}})),Br.prototype.compact=function(){return this.filter(iu)},Br.prototype.find=function(t){return this.filter(t).head()},Br.prototype.findLast=function(t){return this.reverse().find(t)},Br.prototype.invokeMap=Zn((function(t,e){return"function"==typeof t?new Br(this):this.map((function(r){return Gn(r,t,e)}))})),Br.prototype.reject=function(t){return this.filter(Ma(ao(t)))},Br.prototype.slice=function(t,e){t=gs(t);var r=this;return r.__filtered__&&(t>0||e<0)?new Br(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),e!==i&&(r=(e=gs(e))<0?r.dropRight(-e):r.take(e-t)),r)},Br.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Br.prototype.toArray=function(){return this.take(f)},bn(Br.prototype,(function(t,e){var r=/^(?:filter|find|map|reject)|While$/.test(e),n=/^(?:head|last)$/.test(e),o=jr[n?"take"+("last"==e?"Right":""):e],a=n||/^find/.test(e);o&&(jr.prototype[e]=function(){var e=this.__wrapped__,s=n?[1]:arguments,u=e instanceof Br,c=s[0],h=u||Ha(e),d=function(t){var e=o.apply(jr,Se([t],s));return n&&l?e[0]:e};h&&r&&"function"==typeof c&&1!=c.length&&(u=h=!1);var l=this.__chain__,f=!!this.__actions__.length,p=a&&!l,g=u&&!f;if(!a&&h){e=g?e:new Br(this);var v=t.apply(e,s);return v.__actions__.push({func:pa,args:[d],thisArg:i}),new Ir(v,l)}return p&&g?t.apply(this,s):(v=this.thru(d),p?n?v.value()[0]:v.value():v)})})),be(["pop","push","shift","sort","splice","unshift"],(function(t){var e=kt[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);jr.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var i=this.value();return e.apply(Ha(i)?i:[],t)}return this[r]((function(r){return e.apply(Ha(r)?r:[],t)}))}})),bn(Br.prototype,(function(t,e){var r=jr[e];if(r){var n=r.name+"";Pt.call(Gr,n)||(Gr[n]=[]),Gr[n].push({name:e,func:r})}})),Gr[ji(i,2).name]=[{name:"wrapper",func:i}],Br.prototype.clone=function(){var t=new Br(this.__wrapped__);return t.__actions__=Ci(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ci(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ci(this.__views__),t},Br.prototype.reverse=function(){if(this.__filtered__){var t=new Br(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Br.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,r=Ha(t),n=e<0,i=r?t.length:0,o=function(t,e,r){for(var n=-1,i=r.length;++n<i;){var o=r[n],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=yr(e,t+a);break;case"takeRight":t=vr(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=n?s:a-1,h=this.__iteratees__,d=h.length,l=0,f=yr(u,this.__takeCount__);if(!r||!n&&i==u&&f==u)return li(t,this.__actions__);var p=[];t:for(;u--&&l<f;){for(var g=-1,v=t[c+=e];++g<d;){var y=h[g],m=y.iteratee,b=y.type,_=m(v);if(2==b)v=_;else if(!_){if(1==b)continue t;break t}}p[l++]=v}return p},jr.prototype.at=ga,jr.prototype.chain=function(){return fa(this)},jr.prototype.commit=function(){return new Ir(this.value(),this.__chain__)},jr.prototype.next=function(){this.__values__===i&&(this.__values__=fs(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},jr.prototype.plant=function(t){for(var e,r=this;r instanceof Ur;){var n=Uo(r);n.__index__=0,n.__values__=i,e?o.__wrapped__=n:e=n;var o=n;r=r.__wrapped__}return o.__wrapped__=t,e},jr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Br){var e=t;return this.__actions__.length&&(e=new Br(this)),(e=e.reverse()).__actions__.push({func:pa,args:[ea],thisArg:i}),new Ir(e,this.__chain__)}return this.thru(ea)},jr.prototype.toJSON=jr.prototype.valueOf=jr.prototype.value=function(){return li(this.__wrapped__,this.__actions__)},jr.prototype.first=jr.prototype.head,ae&&(jr.prototype[ae]=function(){return this}),jr}();oe._=ur,(n=function(){return ur}.call(e,r,e,t))===i||(t.exports=n)}.call(this)},7554:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(5227),s=o(r(8941)),u=r(4524),c=r(3291),h=1.5,d=function(t){function e(){var e=t.call(this)||this;return e.x=.5,e.y=.5,e.angle=0,e.ratio=1,e.minRatio=null,e.maxRatio=null,e.nextFrame=null,e.previousState=null,e.enabled=!0,e.previousState=e.getState(),e}return i(e,t),e.from=function(t){return(new e).setState(t)},e.prototype.enable=function(){return this.enabled=!0,this},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},e.prototype.hasState=function(t){return this.x===t.x&&this.y===t.y&&this.ratio===t.ratio&&this.angle===t.angle},e.prototype.getPreviousState=function(){var t=this.previousState;return t?{x:t.x,y:t.y,angle:t.angle,ratio:t.ratio}:null},e.prototype.getBoundedRatio=function(t){var e=t;return"number"==typeof this.minRatio&&(e=Math.max(e,this.minRatio)),"number"==typeof this.maxRatio&&(e=Math.min(e,this.maxRatio)),e},e.prototype.validateState=function(t){var e={};return"number"==typeof t.x&&(e.x=t.x),"number"==typeof t.y&&(e.y=t.y),"number"==typeof t.angle&&(e.angle=t.angle),"number"==typeof t.ratio&&(e.ratio=this.getBoundedRatio(t.ratio)),e},e.prototype.isAnimated=function(){return!!this.nextFrame},e.prototype.setState=function(t){if(!this.enabled)return this;this.previousState=this.getState();var e=this.validateState(t);return"number"==typeof e.x&&(this.x=e.x),"number"==typeof e.y&&(this.y=e.y),"number"==typeof e.angle&&(this.angle=e.angle),"number"==typeof e.ratio&&(this.ratio=e.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this},e.prototype.updateState=function(t){return this.setState(t(this.getState())),this},e.prototype.animate=function(t,e,r){var n=this;if(this.enabled){var i=Object.assign({},a.ANIMATE_DEFAULTS,e),o=this.validateState(t),c="function"==typeof i.easing?i.easing:s.default[i.easing],h=Date.now(),d=this.getState(),l=function(){var t=(Date.now()-h)/i.duration;if(t>=1)return n.nextFrame=null,n.setState(o),void(n.animationCallback&&(n.animationCallback.call(null),n.animationCallback=void 0));var e=c(t),r={};"number"==typeof o.x&&(r.x=d.x+(o.x-d.x)*e),"number"==typeof o.y&&(r.y=d.y+(o.y-d.y)*e),"number"==typeof o.angle&&(r.angle=d.angle+(o.angle-d.angle)*e),"number"==typeof o.ratio&&(r.ratio=d.ratio+(o.ratio-d.ratio)*e),n.setState(r),n.nextFrame=(0,u.requestFrame)(l)};this.nextFrame?((0,u.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,u.requestFrame)(l)):l(),this.animationCallback=r}},e.prototype.animatedZoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio/t});this.animate({ratio:this.ratio/(t.factor||h)},t)}else this.animate({ratio:this.ratio/h})},e.prototype.animatedUnzoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio*t});this.animate({ratio:this.ratio*(t.factor||h)},t)}else this.animate({ratio:this.ratio*h})},e.prototype.animatedReset=function(t){this.animate({x:.5,y:.5,ratio:1,angle:0},t)},e.prototype.copy=function(){return e.from(this.getState())},e}(c.TypedEventEmitter);e.default=d},3760:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.getWheelDelta=e.getTouchCoords=e.getTouchesArray=e.getWheelCoords=e.getMouseCoords=e.getPosition=void 0;var a=r(3291);function s(t,e){var r=e.getBoundingClientRect();return{x:t.clientX-r.left,y:t.clientY-r.top}}function u(t,e){var r=o(o({},s(t,e)),{sigmaDefaultPrevented:!1,preventSigmaDefault:function(){r.sigmaDefaultPrevented=!0},original:t});return r}function c(t){for(var e=[],r=0,n=Math.min(t.length,2);r<n;r++)e.push(t[r]);return e}function h(t){if(void 0!==t.deltaY)return-3*t.deltaY/360;if(void 0!==t.detail)return t.detail/-9;throw new Error("Captor: could not extract delta from event.")}e.getPosition=s,e.getMouseCoords=u,e.getWheelCoords=function(t,e){return o(o({},u(t,e)),{delta:h(t)})},e.getTouchesArray=c,e.getTouchCoords=function(t,e){return{touches:c(t.touches).map((function(t){return s(t,e)})),original:t}},e.getWheelDelta=h;var d=function(t){function e(e,r){var n=t.call(this)||this;return n.container=e,n.renderer=r,n}return i(e,t),e}(a.TypedEventEmitter);e.default=d},9886:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var u=s(r(3760)),c=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.enabled=!0,n.draggedEvents=0,n.downStartTime=null,n.lastMouseX=null,n.lastMouseY=null,n.isMouseDown=!1,n.isMoving=!1,n.movingTimeout=null,n.startCameraState=null,n.clicks=0,n.doubleClickTimeout=null,n.currentWheelDirection=0,n.handleClick=n.handleClick.bind(n),n.handleRightClick=n.handleRightClick.bind(n),n.handleDown=n.handleDown.bind(n),n.handleUp=n.handleUp.bind(n),n.handleMove=n.handleMove.bind(n),n.handleWheel=n.handleWheel.bind(n),n.handleOut=n.handleOut.bind(n),e.addEventListener("click",n.handleClick,!1),e.addEventListener("contextmenu",n.handleRightClick,!1),e.addEventListener("mousedown",n.handleDown,!1),e.addEventListener("wheel",n.handleWheel,!1),e.addEventListener("mouseout",n.handleOut,!1),document.addEventListener("mousemove",n.handleMove,!1),document.addEventListener("mouseup",n.handleUp,!1),n}return i(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("click",this.handleClick),t.removeEventListener("contextmenu",this.handleRightClick),t.removeEventListener("mousedown",this.handleDown),t.removeEventListener("wheel",this.handleWheel),t.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},e.prototype.handleClick=function(t){var e=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(t);setTimeout((function(){e.clicks=0,e.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleRightClick=function(t){this.enabled&&this.emit("rightClick",(0,u.getMouseCoords)(t,this.container))},e.prototype.handleDoubleClick=function(t){if(this.enabled){t.preventDefault(),t.stopPropagation();var e=(0,u.getMouseCoords)(t,this.container);if(this.emit("doubleClick",e),!e.sigmaDefaultPrevented){var r=this.renderer.getCamera(),n=r.getBoundedRatio(r.getState().ratio/2.2);r.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(t,this.container),n),{easing:"quadraticInOut",duration:200})}}},e.prototype.handleDown=function(t){if(this.enabled){if(0===t.button){this.startCameraState=this.renderer.getCamera().getState();var e=(0,u.getPosition)(t,this.container),r=e.x,n=e.y;this.lastMouseX=r,this.lastMouseY=n,this.draggedEvents=0,this.downStartTime=Date.now(),this.isMouseDown=!0}this.emit("mousedown",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleUp=function(t){var e=this;if(this.enabled&&this.isMouseDown){var r=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var n=(0,u.getPosition)(t,this.container),i=n.x,o=n.y,a=r.getState(),s=r.getPreviousState()||{x:0,y:0};this.isMoving?r.animate({x:a.x+3*(a.x-s.x),y:a.y+3*(a.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===i&&this.lastMouseY===o||r.setState({x:a.x,y:a.y}),this.isMoving=!1,setTimeout((function(){e.draggedEvents=0,e.renderer.refresh()}),0),this.emit("mouseup",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e=this;if(this.enabled){var r=(0,u.getMouseCoords)(t,this.container);if(this.emit("mousemovebody",r),t.target===this.container&&this.emit("mousemove",r),!r.sigmaDefaultPrevented&&this.isMouseDown){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){e.movingTimeout=null,e.isMoving=!1}),100);var n=this.renderer.getCamera(),i=(0,u.getPosition)(t,this.container),o=i.x,a=i.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),c=this.renderer.viewportToFramedGraph({x:o,y:a}),h=s.x-c.x,d=s.y-c.y,l=n.getState(),f=l.x+h,p=l.y+d;n.setState({x:f,y:p}),this.lastMouseX=o,this.lastMouseY=a,t.preventDefault(),t.stopPropagation()}}},e.prototype.handleWheel=function(t){var e=this;if(this.enabled){t.preventDefault(),t.stopPropagation();var r=(0,u.getWheelDelta)(t);if(r){var n=(0,u.getWheelCoords)(t,this.container);if(this.emit("wheel",n),!n.sigmaDefaultPrevented){var i=r>0?1/1.7:1.7,o=this.renderer.getCamera(),a=o.getBoundedRatio(o.getState().ratio*i),s=r>0?1:-1,c=Date.now();this.currentWheelDirection===s&&this.lastWheelTriggerTime&&c-this.lastWheelTriggerTime<50||(o.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(t,this.container),a),{easing:"quadraticOut",duration:250},(function(){e.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=c)}}}},e.prototype.handleOut=function(){},e}(u.default);e.default=c},9311:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return a(e,t),e},u=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(e,"__esModule",{value:!0});var c=s(r(3760)),h=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.enabled=!0,n.isMoving=!1,n.hasMoved=!1,n.touchMode=0,n.startTouchesPositions=[],n.handleStart=n.handleStart.bind(n),n.handleLeave=n.handleLeave.bind(n),n.handleMove=n.handleMove.bind(n),e.addEventListener("touchstart",n.handleStart,!1),e.addEventListener("touchend",n.handleLeave,!1),e.addEventListener("touchcancel",n.handleLeave,!1),e.addEventListener("touchmove",n.handleMove,!1),n}return i(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("touchstart",this.handleStart),t.removeEventListener("touchend",this.handleLeave),t.removeEventListener("touchcancel",this.handleLeave),t.removeEventListener("touchmove",this.handleMove)},e.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},e.prototype.dispatchRelatedMouseEvent=function(t,e,r,n){var i=r||e.touches[0],o=new MouseEvent(t,{clientX:i.clientX,clientY:i.clientY,altKey:e.altKey,ctrlKey:e.ctrlKey});o.isFakeSigmaMouseEvent=!0,(n||this.container).dispatchEvent(o)},e.prototype.handleStart=function(t){var e=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousedown",t);var r=(0,c.getTouchesArray)(t.touches);if(this.touchMode=r.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=r.map((function(t){return(0,c.getPosition)(t,e.container)})),this.lastTouches=r,this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var n=u(this.startTouchesPositions,2),i=n[0],o=i.x,a=i.y,s=n[1],h=s.x,d=s.y;this.startTouchesAngle=Math.atan2(d-a,h-o),this.startTouchesDistance=Math.sqrt(Math.pow(h-o,2)+Math.pow(d-a,2))}this.emit("touchdown",(0,c.getTouchCoords)(t,this.container))}},e.prototype.handleLeave=function(t){if(this.enabled){switch(t.preventDefault(),0===t.touches.length&&this.lastTouches&&this.lastTouches.length&&(this.dispatchRelatedMouseEvent("mouseup",t,this.lastTouches[0],document),this.hasMoved||this.dispatchRelatedMouseEvent("click",t,this.lastTouches[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===t.touches.length){this.handleStart(t),t.preventDefault();break}case 1:if(this.isMoving){var e=this.renderer.getCamera(),r=e.getState(),n=e.getPreviousState()||{x:0,y:0};e.animate({x:r.x+3*(r.x-n.x),y:r.y+3*(r.y-n.y)},{duration:200,easing:"quadraticOut"})}this.hasMoved=!1,this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,c.getTouchCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e,r=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousemove",t);var n=(0,c.getTouchesArray)(t.touches),i=n.map((function(t){return(0,c.getPosition)(t,r.container)}));if(this.lastTouches=n,this.lastTouchesPositions=i,this.hasMoved||(this.hasMoved=i.some((function(t,e){var n=r.startTouchesPositions[e];return t.x!==n.x||t.y!==n.y}))),this.hasMoved){this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){r.isMoving=!1}),200);var o=this.renderer.getCamera(),a=this.startCameraState;switch(this.touchMode){case 1:var s=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),h=s.x,d=s.y,l=this.renderer.viewportToFramedGraph(i[0]),f=l.x,p=l.y;o.setState({x:a.x+h-f,y:a.y+d-p});break;case 2:var g={},v=i[0],y=v.x,m=v.y,b=i[1],_=b.x,w=b.y,x=Math.atan2(w-m,_-y)-this.startTouchesAngle,E=Math.hypot(w-m,_-y)/this.startTouchesDistance,L=o.getBoundedRatio(a.ratio/E);g.ratio=L,g.angle=a.angle+x;var A=this.getDimensions(),S=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:a}),C=Math.min(A.width,A.height),k=C/A.width,G=L/C;p=m-C/2/(C/A.height),f=(e=u([(f=y-C/2/k)*Math.cos(-g.angle)-p*Math.sin(-g.angle),p*Math.cos(-g.angle)+f*Math.sin(-g.angle)],2))[0],p=e[1],g.x=S.x-f*G,g.y=S.y+p*G,o.setState(g)}this.emit("touchmove",(0,c.getTouchCoords)(t,this.container))}}},e}(c.default);e.default=h},8098:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.edgeLabelsToDisplayFromNodes=e.LabelGrid=void 0;var r=function(){function t(t,e){this.key=t,this.size=e}return t.compare=function(t,e){return t.size>e.size?-1:t.size<e.size||t.key>e.key?1:-1},t}(),n=function(){function t(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return t.prototype.resizeAndClear=function(t,e){this.width=t.width,this.height=t.height,this.cellSize=e,this.columns=Math.ceil(t.width/e),this.rows=Math.ceil(t.height/e),this.cells={}},t.prototype.getIndex=function(t){var e=Math.floor(t.x/this.cellSize);return Math.floor(t.y/this.cellSize)*this.columns+e},t.prototype.add=function(t,e,n){var i=new r(t,e),o=this.getIndex(n),a=this.cells[o];a||(a=[],this.cells[o]=a),a.push(i)},t.prototype.organize=function(){for(var t in this.cells)this.cells[t].sort(r.compare)},t.prototype.getLabelsToDisplay=function(t,e){var r=this.cellSize*this.cellSize,n=r/t/t*e/r,i=Math.ceil(n),o=[];for(var a in this.cells)for(var s=this.cells[a],u=0;u<Math.min(i,s.length);u++)o.push(s[u].key);return o},t}();e.LabelGrid=n,e.edgeLabelsToDisplayFromNodes=function(t){var e=t.graph,r=t.hoveredNode,n=t.highlightedNodes,i=t.displayedNodeLabels,o=[];return e.forEachEdge((function(t,e,a,s){(a===r||s===r||n.has(a)||n.has(s)||i.has(a)&&i.has(s))&&o.push(t)})),o}},1461:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.rectangleCollidesWithQuad=e.squareCollidesWithQuad=e.getCircumscribedAlignedRectangle=e.isRectangleAligned=void 0;var i=n(r(3796)),o=!1;function a(t){return t.x1===t.x2||t.y1===t.y2}function s(t){var e=Math.sqrt(Math.pow(t.x2-t.x1,2)+Math.pow(t.y2-t.y1,2)),r=(t.y1-t.y2)*t.height/e,n=(t.x2-t.x1)*t.height/e,i={x:t.x1,y:t.y1},o={x:t.x2,y:t.y2},a={x:t.x1+r,y:t.y1+n},s={x:t.x2+r,y:t.y2+n},u=Math.min(i.x,o.x,a.x,s.x),c=Math.max(i.x,o.x,a.x,s.x),h=Math.min(i.y,o.y,a.y,s.y);return{x1:u,y1:h,x2:c,y2:h,height:Math.max(i.y,o.y,a.y,s.y)-h}}function u(t,e,r,n,i,o,a){return t<n+o&&t+r>n&&e<i+a&&e+r>i}function c(t,e,r,n,i,o,a,s){return t<i+a&&t+r>i&&e<o+s&&e+n>o}function h(t,e,r,n,i,o){var a=t<r+i/2;return e<n+o/2?a?1:2:a?3:4}e.isRectangleAligned=a,e.getCircumscribedAlignedRectangle=s,e.squareCollidesWithQuad=u,e.rectangleCollidesWithQuad=c;var d=function(){function t(t){var e;void 0===t&&(t={}),this.containers=((e={})[5460]=[],e),this.cache=null,this.lastRectangle=null;var r=Math.pow(4,5);this.data=new Float32Array((4*r-1)/3*4),t.boundaries?this.resize(t.boundaries):this.resize({x:0,y:0,width:1,height:1})}return t.prototype.add=function(t,e,r,n){return function(t,e,r,n,i,a,s){for(var c=i-s,h=a-s,d=2*s,l=0,f=0;;){if(l>=5)return r[f]=r[f]||[],void r[f].push(n);var p=4*f+4,g=4*f+8,v=4*f+12,y=4*f+16,m=u(c,h,d,e[p+0],e[p+1],e[p+2],e[p+3]),b=u(c,h,d,e[g+0],e[g+1],e[g+2],e[g+3]),_=u(c,h,d,e[v+0],e[v+1],e[v+2],e[v+3]),w=u(c,h,d,e[y+0],e[y+1],e[y+2],e[y+3]),x=[m,b,_,w].reduce((function(t,e){return e?t+1:t}),0);if(0===x&&0===l)return r[5460].push(n),void(!o&&r[5460].length>=5&&(o=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===x)throw new Error("sigma/quadtree.insertNode: no collision (level: ".concat(l,", key: ").concat(n,", x: ").concat(i,", y: ").concat(a,", size: ").concat(s,")."));if(3===x)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: ".concat(l,", key: ").concat(n,", x: ").concat(i,", y: ").concat(a,", size: ").concat(s,")."));if(x>1)return r[f]=r[f]||[],void r[f].push(n);l++,m&&(f=p),b&&(f=g),_&&(f=v),w&&(f=y)}}(0,this.data,this.containers,t,e,r,n),this},t.prototype.resize=function(t){this.clear(),this.data[0]=t.x,this.data[1]=t.y,this.data[2]=t.width,this.data[3]=t.height,function(t,e){for(var r=[0,0];r.length;){var n=r.pop(),i=r.pop(),o=4*i+4,a=4*i+8,s=4*i+12,u=4*i+16,c=e[i+0],h=e[i+1],d=e[i+2]/2,l=e[i+3]/2;e[o+0]=c,e[o+1]=h,e[o+2]=d,e[o+3]=l,e[a+0]=c+d,e[a+1]=h,e[a+2]=d,e[a+3]=l,e[s+0]=c,e[s+1]=h+l,e[s+2]=d,e[s+3]=l,e[u+0]=c+d,e[u+1]=h+l,e[u+2]=d,e[u+3]=l,n<4&&(r.push(u,n+1),r.push(s,n+1),r.push(a,n+1),r.push(o,n+1))}}(0,this.data)},t.prototype.clear=function(){var t;return this.containers=((t={})[5460]=[],t),this},t.prototype.point=function(t,e){var r=this.containers[5460].slice(),n=0,o=0;do{this.containers[n]&&(0,i.default)(r,this.containers[n]),n=4*n+4*h(t,e,this.data[n+0],this.data[n+1],this.data[n+2],this.data[n+3]),o++}while(o<=5);return r},t.prototype.rectangle=function(t,e,r,n,o){var u=this.lastRectangle;return u&&t===u.x1&&r===u.x2&&e===u.y1&&n===u.y2&&o===u.height||(this.lastRectangle={x1:t,y1:e,x2:r,y2:n,height:o},a(this.lastRectangle)||(this.lastRectangle=s(this.lastRectangle)),this.cache=function(t,e,r,n,o,a,s){for(var u,h=[0,0],d=[];h.length;){var l=h.pop(),f=h.pop();if((u=r[f])&&(0,i.default)(d,u),!(l>=5)){var p=4*f+4,g=4*f+8,v=4*f+12,y=4*f+16,m=c(n,o,a,s,e[p+0],e[p+1],e[p+2],e[p+3]),b=c(n,o,a,s,e[g+0],e[g+1],e[g+2],e[g+3]),_=c(n,o,a,s,e[v+0],e[v+1],e[v+2],e[v+3]),w=c(n,o,a,s,e[y+0],e[y+1],e[y+2],e[y+3]);m&&h.push(p,l+1),b&&h.push(g,l+1),_&&h.push(v,l+1),w&&h.push(y,l+1)}}return d}(0,this.data,this.containers,t,e,Math.abs(t-r)||Math.abs(e-n),o),(0,i.default)(this.cache,this.containers[5460])),this.cache},t}();e.default=d},9026:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sigma=e.MouseCaptor=e.QuadTree=e.Camera=void 0;var i=n(r(248));e.Sigma=i.default;var o=n(r(7554));e.Camera=o.default;var a=n(r(1461));e.QuadTree=a.default;var s=n(r(9886));e.MouseCaptor=s.default,e.default=i.default},2294:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r,n,i){var o=i.edgeLabelSize,a=i.edgeLabelFont,s=i.edgeLabelWeight,u=i.edgeLabelColor.attribute?e[i.edgeLabelColor.attribute]||i.edgeLabelColor.color||"#000":i.edgeLabelColor.color,c=e.label;if(c){t.fillStyle=u,t.font="".concat(s," ").concat(o,"px ").concat(a);var h,d,l=r.size,f=n.size,p=r.x,g=r.y,v=n.x,y=n.y,m=v-p,b=y-g,_=Math.sqrt(m*m+b*b);if(!(_<l+f)){h=((p+=m*l/_)+(v-=m*f/_))/2,d=((g+=b*l/_)+(y-=b*f/_))/2,m=v-p,b=y-g,_=Math.sqrt(m*m+b*b);var w,x=t.measureText(c).width;if(x>_){for(c+="…",x=t.measureText(c).width;x>_&&c.length>1;)c=c.slice(0,-2)+"…",x=t.measureText(c).width;if(c.length<4)return}w=m>0?b>0?Math.acos(m/_):Math.asin(b/_):b>0?Math.acos(m/_)+Math.PI:Math.asin(m/_)+Math.PI/2,t.save(),t.translate(h,d),t.rotate(w),t.fillText(c,-x/2,e.size/2+o),t.restore()}}}},4607:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(4577));e.default=function(t,e,r){var n=r.labelSize,o=r.labelFont,a=r.labelWeight;if(t.font="".concat(a," ").concat(n,"px ").concat(o),t.fillStyle="#FFF",t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=8,t.shadowColor="#000","string"==typeof e.label){var s=t.measureText(e.label).width,u=Math.round(s+5),c=Math.round(n+4),h=Math.max(e.size,n/2)+2,d=Math.asin(c/2/h),l=Math.sqrt(Math.abs(Math.pow(h,2)-Math.pow(c/2,2)));t.beginPath(),t.moveTo(e.x+l,e.y+c/2),t.lineTo(e.x+h+u,e.y+c/2),t.lineTo(e.x+h+u,e.y-c/2),t.lineTo(e.x+l,e.y-c/2),t.arc(e.x,e.y,h,d,-d),t.closePath(),t.fill()}else t.beginPath(),t.arc(e.x,e.y,e.size+2,0,2*Math.PI),t.closePath(),t.fill();t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=0,(0,i.default)(t,e,r)}},4577:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){if(e.label){var n=r.labelSize,i=r.labelFont,o=r.labelWeight,a=r.labelColor.attribute?e[r.labelColor.attribute]||r.labelColor.color||"#000":r.labelColor.color;t.fillStyle=a,t.font="".concat(o," ").concat(n,"px ").concat(i),t.fillText(e.label,e.x+e.size+3,e.y+n/3)}}},4917:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createEdgeCompoundProgram=e.AbstractEdgeProgram=void 0;var o=function(t){function e(e,r,n,i,o){return t.call(this,e,r,n,i,o)||this}return i(e,t),e}(r(7973).AbstractProgram);e.AbstractEdgeProgram=o,e.createEdgeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.computeIndices=function(){this.programs.forEach((function(t){return t.computeIndices()}))},e.prototype.render=function(t){this.programs.forEach((function(e){e.bind(),e.bufferData(),e.render(t)}))},e.prototype.process=function(t,e,r,n,i){this.programs.forEach((function(o){return o.process(t,e,r,n,i)}))},e}()}},3533:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createNodeCompoundProgram=e.AbstractNodeProgram=void 0;var o=function(t){function e(e,r,n,i,o){var a=t.call(this,e,r,n,i,o)||this;a.positionLocation=e.getAttribLocation(a.program,"a_position"),a.sizeLocation=e.getAttribLocation(a.program,"a_size"),a.colorLocation=e.getAttribLocation(a.program,"a_color");var s=e.getUniformLocation(a.program,"u_matrix");if(null===s)throw new Error("AbstractNodeProgram: error while getting matrixLocation");a.matrixLocation=s;var u=e.getUniformLocation(a.program,"u_ratio");if(null===u)throw new Error("AbstractNodeProgram: error while getting ratioLocation");a.ratioLocation=u;var c=e.getUniformLocation(a.program,"u_scale");if(null===c)throw new Error("AbstractNodeProgram: error while getting scaleLocation");return a.scaleLocation=c,a}return i(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.sizeLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.sizeLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12)},e}(r(7973).AbstractProgram);e.AbstractNodeProgram=o,e.createNodeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.render=function(t){this.programs.forEach((function(e){e.bind(),e.bufferData(),e.render(t)}))},e.prototype.process=function(t,e,r){this.programs.forEach((function(n){return n.process(t,e,r)}))},e}()}},7973:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractProgram=void 0;var n=r(1538),i=function(){function t(t,e,r,i,o){this.array=new Float32Array,this.points=i,this.attributes=o,this.gl=t,this.vertexShaderSource=e,this.fragmentShaderSource=r;var a=t.createBuffer();if(null===a)throw new Error("AbstractProgram: error while creating the buffer");this.buffer=a,t.bindBuffer(t.ARRAY_BUFFER,this.buffer),this.vertexShader=(0,n.loadVertexShader)(t,this.vertexShaderSource),this.fragmentShader=(0,n.loadFragmentShader)(t,this.fragmentShaderSource),this.program=(0,n.loadProgram)(t,[this.vertexShader,this.fragmentShader])}return t.prototype.bufferData=function(){var t=this.gl;t.bufferData(t.ARRAY_BUFFER,this.array,t.DYNAMIC_DRAW)},t.prototype.allocate=function(t){this.array=new Float32Array(this.points*this.attributes*t)},t.prototype.hasNothingToRender=function(){return 0===this.array.length},t}();e.AbstractProgram=i},4638:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(4917),o=n(r(8747)),a=n(r(2874)),s=(0,i.createEdgeCompoundProgram)([a.default,o.default]);e.default=s},8747:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(4524),s=o(r(5191)),u=o(r(7083)),c=function(t){function e(e){var r=t.call(this,e,s.default,u.default,3,9)||this;r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius"),r.barycentricLocation=e.getAttribLocation(r.program,"a_barycentric");var n=e.getUniformLocation(r.program,"u_matrix");if(null===n)throw new Error("EdgeArrowHeadProgram: error while getting matrixLocation");r.matrixLocation=n;var i=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===i)throw new Error("EdgeArrowHeadProgram: error while getting sqrtZoomRatioLocation");r.sqrtZoomRatioLocation=i;var o=e.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeArrowHeadProgram: error while getting correctionRatioLocation");return r.correctionRatioLocation=o,r.bind(),r}return i(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.radiusLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.barycentricLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,9*Float32Array.BYTES_PER_ELEMENT,20),t.vertexAttribPointer(this.barycentricLocation,3,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,24)},e.prototype.computeIndices=function(){},e.prototype.process=function(t,e,r,n,i){if(n)for(var o=27*i,s=o+27;o<s;o++)this.array[o]=0;else{var u=r.size||1,c=e.size||1,h=t.x,d=t.y,l=e.x,f=e.y,p=(0,a.floatColor)(r.color),g=l-h,v=f-d,y=g*g+v*v,m=0,b=0;y&&(m=-v*(y=1/Math.sqrt(y))*u,b=g*y*u);var _=27*i,w=this.array;w[_++]=l,w[_++]=f,w[_++]=-m,w[_++]=-b,w[_++]=c,w[_++]=p,w[_++]=1,w[_++]=0,w[_++]=0,w[_++]=l,w[_++]=f,w[_++]=-m,w[_++]=-b,w[_++]=c,w[_++]=p,w[_++]=0,w[_++]=1,w[_++]=0,w[_++]=l,w[_++]=f,w[_++]=-m,w[_++]=-b,w[_++]=c,w[_++]=p,w[_++]=0,w[_++]=0,w[_]=1}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawArrays(e.TRIANGLES,0,this.array.length/9)}},e}(r(4917).AbstractEdgeProgram);e.default=c},2874:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(4917),s=r(4524),u=o(r(8073)),c=o(r(4879)),h=function(t){function e(e){var r=t.call(this,e,u.default,c.default,4,6)||this,n=e.createBuffer();if(null===n)throw new Error("EdgeClampedProgram: error while getting resolutionLocation");r.indicesBuffer=n,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius");var i=e.getUniformLocation(r.program,"u_matrix");if(null===i)throw new Error("EdgeClampedProgram: error while getting matrixLocation");r.matrixLocation=i;var o=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===o)throw new Error("EdgeClampedProgram: error while getting cameraRatioLocation");r.sqrtZoomRatioLocation=o;var a=e.getUniformLocation(r.program,"u_correctionRatio");if(null===a)throw new Error("EdgeClampedProgram: error while getting viewportRatioLocation");return r.correctionRatioLocation=a,r.canUse32BitsIndices=(0,s.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return i(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.radiusLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,6*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,20)},e.prototype.process=function(t,e,r,n,i){if(n)for(var o=24*i,a=o+24;o<a;o++)this.array[o]=0;else{var u=r.size||1,c=t.x,h=t.y,d=e.x,l=e.y,f=e.size||1,p=(0,s.floatColor)(r.color),g=d-c,v=l-h,y=g*g+v*v,m=0,b=0;y&&(m=-v*(y=1/Math.sqrt(y))*u,b=g*y*u);var _=24*i,w=this.array;w[_++]=c,w[_++]=h,w[_++]=m,w[_++]=b,w[_++]=p,w[_++]=0,w[_++]=c,w[_++]=h,w[_++]=-m,w[_++]=-b,w[_++]=p,w[_++]=0,w[_++]=d,w[_++]=l,w[_++]=m,w[_++]=b,w[_++]=p,w[_++]=f,w[_++]=d,w[_++]=l,w[_++]=-m,w[_++]=-b,w[_++]=p,w[_]=-f}},e.prototype.computeIndices=function(){for(var t=this.array.length/6,e=t+t/2,r=new this.IndicesArray(e),n=0,i=0;n<t;n+=4)r[i++]=n,r[i++]=n+1,r[i++]=n+2,r[i++]=n+2,r[i++]=n+1,r[i++]=n+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(a.AbstractEdgeProgram);e.default=h},5857:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(4524),s=o(r(372)),u=o(r(4879)),c=function(t){function e(e){var r=t.call(this,e,s.default,u.default,4,5)||this,n=e.createBuffer();if(null===n)throw new Error("EdgeProgram: error while creating indicesBuffer");r.indicesBuffer=n,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal");var i=e.getUniformLocation(r.program,"u_matrix");if(null===i)throw new Error("EdgeProgram: error while getting matrixLocation");r.matrixLocation=i;var o=e.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeProgram: error while getting correctionRatioLocation");r.correctionRatioLocation=o;var c=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===c)throw new Error("EdgeProgram: error while getting sqrtZoomRatioLocation");return r.sqrtZoomRatioLocation=c,r.canUse32BitsIndices=(0,a.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return i(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,5*Float32Array.BYTES_PER_ELEMENT,16)},e.prototype.computeIndices=function(){for(var t=this.array.length/5,e=t+t/2,r=new this.IndicesArray(e),n=0,i=0;n<t;n+=4)r[i++]=n,r[i++]=n+1,r[i++]=n+2,r[i++]=n+2,r[i++]=n+1,r[i++]=n+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.process=function(t,e,r,n,i){if(n)for(var o=20*i,s=o+20;o<s;o++)this.array[o]=0;else{var u=r.size||1,c=t.x,h=t.y,d=e.x,l=e.y,f=(0,a.floatColor)(r.color),p=d-c,g=l-h,v=p*p+g*g,y=0,m=0;v&&(y=-g*(v=1/Math.sqrt(v))*u,m=p*v*u);var b=20*i,_=this.array;_[b++]=c,_[b++]=h,_[b++]=y,_[b++]=m,_[b++]=f,_[b++]=c,_[b++]=h,_[b++]=-y,_[b++]=-m,_[b++]=f,_[b++]=d,_[b++]=l,_[b++]=y,_[b++]=m,_[b++]=f,_[b++]=d,_[b++]=l,_[b++]=-y,_[b++]=-m,_[b]=f}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(r(4917).AbstractEdgeProgram);e.default=c},8037:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(4524),s=o(r(146)),u=o(r(4546)),c=function(t){function e(e){var r=t.call(this,e,s.default,u.default,1,4)||this;return r.bind(),r}return i(e,t),e.prototype.process=function(t,e,r){var n=this.array,i=1*r*4;if(e)return n[i++]=0,n[i++]=0,n[i++]=0,void(n[i++]=0);var o=(0,a.floatColor)(t.color);n[i++]=t.x,n[i++]=t.y,n[i++]=t.size,n[i]=o},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniform1f(this.ratioLocation,1/Math.sqrt(t.ratio)),e.uniform1f(this.scaleLocation,t.scalingRatio),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.drawArrays(e.POINTS,0,this.array.length/4)}},e}(r(3533).AbstractNodeProgram);e.default=c},6038:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(4524),s=o(r(3742)),u=o(r(6075)),c=r(7973),h=2*Math.PI/3,d=4*Math.PI/3,l=function(t){function e(e){var r=t.call(this,e,s.default,u.default,3,5)||this;r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.sizeLocation=e.getAttribLocation(r.program,"a_size"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.angleLocation=e.getAttribLocation(r.program,"a_angle");var n=e.getUniformLocation(r.program,"u_matrix");if(null===n)throw new Error("AbstractNodeProgram: error while getting matrixLocation");r.matrixLocation=n;var i=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===i)throw new Error("NodeProgram: error while getting sqrtZoomRatioLocation");r.sqrtZoomRatioLocation=i;var o=e.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("NodeProgram: error while getting correctionRatioLocation");return r.correctionRatioLocation=o,r.bind(),r}return i(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.sizeLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.angleLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.sizeLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12),t.vertexAttribPointer(this.angleLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,16)},e.prototype.process=function(t,e,r){var n=this.array,i=3*r*5;if(e)for(var o=i+15;i<o;i++)n[i]=0;else{var s=(0,a.floatColor)(t.color);n[i++]=t.x,n[i++]=t.y,n[i++]=t.size,n[i++]=s,n[i++]=0,n[i++]=t.x,n[i++]=t.y,n[i++]=t.size,n[i++]=s,n[i++]=h,n[i++]=t.x,n[i++]=t.y,n[i++]=t.size,n[i++]=s,n[i]=d}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawArrays(e.TRIANGLES,0,this.array.length/5)}},e}(c.AbstractProgram);e.default=l},7083:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";t.exports=r})()},5191:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n  float adaptedWebGLNodeRadius = a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float adaptedWebGLArrowHeadHalfWidth = adaptedWebGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (adaptedWebGLNodeRadius * unitNormal.y)\n    + db * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y + adaptedWebGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y - adaptedWebGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-adaptedWebGLNodeRadius * unitNormal.x)\n    + db * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x + adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x - adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},8073:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},4879:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";t.exports=r})()},372:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the SQRT zoom ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n\n  // Finally, we adapt the edge thickness to the "SQRT rule" in sigma (so that\n  // items are not too big when zoomed in, and not too small when zoomed out).\n  // The exact computation should be `adapted = value * zoom / sqrt(zoom)`, but\n  // it\'s simpler like this:\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasing effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';t.exports=r})()},4546:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(transparent, v_color, t);\n}\n";t.exports=r})()},146:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_ratio;\nuniform float u_scale;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size * u_ratio * u_scale * 2.0;\n\n  v_border = (1.0 / u_ratio) * (0.5 / a_size);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},6075:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_diffVector) - v_radius;\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";t.exports=r})()},3742:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>n});const n="attribute vec2 a_position;\nattribute float a_size;\nattribute float a_angle;\nattribute vec4 a_color;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\nconst float marginRatio = 1.05;\n\nvoid main() {\n  float size = a_size * u_correctionRatio * u_sqrtZoomRatio * 4.0;\n  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));\n  vec2 position = a_position + diffVector * marginRatio;\n  gl_Position = vec4(\n    (u_matrix * vec3(position, 1)).xy,\n    0,\n    1\n  );\n\n  v_border = u_correctionRatio * u_sqrtZoomRatio * u_sqrtZoomRatio;\n  v_diffVector = diffVector;\n  v_radius = size / 2.0 / marginRatio;\n\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},1538:(t,e)=>{"use strict";function r(t,e,r){var n="VERTEX"===t?e.VERTEX_SHADER:e.FRAGMENT_SHADER,i=e.createShader(n);if(null===i)throw new Error("loadShader: error while creating the shader");if(e.shaderSource(i,r),e.compileShader(i),!e.getShaderParameter(i,e.COMPILE_STATUS)){var o=e.getShaderInfoLog(i);throw e.deleteShader(i),new Error("loadShader: error while compiling the shader:\n".concat(o,"\n").concat(r))}return i}Object.defineProperty(e,"__esModule",{value:!0}),e.loadProgram=e.loadFragmentShader=e.loadVertexShader=void 0,e.loadVertexShader=function(t,e){return r("VERTEX",t,e)},e.loadFragmentShader=function(t,e){return r("FRAGMENT",t,e)},e.loadProgram=function(t,e){var r,n,i=t.createProgram();if(null===i)throw new Error("loadProgram: error while creating the program.");for(r=0,n=e.length;r<n;r++)t.attachShader(i,e[r]);if(t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS))throw t.deleteProgram(i),new Error("loadProgram: error while linking the program.");return i}},6482:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.resolveSettings=e.validateSettings=e.DEFAULT_EDGE_PROGRAM_CLASSES=e.DEFAULT_NODE_PROGRAM_CLASSES=e.DEFAULT_SETTINGS=void 0;var i=r(4524),o=n(r(4577)),a=n(r(4607)),s=n(r(2294)),u=n(r(8037)),c=n(r(5857)),h=n(r(4638));e.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,labelDensity:1,labelGridCellSize:100,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,minCameraRatio:null,maxCameraRatio:null,labelRenderer:o.default,hoverRenderer:a.default,edgeLabelRenderer:s.default,allowInvalidContainer:!1,nodeProgramClasses:{},nodeHoverProgramClasses:{},edgeProgramClasses:{}},e.DEFAULT_NODE_PROGRAM_CLASSES={circle:u.default},e.DEFAULT_EDGE_PROGRAM_CLASSES={arrow:h.default,line:c.default},e.validateSettings=function(t){if("number"!=typeof t.labelDensity||t.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");var e=t.minCameraRatio,r=t.maxCameraRatio;if("number"==typeof e&&"number"==typeof r&&r<e)throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.")},e.resolveSettings=function(t){var r=(0,i.assign)({},e.DEFAULT_SETTINGS,t);return r.nodeProgramClasses=(0,i.assign)({},e.DEFAULT_NODE_PROGRAM_CLASSES,r.nodeProgramClasses),r.edgeProgramClasses=(0,i.assign)({},e.DEFAULT_EDGE_PROGRAM_CLASSES,r.edgeProgramClasses),r}},248:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)},a=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=s(r(3796)),c=s(r(7554)),h=s(r(9886)),d=s(r(1461)),l=r(3291),f=r(4524),p=r(8098),g=r(6482),v=s(r(9311)),y=r(5132),m=r(9822);function b(t,e,r){if(!r.hasOwnProperty("x")||!r.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(e,'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));return r.color||(r.color=t.defaultNodeColor),r.label||""===r.label||(r.label=null),void 0!==r.label&&null!==r.label?r.label=""+r.label:r.label=null,r.size||(r.size=2),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("highlighted")||(r.highlighted=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=t.defaultNodeType),r.zIndex||(r.zIndex=0),r}function _(t,e,r){return r.color||(r.color=t.defaultEdgeColor),r.label||(r.label=""),r.size||(r.size=.5),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=t.defaultEdgeType),r.zIndex||(r.zIndex=0),r}var w=function(t){function e(e,r,n){void 0===n&&(n={});var i=t.call(this)||this;if(i.elements={},i.canvasContexts={},i.webGLContexts={},i.activeListeners={},i.quadtree=new d.default,i.labelGrid=new p.LabelGrid,i.nodeDataCache={},i.edgeDataCache={},i.nodesWithForcedLabels=[],i.edgesWithForcedLabels=[],i.nodeExtent={x:[0,1],y:[0,1]},i.matrix=(0,y.identity)(),i.invMatrix=(0,y.identity)(),i.correctionRatio=1,i.customBBox=null,i.normalizationFunction=(0,f.createNormalizationFunction)({x:[0,1],y:[0,1]}),i.cameraSizeRatio=1,i.width=0,i.height=0,i.pixelRatio=(0,f.getPixelRatio)(),i.displayedLabels=new Set,i.highlightedNodes=new Set,i.hoveredNode=null,i.hoveredEdge=null,i.renderFrame=null,i.renderHighlightedNodesFrame=null,i.needToProcess=!1,i.needToSoftProcess=!1,i.checkEdgesEventsFrame=null,i.nodePrograms={},i.nodeHoverPrograms={},i.edgePrograms={},i.settings=(0,g.resolveSettings)(n),(0,g.validateSettings)(i.settings),(0,f.validateGraph)(e),!(r instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");for(var o in i.graph=e,i.container=r,i.createWebGLContext("edges",{preserveDrawingBuffer:!0}),i.createCanvasContext("edgeLabels"),i.createWebGLContext("nodes"),i.createCanvasContext("labels"),i.createCanvasContext("hovers"),i.createWebGLContext("hoverNodes"),i.createCanvasContext("mouse"),i.webGLContexts){var a=i.webGLContexts[o];a.blendFunc(a.ONE,a.ONE_MINUS_SRC_ALPHA),a.enable(a.BLEND)}for(var s in i.settings.nodeProgramClasses){var u=i.settings.nodeProgramClasses[s];i.nodePrograms[s]=new u(i.webGLContexts.nodes,i);var l=u;s in i.settings.nodeHoverProgramClasses&&(l=i.settings.nodeHoverProgramClasses[s]),i.nodeHoverPrograms[s]=new l(i.webGLContexts.hoverNodes,i)}for(var s in i.settings.edgeProgramClasses){var m=i.settings.edgeProgramClasses[s];i.edgePrograms[s]=new m(i.webGLContexts.edges,i)}return i.resize(),i.camera=new c.default,i.bindCameraHandlers(),i.mouseCaptor=new h.default(i.elements.mouse,i),i.touchCaptor=new v.default(i.elements.mouse,i),i.bindEventHandlers(),i.bindGraphHandlers(),i.handleSettingsUpdate(),i.process(),i.render(),i}return i(e,t),e.prototype.createCanvas=function(t){var e=(0,f.createElement)("canvas",{position:"absolute"},{class:"sigma-".concat(t)});return this.elements[t]=e,this.container.appendChild(e),e},e.prototype.createCanvasContext=function(t){var e=this.createCanvas(t);return this.canvasContexts[t]=e.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},e.prototype.createWebGLContext=function(t,e){var r,n=this.createCanvas(t),i=o({preserveDrawingBuffer:!1,antialias:!1},e||{});return(r=n.getContext("webgl2",i))||(r=n.getContext("webgl",i)),r||(r=n.getContext("experimental-webgl",i)),this.webGLContexts[t]=r,this},e.prototype.bindCameraHandlers=function(){var t=this;return this.activeListeners.camera=function(){t._scheduleRefresh()},this.camera.on("updated",this.activeListeners.camera),this},e.prototype.mouseIsOnNode=function(t,e,r){var n=t.x,i=t.y,o=e.x,a=e.y;return n>o-r&&n<o+r&&i>a-r&&i<a+r&&Math.sqrt(Math.pow(n-o,2)+Math.pow(i-a,2))<r},e.prototype.getQuadNodes=function(t){var e=this.viewportToFramedGraph(t);return this.quadtree.point(e.x,1-e.y)},e.prototype.getNodeAtPosition=function(t){for(var e=t.x,r=t.y,n=this.getQuadNodes(t),i=1/0,o=null,a=0,s=n.length;a<s;a++){var u=n[a],c=this.nodeDataCache[u],h=this.framedGraphToViewport(c),d=this.scaleSize(c.size);if(!c.hidden&&this.mouseIsOnNode(t,h,d)){var l=Math.sqrt(Math.pow(e-h.x,2)+Math.pow(r-h.y,2));l<i&&(i=l,o=u)}}return o},e.prototype.bindEventHandlers=function(){var t=this;this.activeListeners.handleResize=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},window.addEventListener("resize",this.activeListeners.handleResize),this.activeListeners.handleMove=function(e){var r={event:e,preventSigmaDefault:function(){e.preventSigmaDefault()}},n=t.getNodeAtPosition(e);if(n&&t.hoveredNode!==n&&!t.nodeDataCache[n].hidden)return t.hoveredNode&&t.emit("leaveNode",o(o({},r),{node:t.hoveredNode})),t.hoveredNode=n,t.emit("enterNode",o(o({},r),{node:n})),void t.scheduleHighlightedNodesRender();if(t.hoveredNode){var i=t.nodeDataCache[t.hoveredNode],a=t.framedGraphToViewport(i),s=t.scaleSize(i.size);if(!t.mouseIsOnNode(e,a,s)){var u=t.hoveredNode;return t.hoveredNode=null,t.emit("leaveNode",o(o({},r),{node:u})),void t.scheduleHighlightedNodesRender()}}!0===t.settings.enableEdgeHoverEvents?t.checkEdgeHoverEvents(r):"debounce"===t.settings.enableEdgeHoverEvents&&(t.checkEdgesEventsFrame||(t.checkEdgesEventsFrame=(0,f.requestFrame)((function(){t.checkEdgeHoverEvents(r),t.checkEdgesEventsFrame=null}))))};var e=function(e){return function(r){var n={event:r,preventSigmaDefault:function(){r.preventSigmaDefault()}},i=r.original.isFakeSigmaMouseEvent?t.getNodeAtPosition(r):t.hoveredNode;if(i)return t.emit("".concat(e,"Node"),o(o({},n),{node:i}));if("wheel"===e?t.settings.enableEdgeWheelEvents:t.settings.enableEdgeClickEvents){var a=t.getEdgeAtPoint(r.x,r.y);if(a)return t.emit("".concat(e,"Edge"),o(o({},n),{edge:a}))}return t.emit("".concat(e,"Stage"),n)}};return this.activeListeners.handleClick=e("click"),this.activeListeners.handleRightClick=e("rightClick"),this.activeListeners.handleDoubleClick=e("doubleClick"),this.activeListeners.handleWheel=e("wheel"),this.activeListeners.handleDown=e("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},e.prototype.bindGraphHandlers=function(){var t=this,e=this.graph;return this.activeListeners.graphUpdate=function(){t.needToProcess=!0,t._scheduleRefresh()},this.activeListeners.softGraphUpdate=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},this.activeListeners.dropNodeGraphUpdate=function(e){delete t.nodeDataCache[e.key],t.hoveredNode===e.key&&(t.hoveredNode=null),t.activeListeners.graphUpdate()},this.activeListeners.dropEdgeGraphUpdate=function(e){delete t.edgeDataCache[e.key],t.hoveredEdge===e.key&&(t.hoveredEdge=null),t.activeListeners.graphUpdate()},this.activeListeners.clearEdgesGraphUpdate=function(){t.edgeDataCache={},t.hoveredEdge=null,t.activeListeners.graphUpdate()},this.activeListeners.clearGraphUpdate=function(){t.nodeDataCache={},t.hoveredNode=null,t.activeListeners.clearEdgesGraphUpdate()},e.on("nodeAdded",this.activeListeners.graphUpdate),e.on("nodeDropped",this.activeListeners.dropNodeGraphUpdate),e.on("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgeAdded",this.activeListeners.graphUpdate),e.on("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),e.on("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),e.on("cleared",this.activeListeners.clearGraphUpdate),this},e.prototype.unbindGraphHandlers=function(){var t=this.graph;t.removeListener("nodeAdded",this.activeListeners.graphUpdate),t.removeListener("nodeDropped",this.activeListeners.dropNodeGraphUpdate),t.removeListener("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgeAdded",this.activeListeners.graphUpdate),t.removeListener("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),t.removeListener("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),t.removeListener("cleared",this.activeListeners.clearGraphUpdate)},e.prototype.checkEdgeHoverEvents=function(t){var e=this.hoveredNode?null:this.getEdgeAtPoint(t.event.x,t.event.y);return e!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",o(o({},t),{edge:this.hoveredEdge})),e&&this.emit("enterEdge",o(o({},t),{edge:e})),this.hoveredEdge=e),this},e.prototype.getEdgeAtPoint=function(t,e){var r,n,i=this,o=this.edgeDataCache,s=this.nodeDataCache;if(!(0,m.isPixelColored)(this.webGLContexts.edges,t*this.pixelRatio,e*this.pixelRatio))return null;var u=this.viewportToGraph({x:t,y:e}),c=u.x,h=u.y,d=0;if(this.graph.someEdge((function(t,e,r,n,a,u){var c=a.x,h=a.y,l=u.x,f=u.y;if(o[t].hidden||s[r].hidden||s[n].hidden)return!1;if(c!==l||h!==f){var p=Math.sqrt(Math.pow(l-c,2)+Math.pow(f-h,2)),g=i.graphToViewport({x:c,y:h}),v=g.x,y=g.y,m=i.graphToViewport({x:l,y:f}),b=m.x,_=m.y,w=Math.sqrt(Math.pow(b-v,2)+Math.pow(_-y,2));return d=p/w,!0}})),!d)return null;var l=this.graph.filterEdges((function(t,e,r,n,a,u){return!(o[t].hidden||s[r].hidden||s[n].hidden)&&(!!(0,m.doEdgeCollideWithPoint)(c,h,a.x,a.y,u.x,u.y,o[t].size*d/i.cameraSizeRatio)||void 0)}));if(0===l.length)return null;var f=l[l.length-1],p=-1/0;try{for(var g=a(l),v=g.next();!v.done;v=g.next()){var y=v.value,b=this.graph.getEdgeAttribute(y,"zIndex");b>=p&&(f=y,p=b)}}catch(t){r={error:t}}finally{try{v&&!v.done&&(n=g.return)&&n.call(g)}finally{if(r)throw r.error}}return f},e.prototype.process=function(t){var e=this;void 0===t&&(t=!1);var r=this.graph,n=this.settings,i=this.getDimensions(),o=[1/0,-1/0],a=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(i,n.labelGridCellSize),this.highlightedNodes=new Set,this.nodeExtent=(0,f.graphExtent)(r),this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[];var s=new c.default,u=(0,f.matrixFromCamera)(s.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,f.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var h={},d=r.nodes(),l=0,p=d.length;l<p;l++){var g=d[l],v=Object.assign({},r.getNodeAttributes(g));n.nodeReducer&&(v=n.nodeReducer(g,v)),h[(m=b(this.settings,g,v)).type]=(h[m.type]||0)+1,this.nodeDataCache[g]=m,this.normalizationFunction.applyTo(m),m.forceLabel&&this.nodesWithForcedLabels.push(g),this.settings.zIndex&&(m.zIndex<o[0]&&(o[0]=m.zIndex),m.zIndex>o[1]&&(o[1]=m.zIndex))}for(var y in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for node type "'.concat(y,'"!'));t||this.nodePrograms[y].allocate(h[y]||0),h[y]=0}for(this.settings.zIndex&&o[0]!==o[1]&&(d=(0,f.zIndexOrdering)(o,(function(t){return e.nodeDataCache[t].zIndex}),d)),l=0,p=d.length;l<p;l++){g=d[l];var m=this.nodeDataCache[g];this.quadtree.add(g,m.x,1-m.y,m.size/this.width),"string"!=typeof m.label||m.hidden||this.labelGrid.add(g,m.size,this.framedGraphToViewport(m,{matrix:u}));var w=this.nodePrograms[m.type];if(!w)throw new Error('Sigma: could not find a suitable program for node type "'.concat(m.type,'"!'));w.process(m,m.hidden,h[m.type]++),m.highlighted&&!m.hidden&&this.highlightedNodes.add(g)}this.labelGrid.organize();var x={},E=r.edges();for(l=0,p=E.length;l<p;l++){var L=E[l];v=Object.assign({},r.getEdgeAttributes(L)),n.edgeReducer&&(v=n.edgeReducer(L,v)),x[(m=_(this.settings,0,v)).type]=(x[m.type]||0)+1,this.edgeDataCache[L]=m,m.forceLabel&&!m.hidden&&this.edgesWithForcedLabels.push(L),this.settings.zIndex&&(m.zIndex<a[0]&&(a[0]=m.zIndex),m.zIndex>a[1]&&(a[1]=m.zIndex))}for(var y in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for edge type "'.concat(y,'"!'));t||this.edgePrograms[y].allocate(x[y]||0),x[y]=0}for(this.settings.zIndex&&a[0]!==a[1]&&(E=(0,f.zIndexOrdering)(a,(function(t){return e.edgeDataCache[t].zIndex}),E)),l=0,p=E.length;l<p;l++){L=E[l],m=this.edgeDataCache[L];var A=r.extremities(L),S=this.nodeDataCache[A[0]],C=this.nodeDataCache[A[1]],k=m.hidden||S.hidden||C.hidden;this.edgePrograms[m.type].process(S,C,m,k,x[m.type]++)}for(var y in this.edgePrograms){var G=this.edgePrograms[y];t||"function"!=typeof G.computeIndices||G.computeIndices()}return this},e.prototype.handleSettingsUpdate=function(){return this.camera.minRatio=this.settings.minCameraRatio,this.camera.maxRatio=this.settings.maxCameraRatio,this.camera.setState(this.camera.validateState(this.camera.getState())),this},e.prototype._refresh=function(){return this.needToProcess?this.process():this.needToSoftProcess&&this.process(!0),this.needToProcess=!1,this.needToSoftProcess=!1,this.render(),this},e.prototype._scheduleRefresh=function(){var t=this;return this.renderFrame||(this.renderFrame=(0,f.requestFrame)((function(){t._refresh(),t.renderFrame=null}))),this},e.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var t=this.camera.getState(),e=this.labelGrid.getLabelsToDisplay(t.ratio,this.settings.labelDensity);(0,u.default)(e,this.nodesWithForcedLabels),this.displayedLabels=new Set;for(var r=this.canvasContexts.labels,n=0,i=e.length;n<i;n++){var a=e[n],s=this.nodeDataCache[a];if(!this.displayedLabels.has(a)&&!s.hidden){var c=this.framedGraphToViewport(s),h=c.x,d=c.y,l=this.scaleSize(s.size);!s.forceLabel&&l<this.settings.labelRenderedSizeThreshold||h<-150||h>this.width+150||d<-50||d>this.height+50||(this.displayedLabels.add(a),this.settings.labelRenderer(r,o(o({key:a},s),{size:l,x:h,y:d}),this.settings))}}return this},e.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var t=this.canvasContexts.edgeLabels;t.clearRect(0,0,this.width,this.height);for(var e=(0,p.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedLabels,highlightedNodes:this.highlightedNodes}).concat(this.edgesWithForcedLabels),r=new Set,n=0,i=e.length;n<i;n++){var a=e[n],s=this.graph.extremities(a),u=this.nodeDataCache[s[0]],c=this.nodeDataCache[s[1]],h=this.edgeDataCache[a];r.has(a)||h.hidden||u.hidden||c.hidden||(this.settings.edgeLabelRenderer(t,o(o({key:a},h),{size:this.scaleSize(h.size)}),o(o(o({key:s[0]},u),this.framedGraphToViewport(u)),{size:this.scaleSize(u.size)}),o(o(o({key:s[1]},c),this.framedGraphToViewport(c)),{size:this.scaleSize(c.size)}),this.settings),r.add(a))}return this},e.prototype.renderHighlightedNodes=function(){var t=this,e=this.canvasContexts.hovers;e.clearRect(0,0,this.width,this.height);var r=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&r.push(this.hoveredNode),this.highlightedNodes.forEach((function(e){e!==t.hoveredNode&&r.push(e)})),r.forEach((function(r){return function(r){var n=t.nodeDataCache[r],i=t.framedGraphToViewport(n),a=i.x,s=i.y,u=t.scaleSize(n.size);t.settings.hoverRenderer(e,o(o({key:r},n),{size:u,x:a,y:s}),t.settings)}(r)}));var n={};for(var i in r.forEach((function(e){var r=t.nodeDataCache[e].type;n[r]=(n[r]||0)+1})),this.nodeHoverPrograms)this.nodeHoverPrograms[i].allocate(n[i]||0),n[i]=0;for(var i in r.forEach((function(e){var r=t.nodeDataCache[e];t.nodeHoverPrograms[r.type].process(r,r.hidden,n[r.type]++)})),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.nodeHoverPrograms){var a=this.nodeHoverPrograms[i];a.bind(),a.bufferData(),a.render({matrix:this.matrix,width:this.width,height:this.height,ratio:this.camera.ratio,correctionRatio:this.correctionRatio/this.camera.ratio,scalingRatio:this.pixelRatio})}},e.prototype.scheduleHighlightedNodesRender=function(){var t=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,f.requestFrame)((function(){t.renderHighlightedNodesFrame=null,t.renderHighlightedNodes(),t.renderEdgeLabels()})))},e.prototype.render=function(){var t=this;this.emit("beforeRender");var e=function(){return t.emit("afterRender"),t};if(this.renderFrame&&((0,f.cancelFrame)(this.renderFrame),this.renderFrame=null,this.needToProcess=!1,this.needToSoftProcess=!1),this.resize(),this.clear(),this.updateCachedValues(),!this.graph.order)return e();var r=this.mouseCaptor,n=this.camera.isAnimated()||r.isMoving||r.draggedEvents||r.currentWheelDirection,i=this.camera.getState(),o=this.getDimensions(),a=this.getGraphDimensions(),s=this.getSetting("stagePadding")||0;for(var u in this.matrix=(0,f.matrixFromCamera)(i,o,a,s),this.invMatrix=(0,f.matrixFromCamera)(i,o,a,s,!0),this.correctionRatio=(0,f.getMatrixImpact)(this.matrix,i,o),this.nodePrograms)(c=this.nodePrograms[u]).bind(),c.bufferData(),c.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio});if(!this.settings.hideEdgesOnMove||!n)for(var u in this.edgePrograms){var c;(c=this.edgePrograms[u]).bind(),c.bufferData(),c.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio})}return this.settings.hideLabelsOnMove&&n||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes()),e()},e.prototype.updateCachedValues=function(){var t=this.camera.getState().ratio;this.cameraSizeRatio=Math.sqrt(t)},e.prototype.getCamera=function(){return this.camera},e.prototype.getContainer=function(){return this.container},e.prototype.getGraph=function(){return this.graph},e.prototype.setGraph=function(t){t!==this.graph&&(this.unbindGraphHandlers(),this.nodeDataCache={},this.edgeDataCache={},this.displayedLabels.clear(),this.highlightedNodes.clear(),this.hoveredNode=null,this.hoveredEdge=null,this.nodesWithForcedLabels.length=0,this.edgesWithForcedLabels.length=0,null!==this.checkEdgesEventsFrame&&((0,f.cancelFrame)(this.checkEdgesEventsFrame),this.checkEdgesEventsFrame=null),this.graph=t,this.bindGraphHandlers(),this.process(),this.render())},e.prototype.getMouseCaptor=function(){return this.mouseCaptor},e.prototype.getTouchCaptor=function(){return this.touchCaptor},e.prototype.getDimensions=function(){return{width:this.width,height:this.height}},e.prototype.getGraphDimensions=function(){var t=this.customBBox||this.nodeExtent;return{width:t.x[1]-t.x[0]||1,height:t.y[1]-t.y[0]||1}},e.prototype.getNodeDisplayData=function(t){var e=this.nodeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getEdgeDisplayData=function(t){var e=this.edgeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getSettings=function(){return o({},this.settings)},e.prototype.getSetting=function(t){return this.settings[t]},e.prototype.setSetting=function(t,e){return this.settings[t]=e,(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.updateSetting=function(t,e){return this.settings[t]=e(this.settings[t]),(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.resize=function(){var t=this.width,e=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.pixelRatio=(0,f.getPixelRatio)(),0===this.width){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.width=1}if(0===this.height){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.height=1}if(t===this.width&&e===this.height)return this;for(var r in this.emit("resize"),this.elements){var n=this.elements[r];n.style.width=this.width+"px",n.style.height=this.height+"px"}for(var r in this.canvasContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),1!==this.pixelRatio&&this.canvasContexts[r].scale(this.pixelRatio,this.pixelRatio);for(var r in this.webGLContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),this.webGLContexts[r].viewport(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio);return this},e.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},e.prototype.refresh=function(){return this.needToProcess=!0,this._refresh(),this},e.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.getViewportZoomedState=function(t,e){var r=this.camera.getState(),n=r.ratio,i=r.angle,o=r.x,a=r.y,s=e/n,u={x:this.width/2,y:this.height/2},c=this.viewportToFramedGraph(t),h=this.viewportToFramedGraph(u);return{angle:i,x:(c.x-h.x)*(1-s)+o,y:(c.y-h.y)*(1-s)+a,ratio:e}},e.prototype.viewRectangle=function(){var t=0*this.width/8,e=0*this.height/8,r=this.viewportToFramedGraph({x:0-t,y:0-e}),n=this.viewportToFramedGraph({x:this.width+t,y:0-e}),i=this.viewportToFramedGraph({x:0,y:this.height+e});return{x1:r.x,y1:r.y,x2:n.x,y2:n.y,height:n.y-i.y}},e.prototype.framedGraphToViewport=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!!e.graphDimensions,n=e.matrix?e.matrix:r?(0,f.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0):this.matrix,i=(0,y.multiplyVec2)(n,t);return{x:(1+i.x)*this.width/2,y:(1-i.y)*this.height/2}},e.prototype.viewportToFramedGraph=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!e.graphDimensions,n=e.matrix?e.matrix:r?(0,f.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,i=(0,y.multiplyVec2)(n,{x:t.x/this.width*2-1,y:1-t.y/this.height*2});return isNaN(i.x)&&(i.x=0),isNaN(i.y)&&(i.y=0),i},e.prototype.viewportToGraph=function(t,e){return void 0===e&&(e={}),this.normalizationFunction.inverse(this.viewportToFramedGraph(t,e))},e.prototype.graphToViewport=function(t,e){return void 0===e&&(e={}),this.framedGraphToViewport(this.normalizationFunction(t),e)},e.prototype.getBBox=function(){return(0,f.graphExtent)(this.graph)},e.prototype.getCustomBBox=function(){return this.customBBox},e.prototype.setCustomBBox=function(t){return this.customBBox=t,this._scheduleRefresh(),this},e.prototype.kill=function(){this.emit("kill"),this.removeAllListeners(),this.camera.removeListener("updated",this.activeListeners.camera),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),this.unbindGraphHandlers(),this.quadtree=new d.default,this.nodeDataCache={},this.edgeDataCache={},this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[],this.highlightedNodes.clear(),this.renderFrame&&((0,f.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,f.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var t=this.container;t.firstChild;)t.removeChild(t.firstChild)},e.prototype.scaleSize=function(t){return t/this.cameraSizeRatio},e.prototype.getCanvases=function(){return o({},this.elements)},e}(l.TypedEventEmitter);e.default=w},3291:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.TypedEventEmitter=void 0;var o=function(t){function e(){var e=t.call(this)||this;return e.rawEmitter=e,e}return i(e,t),e}(r(7187).EventEmitter);e.TypedEventEmitter=o},5227:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.animateNodes=e.ANIMATE_DEFAULTS=void 0;var i=r(4524),o=n(r(8941));e.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},e.animateNodes=function(t,r,n,a){var s=Object.assign({},e.ANIMATE_DEFAULTS,n),u="function"==typeof s.easing?s.easing:o.default[s.easing],c=Date.now(),h={};for(var d in r){var l=r[d];for(var f in h[d]={},l)h[d][f]=t.getNodeAttribute(d,f)}var p=null,g=function(){p=null;var e=(Date.now()-c)/s.duration;if(e>=1){for(var n in r){var o=r[n];for(var d in o)t.setNodeAttribute(n,d,o[d])}"function"==typeof a&&a()}else{for(var n in e=u(e),r){o=r[n];var l=h[n];for(var d in o)t.setNodeAttribute(n,d,o[d]*e+l[d]*(1-e))}p=(0,i.requestFrame)(g)}};return g(),function(){p&&(0,i.cancelFrame)(p)}}},8109:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HTML_COLORS=void 0,e.HTML_COLORS={black:"#000000",silver:"#C0C0C0",gray:"#808080",grey:"#808080",white:"#FFFFFF",maroon:"#800000",red:"#FF0000",purple:"#800080",fuchsia:"#FF00FF",green:"#008000",lime:"#00FF00",olive:"#808000",yellow:"#FFFF00",navy:"#000080",blue:"#0000FF",teal:"#008080",aqua:"#00FFFF",darkblue:"#00008B",mediumblue:"#0000CD",darkgreen:"#006400",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",springgreen:"#00FF7F",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",rebeccapurple:"#663399",mediumaquamarine:"#66CDAA",dimgray:"#696969",dimgrey:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",slategrey:"#708090",lightslategray:"#778899",lightslategrey:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370DB",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",palevioletred:"#DB7093",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",lightyellow:"#FFFFE0",ivory:"#FFFFF0"}},8941:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cubicInOut=e.cubicOut=e.cubicIn=e.quadraticInOut=e.quadraticOut=e.quadraticIn=e.linear=void 0,e.linear=function(t){return t},e.quadraticIn=function(t){return t*t},e.quadraticOut=function(t){return t*(2-t)},e.quadraticInOut=function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)},e.cubicIn=function(t){return t*t*t},e.cubicOut=function(t){return--t*t*t+1},e.cubicInOut=function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)};var r={linear:e.linear,quadraticIn:e.quadraticIn,quadraticOut:e.quadraticOut,quadraticInOut:e.quadraticInOut,cubicIn:e.cubicIn,cubicOut:e.cubicOut,cubicInOut:e.cubicInOut};e.default=r},9822:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.doEdgeCollideWithPoint=e.isPixelColored=void 0,e.isPixelColored=function(t,e,r){var n=new Uint8Array(4);return t.readPixels(e,t.drawingBufferHeight-r,1,1,t.RGBA,t.UNSIGNED_BYTE,n),n[3]>0},e.doEdgeCollideWithPoint=function(t,e,r,n,i,o,a){return!(t<r-a&&t<i-a||e<n-a&&e<o-a||t>r+a&&t>i+a||e>n+a&&e>o+a||!(Math.abs((i-r)*(n-e)-(r-t)*(o-n))/Math.sqrt(Math.pow(i-r,2)+Math.pow(o-n,2))<a/2))}},4524:function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.validateGraph=e.canUse32BitsIndices=e.extractPixel=e.getMatrixImpact=e.matrixFromCamera=e.getCorrectionRatio=e.floatColor=e.floatArrayColor=e.parseColor=e.zIndexOrdering=e.createNormalizationFunction=e.graphExtent=e.getPixelRatio=e.createElement=e.cancelFrame=e.requestFrame=e.assignDeep=e.assign=e.isPlainObject=void 0;var o=i(r(6186)),a=r(5132),s=r(8109);function u(t){return"object"==typeof t&&null!==t&&t.constructor===Object}e.isPlainObject=u,e.assign=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];t=t||{};for(var n=0,i=e.length;n<i;n++){var o=e[n];o&&Object.assign(t,o)}return t},e.assignDeep=function t(e){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];e=e||{};for(var i=0,o=r.length;i<o;i++){var a=r[i];if(a)for(var s in a)u(a[s])?e[s]=t(e[s],a[s]):e[s]=a[s]}return e},e.requestFrame="undefined"!=typeof requestAnimationFrame?function(t){return requestAnimationFrame(t)}:function(t){return setTimeout(t,0)},e.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(t){return cancelAnimationFrame(t)}:function(t){return clearTimeout(t)},e.createElement=function(t,e,r){var n=document.createElement(t);if(e)for(var i in e)n.style[i]=e[i];if(r)for(var i in r)n.setAttribute(i,r[i]);return n},e.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},e.graphExtent=function(t){if(!t.order)return{x:[0,1],y:[0,1]};var e=1/0,r=-1/0,n=1/0,i=-1/0;return t.forEachNode((function(t,o){var a=o.x,s=o.y;a<e&&(e=a),a>r&&(r=a),s<n&&(n=s),s>i&&(i=s)})),{x:[e,r],y:[n,i]}},e.createNormalizationFunction=function(t){var e=n(t.x,2),r=e[0],i=e[1],o=n(t.y,2),a=o[0],s=o[1],u=Math.max(i-r,s-a),c=(i+r)/2,h=(s+a)/2;(0===u||Math.abs(u)===1/0||isNaN(u))&&(u=1),isNaN(c)&&(c=0),isNaN(h)&&(h=0);var d=function(t){return{x:.5+(t.x-c)/u,y:.5+(t.y-h)/u}};return d.applyTo=function(t){t.x=.5+(t.x-c)/u,t.y=.5+(t.y-h)/u},d.inverse=function(t){return{x:c+u*(t.x-.5),y:h+u*(t.y-.5)}},d.ratio=u,d},e.zIndexOrdering=function(t,e,r){return r.sort((function(t,r){var n=e(t)||0,i=e(r)||0;return n<i?-1:n>i?1:0}))};var c=new Int8Array(4),h=new Int32Array(c.buffer,0,1),d=new Float32Array(c.buffer,0,1),l=/^\s*rgba?\s*\(/,f=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function p(t){var e=0,r=0,n=0,i=1;if("#"===t[0])4===t.length?(e=parseInt(t.charAt(1)+t.charAt(1),16),r=parseInt(t.charAt(2)+t.charAt(2),16),n=parseInt(t.charAt(3)+t.charAt(3),16)):(e=parseInt(t.charAt(1)+t.charAt(2),16),r=parseInt(t.charAt(3)+t.charAt(4),16),n=parseInt(t.charAt(5)+t.charAt(6),16)),9===t.length&&(i=parseInt(t.charAt(7)+t.charAt(8),16)/255);else if(l.test(t)){var o=t.match(f);o&&(e=+o[1],r=+o[2],n=+o[3],o[4]&&(i=+o[4]))}return{r:e,g:r,b:n,a:i}}e.parseColor=p;var g={};for(var v in s.HTML_COLORS)g[v]=y(s.HTML_COLORS[v]),g[s.HTML_COLORS[v]]=g[v];function y(t){if(void 0!==g[t])return g[t];var e=p(t),r=e.r,n=e.g,i=e.b,o=e.a;o=255*o|0,h[0]=4278190079&(o<<24|i<<16|n<<8|r);var a=d[0];return g[t]=a,a}function m(t,e){var r=t.height/t.width,n=e.height/e.width;return r<1&&n>1||r>1&&n<1?1:Math.min(Math.max(n,1/n),Math.max(1/r,r))}e.floatArrayColor=function(t){var e=p(t=s.HTML_COLORS[t]||t),r=e.r,n=e.g,i=e.b,o=e.a;return new Float32Array([r/255,n/255,i/255,o])},e.floatColor=y,e.getCorrectionRatio=m,e.matrixFromCamera=function(t,e,r,n,i){var o=t.angle,s=t.ratio,u=t.x,c=t.y,h=e.width,d=e.height,l=(0,a.identity)(),f=Math.min(h,d)-2*n,p=m(e,r);return i?((0,a.multiply)(l,(0,a.translate)((0,a.identity)(),u,c)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),s)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),h/f/2/p,d/f/2/p))):((0,a.multiply)(l,(0,a.scale)((0,a.identity)(),f/h*2*p,f/d*2*p)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),-o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),1/s)),(0,a.multiply)(l,(0,a.translate)((0,a.identity)(),-u,-c))),l},e.getMatrixImpact=function(t,e,r){var n=(0,a.multiplyVec2)(t,{x:Math.cos(e.angle),y:Math.sin(e.angle)},0),i=n.x,o=n.y;return 1/Math.sqrt(Math.pow(i,2)+Math.pow(o,2))/r.width},e.extractPixel=function(t,e,r,n){var i=n||new Uint8Array(4);return t.readPixels(e,r,1,1,t.RGBA,t.UNSIGNED_BYTE,i),i},e.canUse32BitsIndices=function(t){return"undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||!!t.getExtension("OES_element_index_uint")},e.validateGraph=function(t){if(!(0,o.default)(t))throw new Error("Sigma: invalid graph instance.");t.forEachNode((function(t,e){if(!Number.isFinite(e.x)||!Number.isFinite(e.y))throw new Error("Sigma: Coordinates of node ".concat(t," are invalid. A node must have a numeric 'x' and 'y' attribute."))}))}},5132:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.multiplyVec2=e.multiply=e.translate=e.rotate=e.scale=e.identity=void 0,e.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},e.scale=function(t,e,r){return t[0]=e,t[4]="number"==typeof r?r:e,t},e.rotate=function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[3]=-r,t[4]=n,t},e.translate=function(t,e,r){return t[6]=e,t[7]=r,t},e.multiply=function(t,e){var r=t[0],n=t[1],i=t[2],o=t[3],a=t[4],s=t[5],u=t[6],c=t[7],h=t[8],d=e[0],l=e[1],f=e[2],p=e[3],g=e[4],v=e[5],y=e[6],m=e[7],b=e[8];return t[0]=d*r+l*o+f*u,t[1]=d*n+l*a+f*c,t[2]=d*i+l*s+f*h,t[3]=p*r+g*o+v*u,t[4]=p*n+g*a+v*c,t[5]=p*i+g*s+v*h,t[6]=y*r+m*o+b*u,t[7]=y*n+m*a+b*c,t[8]=y*i+m*s+b*h,t},e.multiplyVec2=function(t,e,r){void 0===r&&(r=1);var n=t[0],i=t[1],o=t[3],a=t[4],s=t[6],u=t[7],c=e.x,h=e.y;return{x:c*n+h*o+s*r,y:c*i+h*a+u*r}}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var n={};return(()=>{"use strict";r.r(n),r.d(n,{SigmaGraphCreator:()=>l});var t=r(2698),e=r(9026),i=r.n(e);var o=r(6038);const a="#808080",s={allowInvalidContainer:!0,enableEdgeClickEvents:!0,renderLabels:!1,enableEdgeHoverEvents:!0,nodeProgramClasses:{base:r.n(o)()}},u={type:"arrow",size:2,color:a};var c=r(1687),h=r(6486),d=r.n(h);class l{constructor(e){this.rootElement=e,this.sigmaContainer=e.querySelector("#sigma-container"),this.searchInput=e.querySelector("#search-input"),this.search=e.querySelector("#search"),this.nodesForGivenTrainId=new Map,this.nodesForGivenRouteId=new Map,this.sourceTrainIDMap=new Map,this.targetTrainIDMap=new Map,this.trainIDMap=new Map,this.graph=new t.DirectedGraph,this.getInitGraph(this.graph),this.searchInput.addEventListener("input",(t=>{this.windowInput=t.target.value,""!==this.windowInput&&(void 0!==this.renderer&&this.destroySigmaGraph(),this.createSmallGraph(this.graph,parseInt(this.windowInput)))}))}selectTrain(t){this.searchInput.addEventListener("number",(e=>{e!==this.windowInput&&(e=this.windowInput),e&&this.createSmallGraph(t,e)}))}howManyNeighbors(t,e,r){let n=e;for(let e=0;e<r;e++)n=this.getNeighborIds(t,n);return n}getNeighborIds(t,e){let r=new Set;return d().each([...e],(e=>{d().each([...this.nodesForGivenTrainId.get(e)],(e=>{t.forEachNeighbor(e,(e=>r.add(t.getNodeAttribute(e,"t"))))}))})),d().uniq([...r])}addFilteredGraphNodes(t,e,r){let n=this.howManyNeighbors(t,e,r);return this.filterNodesforTrain(n)}filterNodesforTrain(t){let e=new Set;return d().each([...t],(t=>{d().each([...this.nodesForGivenTrainId.get(t)],(t=>e.add(t)))})),e}createSigmaGraph(t,e){console.time("import"),this.unsafeImport(t,e),console.timeEnd("import"),this.selectTrain(e)}createSmallGraph(t,e){console.time("filter");let r=new Set;r.add(e);const n=this.addFilteredGraphNodes(t,r,2),o=(0,c.subgraph)(t,n);this.setGraphAttributes(o),this.renderer=new(i())(o,this.sigmaContainer,s),this.setEventHandler(o,e),console.timeEnd("filter")}setGraphAttributes(t){this.setNodeAttributes(t),this.setEdgeAttributes(t)}setNodeAttributes(t){var e,r=0;t.forEachNode(((n,i)=>{const o=t.getNodeAttribute(n,"t"),a="Train:"+o+" Route:"+t.getNodeAttribute(n,"r");e===o?r++:(e=o,r=0),t.setNodeAttribute(n,"x",r/60).setNodeAttribute(n,"y",o/30).setNodeAttribute(n,"label",a).setNodeAttribute(n,"color","#000000").setNodeAttribute(n,"size",2).setNodeAttribute(n,"type","base")}))}setEdgeAttributes(t){t.forEachEdge((e=>{this.edgeAttributes(t,e)}))}isRouteEdge(t,e){const r=t.source(e),n=t.target(e);return t.getNodeAttribute(r,"t")!==t.getNodeAttribute(n,"t")}edgeAttributes(t,e){t.mergeEdgeAttributes(e,u)}setEventHandler(t,e){this.invertEdge(t,e),this.highlightHoveredEdge(t)}resizeSigmaGraph(){void 0!==this.renderer?this.renderer.refresh():console.log("graph doesn't exist!")}destroySigmaGraph(){void 0!==this.renderer&&(this.renderer.clear(),this.renderer.kill())}highlightHoveredEdge(t){this.renderer.on("enterEdge",(({edge:e})=>{t.setEdgeAttribute(e,"color","blue")})),this.renderer.on("leaveEdge",(({edge:e})=>{t.setEdgeAttribute(e,"color",a)}))}invertEdge(t,e){this.renderer.on("clickEdge",(r=>{if(this.isRouteEdge(t,r.edge)){const n=[t.source(r.edge),t.target(r.edge)];this.getUpdatedGraph(n,t,e)}})),this.renderer.refresh()}getInitGraph(t){console.log(window.origin+"ordering_graph/gigagraph.json"),this.createSigmaGraph(window.origin+"ordering_graph/gigagraph.json/",t)}getUpdatedGraph(t,e,r){(({url:t,data:e,values:r})=>(({url:t,options:e,values:r})=>fetch(((t,e)=>void 0!==e?`${window.origin}${t}?from=${e[0]}&to=${e[1]}`:`${window.origin}${t}`)(t,r),e))({url:t,options:{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}},values:r}))({url:"/api/ordering_graph/invert",data:e,values:t}).then((t=>t.json())).then((t=>this.createSigmaGraph(t,e)))}unsafeImport(t,e){let r,n,i,o,a;if(t.attributes&&e.replaceAttributes(t.attributes),t.nodes)for(i=t.nodes,r=0,n=i.length;r<n;r++){o=i[r];const{k:t,a:n}=o;e.addNode(t,n),void 0===this.nodesForGivenTrainId.get(n.t)?this.nodesForGivenTrainId.set(n.t,[t]):this.nodesForGivenTrainId.get(n.t).push(t)}if(t.edges){let o=!1;for(i=t.edges,r=0,n=i.length;r<n;r++){a=i[r];const{s:t,t:n,a:s,undirected:u=o}=a;e.addDirectedEdgeWithKey(r,t,n,s)}}return e}}})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,