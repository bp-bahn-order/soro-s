/*! For license information please see bundle.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.webpackSigmaGraph=t():e.webpackSigmaGraph=t()}(self,(()=>(()=>{var e={3796:e=>{e.exports=function(e,t){var n=t.length;if(0!==n){var r=e.length;e.length+=n;for(var i=0;i<n;i++)e[r+i]=t[i]}}},7187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}g(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var i,o,a,c;if(s(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=u(e))>0&&a.length>i&&!a.warned){a.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=a.length,c=d,console&&console.warn&&console.warn(c)}return e}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=d.bind(r);return i.listener=n,r.wrapFn=i,i}function l(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):p(i,i.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function g(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=o[e];if(void 0===u)return!1;if("function"==typeof u)r(u,this,t);else{var c=u.length,d=p(u,c);for(n=0;n<c;++n)r(d[n],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){return s(t),this.on(e,h(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,h(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,o,a;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return l(this,e,!0)},o.prototype.rawListeners=function(e){return l(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},3630:(e,t,n)=>{var r=n(6186),i=n(3212).B,o=n(4325).De;e.exports=function(e,t){if(!r(e)||!r(t))throw new Error("graphology-operators/disjoint-union: invalid graph.");if(e.multi!==t.multi)throw new Error("graphology-operators/disjoint-union: both graph should be simple or multi.");var n=e.nullCopy();n.mergeAttributes(e.getAttributes());var a={},s={},u=0;return e.forEachNode((function(e,t){a[e]=u,i(n,u,t),u++})),t.forEachNode((function(e,t){s[e]=u,i(n,u,t),u++})),u=0,e.forEachEdge((function(e,t,r,i,s,c,d){o(n,d,u++,a[r],a[i],i,t)})),t.forEachEdge((function(e,t,r,i,a,c,d){o(n,d,u++,s[r],s[i],i,t)})),n}},1687:(e,t,n)=>{n(3630),n(7842),t.subgraph=n(4783),n(9441),n(3417),n(7183),n(4375),n(2012),n(7697)},7842:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e){if(!r(e))throw new Error("graphology-operators/reverse: invalid graph.");var t=e.emptyCopy();return e.forEachUndirectedEdge((function(e,n,r,o){i(t,!0,e,r,o,n)})),e.forEachDirectedEdge((function(e,n,r,o){i(t,!1,e,o,r,n)})),t}},4783:(e,t,n)=>{var r=n(6186),i=n(3212).B,o=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/subgraph: invalid graph instance.");var n=e.nullCopy(),a=t;if(Array.isArray(t)){if(0===t.length)return n;t=new Set(t)}if(t instanceof Set){if(0===t.size)return n;a=function(e){return t.has(e)};var s=t;t=new Set,s.forEach((function(e){t.add(""+e)}))}if("function"!=typeof a)throw new Error("graphology-operators/subgraph: invalid nodes. Expecting an array or a set or a filtering function.");if("function"==typeof t){if(e.forEachNode((function(e,t){a(e,t)&&i(n,e,t)})),0===n.order)return n}else t.forEach((function(t){if(!e.hasNode(t))throw new Error('graphology-operators/subgraph: the "'+t+'" node was not found in the graph.');i(n,t,e.getNodeAttributes(t))}));return e.forEachEdge((function(e,t,r,i,s,u,c){a(r,s)&&(i===r||a(i,u))&&o(n,c,e,r,i,t)})),n}},9441:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/to-directed: expecting a valid graphology instance.");"function"==typeof t&&(t={mergeEdge:t});var n="function"==typeof(t=t||{}).mergeEdge?t.mergeEdge:null;if("directed"===e.type)return e.copy();var o=e.emptyCopy({type:"directed"});return e.forEachDirectedEdge((function(e,t,n,r){i(o,!1,e,n,r,t)})),e.forEachUndirectedEdge((function(t,r,a,s){var u=!e.multi&&"mixed"===e.type&&o.edge(a,s),c=!e.multi&&"mixed"===e.type&&o.edge(s,a);u?o.replaceEdgeAttributes(u,n(o.getEdgeAttributes(u),r)):i(o,!1,null,a,s,r),a!==s&&(c?o.replaceEdgeAttributes(c,n(o.getEdgeAttributes(c),r)):i(o,!1,null,s,a,r))})),o}},3417:(e,t,n)=>{var r=n(6186);e.exports=function(e){if(!r(e))throw new Error("graphology-operators/to-mixed: expecting a valid graphology instance.");return e.copy({type:"mixed"})}},7183:(e,t,n)=>{var r=n(6186);e.exports=function(e){if(!r(e))throw new Error("graphology-operators/to-multi: expecting a valid graphology instance.");return e.copy({multi:!0})}},4375:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/to-simple: expecting a valid graphology instance.");"function"==typeof t&&(t={mergeEdge:t});var n="function"==typeof(t=t||{}).mergeEdge?t.mergeEdge:null;if(!e.multi)return e.copy();var o=e.emptyCopy({multi:!1});return e.forEachEdge((function(e,t,r,a,s,u,c){var d=c?o.undirectedEdge(r,a):o.directedEdge(r,a);d?n&&o.replaceEdgeAttributes(d,n(o.getEdgeAttributes(d),t)):i(o,c,e,r,a,t)})),o}},2012:(e,t,n)=>{var r=n(6186),i=n(4325).De;e.exports=function(e,t){if(!r(e))throw new Error("graphology-operators/to-undirected: expecting a valid graphology instance.");"function"==typeof t&&(t={mergeEdge:t});var n="function"==typeof(t=t||{}).mergeEdge?t.mergeEdge:null;if("undirected"===e.type)return e.copy();var o=e.emptyCopy({type:"undirected"});return e.forEachUndirectedEdge((function(e,t,n,r){i(o,!0,e,n,r,t)})),e.forEachDirectedEdge((function(t,r,a,s){if(!e.multi){var u=o.edge(a,s);if(u)return void(n&&o.replaceEdgeAttributes(u,n(o.getEdgeAttributes(u),r)))}i(o,!0,null,a,s,r)})),o}},7697:(e,t,n)=>{var r=n(6186);e.exports=function(e,t){if(!r(e)||!r(t))throw new Error("graphology-operators/union: invalid graph.");if(e.multi!==t.multi)throw new Error("graphology-operators/union: both graph should be simple or multi.");var n=e.copy();return n.import(t,!0),n}},4325:(e,t)=>{t.De=function(e,t,n,r,i,o){return o=Object.assign({},o),t?null==n?e.addUndirectedEdge(r,i,o):e.addUndirectedEdgeWithKey(n,r,i,o):null==n?e.addDirectedEdge(r,i,o):e.addDirectedEdgeWithKey(n,r,i,o)}},3212:(e,t)=>{t.B=function(e,t,n){return n=Object.assign({},n),e.addNode(t,n)}},6186:e=>{e.exports=function(e){return null!==e&&"object"==typeof e&&"function"==typeof e.addUndirectedEdgeWithKey&&"function"==typeof e.dropNode&&"boolean"==typeof e.multi}},2698:function(e){e.exports=function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}function n(e){return n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},n(e)}function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}function i(e,t,n){return i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct.bind():function(e,t,n){var i=[null];i.push.apply(i,t);var o=new(Function.bind.apply(e,i));return n&&r(o,n.prototype),o},i.apply(null,arguments)}function o(e){var t="function"==typeof Map?new Map:void 0;return o=function(e){if(null===e||(o=e,-1===Function.toString.call(o).indexOf("[native code]")))return e;var o;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,n(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),r(a,e)},o(e)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var s=function(){for(var e=arguments[0],t=1,n=arguments.length;t<n;t++)if(arguments[t])for(var r in arguments[t])e[r]=arguments[t][r];return e};function u(e,t,n,r){var i=e._nodes.get(t),o=null;return i?o="mixed"===r?i.out&&i.out[n]||i.undirected&&i.undirected[n]:"directed"===r?i.out&&i.out[n]:i.undirected&&i.undirected[n]:o}function c(t){return"object"===e(t)&&null!==t&&t.constructor===Object}function d(e){var t;for(t in e)return!1;return!0}function h(e,t,n){Object.defineProperty(e,t,{enumerable:!1,configurable:!1,writable:!0,value:n})}function l(e,t,n){var r={enumerable:!0,configurable:!0};"function"==typeof n?r.get=n:(r.value=n,r.writable=!1),Object.defineProperty(e,t,r)}function f(e){return!(!c(e)||e.attributes&&!Array.isArray(e.attributes))}"function"==typeof Object.assign&&(s=Object.assign);var p,g={exports:{}},v="object"==typeof Reflect?Reflect:null,y=v&&"function"==typeof v.apply?v.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};p=v&&"function"==typeof v.ownKeys?v.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var m=Number.isNaN||function(e){return e!=e};function b(){b.init.call(this)}g.exports=b,g.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}k(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&k(e,"error",t,{once:!0})}(e,i)}))},b.EventEmitter=b,b.prototype._events=void 0,b.prototype._eventsCount=0,b.prototype._maxListeners=void 0;var w=10;function x(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function E(e){return void 0===e._maxListeners?b.defaultMaxListeners:e._maxListeners}function _(e,t,n,r){var i,o,a,s;if(x(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=E(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return e}function L(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function A(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=L.bind(r);return i.listener=n,r.wrapFn=i,i}function C(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):T(i,i.length)}function S(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function T(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function k(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}function D(e){if("function"!=typeof e)throw new Error("obliterator/iterator: expecting a function!");this.next=e}Object.defineProperty(b,"defaultMaxListeners",{enumerable:!0,get:function(){return w},set:function(e){if("number"!=typeof e||e<0||m(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");w=e}}),b.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},b.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||m(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},b.prototype.getMaxListeners=function(){return E(this)},b.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var s=i[e];if(void 0===s)return!1;if("function"==typeof s)y(s,this,t);else{var u=s.length,c=T(s,u);for(n=0;n<u;++n)y(c[n],this,t)}return!0},b.prototype.addListener=function(e,t){return _(this,e,t,!1)},b.prototype.on=b.prototype.addListener,b.prototype.prependListener=function(e,t){return _(this,e,t,!0)},b.prototype.once=function(e,t){return x(t),this.on(e,A(this,e,t)),this},b.prototype.prependOnceListener=function(e,t){return x(t),this.prependListener(e,A(this,e,t)),this},b.prototype.removeListener=function(e,t){var n,r,i,o,a;if(x(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},b.prototype.off=b.prototype.removeListener,b.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},b.prototype.listeners=function(e){return C(this,e,!0)},b.prototype.rawListeners=function(e){return C(this,e,!1)},b.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):S.call(e,t)},b.prototype.listenerCount=S,b.prototype.eventNames=function(){return this._eventsCount>0?p(this._events):[]},"undefined"!=typeof Symbol&&(D.prototype[Symbol.iterator]=function(){return this}),D.of=function(){var e=arguments,t=e.length,n=0;return new D((function(){return n>=t?{done:!0}:{done:!1,value:e[n++]}}))},D.empty=function(){return new D((function(){return{done:!0}}))},D.fromSequence=function(e){var t=0,n=e.length;return new D((function(){return t>=n?{done:!0}:{done:!1,value:e[t++]}}))},D.is=function(e){return e instanceof D||"object"==typeof e&&null!==e&&"function"==typeof e.next};var N=D,P={};P.ARRAY_BUFFER_SUPPORT="undefined"!=typeof ArrayBuffer,P.SYMBOL_SUPPORT="undefined"!=typeof Symbol;var F=N,O=P,R=O.ARRAY_BUFFER_SUPPORT,G=O.SYMBOL_SUPPORT,M=function(e){var t=function(e){return"string"==typeof e||Array.isArray(e)||R&&ArrayBuffer.isView(e)?F.fromSequence(e):"object"!=typeof e||null===e?null:G&&"function"==typeof e[Symbol.iterator]?e[Symbol.iterator]():"function"==typeof e.next?e:null}(e);if(!t)throw new Error("obliterator: target is not iterable nor a valid iterator.");return t},j=M,I=function(e,t){for(var n,r=arguments.length>1?t:1/0,i=r!==1/0?new Array(r):[],o=0,a=j(e);;){if(o===r)return i;if((n=a.next()).done)return o!==t&&(i.length=o),i;i[o++]=n.value}},U=function(e){function n(t){var n;return(n=e.call(this)||this).name="GraphError",n.message=t,n}return t(n,e),n}(o(Error)),q=function(e){function n(t){var r;return(r=e.call(this,t)||this).name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a(r),n.prototype.constructor),r}return t(n,e),n}(U),z=function(e){function n(t){var r;return(r=e.call(this,t)||this).name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a(r),n.prototype.constructor),r}return t(n,e),n}(U),B=function(e){function n(t){var r;return(r=e.call(this,t)||this).name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a(r),n.prototype.constructor),r}return t(n,e),n}(U);function H(e,t){this.key=e,this.attributes=t,this.clear()}function W(e,t){this.key=e,this.attributes=t,this.clear()}function V(e,t){this.key=e,this.attributes=t,this.clear()}function Y(e,t,n,r,i){this.key=t,this.attributes=i,this.undirected=e,this.source=n,this.target=r}function $(e,t,n,r,i,o,a){var s,u,c,d;if(r=""+r,0===n){if(!(s=e._nodes.get(r)))throw new z("Graph.".concat(t,': could not find the "').concat(r,'" node in the graph.'));c=i,d=o}else if(3===n){if(i=""+i,!(u=e._edges.get(i)))throw new z("Graph.".concat(t,': could not find the "').concat(i,'" edge in the graph.'));var h=u.source.key,l=u.target.key;if(r===h)s=u.target;else{if(r!==l)throw new z("Graph.".concat(t,': the "').concat(r,'" node is not attached to the "').concat(i,'" edge (').concat(h,", ").concat(l,")."));s=u.source}c=o,d=a}else{if(!(u=e._edges.get(r)))throw new z("Graph.".concat(t,': could not find the "').concat(r,'" edge in the graph.'));s=1===n?u.source:u.target,c=i,d=o}return[s,c,d]}H.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}},W.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}},V.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}},Y.prototype.attach=function(){var e="out",t="in";this.undirected&&(e=t="undirected");var n=this.source.key,r=this.target.key;this.source[e][r]=this,this.undirected&&n===r||(this.target[t][n]=this)},Y.prototype.attachMulti=function(){var e="out",t="in",n=this.source.key,r=this.target.key;this.undirected&&(e=t="undirected");var i=this.source[e],o=i[r];if(void 0===o)return i[r]=this,void(this.undirected&&n===r||(this.target[t][n]=this));o.previous=this,this.next=o,i[r]=this,this.target[t][n]=this},Y.prototype.detach=function(){var e=this.source.key,t=this.target.key,n="out",r="in";this.undirected&&(n=r="undirected"),delete this.source[n][t],delete this.target[r][e]},Y.prototype.detachMulti=function(){var e=this.source.key,t=this.target.key,n="out",r="in";this.undirected&&(n=r="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[n][t],delete this.target[r][e]):(this.next.previous=void 0,this.source[n][t]=this.next,this.target[r][e]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};var Z=[{name:function(e){return"get".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];return a.attributes[s]}}},{name:function(e){return"get".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){return $(this,t,n,e,r)[0].attributes}}},{name:function(e){return"has".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];return a.attributes.hasOwnProperty(s)}}},{name:function(e){return"set".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i,o){var a=$(this,t,n,e,r,i,o),s=a[0],u=a[1],c=a[2];return s.attributes[u]=c,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(e){return"update".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i,o){var a=$(this,t,n,e,r,i,o),s=a[0],u=a[1],c=a[2];if("function"!=typeof c)throw new q("Graph.".concat(t,": updater should be a function."));var d=s.attributes,h=c(d[u]);return d[u]=h,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(e){return"remove".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];return delete a.attributes[s],this.emit("nodeAttributesUpdated",{key:a.key,type:"remove",attributes:a.attributes,name:s}),this}}},{name:function(e){return"replace".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];if(!c(s))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return a.attributes=s,this.emit("nodeAttributesUpdated",{key:a.key,type:"replace",attributes:a.attributes}),this}}},{name:function(e){return"merge".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],u=o[1];if(!c(u))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return s(a.attributes,u),this.emit("nodeAttributesUpdated",{key:a.key,type:"merge",attributes:a.attributes,data:u}),this}}},{name:function(e){return"update".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o=$(this,t,n,e,r,i),a=o[0],s=o[1];if("function"!=typeof s)throw new q("Graph.".concat(t,": provided updater is not a function."));return a.attributes=s(a.attributes),this.emit("nodeAttributesUpdated",{key:a.key,type:"update",attributes:a.attributes}),this}}}],X=[{name:function(e){return"get".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return i.attributes[r]}}},{name:function(e){return"get".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e){var r;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>1){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+e,o=""+arguments[1];if(!(r=u(this,i,o,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(i,'" - "').concat(o,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(r=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return r.attributes}}},{name:function(e){return"has".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return i.attributes.hasOwnProperty(r)}}},{name:function(e){return"set".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+e,s=""+r;if(r=arguments[2],i=arguments[3],!(o=u(this,a,s,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(o=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return o.attributes[r]=i,this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:r}),this}}},{name:function(e){return"update".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r,i){var o;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+e,s=""+r;if(r=arguments[2],i=arguments[3],!(o=u(this,a,s,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(o=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if("function"!=typeof i)throw new q("Graph.".concat(t,": updater should be a function."));return o.attributes[r]=i(o.attributes[r]),this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:r}),this}}},{name:function(e){return"remove".concat(e,"Attribute")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return delete i.attributes[r],this.emit("edgeAttributesUpdated",{key:i.key,type:"remove",attributes:i.attributes,name:r}),this}}},{name:function(e){return"replace".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if(!c(r))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return i.attributes=r,this.emit("edgeAttributesUpdated",{key:i.key,type:"replace",attributes:i.attributes}),this}}},{name:function(e){return"merge".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if(!c(r))throw new q("Graph.".concat(t,": provided attributes are not a plain object."));return s(i.attributes,r),this.emit("edgeAttributesUpdated",{key:i.key,type:"merge",attributes:i.attributes,data:r}),this}}},{name:function(e){return"update".concat(e,"Attributes")},attacher:function(e,t,n){e.prototype[t]=function(e,r){var i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new B("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new B("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+r;if(r=arguments[2],!(i=u(this,o,a,n)))throw new z("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==n)throw new B("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new z("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if("function"!=typeof r)throw new q("Graph.".concat(t,": provided updater is not a function."));return i.attributes=r(i.attributes),this.emit("edgeAttributesUpdated",{key:i.key,type:"update",attributes:i.attributes}),this}}}],K=N,Q=M,J=function(){var e=arguments,t=null,n=-1;return new K((function(){for(var r=null;;){if(null===t){if(++n>=e.length)return{done:!0};t=Q(e[n])}if(!0!==(r=t.next()).done)break;t=null}return r}))},ee=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function te(e,t,n,r){var i=!1;for(var o in t)if(o!==r){var a=t[o];if(i=n(a.key,a.attributes,a.source.key,a.target.key,a.source.attributes,a.target.attributes,a.undirected),e&&i)return a.key}}function ne(e,t,n,r){var i,o,a,s=!1;for(var u in t)if(u!==r){i=t[u];do{if(o=i.source,a=i.target,s=n(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected),e&&s)return i.key;i=i.next}while(void 0!==i)}}function re(e,t){var n,r=Object.keys(e),i=r.length,o=0;return new N((function(){do{if(n)n=n.next;else{if(o>=i)return{done:!0};var a=r[o++];if(a===t){n=void 0;continue}n=e[a]}}while(!n);return{done:!1,value:{edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected}}}))}function ie(e,t,n,r){var i=t[n];if(i){var o=i.source,a=i.target;return r(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected)&&e?i.key:void 0}}function oe(e,t,n,r){var i=t[n];if(i){var o=!1;do{if(o=r(i.key,i.attributes,i.source.key,i.target.key,i.source.attributes,i.target.attributes,i.undirected),e&&o)return i.key;i=i.next}while(void 0!==i)}}function ae(e,t){var n=e[t];return void 0!==n.next?new N((function(){if(!n)return{done:!0};var e={edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected};return n=n.next,{done:!1,value:e}})):N.of({edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected})}function se(e,t,n,r){if(0!==t.size)for(var i,o,a="mixed"!==n&&n!==t.type,s="undirected"===n,u=!1,c=t._edges.values();!0!==(i=c.next()).done;)if(o=i.value,!a||o.undirected===s){var d=o,h=d.key,l=d.attributes,f=d.source,p=d.target;if(u=r(h,l,f.key,p.key,f.attributes,p.attributes,o.undirected),e&&u)return h}}function ue(e,t,n,r,i,o){var a,s=t?ne:te;if("undirected"!==n){if("out"!==r&&(a=s(e,i.in,o),e&&a))return a;if("in"!==r&&(a=s(e,i.out,o,r?void 0:i.key),e&&a))return a}if("directed"!==n&&(a=s(e,i.undirected,o),e&&a))return a}function ce(e,t,n,r,i,o,a){var s,u=n?oe:ie;if("undirected"!==t){if(void 0!==i.in&&"out"!==r&&(s=u(e,i.in,o,a),e&&s))return s;if(void 0!==i.out&&"in"!==r&&(r||i.key!==o)&&(s=u(e,i.out,o,a),e&&s))return s}if("directed"!==t&&void 0!==i.undirected&&(s=u(e,i.undirected,o,a),e&&s))return s}var de=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function he(){this.A=null,this.B=null}function le(e,t,n,r,i){for(var o in r){var a=r[o],s=a.source,u=a.target,c=s===n?u:s;if(!t||!t.has(c.key)){var d=i(c.key,c.attributes);if(e&&d)return c.key}}}function fe(e,t,n,r,i){if("mixed"!==t){if("undirected"===t)return le(e,null,r,r.undirected,i);if("string"==typeof n)return le(e,null,r,r[n],i)}var o,a=new he;if("undirected"!==t){if("out"!==n){if(o=le(e,null,r,r.in,i),e&&o)return o;a.wrap(r.in)}if("in"!==n){if(o=le(e,a,r,r.out,i),e&&o)return o;a.wrap(r.out)}}if("directed"!==t&&(o=le(e,a,r,r.undirected,i),e&&o))return o}function pe(e,t,n){var r=Object.keys(n),i=r.length,o=0;return new N((function(){var a=null;do{if(o>=i)return e&&e.wrap(n),{done:!0};var s=n[r[o++]],u=s.source,c=s.target;a=u===t?c:u,e&&e.has(a.key)&&(a=null)}while(null===a);return{done:!1,value:{neighbor:a.key,attributes:a.attributes}}}))}function ge(e,t,n,r,i){for(var o,a,s,u,c,d,h,l=r._nodes.values(),f=r.type;!0!==(o=l.next()).done;){var p=!1;if(a=o.value,"undirected"!==f)for(s in u=a.out){c=u[s];do{if(d=c.target,p=!0,h=i(a.key,d.key,a.attributes,d.attributes,c.key,c.attributes,c.undirected),e&&h)return c;c=c.next}while(c)}if("directed"!==f)for(s in u=a.undirected)if(!(t&&a.key>s)){c=u[s];do{if((d=c.target).key!==s&&(d=c.source),p=!0,h=i(a.key,d.key,a.attributes,d.attributes,c.key,c.attributes,c.undirected),e&&h)return c;c=c.next}while(c)}if(n&&!p&&(h=i(a.key,null,a.attributes,null,null,null,null),e&&h))return null}}function ve(e){if(!c(e))throw new q('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in e))throw new q("Graph.import: serialized node is missing its key.");if("attributes"in e&&(!c(e.attributes)||null===e.attributes))throw new q("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function ye(e){if(!c(e))throw new q('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in e))throw new q("Graph.import: serialized edge is missing its source.");if(!("target"in e))throw new q("Graph.import: serialized edge is missing its target.");if("attributes"in e&&(!c(e.attributes)||null===e.attributes))throw new q("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in e&&"boolean"!=typeof e.undirected)throw new q("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}he.prototype.wrap=function(e){null===this.A?this.A=e:null===this.B&&(this.B=e)},he.prototype.has=function(e){return null!==this.A&&e in this.A||null!==this.B&&e in this.B};var me,be=(me=255&Math.floor(256*Math.random()),function(){return me++}),we=new Set(["directed","undirected","mixed"]),xe=new Set(["domain","_events","_eventsCount","_maxListeners"]),Ee={allowSelfLoops:!0,multi:!1,type:"mixed"};function _e(e,t,n){var r=new e.NodeDataClass(t,n);return e._nodes.set(t,r),e.emit("nodeAdded",{key:t,attributes:n}),r}function Le(e,t,n,r,i,o,a,s){if(!r&&"undirected"===e.type)throw new B("Graph.".concat(t,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(r&&"directed"===e.type)throw new B("Graph.".concat(t,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s&&!c(s))throw new q("Graph.".concat(t,': invalid attributes. Expecting an object but got "').concat(s,'"'));if(o=""+o,a=""+a,s=s||{},!e.allowSelfLoops&&o===a)throw new B("Graph.".concat(t,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var u=e._nodes.get(o),d=e._nodes.get(a);if(!u)throw new z("Graph.".concat(t,': source node "').concat(o,'" not found.'));if(!d)throw new z("Graph.".concat(t,': target node "').concat(a,'" not found.'));var h={key:null,undirected:r,source:o,target:a,attributes:s};if(n)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new B("Graph.".concat(t,': the "').concat(i,'" edge already exists in the graph.'));if(!e.multi&&(r?void 0!==u.undirected[a]:void 0!==u.out[a]))throw new B("Graph.".concat(t,': an edge linking "').concat(o,'" to "').concat(a,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));var l=new Y(r,i,u,d,s);e._edges.set(i,l);var f=o===a;return r?(u.undirectedDegree++,d.undirectedDegree++,f&&(u.undirectedLoops++,e._undirectedSelfLoopCount++)):(u.outDegree++,d.inDegree++,f&&(u.directedLoops++,e._directedSelfLoopCount++)),e.multi?l.attachMulti():l.attach(),r?e._undirectedSize++:e._directedSize++,h.key=i,e.emit("edgeAdded",h),i}function Ae(e,t,n,r,i,o,a,u,d){if(!r&&"undirected"===e.type)throw new B("Graph.".concat(t,": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));if(r&&"directed"===e.type)throw new B("Graph.".concat(t,": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));if(u)if(d){if("function"!=typeof u)throw new q("Graph.".concat(t,': invalid updater function. Expecting a function but got "').concat(u,'"'))}else if(!c(u))throw new q("Graph.".concat(t,': invalid attributes. Expecting an object but got "').concat(u,'"'));var h;if(o=""+o,a=""+a,d&&(h=u,u=void 0),!e.allowSelfLoops&&o===a)throw new B("Graph.".concat(t,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var l,f,p=e._nodes.get(o),g=e._nodes.get(a);if(!n&&(l=e._edges.get(i))){if(!(l.source.key===o&&l.target.key===a||r&&l.source.key===a&&l.target.key===o))throw new B("Graph.".concat(t,': inconsistency detected when attempting to merge the "').concat(i,'" edge with "').concat(o,'" source & "').concat(a,'" target vs. ("').concat(l.source.key,'", "').concat(l.target.key,'").'));f=l}if(f||e.multi||!p||(f=r?p.undirected[a]:p.out[a]),f){var v=[f.key,!1,!1,!1];if(d?!h:!u)return v;if(d){var y=f.attributes;f.attributes=h(y),e.emit("edgeAttributesUpdated",{type:"replace",key:f.key,attributes:f.attributes})}else s(f.attributes,u),e.emit("edgeAttributesUpdated",{type:"merge",key:f.key,attributes:f.attributes,data:u});return v}u=u||{},d&&h&&(u=h(u));var m={key:null,undirected:r,source:o,target:a,attributes:u};if(n)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new B("Graph.".concat(t,': the "').concat(i,'" edge already exists in the graph.'));var b=!1,w=!1;p||(p=_e(e,o,{}),b=!0,o===a&&(g=p,w=!0)),g||(g=_e(e,a,{}),w=!0),l=new Y(r,i,p,g,u),e._edges.set(i,l);var x=o===a;return r?(p.undirectedDegree++,g.undirectedDegree++,x&&(p.undirectedLoops++,e._undirectedSelfLoopCount++)):(p.outDegree++,g.inDegree++,x&&(p.directedLoops++,e._directedSelfLoopCount++)),e.multi?l.attachMulti():l.attach(),r?e._undirectedSize++:e._directedSize++,m.key=i,e.emit("edgeAdded",m),[i,!0,b,w]}function Ce(e,t){e._edges.delete(t.key);var n=t.source,r=t.target,i=t.attributes,o=t.undirected,a=n===r;o?(n.undirectedDegree--,r.undirectedDegree--,a&&(n.undirectedLoops--,e._undirectedSelfLoopCount--)):(n.outDegree--,r.inDegree--,a&&(n.directedLoops--,e._directedSelfLoopCount--)),e.multi?t.detachMulti():t.detach(),o?e._undirectedSize--:e._directedSize--,e.emit("edgeDropped",{key:t.key,attributes:i,source:n.key,target:r.key,undirected:o})}var Se=function(n){function r(e){var t;if(t=n.call(this)||this,"boolean"!=typeof(e=s({},Ee,e)).multi)throw new q("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(e.multi,'".'));if(!we.has(e.type))throw new q('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(e.type,'".'));if("boolean"!=typeof e.allowSelfLoops)throw new q("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(e.allowSelfLoops,'".'));var r="mixed"===e.type?H:"directed"===e.type?W:V;h(a(t),"NodeDataClass",r);var i="geid_"+be()+"_",o=0;return h(a(t),"_attributes",{}),h(a(t),"_nodes",new Map),h(a(t),"_edges",new Map),h(a(t),"_directedSize",0),h(a(t),"_undirectedSize",0),h(a(t),"_directedSelfLoopCount",0),h(a(t),"_undirectedSelfLoopCount",0),h(a(t),"_edgeKeyGenerator",(function(){var e;do{e=i+o++}while(t._edges.has(e));return e})),h(a(t),"_options",e),xe.forEach((function(e){return h(a(t),e,t[e])})),l(a(t),"order",(function(){return t._nodes.size})),l(a(t),"size",(function(){return t._edges.size})),l(a(t),"directedSize",(function(){return t._directedSize})),l(a(t),"undirectedSize",(function(){return t._undirectedSize})),l(a(t),"selfLoopCount",(function(){return t._directedSelfLoopCount+t._undirectedSelfLoopCount})),l(a(t),"directedSelfLoopCount",(function(){return t._directedSelfLoopCount})),l(a(t),"undirectedSelfLoopCount",(function(){return t._undirectedSelfLoopCount})),l(a(t),"multi",t._options.multi),l(a(t),"type",t._options.type),l(a(t),"allowSelfLoops",t._options.allowSelfLoops),l(a(t),"implementation",(function(){return"graphology"})),t}t(r,n);var i=r.prototype;return i._resetInstanceCounters=function(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0},i.hasNode=function(e){return this._nodes.has(""+e)},i.hasDirectedEdge=function(e,t){if("undirected"===this.type)return!1;if(1===arguments.length){var n=""+e,r=this._edges.get(n);return!!r&&!r.undirected}if(2===arguments.length){e=""+e,t=""+t;var i=this._nodes.get(e);return!!i&&i.out.hasOwnProperty(t)}throw new q("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasUndirectedEdge=function(e,t){if("directed"===this.type)return!1;if(1===arguments.length){var n=""+e,r=this._edges.get(n);return!!r&&r.undirected}if(2===arguments.length){e=""+e,t=""+t;var i=this._nodes.get(e);return!!i&&i.undirected.hasOwnProperty(t)}throw new q("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasEdge=function(e,t){if(1===arguments.length){var n=""+e;return this._edges.has(n)}if(2===arguments.length){e=""+e,t=""+t;var r=this._nodes.get(e);return!!r&&(void 0!==r.out&&r.out.hasOwnProperty(t)||void 0!==r.undirected&&r.undirected.hasOwnProperty(t))}throw new q("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.directedEdge=function(e,t){if("undirected"!==this.type){if(e=""+e,t=""+t,this.multi)throw new B("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var n=this._nodes.get(e);if(!n)throw new z('Graph.directedEdge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z('Graph.directedEdge: could not find the "'.concat(t,'" target node in the graph.'));var r=n.out&&n.out[t]||void 0;return r?r.key:void 0}},i.undirectedEdge=function(e,t){if("directed"!==this.type){if(e=""+e,t=""+t,this.multi)throw new B("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var n=this._nodes.get(e);if(!n)throw new z('Graph.undirectedEdge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z('Graph.undirectedEdge: could not find the "'.concat(t,'" target node in the graph.'));var r=n.undirected&&n.undirected[t]||void 0;return r?r.key:void 0}},i.edge=function(e,t){if(this.multi)throw new B("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.edge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z('Graph.edge: could not find the "'.concat(t,'" target node in the graph.'));var r=n.out&&n.out[t]||n.undirected&&n.undirected[t]||void 0;if(r)return r.key},i.areDirectedNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areDirectedNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&(t in n.in||t in n.out)},i.areOutNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areOutNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.out},i.areInNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areInNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.in},i.areUndirectedNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areUndirectedNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"directed"!==this.type&&t in n.undirected},i.areNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&(t in n.in||t in n.out)||"directed"!==this.type&&t in n.undirected},i.areInboundNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areInboundNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.in||"directed"!==this.type&&t in n.undirected},i.areOutboundNeighbors=function(e,t){e=""+e,t=""+t;var n=this._nodes.get(e);if(!n)throw new z('Graph.areOutboundNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in n.out||"directed"!==this.type&&t in n.undirected},i.inDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree},i.outDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.outDegree},i.directedDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.directedDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree+t.outDegree},i.undirectedDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.undirectedDegree: could not find the "'.concat(e,'" node in the graph.'));return"directed"===this.type?0:t.undirectedDegree},i.inboundDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inboundDegree: could not find the "'.concat(e,'" node in the graph.'));var n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.inDegree),n},i.outboundDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outboundDegree: could not find the "'.concat(e,'" node in the graph.'));var n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.outDegree),n},i.degree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.degree: could not find the "'.concat(e,'" node in the graph.'));var n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.inDegree+t.outDegree),n},i.inDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree-t.directedLoops},i.outDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.outDegree-t.directedLoops},i.directedDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree+t.outDegree-2*t.directedLoops},i.undirectedDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"directed"===this.type?0:t.undirectedDegree-2*t.undirectedLoops},i.inboundDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.inDegree,r+=t.directedLoops),n-r},i.outboundDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.outDegree,r+=t.directedLoops),n-r},i.degreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new z('Graph.degreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.inDegree+t.outDegree,r+=2*t.directedLoops),n-r},i.source=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.source: could not find the "'.concat(e,'" edge in the graph.'));return t.source.key},i.target=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.target: could not find the "'.concat(e,'" edge in the graph.'));return t.target.key},i.extremities=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.extremities: could not find the "'.concat(e,'" edge in the graph.'));return[t.source.key,t.target.key]},i.opposite=function(e,t){e=""+e,t=""+t;var n=this._edges.get(t);if(!n)throw new z('Graph.opposite: could not find the "'.concat(t,'" edge in the graph.'));var r=n.source.key,i=n.target.key;if(e===r)return i;if(e===i)return r;throw new z('Graph.opposite: the "'.concat(e,'" node is not attached to the "').concat(t,'" edge (').concat(r,", ").concat(i,")."))},i.hasExtremity=function(e,t){e=""+e,t=""+t;var n=this._edges.get(e);if(!n)throw new z('Graph.hasExtremity: could not find the "'.concat(e,'" edge in the graph.'));return n.source.key===t||n.target.key===t},i.isUndirected=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.isUndirected: could not find the "'.concat(e,'" edge in the graph.'));return t.undirected},i.isDirected=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.isDirected: could not find the "'.concat(e,'" edge in the graph.'));return!t.undirected},i.isSelfLoop=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new z('Graph.isSelfLoop: could not find the "'.concat(e,'" edge in the graph.'));return t.source===t.target},i.addNode=function(e,t){var n=function(e,t,n){if(n&&!c(n))throw new q('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(n,'"'));if(t=""+t,n=n||{},e._nodes.has(t))throw new B('Graph.addNode: the "'.concat(t,'" node already exist in the graph.'));var r=new e.NodeDataClass(t,n);return e._nodes.set(t,r),e.emit("nodeAdded",{key:t,attributes:n}),r}(this,e,t);return n.key},i.mergeNode=function(e,t){if(t&&!c(t))throw new q('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(t,'"'));e=""+e,t=t||{};var n=this._nodes.get(e);return n?(t&&(s(n.attributes,t),this.emit("nodeAttributesUpdated",{type:"merge",key:e,attributes:n.attributes,data:t})),[e,!1]):(n=new this.NodeDataClass(e,t),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:t}),[e,!0])},i.updateNode=function(e,t){if(t&&"function"!=typeof t)throw new q('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(t,'"'));e=""+e;var n=this._nodes.get(e);if(n){if(t){var r=n.attributes;n.attributes=t(r),this.emit("nodeAttributesUpdated",{type:"replace",key:e,attributes:n.attributes})}return[e,!1]}var i=t?t({}):{};return n=new this.NodeDataClass(e,i),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:i}),[e,!0]},i.dropNode=function(e){e=""+e;var t,n=this._nodes.get(e);if(!n)throw new z('Graph.dropNode: could not find the "'.concat(e,'" node in the graph.'));if("undirected"!==this.type){for(var r in n.out){t=n.out[r];do{Ce(this,t),t=t.next}while(t)}for(var i in n.in){t=n.in[i];do{Ce(this,t),t=t.next}while(t)}}if("directed"!==this.type)for(var o in n.undirected){t=n.undirected[o];do{Ce(this,t),t=t.next}while(t)}this._nodes.delete(e),this.emit("nodeDropped",{key:e,attributes:n.attributes})},i.dropEdge=function(e){var t;if(arguments.length>1){var n=""+arguments[0],r=""+arguments[1];if(!(t=u(this,n,r,this.type)))throw new z('Graph.dropEdge: could not find the "'.concat(n,'" -> "').concat(r,'" edge in the graph.'))}else if(e=""+e,!(t=this._edges.get(e)))throw new z('Graph.dropEdge: could not find the "'.concat(e,'" edge in the graph.'));return Ce(this,t),this},i.dropDirectedEdge=function(e,t){if(arguments.length<2)throw new B("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new B("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var n=u(this,e=""+e,t=""+t,"directed");if(!n)throw new z('Graph.dropDirectedEdge: could not find a "'.concat(e,'" -> "').concat(t,'" edge in the graph.'));return Ce(this,n),this},i.dropUndirectedEdge=function(e,t){if(arguments.length<2)throw new B("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new B("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var n=u(this,e,t,"undirected");if(!n)throw new z('Graph.dropUndirectedEdge: could not find a "'.concat(e,'" -> "').concat(t,'" edge in the graph.'));return Ce(this,n),this},i.clear=function(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")},i.clearEdges=function(){for(var e,t=this._nodes.values();!0!==(e=t.next()).done;)e.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")},i.getAttribute=function(e){return this._attributes[e]},i.getAttributes=function(){return this._attributes},i.hasAttribute=function(e){return this._attributes.hasOwnProperty(e)},i.setAttribute=function(e,t){return this._attributes[e]=t,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this},i.updateAttribute=function(e,t){if("function"!=typeof t)throw new q("Graph.updateAttribute: updater should be a function.");var n=this._attributes[e];return this._attributes[e]=t(n),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this},i.removeAttribute=function(e){return delete this._attributes[e],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:e}),this},i.replaceAttributes=function(e){if(!c(e))throw new q("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=e,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},i.mergeAttributes=function(e){if(!c(e))throw new q("Graph.mergeAttributes: provided attributes are not a plain object.");return s(this._attributes,e),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:e}),this},i.updateAttributes=function(e){if("function"!=typeof e)throw new q("Graph.updateAttributes: provided updater is not a function.");return this._attributes=e(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this},i.updateEachNodeAttributes=function(e,t){if("function"!=typeof e)throw new q("Graph.updateEachNodeAttributes: expecting an updater function.");if(t&&!f(t))throw new q("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var n,r,i=this._nodes.values();!0!==(n=i.next()).done;)(r=n.value).attributes=e(r.key,r.attributes);this.emit("eachNodeAttributesUpdated",{hints:t||null})},i.updateEachEdgeAttributes=function(e,t){if("function"!=typeof e)throw new q("Graph.updateEachEdgeAttributes: expecting an updater function.");if(t&&!f(t))throw new q("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var n,r,i,o,a=this._edges.values();!0!==(n=a.next()).done;)i=(r=n.value).source,o=r.target,r.attributes=e(r.key,r.attributes,i.key,o.key,i.attributes,o.attributes,r.undirected);this.emit("eachEdgeAttributesUpdated",{hints:t||null})},i.forEachAdjacencyEntry=function(e){if("function"!=typeof e)throw new q("Graph.forEachAdjacencyEntry: expecting a callback.");ge(!1,!1,!1,this,e)},i.forEachAdjacencyEntryWithOrphans=function(e){if("function"!=typeof e)throw new q("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");ge(!1,!1,!0,this,e)},i.forEachAssymetricAdjacencyEntry=function(e){if("function"!=typeof e)throw new q("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");ge(!1,!0,!1,this,e)},i.forEachAssymetricAdjacencyEntryWithOrphans=function(e){if("function"!=typeof e)throw new q("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");ge(!1,!0,!0,this,e)},i.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):I(this._nodes.keys(),this._nodes.size)},i.forEachNode=function(e){if("function"!=typeof e)throw new q("Graph.forEachNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)e((n=t.value).key,n.attributes)},i.findNode=function(e){if("function"!=typeof e)throw new q("Graph.findNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)if(e((n=t.value).key,n.attributes))return n.key},i.mapNodes=function(e){if("function"!=typeof e)throw new q("Graph.mapNode: expecting a callback.");for(var t,n,r=this._nodes.values(),i=new Array(this.order),o=0;!0!==(t=r.next()).done;)n=t.value,i[o++]=e(n.key,n.attributes);return i},i.someNode=function(e){if("function"!=typeof e)throw new q("Graph.someNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)if(e((n=t.value).key,n.attributes))return!0;return!1},i.everyNode=function(e){if("function"!=typeof e)throw new q("Graph.everyNode: expecting a callback.");for(var t,n,r=this._nodes.values();!0!==(t=r.next()).done;)if(!e((n=t.value).key,n.attributes))return!1;return!0},i.filterNodes=function(e){if("function"!=typeof e)throw new q("Graph.filterNodes: expecting a callback.");for(var t,n,r=this._nodes.values(),i=[];!0!==(t=r.next()).done;)e((n=t.value).key,n.attributes)&&i.push(n.key);return i},i.reduceNodes=function(e,t){if("function"!=typeof e)throw new q("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new q("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");for(var n,r,i=t,o=this._nodes.values();!0!==(n=o.next()).done;)i=e(i,(r=n.value).key,r.attributes);return i},i.nodeEntries=function(){var e=this._nodes.values();return new N((function(){var t=e.next();if(t.done)return t;var n=t.value;return{value:{node:n.key,attributes:n.attributes},done:!1}}))},i.export=function(){var e=this,t=new Array(this._nodes.size),n=0;this._nodes.forEach((function(e,r){t[n++]=function(e,t){var n={key:e};return d(t.attributes)||(n.attributes=s({},t.attributes)),n}(r,e)}));var r=new Array(this._edges.size);return n=0,this._edges.forEach((function(t,i){r[n++]=function(e,t,n){var r={key:t,source:n.source.key,target:n.target.key};return d(n.attributes)||(r.attributes=s({},n.attributes)),"mixed"===e&&n.undirected&&(r.undirected=!0),r}(e.type,i,t)})),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:t,edges:r}},i.import=function(e){var t,n,i,o,a,s=this,u=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e instanceof r)return e.forEachNode((function(e,t){u?s.mergeNode(e,t):s.addNode(e,t)})),e.forEachEdge((function(e,t,n,r,i,o,a){u?a?s.mergeUndirectedEdgeWithKey(e,n,r,t):s.mergeDirectedEdgeWithKey(e,n,r,t):a?s.addUndirectedEdgeWithKey(e,n,r,t):s.addDirectedEdgeWithKey(e,n,r,t)})),this;if(!c(e))throw new q("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(e.attributes){if(!c(e.attributes))throw new q("Graph.import: invalid attributes. Expecting a plain object.");u?this.mergeAttributes(e.attributes):this.replaceAttributes(e.attributes)}if(e.nodes){if(i=e.nodes,!Array.isArray(i))throw new q("Graph.import: invalid nodes. Expecting an array.");for(t=0,n=i.length;t<n;t++){ve(o=i[t]);var d=o,h=d.key,l=d.attributes;u?this.mergeNode(h,l):this.addNode(h,l)}}if(e.edges){var f=!1;if("undirected"===this.type&&(f=!0),i=e.edges,!Array.isArray(i))throw new q("Graph.import: invalid edges. Expecting an array.");for(t=0,n=i.length;t<n;t++){ye(a=i[t]);var p=a,g=p.source,v=p.target,y=p.attributes,m=p.undirected,b=void 0===m?f:m;"key"in a?(u?b?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:b?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,a.key,g,v,y):(u?b?this.mergeUndirectedEdge:this.mergeDirectedEdge:b?this.addUndirectedEdge:this.addDirectedEdge).call(this,g,v,y)}}return this},i.nullCopy=function(e){var t=new r(s({},this._options,e));return t.replaceAttributes(s({},this.getAttributes())),t},i.emptyCopy=function(e){var t=this.nullCopy(e);return this._nodes.forEach((function(e,n){var r=s({},e.attributes);e=new t.NodeDataClass(n,r),t._nodes.set(n,e)})),t},i.copy=function(e){if("string"==typeof(e=e||{}).type&&e.type!==this.type&&"mixed"!==e.type)throw new B('Graph.copy: cannot create an incompatible copy from "'.concat(this.type,'" type to "').concat(e.type,'" because this would mean losing information about the current graph.'));if("boolean"==typeof e.multi&&e.multi!==this.multi&&!0!==e.multi)throw new B("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof e.allowSelfLoops&&e.allowSelfLoops!==this.allowSelfLoops&&!0!==e.allowSelfLoops)throw new B("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");for(var t,n,r=this.emptyCopy(e),i=this._edges.values();!0!==(t=i.next()).done;)Le(r,"copy",!1,(n=t.value).undirected,n.key,n.source.key,n.target.key,s({},n.attributes));return r},i.toJSON=function(){return this.export()},i.toString=function(){return"[object Graph]"},i.inspect=function(){var t=this,n={};this._nodes.forEach((function(e,t){n[t]=e.attributes}));var r={},i={};this._edges.forEach((function(e,n){var o,a=e.undirected?"--":"->",s="",u=e.source.key,c=e.target.key;e.undirected&&u>c&&(o=u,u=c,c=o);var d="(".concat(u,")").concat(a,"(").concat(c,")");n.startsWith("geid_")?t.multi&&(void 0===i[d]?i[d]=0:i[d]++,s+="".concat(i[d],". ")):s+="[".concat(n,"]: "),r[s+=d]=e.attributes}));var o={};for(var a in this)this.hasOwnProperty(a)&&!xe.has(a)&&"function"!=typeof this[a]&&"symbol"!==e(a)&&(o[a]=this[a]);return o.attributes=this._attributes,o.nodes=n,o.edges=r,h(o,"constructor",this.constructor),o},r}(g.exports.EventEmitter);"undefined"!=typeof Symbol&&(Se.prototype[Symbol.for("nodejs.util.inspect.custom")]=Se.prototype.inspect),[{name:function(e){return"".concat(e,"Edge")},generateKey:!0},{name:function(e){return"".concat(e,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(e){return"".concat(e,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(e){return"".concat(e,"EdgeWithKey")}},{name:function(e){return"".concat(e,"DirectedEdgeWithKey")},type:"directed"},{name:function(e){return"".concat(e,"UndirectedEdgeWithKey")},type:"undirected"}].forEach((function(e){["add","merge","update"].forEach((function(t){var n=e.name(t),r="add"===t?Le:Ae;e.generateKey?Se.prototype[n]=function(i,o,a){return r(this,n,!0,"undirected"===(e.type||this.type),null,i,o,a,"update"===t)}:Se.prototype[n]=function(i,o,a,s){return r(this,n,!1,"undirected"===(e.type||this.type),i,o,a,s,"update"===t)}}))})),function(e){Z.forEach((function(t){var n=t.name,r=t.attacher;r(e,n("Node"),0),r(e,n("Source"),1),r(e,n("Target"),2),r(e,n("Opposite"),3)}))}(Se),function(e){X.forEach((function(t){var n=t.name,r=t.attacher;r(e,n("Edge"),"mixed"),r(e,n("DirectedEdge"),"directed"),r(e,n("UndirectedEdge"),"undirected")}))}(Se),function(e){ee.forEach((function(t){!function(e,t){var n=t.name,r=t.type,i=t.direction;e.prototype[n]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return[];if(!arguments.length)return function(e,t){if(0===e.size)return[];if("mixed"===t||t===e.type)return"function"==typeof Array.from?Array.from(e._edges.keys()):I(e._edges.keys(),e._edges.size);for(var n,r,i="undirected"===t?e.undirectedSize:e.directedSize,o=new Array(i),a="undirected"===t,s=e._edges.values(),u=0;!0!==(n=s.next()).done;)(r=n.value).undirected===a&&(o[u++]=r.key);return o}(this,r);if(1===arguments.length){e=""+e;var o=this._nodes.get(e);if(void 0===o)throw new z("Graph.".concat(n,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n,r){var i=[];return ue(!1,e,t,n,r,(function(e){i.push(e)})),i}(this.multi,"mixed"===r?this.type:r,i,o)}if(2===arguments.length){e=""+e,t=""+t;var a=this._nodes.get(e);if(!a)throw new z("Graph.".concat(n,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(n,':  could not find the "').concat(t,'" target node in the graph.'));return function(e,t,n,r,i){var o=[];return ce(!1,e,t,n,r,i,(function(e){o.push(e)})),o}(r,this.multi,i,a,t)}throw new q("Graph.".concat(n,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o="forEach"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t,n){if("mixed"===r||"mixed"===this.type||r===this.type){if(1===arguments.length)return se(!1,this,r,n=e);if(2===arguments.length){e=""+e,n=t;var a=this._nodes.get(e);if(void 0===a)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return ue(!1,this.multi,"mixed"===r?this.type:r,i,a,n)}if(3===arguments.length){e=""+e,t=""+t;var s=this._nodes.get(e);if(!s)throw new z("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return ce(!1,r,this.multi,i,s,t,n)}throw new q("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}};var a="map"+n[0].toUpperCase()+n.slice(1);e.prototype[a]=function(){var e,t=Array.prototype.slice.call(arguments),n=t.pop();if(0===t.length){var i=0;"directed"!==r&&(i+=this.undirectedSize),"undirected"!==r&&(i+=this.directedSize),e=new Array(i);var a=0;t.push((function(t,r,i,o,s,u,c){e[a++]=n(t,r,i,o,s,u,c)}))}else e=[],t.push((function(t,r,i,o,a,s,u){e.push(n(t,r,i,o,a,s,u))}));return this[o].apply(this,t),e};var s="filter"+n[0].toUpperCase()+n.slice(1);e.prototype[s]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=[];return e.push((function(e,r,i,o,a,s,u){t(e,r,i,o,a,s,u)&&n.push(e)})),this[o].apply(this,e),n};var u="reduce"+n[0].toUpperCase()+n.slice(1);e.prototype[u]=function(){var e,t,n=Array.prototype.slice.call(arguments);if(n.length<2||n.length>4)throw new q("Graph.".concat(u,": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(n.length,")."));if("function"==typeof n[n.length-1]&&"function"!=typeof n[n.length-2])throw new q("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));2===n.length?(e=n[0],t=n[1],n=[]):3===n.length?(e=n[1],t=n[2],n=[n[0]]):4===n.length&&(e=n[2],t=n[3],n=[n[0],n[1]]);var r=t;return n.push((function(t,n,i,o,a,s,u){r=e(r,t,n,i,o,a,s,u)})),this[o].apply(this,n),r}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o="find"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t,n){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return!1;if(1===arguments.length)return se(!0,this,r,n=e);if(2===arguments.length){e=""+e,n=t;var a=this._nodes.get(e);if(void 0===a)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return ue(!0,this.multi,"mixed"===r?this.type:r,i,a,n)}if(3===arguments.length){e=""+e,t=""+t;var s=this._nodes.get(e);if(!s)throw new z("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return ce(!0,r,this.multi,i,s,t,n)}throw new q("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))};var a="some"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[a]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop();return e.push((function(e,n,r,i,o,a,s){return t(e,n,r,i,o,a,s)})),!!this[o].apply(this,e)};var s="every"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[s]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop();return e.push((function(e,n,r,i,o,a,s){return!t(e,n,r,i,o,a,s)})),!this[o].apply(this,e)}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o=n.slice(0,-1)+"Entries";e.prototype[o]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return N.empty();if(!arguments.length)return function(e,t){if(0===e.size)return N.empty();var n="mixed"!==t&&t!==e.type,r="undirected"===t,i=e._edges.values();return new N((function(){for(var e,t;;){if((e=i.next()).done)return e;if(t=e.value,!n||t.undirected===r)break}return{value:{edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected},done:!1}}))}(this,r);if(1===arguments.length){e=""+e;var n=this._nodes.get(e);if(!n)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n){var r=N.empty();return"undirected"!==e&&("out"!==t&&void 0!==n.in&&(r=J(r,re(n.in))),"in"!==t&&void 0!==n.out&&(r=J(r,re(n.out,t?void 0:n.key)))),"directed"!==e&&void 0!==n.undirected&&(r=J(r,re(n.undirected))),r}(r,i,n)}if(2===arguments.length){e=""+e,t=""+t;var a=this._nodes.get(e);if(!a)throw new z("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new z("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return function(e,t,n,r){var i=N.empty();return"undirected"!==e&&(void 0!==n.in&&"out"!==t&&r in n.in&&(i=J(i,ae(n.in,r))),void 0!==n.out&&"in"!==t&&r in n.out&&(t||n.key!==r)&&(i=J(i,ae(n.out,r)))),"directed"!==e&&void 0!==n.undirected&&r in n.undirected&&(i=J(i,ae(n.undirected,r))),i}(r,i,a,t)}throw new q("Graph.".concat(o,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(e,t)}))}(Se),function(e){de.forEach((function(t){(function(e,t){var n=t.name,r=t.type,i=t.direction;e.prototype[n]=function(e){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return[];e=""+e;var t=this._nodes.get(e);if(void 0===t)throw new z("Graph.".concat(n,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n){if("mixed"!==e){if("undirected"===e)return Object.keys(n.undirected);if("string"==typeof t)return Object.keys(n[t])}var r=[];return fe(!1,e,t,n,(function(e){r.push(e)})),r}("mixed"===r?this.type:r,i,t)}})(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o="forEach"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t){if("mixed"===r||"mixed"===this.type||r===this.type){e=""+e;var n=this._nodes.get(e);if(void 0===n)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));fe(!1,"mixed"===r?this.type:r,i,n,t)}};var a="map"+n[0].toUpperCase()+n.slice(1);e.prototype[a]=function(e,t){var n=[];return this[o](e,(function(e,r){n.push(t(e,r))})),n};var s="filter"+n[0].toUpperCase()+n.slice(1);e.prototype[s]=function(e,t){var n=[];return this[o](e,(function(e,r){t(e,r)&&n.push(e)})),n};var u="reduce"+n[0].toUpperCase()+n.slice(1);e.prototype[u]=function(e,t,n){if(arguments.length<3)throw new q("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));var r=n;return this[o](e,(function(e,n){r=t(r,e,n)})),r}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o=n[0].toUpperCase()+n.slice(1,-1),a="find"+o;e.prototype[a]=function(e,t){if("mixed"===r||"mixed"===this.type||r===this.type){e=""+e;var n=this._nodes.get(e);if(void 0===n)throw new z("Graph.".concat(a,': could not find the "').concat(e,'" node in the graph.'));return fe(!0,"mixed"===r?this.type:r,i,n,t)}};var s="some"+o;e.prototype[s]=function(e,t){return!!this[a](e,t)};var u="every"+o;e.prototype[u]=function(e,t){return!this[a](e,(function(e,n){return!t(e,n)}))}}(e,t),function(e,t){var n=t.name,r=t.type,i=t.direction,o=n.slice(0,-1)+"Entries";e.prototype[o]=function(e){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return N.empty();e=""+e;var t=this._nodes.get(e);if(void 0===t)throw new z("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,n){if("mixed"!==e){if("undirected"===e)return pe(null,n,n.undirected);if("string"==typeof t)return pe(null,n,n[t])}var r=N.empty(),i=new he;return"undirected"!==e&&("out"!==t&&(r=J(r,pe(i,n,n.in))),"in"!==t&&(r=J(r,pe(i,n,n.out)))),"directed"!==e&&(r=J(r,pe(i,n,n.undirected))),r}("mixed"===r?this.type:r,i,t)}}(e,t)}))}(Se);var Te=function(e){function n(t){var n=s({type:"directed"},t);if("multi"in n&&!1!==n.multi)throw new q("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==n.type)throw new q('DirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se),ke=function(e){function n(t){var n=s({type:"undirected"},t);if("multi"in n&&!1!==n.multi)throw new q("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==n.type)throw new q('UndirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se),De=function(e){function n(t){var n=s({multi:!0},t);if("multi"in n&&!0!==n.multi)throw new q("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return e.call(this,n)||this}return t(n,e),n}(Se),Ne=function(e){function n(t){var n=s({type:"directed",multi:!0},t);if("multi"in n&&!0!==n.multi)throw new q("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==n.type)throw new q('MultiDirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se),Pe=function(e){function n(t){var n=s({type:"undirected",multi:!0},t);if("multi"in n&&!0!==n.multi)throw new q("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==n.type)throw new q('MultiUndirectedGraph.from: inconsistent "'+n.type+'" type in given options!');return e.call(this,n)||this}return t(n,e),n}(Se);function Fe(e){e.from=function(t,n){var r=s({},t.options,n),i=new e(r);return i.import(t),i}}return Fe(Se),Fe(Te),Fe(ke),Fe(De),Fe(Ne),Fe(Pe),Se.Graph=Se,Se.DirectedGraph=Te,Se.UndirectedGraph=ke,Se.MultiGraph=De,Se.MultiDirectedGraph=Ne,Se.MultiUndirectedGraph=Pe,Se.InvalidArgumentsGraphError=q,Se.NotFoundGraphError=z,Se.UsageGraphError=B,Se}()},9755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,u=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,d=o.indexOf,h={},l=h.toString,f=h.hasOwnProperty,p=f.toString,g=p.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},m=function(e){return null!=e&&e===e.window},b=r.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,i,o=(n=n||b).createElement("script");if(o.text=e,t)for(r in w)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[l.call(e)]||"object":typeof e}var _="3.6.4",L=function(e,t){return new L.fn.init(e,t)};function A(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!y(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}L.fn=L.prototype={jquery:_,constructor:L,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=L.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return L.each(this,e)},map:function(e){return this.pushStack(L.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(L.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(L.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},L.extend=L.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(L.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||L.isPlainObject(n)?n:{},i=!1,a[t]=L.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},L.extend({expando:"jQuery"+(_+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==l.call(e)||(t=a(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||p.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(A(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(A(Object(e))?L.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(A(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return u(a)},guid:1,support:v}),"function"==typeof Symbol&&(L.fn[Symbol.iterator]=o[Symbol.iterator]),L.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){h["[object "+t+"]"]=t.toLowerCase()}));var C=function(e){var t,n,r,i,o,a,s,u,c,d,h,l,f,p,g,v,y,m,b,w="sizzle"+1*new Date,x=e.document,E=0,_=0,L=ue(),A=ue(),C=ue(),S=ue(),T=function(e,t){return e===t&&(h=!0),0},k={}.hasOwnProperty,D=[],N=D.pop,P=D.push,F=D.push,O=D.slice,R=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},G="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",j="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+M+"*("+j+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+M+"*\\]",U=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",q=new RegExp(M+"+","g"),z=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),H=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),W=new RegExp(M+"|>"),V=new RegExp(U),Y=new RegExp("^"+j+"$"),$={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+U),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+G+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){l()},ae=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{F.apply(D=O.call(x.childNodes),x.childNodes),D[x.childNodes.length].nodeType}catch(e){F={apply:D.length?function(e,t){P.apply(e,O.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,c,d,h,p,y,m=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!i&&(l(t),t=t||f,g)){if(11!==x&&(h=J.exec(e)))if(o=h[1]){if(9===x){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(m&&(c=m.getElementById(o))&&b(t,c)&&c.id===o)return r.push(c),r}else{if(h[2])return F.apply(r,t.getElementsByTagName(e)),r;if((o=h[3])&&n.getElementsByClassName&&t.getElementsByClassName)return F.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!v||!v.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(y=e,m=t,1===x&&(W.test(e)||H.test(e))){for((m=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((d=t.getAttribute("id"))?d=d.replace(re,ie):t.setAttribute("id",d=w)),s=(p=a(e)).length;s--;)p[s]=(d?"#"+d:":scope")+" "+be(p[s]);y=p.join(",")}try{return F.apply(r,m.querySelectorAll(y)),r}catch(t){S(e,!0)}finally{d===w&&t.removeAttribute("id")}}}return u(e.replace(z,"$1"),t,r,i)}function ue(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ce(e){return e[w]=!0,e}function de(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function he(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ce((function(t){return t=+t,ce((function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Z.test(t||n&&n.nodeName||"HTML")},l=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:x;return a!=f&&9===a.nodeType&&a.documentElement?(p=(f=a).documentElement,g=!o(f),x!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=de((function(e){return p.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.cssHas=de((function(){try{return f.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),n.attributes=de((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=de((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=de((function(e){return p.appendChild(e).id=w,!f.getElementsByName||!f.getElementsByName(w).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],v=[],(n.qsa=Q.test(f.querySelectorAll))&&(de((function(e){var t;p.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+G+")"),e.querySelectorAll("[id~="+w+"-]").length||v.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),de((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=Q.test(m=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&de((function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),y.push("!=",U)})),n.cssHas||v.push(":has"),v=v.length&&new RegExp(v.join("|")),y=y.length&&new RegExp(y.join("|")),t=Q.test(p.compareDocumentPosition),b=t||Q.test(p.contains)?function(e,t){var n=9===e.nodeType&&e.documentElement||e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return h=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==x&&b(x,e)?-1:t==f||t.ownerDocument==x&&b(x,t)?1:d?R(d,e)-R(d,t):0:4&r?-1:1)}:function(e,t){if(e===t)return h=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==f?-1:t==f?1:i?-1:o?1:d?R(d,e)-R(d,t):0;if(i===o)return le(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?le(a[r],s[r]):a[r]==x?-1:s[r]==x?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(l(e),n.matchesSelector&&g&&!S[t+" "]&&(!y||!y.test(t))&&(!v||!v.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){S(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&l(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&l(e);var i=r.attrHandle[t.toLowerCase()],o=i&&k.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(h=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(T),h){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return d=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},r=se.selectors={cacheLength:50,createPseudo:ce,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=L[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&L(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,d,h,l,f,p,g=o!==a?"nextSibling":"previousSibling",v=t.parentNode,y=s&&t.nodeName.toLowerCase(),m=!u&&!s,b=!1;if(v){if(o){for(;g;){for(l=t;l=l[g];)if(s?l.nodeName.toLowerCase()===y:1===l.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?v.firstChild:v.lastChild],a&&m){for(b=(f=(c=(d=(h=(l=v)[w]||(l[w]={}))[l.uniqueID]||(h[l.uniqueID]={}))[e]||[])[0]===E&&c[1])&&c[2],l=f&&v.childNodes[f];l=++f&&l&&l[g]||(b=f=0)||p.pop();)if(1===l.nodeType&&++b&&l===t){d[e]=[E,f,b];break}}else if(m&&(b=f=(c=(d=(h=(l=t)[w]||(l[w]={}))[l.uniqueID]||(h[l.uniqueID]={}))[e]||[])[0]===E&&c[1]),!1===b)for(;(l=++f&&l&&l[g]||(b=f=0)||p.pop())&&((s?l.nodeName.toLowerCase()!==y:1!==l.nodeType)||!++b||(m&&((d=(h=l[w]||(l[w]={}))[l.uniqueID]||(h[l.uniqueID]={}))[e]=[E,b]),l!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[w]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=R(e,o[a])]=!(n[r]=o[a])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace(z,"$1"));return r[w]?ce((function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ce((function(e){return Y.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ve((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function me(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function we(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=_++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,d,h,l=[E,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(d=(h=t[w]||(t[w]={}))[t.uniqueID]||(h[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=d[o])&&c[0]===E&&c[1]===s)return l[2]=c[2];if(d[o]=l,l[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ee(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function _e(e,t,n,r,i,o){return r&&!r[w]&&(r=_e(r)),i&&!i[w]&&(i=_e(i,o)),ce((function(o,a,s,u){var c,d,h,l=[],f=[],p=a.length,g=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?g:Ee(g,l,e,s,u),y=n?i||(o?e:p||r)?[]:a:v;if(n&&n(v,y,s,u),r)for(c=Ee(y,f),r(c,[],s,u),d=c.length;d--;)(h=c[d])&&(y[f[d]]=!(v[f[d]]=h));if(o){if(i||e){if(i){for(c=[],d=y.length;d--;)(h=y[d])&&c.push(v[d]=h);i(null,y=[],c,u)}for(d=y.length;d--;)(h=y[d])&&(c=i?R(o,h):l[d])>-1&&(o[c]=!(a[c]=h))}}else y=Ee(y===a?y.splice(p,y.length):y),i?i(null,a,y,u):F.apply(a,y)}))}function Le(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,d=we((function(e){return e===t}),s,!0),h=we((function(e){return R(t,e)>-1}),s,!0),l=[function(e,n,r){var i=!a&&(r||n!==c)||((t=n).nodeType?d(e,n,r):h(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])l=[we(xe(l),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[w]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return _e(u>1&&xe(l),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(z,"$1"),n,u<i&&Le(e.slice(u,i)),i<o&&Le(e=e.slice(i)),i<o&&be(e))}l.push(n)}return xe(l)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=se.tokenize=function(e,t){var n,i,o,a,s,u,c,d=A[e+" "];if(d)return t?0:d.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(i=B.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=H.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(z," ")}),s=s.slice(n.length)),r.filter)!(i=$[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):A(e,u).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=C[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Le(t[n]))[w]?i.push(s):o.push(s);s=C(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,d){var h,p,v,y=0,m="0",b=o&&[],w=[],x=c,_=o||i&&r.find.TAG("*",d),L=E+=null==x?1:Math.random()||.1,A=_.length;for(d&&(c=a==f||a||d);m!==A&&null!=(h=_[m]);m++){if(i&&h){for(p=0,a||h.ownerDocument==f||(l(h),s=!g);v=e[p++];)if(v(h,a||f,s)){u.push(h);break}d&&(E=L)}n&&((h=!v&&h)&&y--,o&&b.push(h))}if(y+=m,n&&m!==y){for(p=0;v=t[p++];)v(b,w,a,s);if(o){if(y>0)for(;m--;)b[m]||w[m]||(w[m]=N.call(u));w=Ee(w)}F.apply(u,w),d&&!o&&w.length>0&&y+t.length>1&&se.uniqueSort(u)}return d&&(E=L,c=x),b};return n?ce(o):o}(o,i)),s.selector=e}return s},u=se.select=function(e,t,n,i){var o,u,c,d,h,l="function"==typeof e&&e,f=!i&&a(e=l.selector||e);if(n=n||[],1===f.length){if((u=f[0]=f[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=$.needsContext.test(e)?0:u.length;o--&&(c=u[o],!r.relative[d=c.type]);)if((h=r.find[d])&&(i=h(c.matches[0].replace(te,ne),ee.test(u[0].type)&&ye(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&be(u)))return F.apply(n,i),n;break}}return(l||s(e,f))(i,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=w.split("").sort(T).join("")===w,n.detectDuplicates=!!h,l(),n.sortDetached=de((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),de((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||he("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&de((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||he("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),de((function(e){return null==e.getAttribute("disabled")}))||he(G,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(r);L.find=C,L.expr=C.selectors,L.expr[":"]=L.expr.pseudos,L.uniqueSort=L.unique=C.uniqueSort,L.text=C.getText,L.isXMLDoc=C.isXML,L.contains=C.contains,L.escapeSelector=C.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&L(e).is(n))break;r.push(e)}return r},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=L.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,t,n){return y(t)?L.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?L.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?L.grep(e,(function(e){return d.call(t,e)>-1!==n})):L.filter(t,e,n)}L.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?L.find.matchesSelector(r,e)?[r]:[]:L.find.matches(e,L.grep(t,(function(e){return 1===e.nodeType})))},L.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(L(e).filter((function(){for(t=0;t<r;t++)if(L.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)L.find(e,i[t],n);return r>1?L.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&k.test(e)?L(e):e||[],!1).length}});var F,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(L.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||F,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:O.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof L?t[0]:t,L.merge(this,L.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),N.test(r[1])&&L.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(L):L.makeArray(e,this)}).prototype=L.fn,F=L(b);var R=/^(?:parents|prev(?:Until|All))/,G={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}L.fn.extend({has:function(e){var t=L(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(L.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&L(e);if(!k.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&L.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?L.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?d.call(L(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(L.uniqueSort(L.merge(this.get(),L(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),L.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(D(e,"template")&&(e=e.content||e),L.merge([],e.childNodes))}},(function(e,t){L.fn[e]=function(n,r){var i=L.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=L.filter(r,i)),this.length>1&&(G[e]||L.uniqueSort(i),R.test(e)&&i.reverse()),this.pushStack(i)}}));var j=/[^\x20\t\r\n\f]+/g;function I(e){return e}function U(e){throw e}function q(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}L.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return L.each(e.match(j)||[],(function(e,n){t[n]=!0})),t}(e):L.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){L.each(n,(function(n,r){y(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==E(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return L.each(arguments,(function(e,t){for(var n;(n=L.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?L.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},L.extend({Deferred:function(e){var t=[["notify","progress",L.Callbacks("memory"),L.Callbacks("memory"),2],["resolve","done",L.Callbacks("once memory"),L.Callbacks("once memory"),0,"resolved"],["reject","fail",L.Callbacks("once memory"),L.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return L.Deferred((function(n){L.each(t,(function(t,r){var i=y(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,i){var o=0;function a(e,t,n,i){return function(){var s=this,u=arguments,c=function(){var r,c;if(!(e<o)){if((r=n.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=r&&("object"==typeof r||"function"==typeof r)&&r.then,y(c)?i?c.call(r,a(o,t,I,i),a(o,t,U,i)):(o++,c.call(r,a(o,t,I,i),a(o,t,U,i),a(o,t,I,t.notifyWith))):(n!==I&&(s=void 0,u=[r]),(i||t.resolveWith)(s,u))}},d=i?c:function(){try{c()}catch(r){L.Deferred.exceptionHook&&L.Deferred.exceptionHook(r,d.stackTrace),e+1>=o&&(n!==U&&(s=void 0,u=[r]),t.rejectWith(s,u))}};e?d():(L.Deferred.getStackHook&&(d.stackTrace=L.Deferred.getStackHook()),r.setTimeout(d))}}return L.Deferred((function(r){t[0][3].add(a(0,r,y(i)?i:I,r.notifyWith)),t[1][3].add(a(0,r,y(e)?e:I)),t[2][3].add(a(0,r,y(n)?n:U))})).promise()},promise:function(e){return null!=e?L.extend(e,i):i}},o={};return L.each(t,(function(e,r){var a=r[2],s=r[5];i[r[1]]=a.add,s&&a.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=L.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(q(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)q(i[n],a(n),o.reject);return o.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;L.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&z.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},L.readyException=function(e){r.setTimeout((function(){throw e}))};var B=L.Deferred();function H(){b.removeEventListener("DOMContentLoaded",H),r.removeEventListener("load",H),L.ready()}L.fn.ready=function(e){return B.then(e).catch((function(e){L.readyException(e)})),this},L.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--L.readyWait:L.isReady)||(L.isReady=!0,!0!==e&&--L.readyWait>0||B.resolveWith(b,[L]))}}),L.ready.then=B.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(L.ready):(b.addEventListener("DOMContentLoaded",H),r.addEventListener("load",H));var W=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===E(n))for(s in i=!0,n)W(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(L(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},V=/^-ms-/,Y=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function Z(e){return e.replace(V,"ms-").replace(Y,$)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=L.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Z(t)]=n;else for(r in t)i[Z(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Z):(t=Z(t))in r?[t]:t.match(j)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||L.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!L.isEmptyObject(t)}};var Q=new K,J=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}L.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),L.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Z(r.slice(5)),ne(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){J.set(this,e)})):W(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=J.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){J.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),L.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,L.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=L.queue(e,t),r=n.length,i=n.shift(),o=L._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){L.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:L.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),L.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?L.queue(this[0],e):void 0===t?this:this.each((function(){var n=L.queue(this,e,t);L._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&L.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){L.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=L.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=b.documentElement,se=function(e){return L.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(se=function(e){return L.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===L.css(e,"display")};function de(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return L.css(e,t,"")},u=s(),c=n&&n[3]||(L.cssNumber[t]?"":"px"),d=e.nodeType&&(L.cssNumber[t]||"px"!==c&&+u)&&ie.exec(L.css(e,t));if(d&&d[3]!==c){for(u/=2,c=c||d[3],d=+u||1;a--;)L.style(e,t,d+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),d/=o;d*=2,L.style(e,t,d+c),n=n||[]}return n&&(d=+d||+u||0,i=n[1]?d+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=d,r.end=i)),i}var he={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,i=he[r];return i||(t=n.body.appendChild(n.createElement(r)),i=L.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),he[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Q.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ce(r)&&(i[o]=le(r))):"none"!==n&&(i[o]="none",Q.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}L.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?L(this).show():L(this).hide()}))}});var pe,ge,ve=/^(?:checkbox|radio)$/i,ye=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,me=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(ge=b.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),pe.appendChild(ge),v.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",v.option=!!pe.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function we(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?L.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,v.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function _e(e,t,n,r,i){for(var o,a,s,u,c,d,h=t.createDocumentFragment(),l=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===E(o))L.merge(l,o.nodeType?[o]:o);else if(Ee.test(o)){for(a=a||h.appendChild(t.createElement("div")),s=(ye.exec(o)||["",""])[1].toLowerCase(),u=be[s]||be._default,a.innerHTML=u[1]+L.htmlPrefilter(o)+u[2],d=u[0];d--;)a=a.lastChild;L.merge(l,a.childNodes),(a=h.firstChild).textContent=""}else l.push(t.createTextNode(o));for(h.textContent="",f=0;o=l[f++];)if(r&&L.inArray(o,r)>-1)i&&i.push(o);else if(c=se(o),a=we(h.appendChild(o),"script"),c&&xe(a),n)for(d=0;o=a[d++];)me.test(o.type||"")&&n.push(o);return h}var Le=/^([^.]*)(?:\.(.+)|)/;function Ae(){return!0}function Ce(){return!1}function Se(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Te(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(a=i,i=function(e){return L().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=L.guid++)),e.each((function(){L.event.add(this,t,i,r,n)}))}function ke(e,t,n){n?(Q.set(e,t,!1),L.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(L.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),Q.set(this,t,o),r=n(this,t),this[t](),o!==(i=Q.get(this,t))||r?Q.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i&&i.value}else o.length&&(Q.set(this,t,{value:L.event.trigger(L.extend(o[0],L.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&L.event.add(e,t,Ae)}L.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,d,h,l,f,p,g,v=Q.get(e);if(X(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&L.find.matchesSelector(ae,i),n.guid||(n.guid=L.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==L&&L.event.triggered!==t.type?L.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(j)||[""]).length;c--;)f=g=(s=Le.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f&&(h=L.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,h=L.event.special[f]||{},d=L.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&L.expr.match.needsContext.test(i),namespace:p.join(".")},o),(l=u[f])||((l=u[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,r,p,a)||e.addEventListener&&e.addEventListener(f,a)),h.add&&(h.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),i?l.splice(l.delegateCount++,0,d):l.push(d),L.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,d,h,l,f,p,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(f=g=(s=Le.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f){for(h=L.event.special[f]||{},l=u[f=(r?h.delegateType:h.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=l.length;o--;)d=l[o],!i&&g!==d.origType||n&&n.guid!==d.guid||s&&!s.test(d.namespace)||r&&r!==d.selector&&("**"!==r||!d.selector)||(l.splice(o,1),d.selector&&l.delegateCount--,h.remove&&h.remove.call(e,d));a&&!l.length&&(h.teardown&&!1!==h.teardown.call(e,p,v.handle)||L.removeEvent(e,f,v.handle),delete u[f])}else for(f in u)L.event.remove(e,f+t[c],n,r,!0);L.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=L.event.fix(e),c=(Q.get(this,"events")||Object.create(null))[u.type]||[],d=L.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,u)){for(a=L.event.handlers.call(this,u,c),t=0;(i=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((L.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?L(i,this).index(c)>-1:L.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(L.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[L.expando]?e:new L.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ve.test(t.type)&&t.click&&D(t,"input")&&ke(t,"click",Ae),!1},trigger:function(e){var t=this||e;return ve.test(t.type)&&t.click&&D(t,"input")&&ke(t,"click"),!0},_default:function(e){var t=e.target;return ve.test(t.type)&&t.click&&D(t,"input")&&Q.get(t,"click")||D(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},L.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},L.Event=function(e,t){if(!(this instanceof L.Event))return new L.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ae:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&L.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[L.expando]=!0},L.Event.prototype={constructor:L.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ae,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ae,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ae,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},L.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},L.event.addProp),L.each({focus:"focusin",blur:"focusout"},(function(e,t){L.event.special[e]={setup:function(){return ke(this,e,Se),!1},trigger:function(){return ke(this,e),!0},_default:function(t){return Q.get(t.target,e)},delegateType:t}})),L.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){L.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||L.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),L.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,L(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each((function(){L.event.remove(this,e,n,t)}))}});var De=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Fe(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&L(e).children("tbody")[0]||e}function Oe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ge(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Q.hasData(e)&&(s=Q.get(e).events))for(i in Q.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)L.event.add(t,i,s[i][n]);J.hasData(e)&&(o=J.access(e),a=L.extend({},o),J.set(t,a))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ve.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function je(e,t,n,r){t=u(t);var i,o,a,s,c,d,h=0,l=e.length,f=l-1,p=t[0],g=y(p);if(g||l>1&&"string"==typeof p&&!v.checkClone&&Ne.test(p))return e.each((function(i){var o=e.eq(i);g&&(t[0]=p.call(this,i,o.html())),je(o,t,n,r)}));if(l&&(o=(i=_e(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=L.map(we(i,"script"),Oe)).length;h<l;h++)c=i,h!==f&&(c=L.clone(c,!0,!0),s&&L.merge(a,we(c,"script"))),n.call(e[h],c,h);if(s)for(d=a[a.length-1].ownerDocument,L.map(a,Re),h=0;h<s;h++)c=a[h],me.test(c.type||"")&&!Q.access(c,"globalEval")&&L.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?L._evalUrl&&!c.noModule&&L._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},d):x(c.textContent.replace(Pe,""),c,d))}return e}function Ie(e,t,n){for(var r,i=t?L.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||L.cleanData(we(r)),r.parentNode&&(n&&se(r)&&xe(we(r,"script")),r.parentNode.removeChild(r));return e}L.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=se(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||L.isXMLDoc(e)))for(a=we(s),r=0,i=(o=we(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||we(e),a=a||we(s),r=0,i=o.length;r<i;r++)Ge(o[r],a[r]);else Ge(e,s);return(a=we(s,"script")).length>0&&xe(a,!u&&we(e,"script")),s},cleanData:function(e){for(var t,n,r,i=L.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?L.event.remove(n,r):L.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),L.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return W(this,(function(e){return void 0===e?L.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Fe(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Fe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(L.cleanData(we(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return L.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!be[(ye.exec(e)||["",""])[1].toLowerCase()]){e=L.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(L.cleanData(we(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var n=this.parentNode;L.inArray(this,e)<0&&(L.cleanData(we(this)),n&&n.replaceChild(t,this))}),e)}}),L.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){L.fn[e]=function(e){for(var n,r=[],i=L(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),L(i[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Ue=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),qe=/^--/,ze=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Be=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},He=new RegExp(oe.join("|"),"i"),We="[\\x20\\t\\r\\n\\f]",Ve=new RegExp("^"+We+"+|((?:^|[^\\\\])(?:\\\\.)*)"+We+"+$","g");function Ye(e,t,n){var r,i,o,a,s=qe.test(t),u=e.style;return(n=n||ze(e))&&(a=n.getPropertyValue(t)||n[t],s&&a&&(a=a.replace(Ve,"$1")||void 0),""!==a||se(e)||(a=L.style(e,t)),!v.pixelBoxStyles()&&Ue.test(a)&&He.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(c).appendChild(d);var e=r.getComputedStyle(d);n="1%"!==e.top,u=12===t(e.marginLeft),d.style.right="60%",a=36===t(e.right),i=36===t(e.width),d.style.position="absolute",o=12===t(d.offsetWidth/3),ae.removeChild(c),d=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,a,s,u,c=b.createElement("div"),d=b.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===d.style.backgroundClip,L.extend(v,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,i;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ae.appendChild(e).appendChild(t).appendChild(n),i=r.getComputedStyle(t),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),s}}))}();var Ze=["Webkit","Moz","ms"],Xe=b.createElement("div").style,Ke={};function Qe(e){return L.cssProps[e]||Ke[e]||(e in Xe?e:Ke[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ze.length;n--;)if((e=Ze[n]+t)in Xe)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"};function nt(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function rt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=L.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=L.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=L.css(e,"border"+oe[a]+"Width",!0,i))):(u+=L.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=L.css(e,"border"+oe[a]+"Width",!0,i):s+=L.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function it(e,t,n){var r=ze(e),i=(!v.boxSizingReliable()||n)&&"border-box"===L.css(e,"boxSizing",!1,r),o=i,a=Ye(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&i||!v.reliableTrDimensions()&&D(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===L.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===L.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+rt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function ot(e,t,n,r,i){return new ot.prototype.init(e,t,n,r,i)}L.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=Z(t),u=qe.test(t),c=e.style;if(u||(t=Qe(s)),a=L.cssHooks[t]||L.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:c[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=de(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(L.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,a,s=Z(t);return qe.test(t)||(t=Qe(s)),(a=L.cssHooks[t]||L.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ye(e,t,r)),"normal"===i&&t in tt&&(i=tt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),L.each(["height","width"],(function(e,t){L.cssHooks[t]={get:function(e,n,r){if(n)return!Je.test(L.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,r):Be(e,et,(function(){return it(e,t,r)}))},set:function(e,n,r){var i,o=ze(e),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===L.css(e,"boxSizing",!1,o),u=r?rt(e,t,r,s,o):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-rt(e,t,"border",!1,o)-.5)),u&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=L.css(e,t)),nt(0,n,u)}}})),L.cssHooks.marginLeft=$e(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),L.each({margin:"",padding:"",border:"Width"},(function(e,t){L.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(L.cssHooks[e+t].set=nt)})),L.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=ze(e),i=t.length;a<i;a++)o[t[a]]=L.css(e,t[a],!1,r);return o}return void 0!==n?L.style(e,t,n):L.css(e,t)}),e,t,arguments.length>1)}}),L.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||L.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(L.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=L.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=L.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){L.fx.step[e.prop]?L.fx.step[e.prop](e):1!==e.elem.nodeType||!L.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:L.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},L.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},L.fx=ot.prototype.init,L.fx.step={};var at,st,ut=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function dt(){st&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(dt):r.setTimeout(dt,L.fx.interval),L.fx.tick())}function ht(){return r.setTimeout((function(){at=void 0})),at=Date.now()}function lt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ft(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=L.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var t=at||ht(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:L.extend({},t),opts:L.extend(!0,{specialEasing:{},easing:L.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||ht(),duration:n.duration,tweens:[],createTween:function(t,n){var r=L.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),d=c.props;for(function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=Z(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=L.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(d,c.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(c,e,d,c.opts))return y(r.stop)&&(L._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return L.map(d,ft,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),L.fx.timer(L.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}L.Animation=L.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return de(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(j);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,c,d,h="width"in t||"height"in t,l=this,f={},p=e.style,g=e.nodeType&&ce(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=L._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,l.always((function(){l.always((function(){a.unqueued--,L.queue(e,"fx").length||a.empty.fire()}))}))),t)if(i=t[r],ut.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}f[r]=v&&v[r]||L.style(e,r)}if((u=!L.isEmptyObject(t))||!L.isEmptyObject(f))for(r in h&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=v&&v.display)&&(c=Q.get(e,"display")),"none"===(d=L.css(e,"display"))&&(c?d=c:(fe([e],!0),c=e.style.display||c,d=L.css(e,"display"),fe([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===L.css(e,"float")&&(u||(l.done((function(){p.display=c})),null==c&&(d=p.display,c="none"===d?"":d)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",l.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),u=!1,f)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&fe([e],!0),l.done((function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),f)L.style(e,r,f[r])}))),u=ft(g?v[r]:0,r,l),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),L.speed=function(e,t,n){var r=e&&"object"==typeof e?L.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return L.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in L.fx.speeds?r.duration=L.fx.speeds[r.duration]:r.duration=L.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&L.dequeue(this,r.queue)},r},L.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=L.isEmptyObject(e),o=L.speed(t,n,r),a=function(){var t=pt(this,L.extend({},e),o);(i||Q.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=L.timers,a=Q.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ct.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||L.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=L.timers,a=r?r.length:0;for(n.finish=!0,L.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),L.each(["toggle","show","hide"],(function(e,t){var n=L.fn[t];L.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(lt(t,!0),e,r,i)}})),L.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){L.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),L.timers=[],L.fx.tick=function(){var e,t=0,n=L.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||L.fx.stop(),at=void 0},L.fx.timer=function(e){L.timers.push(e),L.fx.start()},L.fx.interval=13,L.fx.start=function(){st||(st=!0,dt())},L.fx.stop=function(){st=null},L.fx.speeds={slow:600,fast:200,_default:400},L.fn.delay=function(e,t){return e=L.fx&&L.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var gt,vt=L.expr.attrHandle;L.fn.extend({attr:function(e,t){return W(this,L.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){L.removeAttr(this,e)}))}}),L.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?L.prop(e,t,n):(1===o&&L.isXMLDoc(e)||(i=L.attrHooks[t.toLowerCase()]||(L.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void L.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=L.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(j);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?L.removeAttr(e,n):e.setAttribute(n,n),n}},L.each(L.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=vt[t]||L.find.attr;vt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=vt[a],vt[a]=i,i=null!=n(e,t,r)?a:null,vt[a]=o),i}}));var yt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function bt(e){return(e.match(j)||[]).join(" ")}function wt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}L.fn.extend({prop:function(e,t){return W(this,L.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[L.propFix[e]||e]}))}}),L.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&L.isXMLDoc(e)||(t=L.propFix[t]||t,i=L.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=L.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(L.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),L.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){L.propFix[this.toLowerCase()]=this})),L.fn.extend({addClass:function(e){var t,n,r,i,o,a;return y(e)?this.each((function(t){L(this).addClass(e.call(this,t,wt(this)))})):(t=xt(e)).length?this.each((function(){if(r=wt(this),n=1===this.nodeType&&" "+bt(r)+" "){for(o=0;o<t.length;o++)i=t[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=bt(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(e){var t,n,r,i,o,a;return y(e)?this.each((function(t){L(this).removeClass(e.call(this,t,wt(this)))})):arguments.length?(t=xt(e)).length?this.each((function(){if(r=wt(this),n=1===this.nodeType&&" "+bt(r)+" "){for(o=0;o<t.length;o++)for(i=t[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=bt(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,r,i,o,a=typeof e,s="string"===a||Array.isArray(e);return y(e)?this.each((function(n){L(this).toggleClass(e.call(this,n,wt(this),t),t)})):"boolean"==typeof t&&s?t?this.addClass(e):this.removeClass(e):(n=xt(e),this.each((function(){if(s)for(o=L(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==e&&"boolean"!==a||((r=wt(this))&&Q.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===e?"":Q.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+bt(wt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;L.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,L(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=L.map(i,(function(e){return null==e?"":e+""}))),(t=L.valHooks[this.type]||L.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=L.valHooks[i.type]||L.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Et,""):null==n?"":n:void 0}}),L.extend({valHooks:{option:{get:function(e){var t=L.find.attr(e,"value");return null!=t?t:bt(L.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=L(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=L.makeArray(t),a=i.length;a--;)((r=i[a]).selected=L.inArray(L.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),L.each(["radio","checkbox"],(function(){L.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=L.inArray(L(e).val(),t)>-1}},v.checkOn||(L.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in r;var _t=/^(?:focusinfocus|focusoutblur)$/,Lt=function(e){e.stopPropagation()};L.extend(L.event,{trigger:function(e,t,n,i){var o,a,s,u,c,d,h,l,p=[n||b],g=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=l=s=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!_t.test(g+L.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[L.expando]?e:new L.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:L.makeArray(t,[e]),h=L.event.special[g]||{},i||!h.trigger||!1!==h.trigger.apply(n,t))){if(!i&&!h.noBubble&&!m(n)){for(u=h.delegateType||g,_t.test(u+g)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(n.ownerDocument||b)&&p.push(s.defaultView||s.parentWindow||r)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)l=a,e.type=o>1?u:h.bindType||g,(d=(Q.get(a,"events")||Object.create(null))[e.type]&&Q.get(a,"handle"))&&d.apply(a,t),(d=c&&a[c])&&d.apply&&X(a)&&(e.result=d.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),t)||!X(n)||c&&y(n[g])&&!m(n)&&((s=n[c])&&(n[c]=null),L.event.triggered=g,e.isPropagationStopped()&&l.addEventListener(g,Lt),n[g](),e.isPropagationStopped()&&l.removeEventListener(g,Lt),L.event.triggered=void 0,s&&(n[c]=s)),e.result}},simulate:function(e,t,n){var r=L.extend(new L.Event,n,{type:e,isSimulated:!0});L.event.trigger(r,null,t)}}),L.fn.extend({trigger:function(e,t){return this.each((function(){L.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return L.event.trigger(e,t,n,!0)}}),v.focusin||L.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){L.event.simulate(t,e.target,L.event.fix(e))};L.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=Q.access(r,t);i||r.addEventListener(e,n,!0),Q.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=Q.access(r,t)-1;i?Q.access(r,t,i):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}}));var At=r.location,Ct={guid:Date.now()},St=/\?/;L.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||L.error("Invalid XML: "+(n?L.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Tt=/\[\]$/,kt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Pt(e,t,n,r){var i;if(Array.isArray(t))L.each(t,(function(t,i){n||Tt.test(e)?r(e,i):Pt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==E(t))r(e,t);else for(i in t)Pt(e+"["+i+"]",t[i],n,r)}L.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!L.isPlainObject(e))L.each(e,(function(){i(this.name,this.value)}));else for(n in e)Pt(n,e[n],t,i);return r.join("&")},L.fn.extend({serialize:function(){return L.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=L.prop(this,"elements");return e?L.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!L(this).is(":disabled")&&Nt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!ve.test(e))})).map((function(e,t){var n=L(this).val();return null==n?null:Array.isArray(n)?L.map(n,(function(e){return{name:t.name,value:e.replace(kt,"\r\n")}})):{name:t.name,value:n.replace(kt,"\r\n")}})).get()}});var Ft=/%20/g,Ot=/#.*$/,Rt=/([?&])_=[^&]*/,Gt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:GET|HEAD)$/,jt=/^\/\//,It={},Ut={},qt="*/".concat("*"),zt=b.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(j)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ht(e,t,n,r){var i={},o=e===Ut;function a(s){var u;return i[s]=!0,L.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function Wt(e,t){var n,r,i=L.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&L.extend(!0,e,r),e}zt.href=At.href,L.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":L.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,L.ajaxSettings),t):Wt(L.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,a,s,u,c,d,h,l,f=L.ajaxSetup({},t),p=f.context||f,g=f.context&&(p.nodeType||p.jquery)?L(p):L.event,v=L.Deferred(),y=L.Callbacks("once memory"),m=f.statusCode||{},w={},x={},E="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Gt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)_.always(e[_.status]);else for(t in e)m[t]=[m[t],e[t]];return this},abort:function(e){var t=e||E;return n&&n.abort(t),A(0,t),this}};if(v.promise(_),f.url=((e||f.url||At.href)+"").replace(jt,At.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(j)||[""],null==f.crossDomain){u=b.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=zt.protocol+"//"+zt.host!=u.protocol+"//"+u.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=L.param(f.data,f.traditional)),Ht(It,f,t,_),c)return _;for(h in(d=L.event&&f.global)&&0==L.active++&&L.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Mt.test(f.type),i=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ft,"+")):(l=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(St.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(Rt,"$1"),l=(St.test(i)?"&":"?")+"_="+Ct.guid+++l),f.url=i+l),f.ifModified&&(L.lastModified[i]&&_.setRequestHeader("If-Modified-Since",L.lastModified[i]),L.etag[i]&&_.setRequestHeader("If-None-Match",L.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&_.setRequestHeader("Content-Type",f.contentType),_.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+qt+"; q=0.01":""):f.accepts["*"]),f.headers)_.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(p,_,f)||c))return _.abort();if(E="abort",y.add(f.complete),_.done(f.success),_.fail(f.error),n=Ht(Ut,f,t,_)){if(_.readyState=1,d&&g.trigger("ajaxSend",[_,f]),c)return _;f.async&&f.timeout>0&&(s=r.setTimeout((function(){_.abort("timeout")}),f.timeout));try{c=!1,n.send(w,A)}catch(e){if(c)throw e;A(-1,e)}}else A(-1,"No Transport");function A(e,t,a,u){var h,l,b,w,x,E=t;c||(c=!0,s&&r.clearTimeout(s),n=void 0,o=u||"",_.readyState=e>0?4:0,h=e>=200&&e<300||304===e,a&&(w=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(f,_,a)),!h&&L.inArray("script",f.dataTypes)>-1&&L.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),w=function(e,t,n,r){var i,o,a,s,u,c={},d=e.dataTypes.slice();if(d[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=d.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=d.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],d.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(f,w,_,h),h?(f.ifModified&&((x=_.getResponseHeader("Last-Modified"))&&(L.lastModified[i]=x),(x=_.getResponseHeader("etag"))&&(L.etag[i]=x)),204===e||"HEAD"===f.type?E="nocontent":304===e?E="notmodified":(E=w.state,l=w.data,h=!(b=w.error))):(b=E,!e&&E||(E="error",e<0&&(e=0))),_.status=e,_.statusText=(t||E)+"",h?v.resolveWith(p,[l,E,_]):v.rejectWith(p,[_,E,b]),_.statusCode(m),m=void 0,d&&g.trigger(h?"ajaxSuccess":"ajaxError",[_,f,h?l:b]),y.fireWith(p,[_,E]),d&&(g.trigger("ajaxComplete",[_,f]),--L.active||L.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return L.get(e,t,n,"json")},getScript:function(e,t){return L.get(e,void 0,t,"script")}}),L.each(["get","post"],(function(e,t){L[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),L.ajax(L.extend({url:e,type:t,dataType:i,data:n,success:r},L.isPlainObject(e)&&e))}})),L.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),L._evalUrl=function(e,t,n){return L.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){L.globalEval(e,t,n)}})},L.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=L(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){L(this).wrapInner(e.call(this,t))})):this.each((function(){var t=L(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){L(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){L(this).replaceWith(this.childNodes)})),this}}),L.expr.pseudos.hidden=function(e){return!L.expr.pseudos.visible(e)},L.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},L.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Yt=L.ajaxSettings.xhr();v.cors=!!Yt&&"withCredentials"in Yt,v.ajax=Yt=!!Yt,L.ajaxTransport((function(e){var t,n;if(v.cors||Yt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),L.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),L.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return L.globalEval(e),e}}}),L.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),L.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=L("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var $t,Zt=[],Xt=/(=)\?(?=&|$)|\?\?/;L.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Zt.pop()||L.expando+"_"+Ct.guid++;return this[e]=!0,e}}),L.ajaxPrefilter("json jsonp",(function(e,t,n){var i,o,a,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+i):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||L.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){a=arguments},n.always((function(){void 0===o?L(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Zt.push(i)),a&&y(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=(($t=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$t.childNodes.length),L.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=_e([e],t,o),o&&o.length&&L(o).remove(),L.merge([],i.childNodes)));var r,i,o},L.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=bt(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&L.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(r?L("<div>").append(L.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},L.expr.pseudos.animated=function(e){return L.grep(L.timers,(function(t){return e===t.elem})).length},L.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c=L.css(e,"position"),d=L(e),h={};"static"===c&&(e.style.position="relative"),s=d.offset(),o=L.css(e,"top"),u=L.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=d.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),y(t)&&(t=t.call(e,n,L.extend({},s))),null!=t.top&&(h.top=t.top-s.top+a),null!=t.left&&(h.left=t.left-s.left+i),"using"in t?t.using.call(e,h):d.css(h)}},L.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){L.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===L.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===L.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=L(e).offset()).top+=L.css(e,"borderTopWidth",!0),i.left+=L.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-L.css(r,"marginTop",!0),left:t.left-i.left-L.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===L.css(e,"position");)e=e.offsetParent;return e||ae}))}}),L.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;L.fn[e]=function(r){return W(this,(function(e,r,i){var o;if(m(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),L.each(["top","left"],(function(e,t){L.cssHooks[t]=$e(v.pixelPosition,(function(e,n){if(n)return n=Ye(e,t),Ue.test(n)?L(e).position()[t]+"px":n}))})),L.each({Height:"height",Width:"width"},(function(e,t){L.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){L.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return W(this,(function(t,n,i){var o;return m(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?L.css(t,n,s):L.style(t,n,i,s)}),t,a?i:void 0,a)}}))})),L.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){L.fn[t]=function(e){return this.on(t,e)}})),L.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),L.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){L.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;L.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=s.call(arguments,2),i=function(){return e.apply(t||this,r.concat(s.call(arguments)))},i.guid=e.guid=e.guid||L.guid++,i},L.holdReady=function(e){e?L.readyWait++:L.ready(!0)},L.isArray=Array.isArray,L.parseJSON=JSON.parse,L.nodeName=D,L.isFunction=y,L.isWindow=m,L.camelCase=Z,L.type=E,L.now=Date.now,L.isNumeric=function(e){var t=L.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},L.trim=function(e){return null==e?"":(e+"").replace(Kt,"$1")},void 0===(n=function(){return L}.apply(t,[]))||(e.exports=n);var Qt=r.jQuery,Jt=r.$;return L.noConflict=function(e){return r.$===L&&(r.$=Jt),e&&r.jQuery===L&&(r.jQuery=Qt),L},void 0===i&&(r.jQuery=r.$=L),L}))},7554:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5227),s=o(n(8941)),u=n(4524),c=n(3291),d=1.5,h=function(e){function t(){var t=e.call(this)||this;return t.x=.5,t.y=.5,t.angle=0,t.ratio=1,t.minRatio=null,t.maxRatio=null,t.nextFrame=null,t.previousState=null,t.enabled=!0,t.previousState=t.getState(),t}return i(t,e),t.from=function(e){return(new t).setState(e)},t.prototype.enable=function(){return this.enabled=!0,this},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},t.prototype.hasState=function(e){return this.x===e.x&&this.y===e.y&&this.ratio===e.ratio&&this.angle===e.angle},t.prototype.getPreviousState=function(){var e=this.previousState;return e?{x:e.x,y:e.y,angle:e.angle,ratio:e.ratio}:null},t.prototype.getBoundedRatio=function(e){var t=e;return"number"==typeof this.minRatio&&(t=Math.max(t,this.minRatio)),"number"==typeof this.maxRatio&&(t=Math.min(t,this.maxRatio)),t},t.prototype.validateState=function(e){var t={};return"number"==typeof e.x&&(t.x=e.x),"number"==typeof e.y&&(t.y=e.y),"number"==typeof e.angle&&(t.angle=e.angle),"number"==typeof e.ratio&&(t.ratio=this.getBoundedRatio(e.ratio)),t},t.prototype.isAnimated=function(){return!!this.nextFrame},t.prototype.setState=function(e){if(!this.enabled)return this;this.previousState=this.getState();var t=this.validateState(e);return"number"==typeof t.x&&(this.x=t.x),"number"==typeof t.y&&(this.y=t.y),"number"==typeof t.angle&&(this.angle=t.angle),"number"==typeof t.ratio&&(this.ratio=t.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this},t.prototype.updateState=function(e){return this.setState(e(this.getState())),this},t.prototype.animate=function(e,t,n){var r=this;if(this.enabled){var i=Object.assign({},a.ANIMATE_DEFAULTS,t),o=this.validateState(e),c="function"==typeof i.easing?i.easing:s.default[i.easing],d=Date.now(),h=this.getState(),l=function(){var e=(Date.now()-d)/i.duration;if(e>=1)return r.nextFrame=null,r.setState(o),void(r.animationCallback&&(r.animationCallback.call(null),r.animationCallback=void 0));var t=c(e),n={};"number"==typeof o.x&&(n.x=h.x+(o.x-h.x)*t),"number"==typeof o.y&&(n.y=h.y+(o.y-h.y)*t),"number"==typeof o.angle&&(n.angle=h.angle+(o.angle-h.angle)*t),"number"==typeof o.ratio&&(n.ratio=h.ratio+(o.ratio-h.ratio)*t),r.setState(n),r.nextFrame=(0,u.requestFrame)(l)};this.nextFrame?((0,u.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,u.requestFrame)(l)):l(),this.animationCallback=n}},t.prototype.animatedZoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio/e});this.animate({ratio:this.ratio/(e.factor||d)},e)}else this.animate({ratio:this.ratio/d})},t.prototype.animatedUnzoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio*e});this.animate({ratio:this.ratio*(e.factor||d)},e)}else this.animate({ratio:this.ratio*d})},t.prototype.animatedReset=function(e){this.animate({x:.5,y:.5,ratio:1,angle:0},e)},t.prototype.copy=function(){return t.from(this.getState())},t}(c.TypedEventEmitter);t.default=h},3760:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getWheelDelta=t.getTouchCoords=t.getTouchesArray=t.getWheelCoords=t.getMouseCoords=t.getPosition=void 0;var a=n(3291);function s(e,t){var n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}function u(e,t){var n=o(o({},s(e,t)),{sigmaDefaultPrevented:!1,preventSigmaDefault:function(){n.sigmaDefaultPrevented=!0},original:e});return n}t.getPosition=s,t.getMouseCoords=u,t.getWheelCoords=function(e,t){return o(o({},u(e,t)),{delta:h(e)})};var c=2;function d(e){for(var t=[],n=0,r=Math.min(e.length,c);n<r;n++)t.push(e[n]);return t}function h(e){if(void 0!==e.deltaY)return-3*e.deltaY/360;if(void 0!==e.detail)return e.detail/-9;throw new Error("Captor: could not extract delta from event.")}t.getTouchesArray=d,t.getTouchCoords=function(e,t){return{touches:d(e.touches).map((function(e){return s(e,t)})),original:e}},t.getWheelDelta=h;var l=function(e){function t(t,n){var r=e.call(this)||this;return r.container=t,r.renderer=n,r}return i(t,e),t}(a.TypedEventEmitter);t.default=l},9886:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(3760)),c=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.enabled=!0,r.draggedEvents=0,r.downStartTime=null,r.lastMouseX=null,r.lastMouseY=null,r.isMouseDown=!1,r.isMoving=!1,r.movingTimeout=null,r.startCameraState=null,r.clicks=0,r.doubleClickTimeout=null,r.currentWheelDirection=0,r.handleClick=r.handleClick.bind(r),r.handleRightClick=r.handleRightClick.bind(r),r.handleDown=r.handleDown.bind(r),r.handleUp=r.handleUp.bind(r),r.handleMove=r.handleMove.bind(r),r.handleWheel=r.handleWheel.bind(r),r.handleOut=r.handleOut.bind(r),t.addEventListener("click",r.handleClick,!1),t.addEventListener("contextmenu",r.handleRightClick,!1),t.addEventListener("mousedown",r.handleDown,!1),t.addEventListener("wheel",r.handleWheel,!1),t.addEventListener("mouseout",r.handleOut,!1),document.addEventListener("mousemove",r.handleMove,!1),document.addEventListener("mouseup",r.handleUp,!1),r}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("click",this.handleClick),e.removeEventListener("contextmenu",this.handleRightClick),e.removeEventListener("mousedown",this.handleDown),e.removeEventListener("wheel",this.handleWheel),e.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},t.prototype.handleClick=function(e){var t=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(e);setTimeout((function(){t.clicks=0,t.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleRightClick=function(e){this.enabled&&this.emit("rightClick",(0,u.getMouseCoords)(e,this.container))},t.prototype.handleDoubleClick=function(e){if(this.enabled){e.preventDefault(),e.stopPropagation();var t=(0,u.getMouseCoords)(e,this.container);if(this.emit("doubleClick",t),!t.sigmaDefaultPrevented){var n=this.renderer.getCamera(),r=n.getBoundedRatio(n.getState().ratio/2.2);n.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(e,this.container),r),{easing:"quadraticInOut",duration:200})}}},t.prototype.handleDown=function(e){if(this.enabled){if(0===e.button){this.startCameraState=this.renderer.getCamera().getState();var t=(0,u.getPosition)(e,this.container),n=t.x,r=t.y;this.lastMouseX=n,this.lastMouseY=r,this.draggedEvents=0,this.downStartTime=Date.now(),this.isMouseDown=!0}this.emit("mousedown",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleUp=function(e){var t=this;if(this.enabled&&this.isMouseDown){var n=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var r=(0,u.getPosition)(e,this.container),i=r.x,o=r.y,a=n.getState(),s=n.getPreviousState()||{x:0,y:0};this.isMoving?n.animate({x:a.x+3*(a.x-s.x),y:a.y+3*(a.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===i&&this.lastMouseY===o||n.setState({x:a.x,y:a.y}),this.isMoving=!1,setTimeout((function(){t.draggedEvents=0,t.renderer.refresh()}),0),this.emit("mouseup",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t=this;if(this.enabled){var n=(0,u.getMouseCoords)(e,this.container);if(this.emit("mousemovebody",n),e.target===this.container&&this.emit("mousemove",n),!n.sigmaDefaultPrevented&&this.isMouseDown){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){t.movingTimeout=null,t.isMoving=!1}),100);var r=this.renderer.getCamera(),i=(0,u.getPosition)(e,this.container),o=i.x,a=i.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),c=this.renderer.viewportToFramedGraph({x:o,y:a}),d=s.x-c.x,h=s.y-c.y,l=r.getState(),f=l.x+d,p=l.y+h;r.setState({x:f,y:p}),this.lastMouseX=o,this.lastMouseY=a,e.preventDefault(),e.stopPropagation()}}},t.prototype.handleWheel=function(e){var t=this;if(this.enabled){e.preventDefault(),e.stopPropagation();var n=(0,u.getWheelDelta)(e);if(n){var r=(0,u.getWheelCoords)(e,this.container);if(this.emit("wheel",r),!r.sigmaDefaultPrevented){var i=n>0?1/1.7:1.7,o=this.renderer.getCamera(),a=o.getBoundedRatio(o.getState().ratio*i),s=n>0?1:-1,c=Date.now();this.currentWheelDirection===s&&this.lastWheelTriggerTime&&c-this.lastWheelTriggerTime<50||(o.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(e,this.container),a),{easing:"quadraticOut",duration:250},(function(){t.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=c)}}}},t.prototype.handleOut=function(){},t}(u.default);t.default=c},9311:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t},u=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var c=s(n(3760)),d=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.enabled=!0,r.isMoving=!1,r.hasMoved=!1,r.touchMode=0,r.startTouchesPositions=[],r.handleStart=r.handleStart.bind(r),r.handleLeave=r.handleLeave.bind(r),r.handleMove=r.handleMove.bind(r),t.addEventListener("touchstart",r.handleStart,!1),t.addEventListener("touchend",r.handleLeave,!1),t.addEventListener("touchcancel",r.handleLeave,!1),t.addEventListener("touchmove",r.handleMove,!1),r}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("touchstart",this.handleStart),e.removeEventListener("touchend",this.handleLeave),e.removeEventListener("touchcancel",this.handleLeave),e.removeEventListener("touchmove",this.handleMove)},t.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},t.prototype.dispatchRelatedMouseEvent=function(e,t,n,r){var i=n||t.touches[0],o=new MouseEvent(e,{clientX:i.clientX,clientY:i.clientY,altKey:t.altKey,ctrlKey:t.ctrlKey});o.isFakeSigmaMouseEvent=!0,(r||this.container).dispatchEvent(o)},t.prototype.handleStart=function(e){var t=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousedown",e);var n=(0,c.getTouchesArray)(e.touches);if(this.touchMode=n.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=n.map((function(e){return(0,c.getPosition)(e,t.container)})),this.lastTouches=n,this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var r=u(this.startTouchesPositions,2),i=r[0],o=i.x,a=i.y,s=r[1],d=s.x,h=s.y;this.startTouchesAngle=Math.atan2(h-a,d-o),this.startTouchesDistance=Math.sqrt(Math.pow(d-o,2)+Math.pow(h-a,2))}this.emit("touchdown",(0,c.getTouchCoords)(e,this.container))}},t.prototype.handleLeave=function(e){if(this.enabled){switch(e.preventDefault(),0===e.touches.length&&this.lastTouches&&this.lastTouches.length&&(this.dispatchRelatedMouseEvent("mouseup",e,this.lastTouches[0],document),this.hasMoved||this.dispatchRelatedMouseEvent("click",e,this.lastTouches[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===e.touches.length){this.handleStart(e),e.preventDefault();break}case 1:if(this.isMoving){var t=this.renderer.getCamera(),n=t.getState(),r=t.getPreviousState()||{x:0,y:0};t.animate({x:n.x+3*(n.x-r.x),y:n.y+3*(n.y-r.y)},{duration:200,easing:"quadraticOut"})}this.hasMoved=!1,this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,c.getTouchCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t,n=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousemove",e);var r=(0,c.getTouchesArray)(e.touches),i=r.map((function(e){return(0,c.getPosition)(e,n.container)}));if(this.lastTouches=r,this.lastTouchesPositions=i,this.hasMoved||(this.hasMoved=i.some((function(e,t){var r=n.startTouchesPositions[t];return e.x!==r.x||e.y!==r.y}))),this.hasMoved){this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){n.isMoving=!1}),200);var o=this.renderer.getCamera(),a=this.startCameraState;switch(this.touchMode){case 1:var s=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),d=s.x,h=s.y,l=this.renderer.viewportToFramedGraph(i[0]),f=l.x,p=l.y;o.setState({x:a.x+d-f,y:a.y+h-p});break;case 2:var g={},v=i[0],y=v.x,m=v.y,b=i[1],w=b.x,x=b.y,E=Math.atan2(x-m,w-y)-this.startTouchesAngle,_=Math.hypot(x-m,w-y)/this.startTouchesDistance,L=o.getBoundedRatio(a.ratio/_);g.ratio=L,g.angle=a.angle+E;var A=this.getDimensions(),C=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:a}),S=Math.min(A.width,A.height),T=S/A.width,k=L/S;p=m-S/2/(S/A.height),f=(t=u([(f=y-S/2/T)*Math.cos(-g.angle)-p*Math.sin(-g.angle),p*Math.cos(-g.angle)+f*Math.sin(-g.angle)],2))[0],p=t[1],g.x=C.x-f*k,g.y=C.y+p*k,o.setState(g)}this.emit("touchmove",(0,c.getTouchCoords)(e,this.container))}}},t}(c.default);t.default=d},8098:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.edgeLabelsToDisplayFromNodes=t.LabelGrid=void 0;var n=function(){function e(e,t){this.key=e,this.size=t}return e.compare=function(e,t){return e.size>t.size?-1:e.size<t.size||e.key>t.key?1:-1},e}(),r=function(){function e(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return e.prototype.resizeAndClear=function(e,t){this.width=e.width,this.height=e.height,this.cellSize=t,this.columns=Math.ceil(e.width/t),this.rows=Math.ceil(e.height/t),this.cells={}},e.prototype.getIndex=function(e){var t=Math.floor(e.x/this.cellSize);return Math.floor(e.y/this.cellSize)*this.columns+t},e.prototype.add=function(e,t,r){var i=new n(e,t),o=this.getIndex(r),a=this.cells[o];a||(a=[],this.cells[o]=a),a.push(i)},e.prototype.organize=function(){for(var e in this.cells)this.cells[e].sort(n.compare)},e.prototype.getLabelsToDisplay=function(e,t){var n=this.cellSize*this.cellSize,r=n/e/e*t/n,i=Math.ceil(r),o=[];for(var a in this.cells)for(var s=this.cells[a],u=0;u<Math.min(i,s.length);u++)o.push(s[u].key);return o},e}();t.LabelGrid=r,t.edgeLabelsToDisplayFromNodes=function(e){var t=e.graph,n=e.hoveredNode,r=e.highlightedNodes,i=e.displayedNodeLabels,o=[];return t.forEachEdge((function(e,t,a,s){(a===n||s===n||r.has(a)||r.has(s)||i.has(a)&&i.has(s))&&o.push(e)})),o}},1461:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.rectangleCollidesWithQuad=t.squareCollidesWithQuad=t.getCircumscribedAlignedRectangle=t.isRectangleAligned=void 0;var i=r(n(3796)),o=1,a=2,s=3,u=4,c=!1;function d(e){return e.x1===e.x2||e.y1===e.y2}function h(e){var t=Math.sqrt(Math.pow(e.x2-e.x1,2)+Math.pow(e.y2-e.y1,2)),n=(e.y1-e.y2)*e.height/t,r=(e.x2-e.x1)*e.height/t,i={x:e.x1,y:e.y1},o={x:e.x2,y:e.y2},a={x:e.x1+n,y:e.y1+r},s={x:e.x2+n,y:e.y2+r},u=Math.min(i.x,o.x,a.x,s.x),c=Math.max(i.x,o.x,a.x,s.x),d=Math.min(i.y,o.y,a.y,s.y);return{x1:u,y1:d,x2:c,y2:d,height:Math.max(i.y,o.y,a.y,s.y)-d}}function l(e,t,n,r,i,o,a){return e<r+o&&e+n>r&&t<i+a&&t+n>i}function f(e,t,n,r,i,o,a,s){return e<i+a&&e+n>i&&t<o+s&&t+r>o}function p(e,t,n,r,i,c){var d=e<n+i/2;return t<r+c/2?d?o:a:d?s:u}t.isRectangleAligned=d,t.getCircumscribedAlignedRectangle=h,t.squareCollidesWithQuad=l,t.rectangleCollidesWithQuad=f;var g=function(){function e(e){var t;void 0===e&&(e={}),this.containers=((t={})[5460]=[],t),this.cache=null,this.lastRectangle=null;var n=Math.pow(4,5);this.data=new Float32Array((4*n-1)/3*4),e.boundaries?this.resize(e.boundaries):this.resize({x:0,y:0,width:1,height:1})}return e.prototype.add=function(e,t,n,r){return function(e,t,n,r,i,o,a){for(var s=i-a,u=o-a,d=2*a,h=0,f=0;;){if(h>=5)return n[f]=n[f]||[],void n[f].push(r);var p=4*f+4,g=4*f+8,v=4*f+12,y=4*f+16,m=l(s,u,d,t[p+0],t[p+1],t[p+2],t[p+3]),b=l(s,u,d,t[g+0],t[g+1],t[g+2],t[g+3]),w=l(s,u,d,t[v+0],t[v+1],t[v+2],t[v+3]),x=l(s,u,d,t[y+0],t[y+1],t[y+2],t[y+3]),E=[m,b,w,x].reduce((function(e,t){return t?e+1:e}),0);if(0===E&&0===h)return n[5460].push(r),void(!c&&n[5460].length>=5&&(c=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===E)throw new Error("sigma/quadtree.insertNode: no collision (level: ".concat(h,", key: ").concat(r,", x: ").concat(i,", y: ").concat(o,", size: ").concat(a,")."));if(3===E)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: ".concat(h,", key: ").concat(r,", x: ").concat(i,", y: ").concat(o,", size: ").concat(a,")."));if(E>1)return n[f]=n[f]||[],void n[f].push(r);h++,m&&(f=p),b&&(f=g),w&&(f=v),x&&(f=y)}}(0,this.data,this.containers,e,t,n,r),this},e.prototype.resize=function(e){this.clear(),this.data[0]=e.x,this.data[1]=e.y,this.data[2]=e.width,this.data[3]=e.height,function(e,t){for(var n=[0,0];n.length;){var r=n.pop(),i=n.pop(),o=4*i+4,a=4*i+8,s=4*i+12,u=4*i+16,c=t[i+0],d=t[i+1],h=t[i+2]/2,l=t[i+3]/2;t[o+0]=c,t[o+1]=d,t[o+2]=h,t[o+3]=l,t[a+0]=c+h,t[a+1]=d,t[a+2]=h,t[a+3]=l,t[s+0]=c,t[s+1]=d+l,t[s+2]=h,t[s+3]=l,t[u+0]=c+h,t[u+1]=d+l,t[u+2]=h,t[u+3]=l,r<4&&(n.push(u,r+1),n.push(s,r+1),n.push(a,r+1),n.push(o,r+1))}}(0,this.data)},e.prototype.clear=function(){var e;return this.containers=((e={})[5460]=[],e),this},e.prototype.point=function(e,t){var n=this.containers[5460].slice(),r=0,o=0;do{this.containers[r]&&(0,i.default)(n,this.containers[r]),r=4*r+4*p(e,t,this.data[r+0],this.data[r+1],this.data[r+2],this.data[r+3]),o++}while(o<=5);return n},e.prototype.rectangle=function(e,t,n,r,o){var a=this.lastRectangle;return a&&e===a.x1&&n===a.x2&&t===a.y1&&r===a.y2&&o===a.height||(this.lastRectangle={x1:e,y1:t,x2:n,y2:r,height:o},d(this.lastRectangle)||(this.lastRectangle=h(this.lastRectangle)),this.cache=function(e,t,n,r,o,a,s){for(var u,c=[0,0],d=[];c.length;){var h=c.pop(),l=c.pop();if((u=n[l])&&(0,i.default)(d,u),!(h>=5)){var p=4*l+4,g=4*l+8,v=4*l+12,y=4*l+16,m=f(r,o,a,s,t[p+0],t[p+1],t[p+2],t[p+3]),b=f(r,o,a,s,t[g+0],t[g+1],t[g+2],t[g+3]),w=f(r,o,a,s,t[v+0],t[v+1],t[v+2],t[v+3]),x=f(r,o,a,s,t[y+0],t[y+1],t[y+2],t[y+3]);m&&c.push(p,h+1),b&&c.push(g,h+1),w&&c.push(v,h+1),x&&c.push(y,h+1)}}return d}(0,this.data,this.containers,e,t,Math.abs(e-n)||Math.abs(t-r),o),(0,i.default)(this.cache,this.containers[5460])),this.cache},e}();t.default=g},9026:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sigma=t.MouseCaptor=t.QuadTree=t.Camera=void 0;var i=r(n(248));t.Sigma=i.default;var o=r(n(7554));t.Camera=o.default;var a=r(n(1461));t.QuadTree=a.default;var s=r(n(9886));t.MouseCaptor=s.default,t.default=i.default},2294:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,i){var o=i.edgeLabelSize,a=i.edgeLabelFont,s=i.edgeLabelWeight,u=i.edgeLabelColor.attribute?t[i.edgeLabelColor.attribute]||i.edgeLabelColor.color||"#000":i.edgeLabelColor.color,c=t.label;if(c){e.fillStyle=u,e.font="".concat(s," ").concat(o,"px ").concat(a);var d,h,l=n.size,f=r.size,p=n.x,g=n.y,v=r.x,y=r.y,m=v-p,b=y-g,w=Math.sqrt(m*m+b*b);if(!(w<l+f)){d=((p+=m*l/w)+(v-=m*f/w))/2,h=((g+=b*l/w)+(y-=b*f/w))/2,m=v-p,b=y-g,w=Math.sqrt(m*m+b*b);var x,E=e.measureText(c).width;if(E>w){for(c+="…",E=e.measureText(c).width;E>w&&c.length>1;)c=c.slice(0,-2)+"…",E=e.measureText(c).width;if(c.length<4)return}x=m>0?b>0?Math.acos(m/w):Math.asin(b/w):b>0?Math.acos(m/w)+Math.PI:Math.asin(m/w)+Math.PI/2,e.save(),e.translate(d,h),e.rotate(x),e.fillText(c,-E/2,t.size/2+o),e.restore()}}}},4607:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(4577));t.default=function(e,t,n){var r=n.labelSize,o=n.labelFont,a=n.labelWeight;if(e.font="".concat(a," ").concat(r,"px ").concat(o),e.fillStyle="#FFF",e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=8,e.shadowColor="#000","string"==typeof t.label){var s=e.measureText(t.label).width,u=Math.round(s+5),c=Math.round(r+4),d=Math.max(t.size,r/2)+2,h=Math.asin(c/2/d),l=Math.sqrt(Math.abs(Math.pow(d,2)-Math.pow(c/2,2)));e.beginPath(),e.moveTo(t.x+l,t.y+c/2),e.lineTo(t.x+d+u,t.y+c/2),e.lineTo(t.x+d+u,t.y-c/2),e.lineTo(t.x+l,t.y-c/2),e.arc(t.x,t.y,d,h,-h),e.closePath(),e.fill()}else e.beginPath(),e.arc(t.x,t.y,t.size+2,0,2*Math.PI),e.closePath(),e.fill();e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=0,(0,i.default)(e,t,n)}},4577:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(t.label){var r=n.labelSize,i=n.labelFont,o=n.labelWeight,a=n.labelColor.attribute?t[n.labelColor.attribute]||n.labelColor.color||"#000":n.labelColor.color;e.fillStyle=a,e.font="".concat(o," ").concat(r,"px ").concat(i),e.fillText(t.label,t.x+t.size+3,t.y+r/3)}}},4917:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.createEdgeCompoundProgram=t.AbstractEdgeProgram=void 0;var o=function(e){function t(t,n,r,i,o){return e.call(this,t,n,r,i,o)||this}return i(t,e),t}(n(7973).AbstractProgram);t.AbstractEdgeProgram=o,t.createEdgeCompoundProgram=function(e){return function(){function t(t,n){this.programs=e.map((function(e){return new e(t,n)}))}return t.prototype.bufferData=function(){this.programs.forEach((function(e){return e.bufferData()}))},t.prototype.allocate=function(e){this.programs.forEach((function(t){return t.allocate(e)}))},t.prototype.bind=function(){},t.prototype.computeIndices=function(){this.programs.forEach((function(e){return e.computeIndices()}))},t.prototype.render=function(e){this.programs.forEach((function(t){t.bind(),t.bufferData(),t.render(e)}))},t.prototype.process=function(e,t,n,r,i){this.programs.forEach((function(o){return o.process(e,t,n,r,i)}))},t}()}},3533:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.createNodeCompoundProgram=t.AbstractNodeProgram=void 0;var o=function(e){function t(t,n,r,i,o){var a=e.call(this,t,n,r,i,o)||this;a.positionLocation=t.getAttribLocation(a.program,"a_position"),a.sizeLocation=t.getAttribLocation(a.program,"a_size"),a.colorLocation=t.getAttribLocation(a.program,"a_color");var s=t.getUniformLocation(a.program,"u_matrix");if(null===s)throw new Error("AbstractNodeProgram: error while getting matrixLocation");a.matrixLocation=s;var u=t.getUniformLocation(a.program,"u_ratio");if(null===u)throw new Error("AbstractNodeProgram: error while getting ratioLocation");a.ratioLocation=u;var c=t.getUniformLocation(a.program,"u_scale");if(null===c)throw new Error("AbstractNodeProgram: error while getting scaleLocation");return a.scaleLocation=c,a}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.sizeLocation),e.enableVertexAttribArray(this.colorLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.sizeLocation,1,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12)},t}(n(7973).AbstractProgram);t.AbstractNodeProgram=o,t.createNodeCompoundProgram=function(e){return function(){function t(t,n){this.programs=e.map((function(e){return new e(t,n)}))}return t.prototype.bufferData=function(){this.programs.forEach((function(e){return e.bufferData()}))},t.prototype.allocate=function(e){this.programs.forEach((function(t){return t.allocate(e)}))},t.prototype.bind=function(){},t.prototype.render=function(e){this.programs.forEach((function(t){t.bind(),t.bufferData(),t.render(e)}))},t.prototype.process=function(e,t,n){this.programs.forEach((function(r){return r.process(e,t,n)}))},t}()}},7973:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractProgram=void 0;var r=n(1538),i=function(){function e(e,t,n,i,o){this.array=new Float32Array,this.points=i,this.attributes=o,this.gl=e,this.vertexShaderSource=t,this.fragmentShaderSource=n;var a=e.createBuffer();if(null===a)throw new Error("AbstractProgram: error while creating the buffer");this.buffer=a,e.bindBuffer(e.ARRAY_BUFFER,this.buffer),this.vertexShader=(0,r.loadVertexShader)(e,this.vertexShaderSource),this.fragmentShader=(0,r.loadFragmentShader)(e,this.fragmentShaderSource),this.program=(0,r.loadProgram)(e,[this.vertexShader,this.fragmentShader])}return e.prototype.bufferData=function(){var e=this.gl;e.bufferData(e.ARRAY_BUFFER,this.array,e.DYNAMIC_DRAW)},e.prototype.allocate=function(e){this.array=new Float32Array(this.points*this.attributes*e)},e.prototype.hasNothingToRender=function(){return 0===this.array.length},e}();t.AbstractProgram=i},4638:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(4917),o=r(n(8747)),a=r(n(2874)),s=(0,i.createEdgeCompoundProgram)([a.default,o.default]);t.default=s},8747:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(5191)),u=o(n(7083)),c=function(e){function t(t){var n=e.call(this,t,s.default,u.default,3,9)||this;n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.normalLocation=t.getAttribLocation(n.program,"a_normal"),n.radiusLocation=t.getAttribLocation(n.program,"a_radius"),n.barycentricLocation=t.getAttribLocation(n.program,"a_barycentric");var r=t.getUniformLocation(n.program,"u_matrix");if(null===r)throw new Error("EdgeArrowHeadProgram: error while getting matrixLocation");n.matrixLocation=r;var i=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===i)throw new Error("EdgeArrowHeadProgram: error while getting sqrtZoomRatioLocation");n.sqrtZoomRatioLocation=i;var o=t.getUniformLocation(n.program,"u_correctionRatio");if(null===o)throw new Error("EdgeArrowHeadProgram: error while getting correctionRatioLocation");return n.correctionRatioLocation=o,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.radiusLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.barycentricLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.radiusLocation,1,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,16),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,9*Float32Array.BYTES_PER_ELEMENT,20),e.vertexAttribPointer(this.barycentricLocation,3,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,24)},t.prototype.computeIndices=function(){},t.prototype.process=function(e,t,n,r,i){if(r)for(var o=27*i,s=o+27;o<s;o++)this.array[o]=0;else{var u=n.size||1,c=t.size||1,d=e.x,h=e.y,l=t.x,f=t.y,p=(0,a.floatColor)(n.color),g=l-d,v=f-h,y=g*g+v*v,m=0,b=0;y&&(m=-v*(y=1/Math.sqrt(y))*u,b=g*y*u);var w=27*i,x=this.array;x[w++]=l,x[w++]=f,x[w++]=-m,x[w++]=-b,x[w++]=c,x[w++]=p,x[w++]=1,x[w++]=0,x[w++]=0,x[w++]=l,x[w++]=f,x[w++]=-m,x[w++]=-b,x[w++]=c,x[w++]=p,x[w++]=0,x[w++]=1,x[w++]=0,x[w++]=l,x[w++]=f,x[w++]=-m,x[w++]=-b,x[w++]=c,x[w++]=p,x[w++]=0,x[w++]=0,x[w]=1}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawArrays(t.TRIANGLES,0,this.array.length/9)}},t}(n(4917).AbstractEdgeProgram);t.default=c},2874:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4917),s=n(4524),u=o(n(8073)),c=o(n(4879)),d=function(e){function t(t){var n=e.call(this,t,u.default,c.default,4,6)||this,r=t.createBuffer();if(null===r)throw new Error("EdgeClampedProgram: error while getting resolutionLocation");n.indicesBuffer=r,n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.normalLocation=t.getAttribLocation(n.program,"a_normal"),n.radiusLocation=t.getAttribLocation(n.program,"a_radius");var i=t.getUniformLocation(n.program,"u_matrix");if(null===i)throw new Error("EdgeClampedProgram: error while getting matrixLocation");n.matrixLocation=i;var o=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===o)throw new Error("EdgeClampedProgram: error while getting cameraRatioLocation");n.sqrtZoomRatioLocation=o;var a=t.getUniformLocation(n.program,"u_correctionRatio");if(null===a)throw new Error("EdgeClampedProgram: error while getting viewportRatioLocation");return n.correctionRatioLocation=a,n.canUse32BitsIndices=(0,s.canUse32BitsIndices)(t),n.IndicesArray=n.canUse32BitsIndices?Uint32Array:Uint16Array,n.indicesArray=new n.IndicesArray,n.indicesType=n.canUse32BitsIndices?t.UNSIGNED_INT:t.UNSIGNED_SHORT,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.radiusLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,6*Float32Array.BYTES_PER_ELEMENT,16),e.vertexAttribPointer(this.radiusLocation,1,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,20)},t.prototype.process=function(e,t,n,r,i){if(r)for(var o=24*i,a=o+24;o<a;o++)this.array[o]=0;else{var u=n.size||1,c=e.x,d=e.y,h=t.x,l=t.y,f=t.size||1,p=(0,s.floatColor)(n.color),g=h-c,v=l-d,y=g*g+v*v,m=0,b=0;y&&(m=-v*(y=1/Math.sqrt(y))*u,b=g*y*u);var w=24*i,x=this.array;x[w++]=c,x[w++]=d,x[w++]=m,x[w++]=b,x[w++]=p,x[w++]=0,x[w++]=c,x[w++]=d,x[w++]=-m,x[w++]=-b,x[w++]=p,x[w++]=0,x[w++]=h,x[w++]=l,x[w++]=m,x[w++]=b,x[w++]=p,x[w++]=f,x[w++]=h,x[w++]=l,x[w++]=-m,x[w++]=-b,x[w++]=p,x[w]=-f}},t.prototype.computeIndices=function(){for(var e=this.array.length/6,t=e+e/2,n=new this.IndicesArray(t),r=0,i=0;r<e;r+=4)n[i++]=r,n[i++]=r+1,n[i++]=r+2,n[i++]=r+2,n[i++]=r+1,n[i++]=r+3;this.indicesArray=n},t.prototype.bufferData=function(){e.prototype.bufferData.call(this);var t=this.gl;t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indicesArray,t.STATIC_DRAW)},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawElements(t.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},t}(a.AbstractEdgeProgram);t.default=d},5857:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(372)),u=o(n(4879)),c=function(e){function t(t){var n=e.call(this,t,s.default,u.default,4,5)||this,r=t.createBuffer();if(null===r)throw new Error("EdgeProgram: error while creating indicesBuffer");n.indicesBuffer=r,n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.normalLocation=t.getAttribLocation(n.program,"a_normal");var i=t.getUniformLocation(n.program,"u_matrix");if(null===i)throw new Error("EdgeProgram: error while getting matrixLocation");n.matrixLocation=i;var o=t.getUniformLocation(n.program,"u_correctionRatio");if(null===o)throw new Error("EdgeProgram: error while getting correctionRatioLocation");n.correctionRatioLocation=o;var c=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===c)throw new Error("EdgeProgram: error while getting sqrtZoomRatioLocation");return n.sqrtZoomRatioLocation=c,n.canUse32BitsIndices=(0,a.canUse32BitsIndices)(t),n.IndicesArray=n.canUse32BitsIndices?Uint32Array:Uint16Array,n.indicesArray=new n.IndicesArray,n.indicesType=n.canUse32BitsIndices?t.UNSIGNED_INT:t.UNSIGNED_SHORT,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.colorLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,5*Float32Array.BYTES_PER_ELEMENT,16)},t.prototype.computeIndices=function(){for(var e=this.array.length/5,t=e+e/2,n=new this.IndicesArray(t),r=0,i=0;r<e;r+=4)n[i++]=r,n[i++]=r+1,n[i++]=r+2,n[i++]=r+2,n[i++]=r+1,n[i++]=r+3;this.indicesArray=n},t.prototype.bufferData=function(){e.prototype.bufferData.call(this);var t=this.gl;t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indicesArray,t.STATIC_DRAW)},t.prototype.process=function(e,t,n,r,i){if(r)for(var o=20*i,s=o+20;o<s;o++)this.array[o]=0;else{var u=n.size||1,c=e.x,d=e.y,h=t.x,l=t.y,f=(0,a.floatColor)(n.color),p=h-c,g=l-d,v=p*p+g*g,y=0,m=0;v&&(y=-g*(v=1/Math.sqrt(v))*u,m=p*v*u);var b=20*i,w=this.array;w[b++]=c,w[b++]=d,w[b++]=y,w[b++]=m,w[b++]=f,w[b++]=c,w[b++]=d,w[b++]=-y,w[b++]=-m,w[b++]=f,w[b++]=h,w[b++]=l,w[b++]=y,w[b++]=m,w[b++]=f,w[b++]=h,w[b++]=l,w[b++]=-y,w[b++]=-m,w[b]=f}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawElements(t.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},t}(n(4917).AbstractEdgeProgram);t.default=c},8037:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(146)),u=o(n(4546)),c=function(e){function t(t){var n=e.call(this,t,s.default,u.default,1,4)||this;return n.bind(),n}return i(t,e),t.prototype.process=function(e,t,n){var r=this.array,i=1*n*4;if(t)return r[i++]=0,r[i++]=0,r[i++]=0,void(r[i++]=0);var o=(0,a.floatColor)(e.color);r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i]=o},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniform1f(this.ratioLocation,1/Math.sqrt(e.ratio)),t.uniform1f(this.scaleLocation,e.scalingRatio),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.drawArrays(t.POINTS,0,this.array.length/4)}},t}(n(3533).AbstractNodeProgram);t.default=c},6038:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=o(n(3742)),u=o(n(6075)),c=n(7973),d=2*Math.PI/3,h=4*Math.PI/3,l=function(e){function t(t){var n=e.call(this,t,s.default,u.default,3,5)||this;n.positionLocation=t.getAttribLocation(n.program,"a_position"),n.sizeLocation=t.getAttribLocation(n.program,"a_size"),n.colorLocation=t.getAttribLocation(n.program,"a_color"),n.angleLocation=t.getAttribLocation(n.program,"a_angle");var r=t.getUniformLocation(n.program,"u_matrix");if(null===r)throw new Error("AbstractNodeProgram: error while getting matrixLocation");n.matrixLocation=r;var i=t.getUniformLocation(n.program,"u_sqrtZoomRatio");if(null===i)throw new Error("NodeProgram: error while getting sqrtZoomRatioLocation");n.sqrtZoomRatioLocation=i;var o=t.getUniformLocation(n.program,"u_correctionRatio");if(null===o)throw new Error("NodeProgram: error while getting correctionRatioLocation");return n.correctionRatioLocation=o,n.bind(),n}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.sizeLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.angleLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.sizeLocation,1,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12),e.vertexAttribPointer(this.angleLocation,1,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,16)},t.prototype.process=function(e,t,n){var r=this.array,i=3*n*5;if(t)for(var o=i+15;i<o;i++)r[i]=0;else{var s=(0,a.floatColor)(e.color);r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i++]=s,r[i++]=0,r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i++]=s,r[i++]=d,r[i++]=e.x,r[i++]=e.y,r[i++]=e.size,r[i++]=s,r[i]=h}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,n=this.program;t.useProgram(n),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawArrays(t.TRIANGLES,0,this.array.length/5)}},t}(c.AbstractProgram);t.default=l},7083:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";e.exports=n})()},5191:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n  float adaptedWebGLNodeRadius = a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float adaptedWebGLArrowHeadHalfWidth = adaptedWebGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (adaptedWebGLNodeRadius * unitNormal.y)\n    + db * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y + adaptedWebGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y - adaptedWebGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-adaptedWebGLNodeRadius * unitNormal.x)\n    + db * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x + adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x - adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},8073:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},4879:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";e.exports=n})()},372:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the SQRT zoom ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n\n  // Finally, we adapt the edge thickness to the "SQRT rule" in sigma (so that\n  // items are not too big when zoomed in, and not too small when zoomed out).\n  // The exact computation should be `adapted = value * zoom / sqrt(zoom)`, but\n  // it\'s simpler like this:\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasing effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';e.exports=n})()},4546:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(transparent, v_color, t);\n}\n";e.exports=n})()},146:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_ratio;\nuniform float u_scale;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size * u_ratio * u_scale * 2.0;\n\n  v_border = (1.0 / u_ratio) * (0.5 / a_size);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},6075:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_diffVector) - v_radius;\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";e.exports=n})()},3742:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute float a_size;\nattribute float a_angle;\nattribute vec4 a_color;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\nconst float marginRatio = 1.05;\n\nvoid main() {\n  float size = a_size * u_correctionRatio * u_sqrtZoomRatio * 4.0;\n  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));\n  vec2 position = a_position + diffVector * marginRatio;\n  gl_Position = vec4(\n    (u_matrix * vec3(position, 1)).xy,\n    0,\n    1\n  );\n\n  v_border = u_correctionRatio * u_sqrtZoomRatio * u_sqrtZoomRatio;\n  v_diffVector = diffVector;\n  v_radius = size / 2.0 / marginRatio;\n\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},1538:(e,t)=>{"use strict";function n(e,t,n){var r="VERTEX"===e?t.VERTEX_SHADER:t.FRAGMENT_SHADER,i=t.createShader(r);if(null===i)throw new Error("loadShader: error while creating the shader");if(t.shaderSource(i,n),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS)){var o=t.getShaderInfoLog(i);throw t.deleteShader(i),new Error("loadShader: error while compiling the shader:\n".concat(o,"\n").concat(n))}return i}Object.defineProperty(t,"__esModule",{value:!0}),t.loadProgram=t.loadFragmentShader=t.loadVertexShader=void 0,t.loadVertexShader=function(e,t){return n("VERTEX",e,t)},t.loadFragmentShader=function(e,t){return n("FRAGMENT",e,t)},t.loadProgram=function(e,t){var n,r,i=e.createProgram();if(null===i)throw new Error("loadProgram: error while creating the program.");for(n=0,r=t.length;n<r;n++)e.attachShader(i,t[n]);if(e.linkProgram(i),!e.getProgramParameter(i,e.LINK_STATUS))throw e.deleteProgram(i),new Error("loadProgram: error while linking the program.");return i}},6482:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.resolveSettings=t.validateSettings=t.DEFAULT_EDGE_PROGRAM_CLASSES=t.DEFAULT_NODE_PROGRAM_CLASSES=t.DEFAULT_SETTINGS=void 0;var i=n(4524),o=r(n(4577)),a=r(n(4607)),s=r(n(2294)),u=r(n(8037)),c=r(n(5857)),d=r(n(4638));t.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,labelDensity:1,labelGridCellSize:100,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,minCameraRatio:null,maxCameraRatio:null,labelRenderer:o.default,hoverRenderer:a.default,edgeLabelRenderer:s.default,allowInvalidContainer:!1,nodeProgramClasses:{},nodeHoverProgramClasses:{},edgeProgramClasses:{}},t.DEFAULT_NODE_PROGRAM_CLASSES={circle:u.default},t.DEFAULT_EDGE_PROGRAM_CLASSES={arrow:d.default,line:c.default},t.validateSettings=function(e){if("number"!=typeof e.labelDensity||e.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");var t=e.minCameraRatio,n=e.maxCameraRatio;if("number"==typeof t&&"number"==typeof n&&n<t)throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.")},t.resolveSettings=function(e){var n=(0,i.assign)({},t.DEFAULT_SETTINGS,e);return n.nodeProgramClasses=(0,i.assign)({},t.DEFAULT_NODE_PROGRAM_CLASSES,n.nodeProgramClasses),n.edgeProgramClasses=(0,i.assign)({},t.DEFAULT_EDGE_PROGRAM_CLASSES,n.edgeProgramClasses),n}},248:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(3796)),c=s(n(7554)),d=s(n(9886)),h=s(n(1461)),l=n(3291),f=n(4524),p=n(8098),g=n(6482),v=s(n(9311)),y=n(5132),m=n(9822);function b(e,t,n){if(!n.hasOwnProperty("x")||!n.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(t,'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));return n.color||(n.color=e.defaultNodeColor),n.label||""===n.label||(n.label=null),void 0!==n.label&&null!==n.label?n.label=""+n.label:n.label=null,n.size||(n.size=2),n.hasOwnProperty("hidden")||(n.hidden=!1),n.hasOwnProperty("highlighted")||(n.highlighted=!1),n.hasOwnProperty("forceLabel")||(n.forceLabel=!1),n.type&&""!==n.type||(n.type=e.defaultNodeType),n.zIndex||(n.zIndex=0),n}function w(e,t,n){return n.color||(n.color=e.defaultEdgeColor),n.label||(n.label=""),n.size||(n.size=.5),n.hasOwnProperty("hidden")||(n.hidden=!1),n.hasOwnProperty("forceLabel")||(n.forceLabel=!1),n.type&&""!==n.type||(n.type=e.defaultEdgeType),n.zIndex||(n.zIndex=0),n}var x=function(e){function t(t,n,r){void 0===r&&(r={});var i=e.call(this)||this;if(i.elements={},i.canvasContexts={},i.webGLContexts={},i.activeListeners={},i.quadtree=new h.default,i.labelGrid=new p.LabelGrid,i.nodeDataCache={},i.edgeDataCache={},i.nodesWithForcedLabels=[],i.edgesWithForcedLabels=[],i.nodeExtent={x:[0,1],y:[0,1]},i.matrix=(0,y.identity)(),i.invMatrix=(0,y.identity)(),i.correctionRatio=1,i.customBBox=null,i.normalizationFunction=(0,f.createNormalizationFunction)({x:[0,1],y:[0,1]}),i.cameraSizeRatio=1,i.width=0,i.height=0,i.pixelRatio=(0,f.getPixelRatio)(),i.displayedLabels=new Set,i.highlightedNodes=new Set,i.hoveredNode=null,i.hoveredEdge=null,i.renderFrame=null,i.renderHighlightedNodesFrame=null,i.needToProcess=!1,i.needToSoftProcess=!1,i.checkEdgesEventsFrame=null,i.nodePrograms={},i.nodeHoverPrograms={},i.edgePrograms={},i.settings=(0,g.resolveSettings)(r),(0,g.validateSettings)(i.settings),(0,f.validateGraph)(t),!(n instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");for(var o in i.graph=t,i.container=n,i.createWebGLContext("edges",{preserveDrawingBuffer:!0}),i.createCanvasContext("edgeLabels"),i.createWebGLContext("nodes"),i.createCanvasContext("labels"),i.createCanvasContext("hovers"),i.createWebGLContext("hoverNodes"),i.createCanvasContext("mouse"),i.webGLContexts){var a=i.webGLContexts[o];a.blendFunc(a.ONE,a.ONE_MINUS_SRC_ALPHA),a.enable(a.BLEND)}for(var s in i.settings.nodeProgramClasses){var u=i.settings.nodeProgramClasses[s];i.nodePrograms[s]=new u(i.webGLContexts.nodes,i);var l=u;s in i.settings.nodeHoverProgramClasses&&(l=i.settings.nodeHoverProgramClasses[s]),i.nodeHoverPrograms[s]=new l(i.webGLContexts.hoverNodes,i)}for(var s in i.settings.edgeProgramClasses){var m=i.settings.edgeProgramClasses[s];i.edgePrograms[s]=new m(i.webGLContexts.edges,i)}return i.resize(),i.camera=new c.default,i.bindCameraHandlers(),i.mouseCaptor=new d.default(i.elements.mouse,i),i.touchCaptor=new v.default(i.elements.mouse,i),i.bindEventHandlers(),i.bindGraphHandlers(),i.handleSettingsUpdate(),i.process(),i.render(),i}return i(t,e),t.prototype.createCanvas=function(e){var t=(0,f.createElement)("canvas",{position:"absolute"},{class:"sigma-".concat(e)});return this.elements[e]=t,this.container.appendChild(t),t},t.prototype.createCanvasContext=function(e){var t=this.createCanvas(e);return this.canvasContexts[e]=t.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},t.prototype.createWebGLContext=function(e,t){var n,r=this.createCanvas(e),i=o({preserveDrawingBuffer:!1,antialias:!1},t||{});return(n=r.getContext("webgl2",i))||(n=r.getContext("webgl",i)),n||(n=r.getContext("experimental-webgl",i)),this.webGLContexts[e]=n,this},t.prototype.bindCameraHandlers=function(){var e=this;return this.activeListeners.camera=function(){e._scheduleRefresh()},this.camera.on("updated",this.activeListeners.camera),this},t.prototype.mouseIsOnNode=function(e,t,n){var r=e.x,i=e.y,o=t.x,a=t.y;return r>o-n&&r<o+n&&i>a-n&&i<a+n&&Math.sqrt(Math.pow(r-o,2)+Math.pow(i-a,2))<n},t.prototype.getQuadNodes=function(e){var t=this.viewportToFramedGraph(e);return this.quadtree.point(t.x,1-t.y)},t.prototype.getNodeAtPosition=function(e){for(var t=e.x,n=e.y,r=this.getQuadNodes(e),i=1/0,o=null,a=0,s=r.length;a<s;a++){var u=r[a],c=this.nodeDataCache[u],d=this.framedGraphToViewport(c),h=this.scaleSize(c.size);if(!c.hidden&&this.mouseIsOnNode(e,d,h)){var l=Math.sqrt(Math.pow(t-d.x,2)+Math.pow(n-d.y,2));l<i&&(i=l,o=u)}}return o},t.prototype.bindEventHandlers=function(){var e=this;this.activeListeners.handleResize=function(){e.needToSoftProcess=!0,e._scheduleRefresh()},window.addEventListener("resize",this.activeListeners.handleResize),this.activeListeners.handleMove=function(t){var n={event:t,preventSigmaDefault:function(){t.preventSigmaDefault()}},r=e.getNodeAtPosition(t);if(r&&e.hoveredNode!==r&&!e.nodeDataCache[r].hidden)return e.hoveredNode&&e.emit("leaveNode",o(o({},n),{node:e.hoveredNode})),e.hoveredNode=r,e.emit("enterNode",o(o({},n),{node:r})),void e.scheduleHighlightedNodesRender();if(e.hoveredNode){var i=e.nodeDataCache[e.hoveredNode],a=e.framedGraphToViewport(i),s=e.scaleSize(i.size);if(!e.mouseIsOnNode(t,a,s)){var u=e.hoveredNode;return e.hoveredNode=null,e.emit("leaveNode",o(o({},n),{node:u})),void e.scheduleHighlightedNodesRender()}}!0===e.settings.enableEdgeHoverEvents?e.checkEdgeHoverEvents(n):"debounce"===e.settings.enableEdgeHoverEvents&&(e.checkEdgesEventsFrame||(e.checkEdgesEventsFrame=(0,f.requestFrame)((function(){e.checkEdgeHoverEvents(n),e.checkEdgesEventsFrame=null}))))};var t=function(t){return function(n){var r={event:n,preventSigmaDefault:function(){n.preventSigmaDefault()}},i=n.original.isFakeSigmaMouseEvent?e.getNodeAtPosition(n):e.hoveredNode;if(i)return e.emit("".concat(t,"Node"),o(o({},r),{node:i}));if("wheel"===t?e.settings.enableEdgeWheelEvents:e.settings.enableEdgeClickEvents){var a=e.getEdgeAtPoint(n.x,n.y);if(a)return e.emit("".concat(t,"Edge"),o(o({},r),{edge:a}))}return e.emit("".concat(t,"Stage"),r)}};return this.activeListeners.handleClick=t("click"),this.activeListeners.handleRightClick=t("rightClick"),this.activeListeners.handleDoubleClick=t("doubleClick"),this.activeListeners.handleWheel=t("wheel"),this.activeListeners.handleDown=t("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},t.prototype.bindGraphHandlers=function(){var e=this,t=this.graph;return this.activeListeners.graphUpdate=function(){e.needToProcess=!0,e._scheduleRefresh()},this.activeListeners.softGraphUpdate=function(){e.needToSoftProcess=!0,e._scheduleRefresh()},this.activeListeners.dropNodeGraphUpdate=function(t){delete e.nodeDataCache[t.key],e.hoveredNode===t.key&&(e.hoveredNode=null),e.activeListeners.graphUpdate()},this.activeListeners.dropEdgeGraphUpdate=function(t){delete e.edgeDataCache[t.key],e.hoveredEdge===t.key&&(e.hoveredEdge=null),e.activeListeners.graphUpdate()},this.activeListeners.clearEdgesGraphUpdate=function(){e.edgeDataCache={},e.hoveredEdge=null,e.activeListeners.graphUpdate()},this.activeListeners.clearGraphUpdate=function(){e.nodeDataCache={},e.hoveredNode=null,e.activeListeners.clearEdgesGraphUpdate()},t.on("nodeAdded",this.activeListeners.graphUpdate),t.on("nodeDropped",this.activeListeners.dropNodeGraphUpdate),t.on("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),t.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgeAdded",this.activeListeners.graphUpdate),t.on("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),t.on("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),t.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),t.on("cleared",this.activeListeners.clearGraphUpdate),this},t.prototype.unbindGraphHandlers=function(){var e=this.graph;e.removeListener("nodeAdded",this.activeListeners.graphUpdate),e.removeListener("nodeDropped",this.activeListeners.dropNodeGraphUpdate),e.removeListener("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),e.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgeAdded",this.activeListeners.graphUpdate),e.removeListener("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),e.removeListener("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),e.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),e.removeListener("cleared",this.activeListeners.clearGraphUpdate)},t.prototype.checkEdgeHoverEvents=function(e){var t=this.hoveredNode?null:this.getEdgeAtPoint(e.event.x,e.event.y);return t!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",o(o({},e),{edge:this.hoveredEdge})),t&&this.emit("enterEdge",o(o({},e),{edge:t})),this.hoveredEdge=t),this},t.prototype.getEdgeAtPoint=function(e,t){var n,r,i=this,o=this.edgeDataCache,s=this.nodeDataCache;if(!(0,m.isPixelColored)(this.webGLContexts.edges,e*this.pixelRatio,t*this.pixelRatio))return null;var u=this.viewportToGraph({x:e,y:t}),c=u.x,d=u.y,h=0;if(this.graph.someEdge((function(e,t,n,r,a,u){var c=a.x,d=a.y,l=u.x,f=u.y;if(o[e].hidden||s[n].hidden||s[r].hidden)return!1;if(c!==l||d!==f){var p=Math.sqrt(Math.pow(l-c,2)+Math.pow(f-d,2)),g=i.graphToViewport({x:c,y:d}),v=g.x,y=g.y,m=i.graphToViewport({x:l,y:f}),b=m.x,w=m.y,x=Math.sqrt(Math.pow(b-v,2)+Math.pow(w-y,2));return h=p/x,!0}})),!h)return null;var l=this.graph.filterEdges((function(e,t,n,r,a,u){return!(o[e].hidden||s[n].hidden||s[r].hidden)&&(!!(0,m.doEdgeCollideWithPoint)(c,d,a.x,a.y,u.x,u.y,o[e].size*h/i.cameraSizeRatio)||void 0)}));if(0===l.length)return null;var f=l[l.length-1],p=-1/0;try{for(var g=a(l),v=g.next();!v.done;v=g.next()){var y=v.value,b=this.graph.getEdgeAttribute(y,"zIndex");b>=p&&(f=y,p=b)}}catch(e){n={error:e}}finally{try{v&&!v.done&&(r=g.return)&&r.call(g)}finally{if(n)throw n.error}}return f},t.prototype.process=function(e){var t=this;void 0===e&&(e=!1);var n=this.graph,r=this.settings,i=this.getDimensions(),o=[1/0,-1/0],a=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(i,r.labelGridCellSize),this.highlightedNodes=new Set,this.nodeExtent=(0,f.graphExtent)(n),this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[];var s=new c.default,u=(0,f.matrixFromCamera)(s.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,f.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var d={},h=n.nodes(),l=0,p=h.length;l<p;l++){var g=h[l],v=Object.assign({},n.getNodeAttributes(g));r.nodeReducer&&(v=r.nodeReducer(g,v)),d[(m=b(this.settings,g,v)).type]=(d[m.type]||0)+1,this.nodeDataCache[g]=m,this.normalizationFunction.applyTo(m),m.forceLabel&&this.nodesWithForcedLabels.push(g),this.settings.zIndex&&(m.zIndex<o[0]&&(o[0]=m.zIndex),m.zIndex>o[1]&&(o[1]=m.zIndex))}for(var y in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for node type "'.concat(y,'"!'));e||this.nodePrograms[y].allocate(d[y]||0),d[y]=0}for(this.settings.zIndex&&o[0]!==o[1]&&(h=(0,f.zIndexOrdering)(o,(function(e){return t.nodeDataCache[e].zIndex}),h)),l=0,p=h.length;l<p;l++){g=h[l];var m=this.nodeDataCache[g];this.quadtree.add(g,m.x,1-m.y,m.size/this.width),"string"!=typeof m.label||m.hidden||this.labelGrid.add(g,m.size,this.framedGraphToViewport(m,{matrix:u}));var x=this.nodePrograms[m.type];if(!x)throw new Error('Sigma: could not find a suitable program for node type "'.concat(m.type,'"!'));x.process(m,m.hidden,d[m.type]++),m.highlighted&&!m.hidden&&this.highlightedNodes.add(g)}this.labelGrid.organize();var E={},_=n.edges();for(l=0,p=_.length;l<p;l++){var L=_[l];v=Object.assign({},n.getEdgeAttributes(L)),r.edgeReducer&&(v=r.edgeReducer(L,v)),E[(m=w(this.settings,0,v)).type]=(E[m.type]||0)+1,this.edgeDataCache[L]=m,m.forceLabel&&!m.hidden&&this.edgesWithForcedLabels.push(L),this.settings.zIndex&&(m.zIndex<a[0]&&(a[0]=m.zIndex),m.zIndex>a[1]&&(a[1]=m.zIndex))}for(var y in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for edge type "'.concat(y,'"!'));e||this.edgePrograms[y].allocate(E[y]||0),E[y]=0}for(this.settings.zIndex&&a[0]!==a[1]&&(_=(0,f.zIndexOrdering)(a,(function(e){return t.edgeDataCache[e].zIndex}),_)),l=0,p=_.length;l<p;l++){L=_[l],m=this.edgeDataCache[L];var A=n.extremities(L),C=this.nodeDataCache[A[0]],S=this.nodeDataCache[A[1]],T=m.hidden||C.hidden||S.hidden;this.edgePrograms[m.type].process(C,S,m,T,E[m.type]++)}for(var y in this.edgePrograms){var k=this.edgePrograms[y];e||"function"!=typeof k.computeIndices||k.computeIndices()}return this},t.prototype.handleSettingsUpdate=function(){return this.camera.minRatio=this.settings.minCameraRatio,this.camera.maxRatio=this.settings.maxCameraRatio,this.camera.setState(this.camera.validateState(this.camera.getState())),this},t.prototype._refresh=function(){return this.needToProcess?this.process():this.needToSoftProcess&&this.process(!0),this.needToProcess=!1,this.needToSoftProcess=!1,this.render(),this},t.prototype._scheduleRefresh=function(){var e=this;return this.renderFrame||(this.renderFrame=(0,f.requestFrame)((function(){e._refresh(),e.renderFrame=null}))),this},t.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var e=this.camera.getState(),t=this.labelGrid.getLabelsToDisplay(e.ratio,this.settings.labelDensity);(0,u.default)(t,this.nodesWithForcedLabels),this.displayedLabels=new Set;for(var n=this.canvasContexts.labels,r=0,i=t.length;r<i;r++){var a=t[r],s=this.nodeDataCache[a];if(!this.displayedLabels.has(a)&&!s.hidden){var c=this.framedGraphToViewport(s),d=c.x,h=c.y,l=this.scaleSize(s.size);!s.forceLabel&&l<this.settings.labelRenderedSizeThreshold||d<-150||d>this.width+150||h<-50||h>this.height+50||(this.displayedLabels.add(a),this.settings.labelRenderer(n,o(o({key:a},s),{size:l,x:d,y:h}),this.settings))}}return this},t.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var e=this.canvasContexts.edgeLabels;e.clearRect(0,0,this.width,this.height);for(var t=(0,p.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedLabels,highlightedNodes:this.highlightedNodes}).concat(this.edgesWithForcedLabels),n=new Set,r=0,i=t.length;r<i;r++){var a=t[r],s=this.graph.extremities(a),u=this.nodeDataCache[s[0]],c=this.nodeDataCache[s[1]],d=this.edgeDataCache[a];n.has(a)||d.hidden||u.hidden||c.hidden||(this.settings.edgeLabelRenderer(e,o(o({key:a},d),{size:this.scaleSize(d.size)}),o(o(o({key:s[0]},u),this.framedGraphToViewport(u)),{size:this.scaleSize(u.size)}),o(o(o({key:s[1]},c),this.framedGraphToViewport(c)),{size:this.scaleSize(c.size)}),this.settings),n.add(a))}return this},t.prototype.renderHighlightedNodes=function(){var e=this,t=this.canvasContexts.hovers;t.clearRect(0,0,this.width,this.height);var n=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&n.push(this.hoveredNode),this.highlightedNodes.forEach((function(t){t!==e.hoveredNode&&n.push(t)})),n.forEach((function(n){return function(n){var r=e.nodeDataCache[n],i=e.framedGraphToViewport(r),a=i.x,s=i.y,u=e.scaleSize(r.size);e.settings.hoverRenderer(t,o(o({key:n},r),{size:u,x:a,y:s}),e.settings)}(n)}));var r={};for(var i in n.forEach((function(t){var n=e.nodeDataCache[t].type;r[n]=(r[n]||0)+1})),this.nodeHoverPrograms)this.nodeHoverPrograms[i].allocate(r[i]||0),r[i]=0;for(var i in n.forEach((function(t){var n=e.nodeDataCache[t];e.nodeHoverPrograms[n.type].process(n,n.hidden,r[n.type]++)})),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.nodeHoverPrograms){var a=this.nodeHoverPrograms[i];a.bind(),a.bufferData(),a.render({matrix:this.matrix,width:this.width,height:this.height,ratio:this.camera.ratio,correctionRatio:this.correctionRatio/this.camera.ratio,scalingRatio:this.pixelRatio})}},t.prototype.scheduleHighlightedNodesRender=function(){var e=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,f.requestFrame)((function(){e.renderHighlightedNodesFrame=null,e.renderHighlightedNodes(),e.renderEdgeLabels()})))},t.prototype.render=function(){var e=this;this.emit("beforeRender");var t=function(){return e.emit("afterRender"),e};if(this.renderFrame&&((0,f.cancelFrame)(this.renderFrame),this.renderFrame=null,this.needToProcess=!1,this.needToSoftProcess=!1),this.resize(),this.clear(),this.updateCachedValues(),!this.graph.order)return t();var n=this.mouseCaptor,r=this.camera.isAnimated()||n.isMoving||n.draggedEvents||n.currentWheelDirection,i=this.camera.getState(),o=this.getDimensions(),a=this.getGraphDimensions(),s=this.getSetting("stagePadding")||0;for(var u in this.matrix=(0,f.matrixFromCamera)(i,o,a,s),this.invMatrix=(0,f.matrixFromCamera)(i,o,a,s,!0),this.correctionRatio=(0,f.getMatrixImpact)(this.matrix,i,o),this.nodePrograms)(c=this.nodePrograms[u]).bind(),c.bufferData(),c.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio});if(!this.settings.hideEdgesOnMove||!r)for(var u in this.edgePrograms){var c;(c=this.edgePrograms[u]).bind(),c.bufferData(),c.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio})}return this.settings.hideLabelsOnMove&&r||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes()),t()},t.prototype.updateCachedValues=function(){var e=this.camera.getState().ratio;this.cameraSizeRatio=Math.sqrt(e)},t.prototype.getCamera=function(){return this.camera},t.prototype.getContainer=function(){return this.container},t.prototype.getGraph=function(){return this.graph},t.prototype.setGraph=function(e){e!==this.graph&&(this.unbindGraphHandlers(),this.nodeDataCache={},this.edgeDataCache={},this.displayedLabels.clear(),this.highlightedNodes.clear(),this.hoveredNode=null,this.hoveredEdge=null,this.nodesWithForcedLabels.length=0,this.edgesWithForcedLabels.length=0,null!==this.checkEdgesEventsFrame&&((0,f.cancelFrame)(this.checkEdgesEventsFrame),this.checkEdgesEventsFrame=null),this.graph=e,this.bindGraphHandlers(),this.process(),this.render())},t.prototype.getMouseCaptor=function(){return this.mouseCaptor},t.prototype.getTouchCaptor=function(){return this.touchCaptor},t.prototype.getDimensions=function(){return{width:this.width,height:this.height}},t.prototype.getGraphDimensions=function(){var e=this.customBBox||this.nodeExtent;return{width:e.x[1]-e.x[0]||1,height:e.y[1]-e.y[0]||1}},t.prototype.getNodeDisplayData=function(e){var t=this.nodeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getEdgeDisplayData=function(e){var t=this.edgeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getSettings=function(){return o({},this.settings)},t.prototype.getSetting=function(e){return this.settings[e]},t.prototype.setSetting=function(e,t){return this.settings[e]=t,(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.updateSetting=function(e,t){return this.settings[e]=t(this.settings[e]),(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.resize=function(){var e=this.width,t=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.pixelRatio=(0,f.getPixelRatio)(),0===this.width){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.width=1}if(0===this.height){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.height=1}if(e===this.width&&t===this.height)return this;for(var n in this.emit("resize"),this.elements){var r=this.elements[n];r.style.width=this.width+"px",r.style.height=this.height+"px"}for(var n in this.canvasContexts)this.elements[n].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[n].setAttribute("height",this.height*this.pixelRatio+"px"),1!==this.pixelRatio&&this.canvasContexts[n].scale(this.pixelRatio,this.pixelRatio);for(var n in this.webGLContexts)this.elements[n].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[n].setAttribute("height",this.height*this.pixelRatio+"px"),this.webGLContexts[n].viewport(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio);return this},t.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},t.prototype.refresh=function(){return this.needToProcess=!0,this._refresh(),this},t.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.getViewportZoomedState=function(e,t){var n=this.camera.getState(),r=n.ratio,i=n.angle,o=n.x,a=n.y,s=t/r,u={x:this.width/2,y:this.height/2},c=this.viewportToFramedGraph(e),d=this.viewportToFramedGraph(u);return{angle:i,x:(c.x-d.x)*(1-s)+o,y:(c.y-d.y)*(1-s)+a,ratio:t}},t.prototype.viewRectangle=function(){var e=0*this.width/8,t=0*this.height/8,n=this.viewportToFramedGraph({x:0-e,y:0-t}),r=this.viewportToFramedGraph({x:this.width+e,y:0-t}),i=this.viewportToFramedGraph({x:0,y:this.height+t});return{x1:n.x,y1:n.y,x2:r.x,y2:r.y,height:r.y-i.y}},t.prototype.framedGraphToViewport=function(e,t){void 0===t&&(t={});var n=!!t.cameraState||!!t.viewportDimensions||!!t.graphDimensions,r=t.matrix?t.matrix:n?(0,f.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0):this.matrix,i=(0,y.multiplyVec2)(r,e);return{x:(1+i.x)*this.width/2,y:(1-i.y)*this.height/2}},t.prototype.viewportToFramedGraph=function(e,t){void 0===t&&(t={});var n=!!t.cameraState||!!t.viewportDimensions||!t.graphDimensions,r=t.matrix?t.matrix:n?(0,f.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,i=(0,y.multiplyVec2)(r,{x:e.x/this.width*2-1,y:1-e.y/this.height*2});return isNaN(i.x)&&(i.x=0),isNaN(i.y)&&(i.y=0),i},t.prototype.viewportToGraph=function(e,t){return void 0===t&&(t={}),this.normalizationFunction.inverse(this.viewportToFramedGraph(e,t))},t.prototype.graphToViewport=function(e,t){return void 0===t&&(t={}),this.framedGraphToViewport(this.normalizationFunction(e),t)},t.prototype.getBBox=function(){return(0,f.graphExtent)(this.graph)},t.prototype.getCustomBBox=function(){return this.customBBox},t.prototype.setCustomBBox=function(e){return this.customBBox=e,this._scheduleRefresh(),this},t.prototype.kill=function(){this.emit("kill"),this.removeAllListeners(),this.camera.removeListener("updated",this.activeListeners.camera),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),this.unbindGraphHandlers(),this.quadtree=new h.default,this.nodeDataCache={},this.edgeDataCache={},this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[],this.highlightedNodes.clear(),this.renderFrame&&((0,f.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,f.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var e=this.container;e.firstChild;)e.removeChild(e.firstChild)},t.prototype.scaleSize=function(e){return e/this.cameraSizeRatio},t.prototype.getCanvases=function(){return o({},this.elements)},t}(l.TypedEventEmitter);t.default=x},3291:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.TypedEventEmitter=void 0;var o=function(e){function t(){var t=e.call(this)||this;return t.rawEmitter=t,t}return i(t,e),t}(n(7187).EventEmitter);t.TypedEventEmitter=o},5227:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.animateNodes=t.ANIMATE_DEFAULTS=void 0;var i=n(4524),o=r(n(8941));t.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},t.animateNodes=function(e,n,r,a){var s=Object.assign({},t.ANIMATE_DEFAULTS,r),u="function"==typeof s.easing?s.easing:o.default[s.easing],c=Date.now(),d={};for(var h in n){var l=n[h];for(var f in d[h]={},l)d[h][f]=e.getNodeAttribute(h,f)}var p=null,g=function(){p=null;var t=(Date.now()-c)/s.duration;if(t>=1){for(var r in n){var o=n[r];for(var h in o)e.setNodeAttribute(r,h,o[h])}"function"==typeof a&&a()}else{for(var r in t=u(t),n){o=n[r];var l=d[r];for(var h in o)e.setNodeAttribute(r,h,o[h]*t+l[h]*(1-t))}p=(0,i.requestFrame)(g)}};return g(),function(){p&&(0,i.cancelFrame)(p)}}},8109:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HTML_COLORS=void 0,t.HTML_COLORS={black:"#000000",silver:"#C0C0C0",gray:"#808080",grey:"#808080",white:"#FFFFFF",maroon:"#800000",red:"#FF0000",purple:"#800080",fuchsia:"#FF00FF",green:"#008000",lime:"#00FF00",olive:"#808000",yellow:"#FFFF00",navy:"#000080",blue:"#0000FF",teal:"#008080",aqua:"#00FFFF",darkblue:"#00008B",mediumblue:"#0000CD",darkgreen:"#006400",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",springgreen:"#00FF7F",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",rebeccapurple:"#663399",mediumaquamarine:"#66CDAA",dimgray:"#696969",dimgrey:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",slategrey:"#708090",lightslategray:"#778899",lightslategrey:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370DB",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",palevioletred:"#DB7093",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",lightyellow:"#FFFFE0",ivory:"#FFFFF0"}},8941:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicInOut=t.cubicOut=t.cubicIn=t.quadraticInOut=t.quadraticOut=t.quadraticIn=t.linear=void 0,t.linear=function(e){return e},t.quadraticIn=function(e){return e*e},t.quadraticOut=function(e){return e*(2-e)},t.quadraticInOut=function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)},t.cubicIn=function(e){return e*e*e},t.cubicOut=function(e){return--e*e*e+1},t.cubicInOut=function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)};var n={linear:t.linear,quadraticIn:t.quadraticIn,quadraticOut:t.quadraticOut,quadraticInOut:t.quadraticInOut,cubicIn:t.cubicIn,cubicOut:t.cubicOut,cubicInOut:t.cubicInOut};t.default=n},9822:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.doEdgeCollideWithPoint=t.isPixelColored=void 0,t.isPixelColored=function(e,t,n){var r=new Uint8Array(4);return e.readPixels(t,e.drawingBufferHeight-n,1,1,e.RGBA,e.UNSIGNED_BYTE,r),r[3]>0},t.doEdgeCollideWithPoint=function(e,t,n,r,i,o,a){return!(e<n-a&&e<i-a||t<r-a&&t<o-a||e>n+a&&e>i+a||t>r+a&&t>o+a||!(Math.abs((i-n)*(r-t)-(n-e)*(o-r))/Math.sqrt(Math.pow(i-n,2)+Math.pow(o-r,2))<a/2))}},4524:function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.validateGraph=t.canUse32BitsIndices=t.extractPixel=t.getMatrixImpact=t.matrixFromCamera=t.getCorrectionRatio=t.floatColor=t.floatArrayColor=t.parseColor=t.zIndexOrdering=t.createNormalizationFunction=t.graphExtent=t.getPixelRatio=t.createElement=t.cancelFrame=t.requestFrame=t.assignDeep=t.assign=t.isPlainObject=void 0;var o=i(n(6186)),a=n(5132),s=n(8109);function u(e){return"object"==typeof e&&null!==e&&e.constructor===Object}t.isPlainObject=u,t.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e=e||{};for(var r=0,i=t.length;r<i;r++){var o=t[r];o&&Object.assign(e,o)}return e},t.assignDeep=function e(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];t=t||{};for(var i=0,o=n.length;i<o;i++){var a=n[i];if(a)for(var s in a)u(a[s])?t[s]=e(t[s],a[s]):t[s]=a[s]}return t},t.requestFrame="undefined"!=typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,0)},t.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:function(e){return clearTimeout(e)},t.createElement=function(e,t,n){var r=document.createElement(e);if(t)for(var i in t)r.style[i]=t[i];if(n)for(var i in n)r.setAttribute(i,n[i]);return r},t.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},t.graphExtent=function(e){if(!e.order)return{x:[0,1],y:[0,1]};var t=1/0,n=-1/0,r=1/0,i=-1/0;return e.forEachNode((function(e,o){var a=o.x,s=o.y;a<t&&(t=a),a>n&&(n=a),s<r&&(r=s),s>i&&(i=s)})),{x:[t,n],y:[r,i]}},t.createNormalizationFunction=function(e){var t=r(e.x,2),n=t[0],i=t[1],o=r(e.y,2),a=o[0],s=o[1],u=Math.max(i-n,s-a),c=(i+n)/2,d=(s+a)/2;(0===u||Math.abs(u)===1/0||isNaN(u))&&(u=1),isNaN(c)&&(c=0),isNaN(d)&&(d=0);var h=function(e){return{x:.5+(e.x-c)/u,y:.5+(e.y-d)/u}};return h.applyTo=function(e){e.x=.5+(e.x-c)/u,e.y=.5+(e.y-d)/u},h.inverse=function(e){return{x:c+u*(e.x-.5),y:d+u*(e.y-.5)}},h.ratio=u,h},t.zIndexOrdering=function(e,t,n){return n.sort((function(e,n){var r=t(e)||0,i=t(n)||0;return r<i?-1:r>i?1:0}))};var c=new Int8Array(4),d=new Int32Array(c.buffer,0,1),h=new Float32Array(c.buffer,0,1),l=/^\s*rgba?\s*\(/,f=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function p(e){var t=0,n=0,r=0,i=1;if("#"===e[0])4===e.length?(t=parseInt(e.charAt(1)+e.charAt(1),16),n=parseInt(e.charAt(2)+e.charAt(2),16),r=parseInt(e.charAt(3)+e.charAt(3),16)):(t=parseInt(e.charAt(1)+e.charAt(2),16),n=parseInt(e.charAt(3)+e.charAt(4),16),r=parseInt(e.charAt(5)+e.charAt(6),16)),9===e.length&&(i=parseInt(e.charAt(7)+e.charAt(8),16)/255);else if(l.test(e)){var o=e.match(f);o&&(t=+o[1],n=+o[2],r=+o[3],o[4]&&(i=+o[4]))}return{r:t,g:n,b:r,a:i}}t.parseColor=p;var g={};for(var v in s.HTML_COLORS)g[v]=y(s.HTML_COLORS[v]),g[s.HTML_COLORS[v]]=g[v];function y(e){if(void 0!==g[e])return g[e];var t=p(e),n=t.r,r=t.g,i=t.b,o=t.a;o=255*o|0,d[0]=4278190079&(o<<24|i<<16|r<<8|n);var a=h[0];return g[e]=a,a}function m(e,t){var n=e.height/e.width,r=t.height/t.width;return n<1&&r>1||n>1&&r<1?1:Math.min(Math.max(r,1/r),Math.max(1/n,n))}t.floatArrayColor=function(e){var t=p(e=s.HTML_COLORS[e]||e),n=t.r,r=t.g,i=t.b,o=t.a;return new Float32Array([n/255,r/255,i/255,o])},t.floatColor=y,t.getCorrectionRatio=m,t.matrixFromCamera=function(e,t,n,r,i){var o=e.angle,s=e.ratio,u=e.x,c=e.y,d=t.width,h=t.height,l=(0,a.identity)(),f=Math.min(d,h)-2*r,p=m(t,n);return i?((0,a.multiply)(l,(0,a.translate)((0,a.identity)(),u,c)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),s)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),d/f/2/p,h/f/2/p))):((0,a.multiply)(l,(0,a.scale)((0,a.identity)(),f/d*2*p,f/h*2*p)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),-o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),1/s)),(0,a.multiply)(l,(0,a.translate)((0,a.identity)(),-u,-c))),l},t.getMatrixImpact=function(e,t,n){var r=(0,a.multiplyVec2)(e,{x:Math.cos(t.angle),y:Math.sin(t.angle)},0),i=r.x,o=r.y;return 1/Math.sqrt(Math.pow(i,2)+Math.pow(o,2))/n.width},t.extractPixel=function(e,t,n,r){var i=r||new Uint8Array(4);return e.readPixels(t,n,1,1,e.RGBA,e.UNSIGNED_BYTE,i),i},t.canUse32BitsIndices=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||!!e.getExtension("OES_element_index_uint")},t.validateGraph=function(e){if(!(0,o.default)(e))throw new Error("Sigma: invalid graph instance.");e.forEachNode((function(e,t){if(!Number.isFinite(t.x)||!Number.isFinite(t.y))throw new Error("Sigma: Coordinates of node ".concat(e," are invalid. A node must have a numeric 'x' and 'y' attribute."))}))}},5132:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiplyVec2=t.multiply=t.translate=t.rotate=t.scale=t.identity=void 0,t.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},t.scale=function(e,t,n){return e[0]=t,e[4]="number"==typeof n?n:t,e},t.rotate=function(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[3]=-n,e[4]=r,e},t.translate=function(e,t,n){return e[6]=t,e[7]=n,e},t.multiply=function(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],c=e[7],d=e[8],h=t[0],l=t[1],f=t[2],p=t[3],g=t[4],v=t[5],y=t[6],m=t[7],b=t[8];return e[0]=h*n+l*o+f*u,e[1]=h*r+l*a+f*c,e[2]=h*i+l*s+f*d,e[3]=p*n+g*o+v*u,e[4]=p*r+g*a+v*c,e[5]=p*i+g*s+v*d,e[6]=y*n+m*o+b*u,e[7]=y*r+m*a+b*c,e[8]=y*i+m*s+b*d,e},t.multiplyVec2=function(e,t,n){void 0===n&&(n=1);var r=e[0],i=e[1],o=e[3],a=e[4],s=e[6],u=e[7],c=t.x,d=t.y;return{x:c*r+d*o+s*n,y:c*i+d*a+u*n}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.r(r),n.d(r,{SigmaGraphCreator:()=>f});var e=n(2698),t=n(9026),i=n.n(t);const o=({url:e,options:t,values:n})=>fetch(((e,t)=>void 0!==t?`${window.origin}${e}?from=${t[0]}&to=${t[1]}`:`${window.origin}${e}`)(e,n),t);var a=n(6038);const s="#808080",u={allowInvalidContainer:!0,enableEdgeClickEvents:!0,renderLabels:!1,enableEdgeHoverEvents:!0,nodeProgramClasses:{base:n.n(a)()}},c={type:"arrow",size:2,color:s};var d=n(1687),h=n(9755),l=n.n(h);class f{constructor(t){this.sigmaContainer=t.querySelector("#sigma-container"),this.maxTrainLength=0,this.enableNodeHover=!1,this.state={},this.nodesForGivenTrainId=new Map,this.subGraph=new e.DirectedGraph,this.graph=new e.DirectedGraph,this.getInitGraph(this.graph);var n=this;l()("#node-enable").on("change",(function(){n.enableNodeHover=l()("#node-enable").is(":checked")})),l()("#route-input").on("change",(function(){n.processRouteID()})),l()("#Scaling-input").on("input",(function(){n.destroySigmaGraph(),n.subGraphRouteIds=new Set,n.inputScaling=parseInt(l()("#Scaling-input").val()),n.createSubGraph(),n.processRouteID()})),l()("#search").on("input","#search-input, #neighbor-input",(function(){n.processInput(),n.validateInputTrainId()&&(n.createSubGraph(),n.createRouteSuggestions())}))}processRouteID(){this.inputRouteID=l()("#route-input").val(),"null"!=this.inputRouteID?this.highlightRoute(this.subGraph,parseInt(this.inputRouteID)):(this.state.selectedNodes=void 0,this.renderer.refresh())}processInput(){l()("#route-input").empty(),l()("#route-input").append('<option value="null">--- Select RouteID ---</option>'),""!==l()("#search-input").val()?(this.destroySigmaGraph(),this.state.selectedNodes=void 0,this.subGraphRouteIds=new Set,this.maxTrainLength=0,this.inputTrainID=parseInt(l()("#search-input").val()),this.inputNeighbor=l()("#neighbor-input").val(),this.inputScaling=parseInt(l()("#Scaling-input").val()),l()("#output").html(this.inputNeighbor),this.validateInputTrainId()?(l()("#route-row").show(),l()("#search-input").removeClass("has-error"),l()("#warning").hide()):(l()("#route-row").hide(),l()("#search-input").addClass("has-error"),l()("#warning").show())):(l()("#route-row").hide(),l()("#search-input").removeClass("has-error"),l()("#warning").hide(),this.inputTrainID=void 0)}validateInputTrainId(){return this.nodesForGivenTrainId.has(this.inputTrainID)}getRelevantTrainIds(){let e=new Set;e.add(this.inputTrainID);for(let t=0;t<this.inputNeighbor;t++)e=new Set([...e,...this.getNeighborTrainIds(e)]);return e}getNeighborTrainIds(e){let t=new Set;return e.forEach((e=>{this.nodesForGivenTrainId.get(e).forEach((e=>{this.graph.forEachNeighbor(e,(n=>{this.graph.getNodeAttribute(e,"t")!=this.graph.getNodeAttribute(n,"t")&&t.add(this.graph.getNodeAttribute(n,"t"))}))}))})),t}getRelevantNodes(e){let t=new Set;return e.forEach((e=>{const n=this.nodesForGivenTrainId.get(e);this.maxTrainLength=this.maxTrainLength<n.length?n.length:this.maxTrainLength,n.forEach((e=>{const n=this.graph.getNodeAttribute(e,"r");this.subGraphRouteIds.add(n),void 0===this.nodesForGivenRouteId.get(n)?this.nodesForGivenRouteId.set(n,[e]):this.nodesForGivenRouteId.get(n).push(e),t.add(e)}))})),t}createRouteSuggestions(){this.subGraphRouteIds.forEach((e=>{l()("#route-input").append('<option value="'+e+'">'+e+"</option>")}))}createSubGraph(){let e=this.getRelevantTrainIds();const t=e.size;e=[...e].sort(((e,t)=>e-t)),this.nodesForGivenRouteId=new Map,this.subGraph=(0,d.subgraph)(this.graph,this.getRelevantNodes(e)),this.subGraphRouteIds=[...this.subGraphRouteIds].sort(((e,t)=>e-t)),this.setGraphAttributes(this.subGraph,t,this.inputScaling),this.renderer=new(i())(this.subGraph,this.sigmaContainer,u),this.bindRendererEvents(this.subGraph)}setGraphAttributes(e,t,n){this.setNodeAttributes(e,t,n),this.setEdgeAttributes(e)}setNodeAttributes(e,t,n){let r=null,i=this.maxTrainLength/t,o=0,a=-1;e.forEachNode((t=>{const s=e.getNodeAttribute(t,"t"),u="Train:"+s+" Route:"+e.getNodeAttribute(t,"r");r!=s?(o=0,a++):o++,r=s,e.setNodeAttribute(t,"x",500*o*(n/10)).setNodeAttribute(t,"y",500*a*i).setNodeAttribute(t,"label",u).setNodeAttribute(t,"color","#000000").setNodeAttribute(t,"size",2).setNodeAttribute(t,"type","base")}))}setEdgeAttributes(e){e.forEachEdge((t=>{this.edgeAttributes(e,t)}))}isRouteEdge(e,t){const n=e.source(t),r=e.target(t);return e.getNodeAttribute(n,"t")!==e.getNodeAttribute(r,"t")}edgeAttributes(e,t){e.mergeEdgeAttributes(t,c)}bindRendererEvents(e){this.invertEdge(e),this.highlightHoveredEdge(e),this.highlightHoveredNode(e)}resizeSigmaGraph(){void 0!==this.renderer?this.renderer.refresh():console.log("graph doesn't exist!")}destroySigmaGraph(){void 0!==this.renderer&&(this.renderer.clear(),this.renderer.kill())}setHoveredNode(e,t){t&&this.enableNodeHover?(this.state.hoveredNode=t,this.state.hoveredNeighbors=new Set(e.neighbors(t))):(this.state.hoveredNode=void 0,this.state.hoveredNeighbors=void 0)}rendererReducer(e){this.rendererNodeReducer(e),this.rendererEdgeReducer(e)}rendererNodeReducer(e,t){this.renderer.setSetting("nodeReducer",((t,n)=>{const r=Object.assign({},n);return this.state.hoveredNeighbors&&!this.state.hoveredNeighbors.has(t)&&this.state.hoveredNode!==t&&(r.label="",r.color="#f6f6f6"),!this.state.selectedNodes||this.state.selectedNodes.has(t)&&this.stateEdgeValidation(e,t)?this.state.selectedNodes&&this.state.selectedNodes.has(t)&&(r.highlighted=!0):(r.label=null,r.color="#f6f6f6"),r}))}stateEdgeValidation(e,t){var n;let r=!1;return null===(n=this.state.selectedNodes)||void 0===n||n.forEach((n=>{e.areNeighbors(t,n)&&(r=!0)})),r}rendererEdgeReducer(e){this.renderer.setSetting("edgeReducer",((t,n)=>{const r=Object.assign({},n);return this.state.hoveredNode&&!e.hasExtremity(t,this.state.hoveredNode)&&(r.hidden=!0),!this.state.selectedNodes||this.state.selectedNodes.has(e.source(t))&&this.state.selectedNodes.has(e.target(t))||(r.hidden=!0),r}))}highlightRoute(e,t){this.state.selectedNodes=new Set(this.nodesForGivenRouteId.get(t)),this.rendererNodeReducer(e,t),this.rendererEdgeReducer(e),this.renderer.refresh()}highlightHoveredNode(e){this.renderer.on("enterNode",(({node:t})=>{this.hoveredNodeActions(e,t)})),this.renderer.on("leaveNode",(()=>{this.hoveredNodeActions(e,void 0)}))}hoveredNodeActions(e,t){this.setHoveredNode(e,t),this.rendererReducer(e),this.renderer.refresh()}highlightHoveredEdge(e){this.renderer.on("enterEdge",(({edge:t})=>{e.setEdgeAttribute(t,"color","blue")})),this.renderer.on("leaveEdge",(({edge:t})=>{e.setEdgeAttribute(t,"color",s)}))}invertEdge(e){this.renderer.on("clickEdge",(t=>{if(this.isRouteEdge(e,t.edge)){const n=[e.source(t.edge),e.target(t.edge)];this.getUpdatedGraph(n,e)}})),this.renderer.refresh()}getInitGraph(e){return t=this,n=void 0,i=function*(){o({url:"/api/ordering_graph/"}).then((e=>e.json())).then((t=>{this.unsafeImport(t,e)}))},new((r=void 0)||(r=Promise))((function(e,o){function a(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,s)}u((i=i.apply(t,n||[])).next())}));var t,n,r,i}getUpdatedGraph(e,t){(({url:e,data:t,values:n})=>o({url:e,options:{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}},values:n}))({url:"/api/ordering_graph/invert",data:this.exportGraphAsJson(t),values:e}).then((e=>e.json())).then((e=>this.unsafeImport(e,t)))}exportGraphAsJson(e){const t=new Array(e._nodes.size);let n=0;e.forEachNode(((e,r)=>{t[n++]=[e,r.r,r.t]}));const r=new Array(e._edges.size);return n=0,e.forEachEdge((t=>{r[n++]=[e.source(t),e.target(t)]})),{a:{},n:t,e:r}}unsafeImport(e,t){let n,r;if(e.a&&t.replaceAttributes(e.a),e.n)for(n=0,r=e.n.length;n<r;n++){const r=e.n[n][1],i=e.n[n][2];t.addNode(e.n[n][0],{r,t:i}),void 0===this.nodesForGivenTrainId.get(i)?this.nodesForGivenTrainId.set(i,[e.n[n][0]]):this.nodesForGivenTrainId.get(i).push(e.n[n][0])}if(e.e)for(n=0,r=e.e.length;n<r;n++)t.addDirectedEdgeWithKey(n,e.e[n][0],e.e[n][1]);return t}}})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,